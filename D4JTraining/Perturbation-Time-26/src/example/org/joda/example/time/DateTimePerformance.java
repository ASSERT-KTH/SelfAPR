[REPLACE]^String object  = null ;^42^^^^^^^[REPLACE] String object = null;^ [CLASS] DateTimePerformance Result  
[REPLACE]^String name  = null ;^43^^^^^^^[REPLACE] String name = null;^ [CLASS] DateTimePerformance Result  
[REPLACE]^long time ;^44^^^^^^^[REPLACE] long time = 0;^ [CLASS] DateTimePerformance Result  
[REPLACE]^long avg ;^45^^^^^^^[REPLACE] long avg = 0;^ [CLASS] DateTimePerformance Result  
[REPLACE]^int runs  = null ;^46^^^^^^^[REPLACE] int runs = 0;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private static int AVERAGE  = null ;^49^^^^^^^[REPLACE] private static int AVERAGE = 3;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private static int COUNT_VERY_FAST = 3;^50^^^^^^^[REPLACE] private static int COUNT_VERY_FAST = 5000000;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private static int COUNT_FAST  = null ;^51^^^^^^^[REPLACE] private static int COUNT_FAST = 200000;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private static int COUNT_SLOW ;^52^^^^^^^[REPLACE] private static int COUNT_SLOW = 20000;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private Map results =  new Date (  )  ;^54^^^^^^^[REPLACE] private Map results = new HashMap (  ) ;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private List resultList  = null ;^55^^^^^^^[REPLACE] private List resultList = new ArrayList (  ) ;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private Result result ;^57^^^^^^^[REPLACE] private Result result = null;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private long start  = null ;^58^^^^^^^[REPLACE] private long start = 0;^ [CLASS] DateTimePerformance Result  
[REPLACE]^private  short  end = 0;^59^^^^^^^[REPLACE] private long end = 0;^ [CLASS] DateTimePerformance Result  
[REPLACE]^checkDateConstructor1 (  ) ;^77^^^^^76^160^[REPLACE] checkJodaConstructor1 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor1 (  ) ;^78^^^^^76^160^[REPLACE] checkJISOConstructor1 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor1 (  ) ;^79^^^^^76^160^[REPLACE] checkGCalConstructor1 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor2 (  ) ;^80^^^^^76^160^[REPLACE] checkDateConstructor1 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^80^^^^^76^160^[ADD] checkDateConstructor1 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor2 (  ) ;^82^^^^^76^160^[REPLACE] checkJodaConstructor2 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor2 (  ) ;^83^^^^^76^160^[REPLACE] checkJISOConstructor2 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^83^^^^^76^160^[ADD] checkJISOConstructor2 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor2 (  ) ;^84^^^^^76^160^[REPLACE] checkGCalConstructor2 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor1 (  ) ;^85^^^^^76^160^[REPLACE] checkDateConstructor2 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^85^^^^^76^160^[ADD] checkDateConstructor2 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor3 (  ) ;^87^^^^^76^160^[REPLACE] checkJodaConstructor3 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor3 (  ) ;^88^^^^^76^160^[REPLACE] checkJISOConstructor3 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor3 (  ) ;^89^^^^^76^160^[REPLACE] checkGCalConstructor3 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor2 (  ) ;^90^^^^^76^160^[REPLACE] checkDateConstructor3 (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOGetYear (  ) ;^92^^^^^76^160^[REPLACE] checkJodaGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOSetGetYear (  ) ;^93^^^^^76^160^[REPLACE] checkJISOGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REMOVE]^checkDateToString (  ) ;^93^^^^^76^160^[REMOVE] ^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkGCalSetGetYear (  ) ;^94^^^^^76^160^[REPLACE] checkGCalGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateGetHour (  ) ;^95^^^^^76^160^[REPLACE] checkDateGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJodaSetGetHour (  ) ;^107^^^^^76^160^[REPLACE] checkJodaGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^107^^^^^76^160^[ADD] checkJodaGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOGetYear (  ) ;^108^^^^^76^160^[REPLACE] checkJISOGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^108^^^^^76^160^[ADD] checkJISOGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkGCalGetYear (  ) ;^109^^^^^76^160^[REPLACE] checkGCalGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateSetGetHour (  ) ;^110^^^^^76^160^[REPLACE] checkDateGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJodaSetHour (  ) ;^112^^^^^76^160^[REPLACE] checkJodaSetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REMOVE]^checkDateToString (  ) ;^112^^^^^76^160^[REMOVE] ^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOSetGetYear (  ) ;^113^^^^^76^160^[REPLACE] checkJISOSetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^checkGCalSetYear (  ) ;^113^114^^^^76^160^[ADD] checkJISOSetYear (  ) ; checkGCalSetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkGCalSetGetYear (  ) ;^114^^^^^76^160^[REPLACE] checkGCalSetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REMOVE]^checkDateToString (  ) ;^114^^^^^76^160^[REMOVE] ^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateSetHour (  ) ;^115^^^^^76^160^[REPLACE] checkDateSetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOSetGetYear (  ) ;^117^^^^^76^160^[REPLACE] checkJodaSetGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOGetYear (  ) ;^118^^^^^76^160^[REPLACE] checkJISOSetGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkGCalSetYear (  ) ;^119^^^^^76^160^[REPLACE] checkGCalSetGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateSetGetHour (  ) ;^120^^^^^76^160^[REPLACE] checkDateSetGetYear (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJodaSetGetHour (  ) ;^122^^^^^76^160^[REPLACE] checkJodaSetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJodaSetHour (  ) ;^123^^^^^76^160^[REPLACE] checkJISOSetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^123^124^^^^76^160^[ADD] checkJISOSetHour (  ) ; checkGCalSetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkGCalSetYear (  ) ;^124^^^^^76^160^[REPLACE] checkGCalSetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateSetGetHour (  ) ;^125^^^^^76^160^[REPLACE] checkDateSetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJodaSetHour (  ) ;^127^^^^^76^160^[REPLACE] checkJodaSetGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOSetGetYear (  ) ;^128^^^^^76^160^[REPLACE] checkJISOSetGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^128^129^^^^76^160^[ADD] checkJISOSetGetHour (  ) ; checkGCalSetGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkGCalSetGetYear (  ) ;^129^^^^^76^160^[REPLACE] checkGCalSetGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateSetHour (  ) ;^130^^^^^76^160^[REPLACE] checkDateSetGetHour (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJISOToString (  ) ;^132^^^^^76^160^[REPLACE] checkJodaToString (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkJodaToString (  ) ;^133^^^^^76^160^[REPLACE] checkJISOToString (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateToString (  ) ;^134^^^^^76^160^[REPLACE] checkGCalToString (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^checkDateConstructor2 (  ) ;^135^^^^^76^160^[REPLACE] checkDateToString (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^System.out.print ( "." ) ;^137^^^^^76^160^[REPLACE] System.out.println ( "" ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^137^138^^^^76^160^[ADD] System.out.println ( "" ) ; long jodaTotal = 0;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^long jodaTotal = 1;^138^^^^^76^160^[REPLACE] long jodaTotal = 0;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^long jisoTotal = 4;^139^^^^^76^160^[REPLACE] long jisoTotal = 0;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^long gcalTotal = 0 >> 3;^140^^^^^76^160^[REPLACE] long gcalTotal = 0;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^long dateTotal = 3;^141^^^^^76^160^[REPLACE] long dateTotal = 0;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( result.object.equals ( "Joda" )  )  {^145^^^^^76^160^[REPLACE] if  ( res.object.equals ( "Joda" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  if  ( result.object.equals ( "JISO" )  )  {^147^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "JISO" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  if  ( result.object.equals ( "GCal" )  )  {^149^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "GCal" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  if  ( result.object.equals ( "Date" )  )  {^151^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "Date" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^jisoTotal += res.avg; ;^152^^^^^76^160^[REPLACE] dateTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^152^^^^^76^160^[ADD] dateTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^jisoTotal += res.avg; ;^150^^^^^76^160^[REPLACE] gcalTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^} else if  ( res.object.equals ( "JISO" )  )  {^151^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "Date" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^System.out.println ( "" ) ;^152^153^^^^76^160^[ADD] dateTotal += res.avg; System.out.println ( "" ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^gcalTotal += res.avg; ;^148^^^^^76^160^[REPLACE] jisoTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  else {^149^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "GCal" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  else {^151^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "Date" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^}   System.out.println ( "" ) ;^151^152^153^154^^76^160^[ADD] else if  ( res.object.equals ( "Date" )  )  { dateTotal += res.avg; System.out.println ( "" ) ; }^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^152^153^^^^76^160^[ADD] dateTotal += res.avg; System.out.println ( "" ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^} else if  ( result.object.equals ( "Date" )  )  {^151^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "Date" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^jisoTotal += res.avg; ;^146^^^^^76^160^[REPLACE] jodaTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  else {^147^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "JISO" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^}   dateTotal += res.avg;System.out.println ( "" ) ;^151^152^153^154^^76^160^[ADD] else if  ( res.object.equals ( "Date" )  )  { dateTotal += res.avg; System.out.println ( "" ) ; }^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^150^^^^^76^160^[ADD] gcalTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^148^^^^^76^160^[ADD] jisoTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i < AVERAGE; i++ )  {^142^^^^^76^160^[REPLACE] for  ( Iterator it = resultList.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^142^143^144^145^146^76^160^[ADD] for  ( Iterator it = resultList.iterator (  ) ; it.hasNext (  ) ; )  { Result res =  ( Result )  it.next (  ) ; System.out.println ( res.object + "." + res.name + ": " + res.avg + "ns" ) ; if  ( res.object.equals ( "Joda" )  )  { jodaTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^jodaTotal += res.avg;jisoTotal += res.avg;^145^146^147^148^^76^160^[ADD] if  ( res.object.equals ( "Joda" )  )  { jodaTotal += res.avg; } else if  ( res.object.equals ( "JISO" )  )  { jisoTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  if  ( res.object.equals ( "GCal" )  )  {^149^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "GCal" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^}  if  ( res.object.equals ( "Date" )  )  {^151^^^^^76^160^[REPLACE] } else if  ( res.object.equals ( "Date" )  )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^^146^^^^^76^160^[ADD] jodaTotal += res.avg;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^}   dateTotal += res.avg;System.out.println ( "" ) ;^149^150^151^152^153^76^160^[ADD] else if  ( res.object.equals ( "GCal" )  )  { gcalTotal += res.avg; } else if  ( res.object.equals ( "Date" )  )  { dateTotal += res.avg; System.out.println ( "" ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^Result res =  ( Result )  it .hasNext (  )  ;^143^^^^^76^160^[REPLACE] Result res =  ( Result )  it.next (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "new (  ) " ) ;^142^^^^^76^160^[REPLACE] for  ( Iterator it = resultList.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^Result res =  ( Result )  it.hasNext (  ) ;^143^^^^^76^160^[REPLACE] Result res =  ( Result )  it.next (  ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^System.out .print ( object )  ;^156^^^^^76^160^[REPLACE] System.out.println ( "Joda: " + jodaTotal ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^System.out.println ( "JISO: "  <=  jisoTotal ) ;^157^^^^^76^160^[REPLACE] System.out.println ( "JISO: " + jisoTotal ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^System.out.println ( "GCal: " +name ) ;^158^^^^^76^160^[REPLACE] System.out.println ( "GCal: " + gcalTotal ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REMOVE]^System.out.println ( "Date: " + dateTotal ) ;^158^^^^^76^160^[REMOVE] ^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^System.out.println ( "Date: " +object ) ;^159^^^^^76^160^[REPLACE] System.out.println ( "Date: " + dateTotal ) ;^[METHOD] <init> [TYPE] DateTimePerformance() [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[ADD]^new DateTimePerformance (  ) ;th.printStackTrace (  ) ;^65^66^^68^69^64^71^[ADD] try { new DateTimePerformance (  ) ; } catch  ( Throwable th )  { th.printStackTrace (  ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  Throwable th  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  String[] args  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  runs  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^166^^^^^165^177^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^167^^^^^165^177^[REPLACE] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^167^^^^^165^177^[ADD] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 4;^168^^^^^165^177^[REPLACE] int count = 0;^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (runs++  <=  0 )  {System.out.println ( "Anti optimise" ) ;}^173^^^^^165^177^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out.print ( "Anti optimise" ) ;}^173^^^^^165^177^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  runs; i++ )  {^169^^^^^165^177^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  ==  0 / 3 )  {System.out.println ( "Anti optimise" ) ;}^173^^^^^165^177^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^173^174^^^^165^177^[ADD] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out .print ( object )  ;}^173^^^^^165^177^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 / 2; j  !=  COUNT; j++ )  {^171^^^^^165^177^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^171^172^173^^^165^177^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime ( GJChronology.getInstance (  )  ) ; if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  ==  0 )  {System.out.println ( "Anti optimise" ) ;}^173^^^^^165^177^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ; ;^172^^^^^165^177^[REPLACE] dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^172^^^^^165^177^[ADD] dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^171^^^^^165^177^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j  ==  COUNT; j++ )  {^171^^^^^165^177^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  <=  0 )  {System.out.println ( "Anti optimise" ) ;}^173^^^^^165^177^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i < AVERAGE; i++ )  {^169^^^^^165^177^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^180^^^^^179^191^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^181^^^^^179^191^[REPLACE] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^181^182^^^^179^191^[ADD] DateTime dt = new DateTime (  ) ; int count = 0;^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 3;^182^^^^^179^191^[REPLACE] int count = 0;^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  ==  0 )  {System.out .print ( name )  ;}^187^^^^^179^191^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^187^188^^^^179^191^[ADD] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out .print ( object )  ;}^187^^^^^179^191^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^183^^^^^179^191^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^183^184^185^186^187^179^191^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "JISO", "new (  ) " ) ; for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime (  ) ; if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  >  0 )  {System.out.println ( "Anti optimise" ) ;}^187^^^^^179^191^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out.print ( "Anti optimise" ) ;}^187^^^^^179^191^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j  >=  COUNT; j++ )  {^185^^^^^179^191^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^185^186^187^^^179^191^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime (  ) ; if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (runs++  <=  0 )  {System.out.println ( "Anti optimise" ) ;}^187^^^^^179^191^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt =  new MutableDateTime (  )  ; ;^186^^^^^179^191^[REPLACE] dt = new DateTime (  ) ;^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 12345L ) ; ;^186^^^^^179^191^[REPLACE] dt = new DateTime (  ) ;^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^185^^^^^179^191^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j  <=  COUNT; j++ )  {^185^^^^^179^191^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^187^^^^^179^191^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^186^^^^^179^191^[ADD] dt = new DateTime (  ) ;^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i < AVERAGE; i++ )  {^183^^^^^179^191^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 * 0; j < COUNT; j++ )  {^185^^^^^179^191^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^194^^^^^193^205^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^195^^^^^193^205^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^int count = 4;^196^^^^^193^205^[REPLACE] int count = 0;^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  !=  2 )  {System.out.println ( "Anti optimise" ) ;}^201^^^^^193^205^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^201^202^^^^193^205^[ADD] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out.print ( "Anti optimise" ) ;}^201^^^^^193^205^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^197^^^^^193^205^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^201^^^^^193^205^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out .print ( name )  ;}^201^^^^^193^205^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^199^^^^^193^205^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  >  0 )  {System.out.println ( "Anti optimise" ) ;}^201^^^^^193^205^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^dt = new GregorianCalendar ( 1972, 10, 1 ) ; ;^200^^^^^193^205^[REPLACE] dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^dt =  new GregorianCalendar ( 1972, 10, 1 )  ; ;^200^^^^^193^205^[REPLACE] dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^199^^^^^193^205^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  runs; j++ )  {^199^^^^^193^205^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  <=  0 )  {System.out.println ( "Anti optimise" ) ;}^201^^^^^193^205^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^200^^^^^193^205^[ADD] dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 4; i < AVERAGE; i++ )  {^197^^^^^193^205^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^208^^^^^207^219^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^208^209^^^^207^219^[ADD] int COUNT = COUNT_SLOW; Date dt = new Date (  ) ;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^209^^^^^207^219^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^209^^^^^207^219^[ADD] Date dt = new Date (  ) ;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0 << 1;^210^^^^^207^219^[REPLACE] int count = 0;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^210^^^^^207^219^[ADD] int count = 0;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  <= runs )  {System.out.println ( "Anti optimise" ) ;}^215^^^^^207^219^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^215^216^^^^207^219^[ADD] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out.print ( "Anti optimise" ) ;}^215^^^^^207^219^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 + 0; i  >  AVERAGE; i++ )  {^211^^^^^207^219^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  >  0 )  {System.out.println ( "Anti optimise" ) ;}^215^^^^^207^219^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out .print ( name )  ;}^215^^^^^207^219^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^213^^^^^207^219^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++  ==  0 )  {System.out.print ( "Anti optimise" ) ;}^215^^^^^207^219^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( count++ < 0 )  {System.out .print ( object )  ;}^215^^^^^207^219^[REPLACE] if  ( count++ < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime (  ) ; ;^214^^^^^207^219^[REPLACE] dt = new Date (  ) ;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^213^^^^^207^219^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j  ==  COUNT; j++ )  {^213^^^^^207^219^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt =  new Date ( 12345L )  ; ;^214^^^^^207^219^[REPLACE] dt = new Date (  ) ;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^214^^^^^207^219^[ADD] dt = new Date (  ) ;^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i < AVERAGE; i++ )  {^211^^^^^207^219^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 * 1; j < COUNT; j++ )  {^213^^^^^207^219^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor1 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^225^^^^^224^235^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345, GJChronology.getInstance (  )  ) ;^226^^^^^224^235^[REPLACE] DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^226^^^^^224^235^[ADD] DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^231^^^^^224^235^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^231^^^^^224^235^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^231^232^^^^224^235^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 2; i  !=  AVERAGE; i++ )  {^227^^^^^224^235^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^227^228^229^230^231^224^235^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Joda", "new ( millis ) " ) ; for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 1; j  ==  COUNT; j++ )  {^229^^^^^224^235^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.print ( "Anti optimise" ) ;}^231^^^^^224^235^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( GJChronology.getInstance (  )  ) ; ;^230^^^^^224^235^[REPLACE] dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 12345, GJChronology.getInstance (  )  ) ;^230^^^^^224^235^[REPLACE] dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^229^^^^^224^235^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^229^^^^^224^235^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this )  {System.out.print ( "Anti optimise" ) ;}^231^^^^^224^235^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^231^^^^^224^235^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 * 2; i < AVERAGE; i++ )  {^227^^^^^224^235^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 * 1; j < COUNT; j++ )  {^229^^^^^224^235^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^238^^^^^237^248^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^238^239^^^^237^248^[ADD] int COUNT = COUNT_VERY_FAST; DateTime dt = new DateTime ( 12345L ) ;^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345 ) ;^239^^^^^237^248^[REPLACE] DateTime dt = new DateTime ( 12345L ) ;^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^244^^^^^237^248^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^244^245^^^^237^248^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^244^^^^^237^248^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i  ==  AVERAGE; i++ )  {^240^^^^^237^248^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.print ( "Anti optimise" ) ;}^244^^^^^237^248^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  COUNT; j++ )  {^242^^^^^237^248^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this  )  {System.out.println ( "Anti optimise" ) ;}^244^^^^^237^248^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^244^^^^^237^248^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 12345 ) ;^243^^^^^237^248^[REPLACE] dt = new DateTime ( 12345L ) ;^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime (  ) ; ;^243^^^^^237^248^[REPLACE] dt = new DateTime ( 12345L ) ;^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^242^^^^^237^248^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^242^243^244^^^237^248^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime ( 12345L ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out .print ( name )  ;}^244^^^^^237^248^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^244^^^^^237^248^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt =  new DateTime (  )  ;^243^^^^^237^248^[REPLACE] dt = new DateTime ( 12345L ) ;^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^243^^^^^237^248^[ADD] dt = new DateTime ( 12345L ) ;^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 / 4; i < AVERAGE; i++ )  {^240^^^^^237^248^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 << 4; j < COUNT; j++ )  {^242^^^^^237^248^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^251^^^^^250^262^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^251^252^^^^250^262^[ADD] int COUNT = COUNT_SLOW; GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^252^^^^^250^262^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != false )  {System.out.print ( "Anti optimise" ) ;}^258^^^^^250^262^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^258^^^^^250^262^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^253^^^^^250^262^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^253^254^255^256^257^250^262^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "GCal", "new ( millis ) " ) ; for  ( int j = 0; j < COUNT; j++ )  { dt = new GregorianCalendar (  ) ; dt.setTime ( new Date ( 12345L )  ) ;^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^258^^^^^250^262^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^258^^^^^250^262^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  COUNT; j++ )  {^255^^^^^250^262^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^258^259^^^^250^262^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^dt = new GregorianCalendar ( 1972, 10, 1 ) ; ;^256^^^^^250^262^[REPLACE] dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^256^^^^^250^262^[ADD] dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 >>> 3; j < COUNT; j++ )  {^255^^^^^250^262^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  runs; j++ )  {^255^^^^^250^262^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^258^^^^^250^262^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 / 4; i < AVERAGE; i++ )  {^253^^^^^250^262^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^255^^^^^250^262^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^265^^^^^264^275^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^266^^^^^264^275^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^271^^^^^264^275^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^271^^^^^264^275^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^271^272^^^^264^275^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >  AVERAGE; i++ )  {^267^^^^^264^275^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^267^268^269^270^271^264^275^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "new ( millis ) " ) ; for  ( int j = 0; j < COUNT; j++ )  { dt = new Date ( 12345L ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.print ( "Anti optimise" ) ;}^271^^^^^264^275^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^271^^^^^264^275^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  runs; j++ )  {^269^^^^^264^275^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this )  {System.out .print ( name )  ;}^271^^^^^264^275^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^271^^^^^264^275^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt =  new Date ( 1972, 10, 1 )  ;^270^^^^^264^275^[REPLACE] dt = new Date ( 12345L ) ;^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt = new Date ( 12345 ) ;^270^^^^^264^275^[REPLACE] dt = new Date ( 12345L ) ;^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 / 4; j < COUNT; j++ )  {^269^^^^^264^275^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^269^^^^^264^275^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 12345L ) ; ;^270^^^^^264^275^[REPLACE] dt = new Date ( 12345L ) ;^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^267^^^^^264^275^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 2; j < COUNT; j++ )  {^269^^^^^264^275^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^269^270^271^^^264^275^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = new Date ( 12345L ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor2 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^281^^^^^280^293^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 1972L, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^282^283^^^^280^293^[REPLACE] DateTime dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^289^^^^^280^293^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^289^290^^^^280^293^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^289^^^^^280^293^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  <=  AVERAGE; i++ )  {^284^^^^^280^293^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^289^^^^^280^293^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^286^^^^^280^293^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^286^287^288^289^^280^293^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.print ( "Anti optimise" ) ;}^289^^^^^280^293^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 1972 + 4, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^287^288^^^^280^293^[REPLACE] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 1972 * 4, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^287^288^^^^280^293^[REPLACE] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^286^^^^^280^293^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^286^^^^^280^293^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 1972 % 1, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^287^288^^^^280^293^[REPLACE] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 2, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^287^288^^^^280^293^[REPLACE] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0, GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 2; i < AVERAGE; i++ )  {^284^^^^^280^293^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^296^^^^^295^306^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^296^^^^^295^306^[ADD] int COUNT = COUNT_SLOW;^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 1972 / 4, 10, 1, 0, 0, 0, 0 ) ;^297^^^^^295^306^[REPLACE] DateTime dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0 ) ;^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^302^^^^^295^306^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^302^^^^^295^306^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^298^^^^^295^306^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.print ( "Anti optimise" ) ;}^302^^^^^295^306^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^300^^^^^295^306^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^300^301^302^^^295^306^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^302^303^^^^295^306^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^302^^^^^295^306^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 54, 10, 1, 0, 0, 0, 0 ) ;^301^^^^^295^306^[REPLACE] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0 ) ;^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^301^^^^^295^306^[ADD] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0 ) ;^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 1972 << 4, 10, 1, 0, 0, 0, 0 ) ;^301^^^^^295^306^[REPLACE] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0 ) ;^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 + 4; j < COUNT; j++ )  {^300^^^^^295^306^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j  <=  COUNT; j++ )  {^300^^^^^295^306^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^302^^^^^295^306^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = new DateTime ( 0, 10, 1, 0, 0, 0, 0 ) ;^301^^^^^295^306^[REPLACE] dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0 ) ;^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 * 1; i < AVERAGE; i++ )  {^298^^^^^295^306^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^298^299^300^301^302^295^306^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "JISO", "new ( YMD ) " ) ; for  ( int j = 0; j < COUNT; j++ )  { dt = new DateTime ( 1972, 10, 1, 0, 0, 0, 0 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^300^^^^^295^306^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^309^^^^^308^319^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^GregorianCalendar dt = new GregorianCalendar ( 743, 10, 1 ) ;^310^^^^^308^319^[REPLACE] GregorianCalendar dt = new GregorianCalendar ( 1972, 10, 1 ) ;^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this  )  {System.out .print ( object )  ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >=  AVERAGE; i++ )  {^311^^^^^308^319^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^311^312^313^314^315^308^319^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "GCal", "new ( YMD ) " ) ; for  ( int j = 0; j < COUNT; j++ )  { dt = new GregorianCalendar ( 1972, 10, 1 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.print ( "Anti optimise" ) ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^313^^^^^308^319^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^313^314^315^^^308^319^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = new GregorianCalendar ( 1972, 10, 1 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this  )  {System.out.println ( "Anti optimise" ) ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^dt =  new Date ( 1972, 10, 1 )  ;^314^^^^^308^319^[REPLACE] dt = new GregorianCalendar ( 1972, 10, 1 ) ;^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^dt = new GregorianCalendar ( 1, 10, 1 ) ;^314^^^^^308^319^[REPLACE] dt = new GregorianCalendar ( 1972, 10, 1 ) ;^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[ADD]^^314^^^^^308^319^[ADD] dt = new GregorianCalendar ( 1972, 10, 1 ) ;^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^313^^^^^308^319^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^313^^^^^308^319^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^315^^^^^308^319^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^dt = new GregorianCalendar ( 3, 10, 1 ) ;^314^^^^^308^319^[REPLACE] dt = new GregorianCalendar ( 1972, 10, 1 ) ;^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^dt = new GregorianCalendar (  ) ; ;^314^^^^^308^319^[REPLACE] dt = new GregorianCalendar ( 1972, 10, 1 ) ;^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 >> 4; i < AVERAGE; i++ )  {^311^^^^^308^319^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^313^^^^^308^319^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^322^^^^^321^332^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^323^^^^^321^332^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^328^^^^^321^332^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^328^^^^^321^332^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i  >  AVERAGE; i++ )  {^324^^^^^321^332^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 >>> 4; j  >  COUNT; j++ )  {^326^^^^^321^332^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != true )  {System.out.println ( "Anti optimise" ) ;}^328^^^^^321^332^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^328^329^^^^321^332^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt =  new Date ( 12345L )  ;^327^^^^^321^332^[REPLACE] dt = new Date ( 1972, 10, 1 ) ;^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt = new Date ( 1972 + 1, 10, 1 ) ;^327^^^^^321^332^[REPLACE] dt = new Date ( 1972, 10, 1 ) ;^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^327^^^^^321^332^[ADD] dt = new Date ( 1972, 10, 1 ) ;^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^326^^^^^321^332^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^326^^^^^321^332^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out .print ( object )  ;}^328^^^^^321^332^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^328^^^^^321^332^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt = new Date ( 3, 10, 1 ) ;^327^^^^^321^332^[REPLACE] dt = new Date ( 1972, 10, 1 ) ;^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^dt = new Date ( 2, 10, 1 ) ;^327^^^^^321^332^[REPLACE] dt = new Date ( 1972, 10, 1 ) ;^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 4; i < AVERAGE; i++ )  {^324^^^^^321^332^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 * 4; j < COUNT; j++ )  {^326^^^^^321^332^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateConstructor3 [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^338^^^^^337^348^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^338^339^^^^337^348^[ADD] int COUNT = COUNT_VERY_FAST; DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^339^^^^^337^348^[REPLACE] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  &&  0 * 4 )  {System.out.println ( "Anti optimise" ) ;}^344^^^^^337^348^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^344^^^^^337^348^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  <=  AVERAGE; i++ )  {^340^^^^^337^348^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  ||  0 )  {System.out.print ( "Anti optimise" ) ;}^344^^^^^337^348^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^344^345^^^^337^348^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( name )  ;}^344^^^^^337^348^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  COUNT; j++ )  {^342^^^^^337^348^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^344^^^^^337^348^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^344^^^^^337^348^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.year (  ) ;^343^^^^^337^348^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^343^^^^^337^348^[ADD] int val = dt.getYear (  ) ;^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 + 1; j < COUNT; j++ )  {^342^^^^^337^348^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .year (  )  ;^343^^^^^337^348^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^342^^^^^337^348^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^344^^^^^337^348^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 % 2; i < AVERAGE; i++ )  {^340^^^^^337^348^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 0; j < COUNT; j++ )  {^342^^^^^337^348^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^351^^^^^350^361^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^352^^^^^350^361^[REPLACE] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^352^^^^^350^361^[ADD] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  &&  0 )  {System.out.println ( "Anti optimise" ) ;}^357^^^^^350^361^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^357^^^^^350^361^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 1; i  >=  AVERAGE; i++ )  {^353^^^^^350^361^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  ||  2 )  {System.out.print ( "Anti optimise" ) ;}^357^^^^^350^361^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^357^358^^^^350^361^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^357^^^^^350^361^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j  !=  COUNT; j++ )  {^355^^^^^350^361^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^355^356^357^^^350^361^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getYear (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  0 - 0 )  {System.out.print ( "Anti optimise" ) ;}^357^^^^^350^361^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .year (  )  ;^356^^^^^350^361^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^355^^^^^350^361^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j  <=  COUNT; j++ )  {^355^^^^^350^361^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  ||  0 )  {System.out.print ( "Anti optimise" ) ;}^357^^^^^350^361^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.year (  ) ;^356^^^^^350^361^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^356^^^^^350^361^[ADD] int val = dt.getYear (  ) ;^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 4; i < AVERAGE; i++ )  {^353^^^^^350^361^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^353^354^355^356^357^350^361^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "JISO", "getYear" ) ; for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getYear (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^355^^^^^350^361^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^364^^^^^363^374^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^365^^^^^363^374^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^365^^^^^363^374^[ADD] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  && COUNT_VERY_FAST )  {System.out.println ( "Anti optimise" ) ;}^370^^^^^363^374^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^370^^^^^363^374^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >  AVERAGE; i++ )  {^366^^^^^363^374^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^370^^^^^363^374^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^370^371^^^^363^374^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^370^^^^^363^374^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j  <=  COUNT; j++ )  {^368^^^^^363^374^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^368^369^370^^^363^374^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  0 )  {System.out.println ( "Anti optimise" ) ;}^370^^^^^363^374^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.setTime ( GregorianCalendar.YEAR ) ;^369^^^^^363^374^[REPLACE] int val = dt.get ( GregorianCalendar.YEAR ) ;^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^368^^^^^363^374^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^368^^^^^363^374^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  || COUNT_VERY_FAST )  {System.out.println ( "Anti optimise" ) ;}^370^^^^^363^374^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^366^^^^^363^374^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^368^^^^^363^374^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^369^^^^^363^374^[ADD] int val = dt.get ( GregorianCalendar.YEAR ) ;^[METHOD] checkGCalGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^377^^^^^376^387^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^378^^^^^376^387^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  ||  0 )  {System.out.println ( "Anti optimise" ) ;}^383^^^^^376^387^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^383^384^^^^376^387^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^383^^^^^376^387^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 >> 2; i  !=  AVERAGE; i++ )  {^379^^^^^376^387^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^383^^^^^376^387^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 << 3; j  <=  runs; j++ )  {^381^^^^^376^387^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  &&  1 )  {System.out.println ( "Anti optimise" ) ;}^383^^^^^376^387^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getHours (  ) ;^382^^^^^376^387^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^381^^^^^376^387^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .year (  )  ;^382^^^^^376^387^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^381^^^^^376^387^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  ||  0 )  {System.out.println ( "Anti optimise" ) ;}^383^^^^^376^387^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( name )  ;}^383^^^^^376^387^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^382^^^^^376^387^[ADD] int val = dt.getYear (  ) ;^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 << 3; i < AVERAGE; i++ )  {^379^^^^^376^387^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^381^^^^^376^387^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^393^^^^^392^403^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^394^^^^^392^403^[REPLACE] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  && COUNT_VERY_FAST )  {System.out.print ( "Anti optimise" ) ;}^399^^^^^392^403^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^399^^^^^392^403^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >  AVERAGE; i++ )  {^395^^^^^392^403^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  &&  0 + 0 )  {System.out.println ( "Anti optimise" ) ;}^399^^^^^392^403^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j  >=  runs; j++ )  {^397^^^^^392^403^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  || COUNT_VERY_FAST )  {System.out.println ( "Anti optimise" ) ;}^399^^^^^392^403^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^399^^^^^392^403^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .getYear (  )  ;^398^^^^^392^403^[REPLACE] int val = dt.getMonthOfYear (  ) ;^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^397^^^^^392^403^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getYear (  ) ;^398^^^^^392^403^[REPLACE] int val = dt.getMonthOfYear (  ) ;^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^398^^^^^392^403^[ADD] int val = dt.getMonthOfYear (  ) ;^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j  >  COUNT; j++ )  {^397^^^^^392^403^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^397^398^399^^^392^403^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getMonthOfYear (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  0 )  {System.out.print ( "Anti optimise" ) ;}^399^^^^^392^403^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^399^400^^^^392^403^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0L; i < AVERAGE; i++ )  {^395^^^^^392^403^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^395^396^397^398^399^392^403^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Joda", "getMonth" ) ; for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getMonthOfYear (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^397^^^^^392^403^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^406^^^^^405^416^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^406^^^^^405^416^[ADD] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^407^^^^^405^416^[REPLACE] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  3 )  {System.out .print ( object )  ;}^412^^^^^405^416^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^412^413^^^^405^416^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^412^^^^^405^416^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >  AVERAGE; i++ )  {^408^^^^^405^416^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  ||  0 )  {System.out.println ( "Anti optimise" ) ;}^412^^^^^405^416^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^412^^^^^405^416^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^410^^^^^405^416^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  2 )  {System.out .print ( object )  ;}^412^^^^^405^416^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getYear (  ) ;^411^^^^^405^416^[REPLACE] int val = dt.getMonthOfYear (  ) ;^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^410^^^^^405^416^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .getYear (  )  ;^411^^^^^405^416^[REPLACE] int val = dt.getMonthOfYear (  ) ;^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  && COUNT_VERY_FAST )  {System.out.println ( "Anti optimise" ) ;}^412^^^^^405^416^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^411^^^^^405^416^[ADD] int val = dt.getMonthOfYear (  ) ;^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^408^^^^^405^416^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^408^409^410^411^412^405^416^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "JISO", "getMonth" ) ; for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getMonthOfYear (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^410^^^^^405^416^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^419^^^^^418^429^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^420^^^^^418^429^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  0 )  {System.out.print ( "Anti optimise" ) ;}^425^^^^^418^429^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^425^^^^^418^429^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  ==  AVERAGE; i++ )  {^421^^^^^418^429^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^425^^^^^418^429^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^423^^^^^418^429^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^425^^^^^418^429^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^425^426^^^^418^429^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.setTime ( GregorianCalendar.MONTH ) ;^424^^^^^418^429^[REPLACE] int val = dt.get ( GregorianCalendar.MONTH ) ;^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^424^^^^^418^429^[ADD] int val = dt.get ( GregorianCalendar.MONTH ) ;^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 >>> 4; j < COUNT; j++ )  {^423^^^^^418^429^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^423^^^^^418^429^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  &&  0 )  {System.out.println ( "Anti optimise" ) ;}^425^^^^^418^429^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^421^^^^^418^429^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 * 4; j < COUNT; j++ )  {^423^^^^^418^429^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^432^^^^^431^442^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^432^433^^^^431^442^[ADD] int COUNT = COUNT_FAST; Date dt = new Date (  ) ;^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^433^^^^^431^442^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^433^^^^^431^442^[ADD] Date dt = new Date (  ) ;^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  !=  4 )  {System.out.println ( "Anti optimise" ) ;}^438^^^^^431^442^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^438^^^^^431^442^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 + 2; i  <=  AVERAGE; i++ )  {^434^^^^^431^442^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  ||  0 )  {System.out.println ( "Anti optimise" ) ;}^438^^^^^431^442^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^438^439^^^^431^442^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^436^^^^^431^442^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^438^^^^^431^442^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( name )  ;}^438^^^^^431^442^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getDate (  ) ;^437^^^^^431^442^[REPLACE] int val = dt.getMonth (  ) ;^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^436^^^^^431^442^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^437^^^^^431^442^[ADD] int val = dt.getMonth (  ) ;^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j  >  COUNT; j++ )  {^436^^^^^431^442^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^436^437^438^^^431^442^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getMonth (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  &&  0 )  {System.out.print ( "Anti optimise" ) ;}^438^^^^^431^442^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^438^^^^^431^442^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 + 0; i < AVERAGE; i++ )  {^434^^^^^431^442^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^434^435^436^437^438^431^442^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "getMonth" ) ; for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getMonth (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .getDate (  )  ;^437^^^^^431^442^[REPLACE] int val = dt.getMonth (  ) ;^[METHOD] checkDateGetMonth [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^448^^^^^447^458^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^448^449^^^^447^458^[ADD] int COUNT = COUNT_VERY_FAST; DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^449^^^^^447^458^[REPLACE] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^449^^^^^447^458^[ADD] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  3 )  {System.out.println ( "Anti optimise" ) ;}^454^^^^^447^458^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( name )  ;}^454^^^^^447^458^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^454^455^^^^447^458^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^450^^^^^447^458^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  ||  0 )  {System.out.println ( "Anti optimise" ) ;}^454^^^^^447^458^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^454^^^^^447^458^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j  ==  COUNT; j++ )  {^452^^^^^447^458^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  &&  2 )  {System.out.println ( "Anti optimise" ) ;}^454^^^^^447^458^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .getYear (  )  ;^453^^^^^447^458^[REPLACE] int val = dt.getDayOfMonth (  ) ;^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^452^^^^^447^458^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^453^^^^^447^458^[ADD] int val = dt.getDayOfMonth (  ) ;^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^452^^^^^447^458^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getYear (  ) ;^453^^^^^447^458^[REPLACE] int val = dt.getDayOfMonth (  ) ;^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 2; i < AVERAGE; i++ )  {^450^^^^^447^458^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^452^^^^^447^458^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^452^453^454^^^447^458^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getDayOfMonth (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^461^^^^^460^471^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^462^^^^^460^471^[REPLACE] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^462^^^^^460^471^[ADD] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  ||  0 - 0 )  {System.out.println ( "Anti optimise" ) ;}^467^^^^^460^471^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^467^^^^^460^471^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  <=  AVERAGE; i++ )  {^463^^^^^460^471^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  &&  0 )  {System.out.print ( "Anti optimise" ) ;}^467^^^^^460^471^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^467^468^^^^460^471^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( name )  ;}^467^^^^^460^471^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^465^^^^^460^471^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^467^^^^^460^471^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getYear (  ) ;^466^^^^^460^471^[REPLACE] int val = dt.getDayOfMonth (  ) ;^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^465^^^^^460^471^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^465^466^467^^^460^471^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getDayOfMonth (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .getYear (  )  ;^466^^^^^460^471^[REPLACE] int val = dt.getDayOfMonth (  ) ;^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j  !=  COUNT; j++ )  {^465^^^^^460^471^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  0 )  {System.out.println ( "Anti optimise" ) ;}^467^^^^^460^471^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( object )  ;}^467^^^^^460^471^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 0; i < AVERAGE; i++ )  {^463^^^^^460^471^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^463^464^465^466^467^460^471^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "JISO", "getDay" ) ; for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getDayOfMonth (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^465^^^^^460^471^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^474^^^^^473^484^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^475^^^^^473^484^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  != COUNT_VERY_FAST )  {System.out.print ( "Anti optimise" ) ;}^480^^^^^473^484^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^480^^^^^473^484^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  ==  AVERAGE; i++ )  {^476^^^^^473^484^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  0 )  {System.out.print ( "Anti optimise" ) ;}^480^^^^^473^484^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out .print ( name )  ;}^480^^^^^473^484^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^478^^^^^473^484^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  0 )  {System.out.println ( "Anti optimise" ) ;}^480^^^^^473^484^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.setTime ( GregorianCalendar.DAY_OF_MONTH ) ;^479^^^^^473^484^[REPLACE] int val = dt.get ( GregorianCalendar.DAY_OF_MONTH ) ;^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^478^^^^^473^484^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^478^479^480^^^473^484^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.DAY_OF_MONTH ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.get ( GregorianCalendar.MONTH ) ;^479^^^^^473^484^[REPLACE] int val = dt.get ( GregorianCalendar.DAY_OF_MONTH ) ;^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^478^^^^^473^484^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 + 0 )  {System.out.print ( "Anti optimise" ) ;}^480^^^^^473^484^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 / 1; i < AVERAGE; i++ )  {^476^^^^^473^484^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 >> 4; j < COUNT; j++ )  {^478^^^^^473^484^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^487^^^^^486^497^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^488^^^^^486^497^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 - 3 )  {System.out.println ( "Anti optimise" ) ;}^493^^^^^486^497^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^493^494^^^^486^497^[ADD] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == 0 )  {System.out.print ( "Anti optimise" ) ;}^493^^^^^486^497^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^489^^^^^486^497^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^489^490^491^492^493^486^497^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "getDay" ) ; for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getDate (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^493^^^^^486^497^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^491^^^^^486^497^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^491^492^493^^^486^497^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getDate (  ) ; if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  &&  0 )  {System.out.println ( "Anti optimise" ) ;}^493^^^^^486^497^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .Date (  )  ;^492^^^^^486^497^[REPLACE] int val = dt.getDate (  ) ;^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^491^^^^^486^497^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^491^^^^^486^497^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  0 )  {System.out.println ( "Anti optimise" ) ;}^493^^^^^486^497^[REPLACE] if  ( val == 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.Date (  ) ;^492^^^^^486^497^[REPLACE] int val = dt.getDate (  ) ;^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 4; i < AVERAGE; i++ )  {^489^^^^^486^497^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^491^^^^^486^497^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetDay [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^503^^^^^502^513^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^504^^^^^502^513^[REPLACE] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  !=  -2 )  {System.out.println ( "Anti optimise" ) ;}^509^^^^^502^513^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^509^510^^^^502^513^[ADD] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == -1 )  {System.out.print ( "Anti optimise" ) ;}^509^^^^^502^513^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0L; i  !=  AVERAGE; i++ )  {^505^^^^^502^513^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  -1 )  {System.out.println ( "Anti optimise" ) ;}^509^^^^^502^513^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j  >  COUNT; j++ )  {^507^^^^^502^513^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  -0 )  {System.out.println ( "Anti optimise" ) ;}^509^^^^^502^513^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getMonthOfYear (  ) ;^508^^^^^502^513^[REPLACE] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^507^^^^^502^513^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^508^^^^^502^513^[ADD] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^507^^^^^502^513^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^505^^^^^502^513^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^507^^^^^502^513^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^507^508^509^^^502^513^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getHourOfDay (  ) ; if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^516^^^^^515^526^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^517^^^^^515^526^[REPLACE] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  ||  -1 )  {System.out.println ( "Anti optimise" ) ;}^522^^^^^515^526^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == -1 )  {System.out .print ( name )  ;}^522^^^^^515^526^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i  >=  AVERAGE; i++ )  {^518^^^^^515^526^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  -1 / 1 )  {System.out.println ( "Anti optimise" ) ;}^522^^^^^515^526^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^522^523^^^^515^526^[ADD] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^520^^^^^515^526^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^520^521^522^^^515^526^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getHourOfDay (  ) ; if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  ||  -1 )  {System.out.println ( "Anti optimise" ) ;}^522^^^^^515^526^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == -1 )  {System.out .print ( object )  ;}^522^^^^^515^526^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .getMonthOfYear (  )  ;^521^^^^^515^526^[REPLACE] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 4; j < COUNT; j++ )  {^520^^^^^515^526^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getMonthOfYear (  ) ;^521^^^^^515^526^[REPLACE] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^521^^^^^515^526^[ADD] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^520^^^^^515^526^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  -1 )  {System.out.println ( "Anti optimise" ) ;}^522^^^^^515^526^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 2; i < AVERAGE; i++ )  {^518^^^^^515^526^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^520^^^^^515^526^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^529^^^^^528^539^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^530^^^^^528^539^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  &&  -1 )  {System.out .print ( object )  ;}^535^^^^^528^539^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val == -1 )  {System.out.print ( "Anti optimise" ) ;}^535^^^^^528^539^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i  !=  AVERAGE; i++ )  {^531^^^^^528^539^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^531^532^533^534^535^528^539^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "GCal", "getHour" ) ; for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ; if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  -1 )  {System.out.println ( "Anti optimise" ) ;}^535^^^^^528^539^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^535^536^^^^528^539^[ADD] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 / 1; j  >=  COUNT; j++ )  {^533^^^^^528^539^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  &&  -1 )  {System.out.println ( "Anti optimise" ) ;}^535^^^^^528^539^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.setTime ( GregorianCalendar.HOUR_OF_DAY ) ;^534^^^^^528^539^[REPLACE] int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ;^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^534^^^^^528^539^[ADD] int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ;^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 3; j < COUNT; j++ )  {^533^^^^^528^539^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^533^^^^^528^539^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  !=  -1 )  {System.out.println ( "Anti optimise" ) ;}^535^^^^^528^539^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^531^^^^^528^539^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^533^^^^^528^539^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^542^^^^^541^552^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^543^^^^^541^552^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^543^^^^^541^552^[ADD] Date dt = new Date (  ) ;^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  != COUNT_VERY_FAST )  {System.out.println ( "Anti optimise" ) ;}^548^^^^^541^552^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == -1 )  {System.out .print ( name )  ;}^548^^^^^541^552^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  <=  AVERAGE; i++ )  {^544^^^^^541^552^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  -1 )  {System.out.println ( "Anti optimise" ) ;}^548^^^^^541^552^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val == -1 )  {System.out.print ( "Anti optimise" ) ;}^548^^^^^541^552^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j  !=  COUNT; j++ )  {^546^^^^^541^552^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^546^547^548^^^541^552^[ADD] for  ( int j = 0; j < COUNT; j++ )  { int val = dt.getHours (  ) ; if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  ||  -1L )  {System.out.println ( "Anti optimise" ) ;}^548^^^^^541^552^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getYear (  ) ;^547^^^^^541^552^[REPLACE] int val = dt.getHours (  ) ;^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 >>> 2; j < COUNT; j++ )  {^546^^^^^541^552^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 / 1; j  !=  COUNT; j++ )  {^546^^^^^541^552^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  &&  -1 )  {System.out.println ( "Anti optimise" ) ;}^548^^^^^541^552^[REPLACE] if  ( val == -1 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^547^^^^^541^552^[ADD] int val = dt.getHours (  ) ;^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0L; i < AVERAGE; i++ )  {^544^^^^^541^552^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 << 0; j < COUNT; j++ )  {^546^^^^^541^552^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^558^^^^^557^569^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^560^^^^^557^569^[REPLACE] MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^560^^^^^557^569^[ADD] MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this  )  {System.out.println ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  <=  AVERAGE; i++ )  {^561^^^^^557^569^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^565^566^^^^557^569^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^563^^^^^557^569^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this )  {System.out.println ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.print ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^563^^^^^557^569^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^563^564^565^^^557^569^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setYear ( 1972 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^563^^^^^557^569^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != true )  {System.out.print ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^565^^^^^557^569^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 2; i < AVERAGE; i++ )  {^561^^^^^557^569^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^572^^^^^571^583^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^574^^^^^571^583^[REPLACE] MutableDateTime dt = new MutableDateTime (  ) ;^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^579^^^^^571^583^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^579^580^^^^571^583^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^579^^^^^571^583^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 2; i  >  AVERAGE; i++ )  {^575^^^^^571^583^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != true )  {System.out.print ( "Anti optimise" ) ;}^579^^^^^571^583^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^579^^^^^571^583^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^577^^^^^571^583^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^579^^^^^571^583^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0L; j < COUNT; j++ )  {^577^^^^^571^583^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  runs; j++ )  {^577^^^^^571^583^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.print ( "Anti optimise" ) ;}^579^^^^^571^583^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 << 2; i < AVERAGE; i++ )  {^575^^^^^571^583^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 / 4; j < COUNT; j++ )  {^577^^^^^571^583^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^586^^^^^585^596^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^586^587^^^^585^596^[ADD] int COUNT = COUNT_VERY_FAST; GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^587^^^^^585^596^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this  )  {System.out.println ( "Anti optimise" ) ;}^592^^^^^585^596^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^592^^^^^585^596^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  ==  AVERAGE; i++ )  {^588^^^^^585^596^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^592^^^^^585^596^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^592^^^^^585^596^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^590^^^^^585^596^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^592^^^^^585^596^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 + 4; j < COUNT; j++ )  {^590^^^^^585^596^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^590^^^^^585^596^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out .print ( object )  ;}^592^^^^^585^596^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out .print ( name )  ;}^592^^^^^585^596^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 >> 3; i < AVERAGE; i++ )  {^588^^^^^585^596^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^590^^^^^585^596^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^599^^^^^598^609^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^600^^^^^598^609^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out .print ( object )  ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.print ( "Anti optimise" ) ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0L; i  !=  AVERAGE; i++ )  {^601^^^^^598^609^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^601^602^603^604^605^598^609^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "setYear" ) ; for  ( int j = 0; j < COUNT; j++ )  { dt.setYear ( 1972 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != false )  {System.out .print ( object )  ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  runs; j++ )  {^603^^^^^598^609^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.print ( "Anti optimise" ) ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^605^606^^^^598^609^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^603^^^^^598^609^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^603^604^605^^^598^609^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setYear ( 1972 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 << 1; j  >=  COUNT; j++ )  {^603^^^^^598^609^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^605^^^^^598^609^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^601^^^^^598^609^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 >> 2; j < COUNT; j++ )  {^603^^^^^598^609^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^615^^^^^614^637^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^627^^^^^614^637^[REPLACE] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  >  0 )  {System.out.println ( "Anti optimise" ) ;}^633^^^^^614^637^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val < 0 )  {System.out.print ( "Anti optimise" ) ;}^633^^^^^614^637^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >=  AVERAGE; i++ )  {^628^^^^^614^637^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  <=  0 )  {System.out.println ( "Anti optimise" ) ;}^633^^^^^614^637^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val < 0 )  {System.out .print ( name )  ;}^633^^^^^614^637^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j  >=  runs; j++ )  {^630^^^^^614^637^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^633^^^^^614^637^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 543 ) ;^631^^^^^614^637^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^631^^^^^614^637^[ADD] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .year (  )  ;^632^^^^^614^637^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 166 ) ;^631^^^^^614^637^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^630^^^^^614^637^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^630^631^632^633^^614^637^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = dt.year (  ) .setCopy ( 1972 ) ; int val = dt.getYear (  ) ; if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.year (  ) ;^632^^^^^614^637^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j  !=  COUNT; j++ )  {^630^^^^^614^637^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 )  {System.out .print ( name )  ;}^633^^^^^614^637^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 572 ) ;^631^^^^^614^637^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^632^^^^^614^637^[ADD] int val = dt.getYear (  ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 1473 ) ;^631^^^^^614^637^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^int val = dt.getYear (  ) ;^631^632^^^^614^637^[ADD] dt = dt.year (  ) .setCopy ( 1972 ) ; int val = dt.getYear (  ) ;^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 4; i < AVERAGE; i++ )  {^628^^^^^614^637^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^630^^^^^614^637^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^640^^^^^639^662^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^652^^^^^639^662^[REPLACE] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  !=  0 << 1 )  {System.out.println ( "Anti optimise" ) ;}^658^^^^^639^662^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val < 0 )  {System.out.print ( "Anti optimise" ) ;}^658^^^^^639^662^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  ==  val; i++ )  {^653^^^^^639^662^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 << 4 )  {System.out.print ( "Anti optimise" ) ;}^658^^^^^639^662^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^658^659^^^^639^662^[ADD] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j  <=  COUNT; j++ )  {^655^^^^^639^662^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^655^656^657^658^^639^662^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt = dt.year (  ) .setCopy ( 1972 ) ; int val = dt.getYear (  ) ; if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  0 )  {System.out.println ( "Anti optimise" ) ;}^658^^^^^639^662^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 1972 >> 2 ) ;^656^^^^^639^662^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.year (  ) ;^657^^^^^639^662^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^657^^^^^639^662^[ADD] int val = dt.getYear (  ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 2 ) ;^656^^^^^639^662^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^655^^^^^639^662^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  COUNT; j++ )  {^655^^^^^639^662^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  !=  3 )  {System.out.println ( "Anti optimise" ) ;}^658^^^^^639^662^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 1 ) ;^656^^^^^639^662^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^656^^^^^639^662^[ADD] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^dt = dt.year (  ) .setCopy ( 4 ) ;^656^^^^^639^662^[REPLACE] dt = dt.year (  ) .setCopy ( 1972 ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^656^657^^^^639^662^[ADD] dt = dt.year (  ) .setCopy ( 1972 ) ; int val = dt.getYear (  ) ;^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0L; i < AVERAGE; i++ )  {^653^^^^^639^662^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^655^^^^^639^662^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^665^^^^^664^676^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^666^^^^^664^676^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^666^^^^^664^676^[ADD] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  !=  4 )  {System.out.print ( "Anti optimise" ) ;}^672^^^^^664^676^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val < 0 )  {System.out.print ( "Anti optimise" ) ;}^672^^^^^664^676^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i  >=  AVERAGE; i++ )  {^667^^^^^664^676^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  <=  0 )  {System.out.println ( "Anti optimise" ) ;}^672^^^^^664^676^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^672^673^^^^664^676^[ADD] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^669^^^^^664^676^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  <=  0 )  {System.out.println ( "Anti optimise" ) ;}^672^^^^^664^676^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val < 0 )  {System.out .print ( name )  ;}^672^^^^^664^676^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.setTime ( GregorianCalendar.YEAR ) ;^671^^^^^664^676^[REPLACE] int val = dt.get ( GregorianCalendar.YEAR ) ;^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^671^^^^^664^676^[ADD] int val = dt.get ( GregorianCalendar.YEAR ) ;^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 / 3; j < COUNT; j++ )  {^669^^^^^664^676^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^669^^^^^664^676^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( val  >= COUNT_VERY_FAST )  {System.out.println ( "Anti optimise" ) ;}^672^^^^^664^676^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt .set ( i , AVERAGE )  ;^671^^^^^664^676^[REPLACE] int val = dt.get ( GregorianCalendar.YEAR ) ;^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 2; i < AVERAGE; i++ )  {^667^^^^^664^676^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 * 0; j < COUNT; j++ )  {^669^^^^^664^676^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^679^^^^^678^690^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^680^^^^^678^690^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^680^^^^^678^690^[ADD] Date dt = new Date (  ) ;^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  >= COUNT_VERY_FAST )  {System.out .print ( object )  ;}^686^^^^^678^690^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val < 0 )  {System.out.print ( "Anti optimise" ) ;}^686^^^^^678^690^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i  >  AVERAGE; i++ )  {^681^^^^^678^690^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^681^682^683^684^685^678^690^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "setGetYear" ) ; for  ( int j = 0; j < COUNT; j++ )  { dt.setYear ( 1972 ) ; int val = dt.getYear (  ) ;^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val  <= COUNT_VERY_FAST )  {System.out .print ( object )  ;}^686^^^^^678^690^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( val < 0 )  {System.out .print ( name )  ;}^686^^^^^678^690^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^683^^^^^678^690^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^683^684^685^686^^678^690^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setYear ( 1972 ) ; int val = dt.getYear (  ) ; if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( COUNT_VERY_FAST  >  0 )  {System.out.println ( "Anti optimise" ) ;}^686^^^^^678^690^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^686^687^^^^678^690^[ADD] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getHours (  ) ;^685^^^^^678^690^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^683^^^^^678^690^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^685^^^^^678^690^[ADD] int val = dt.getYear (  ) ;^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  (COUNT_VERY_FAST  ==  0 )  {System.out.println ( "Anti optimise" ) ;}^686^^^^^678^690^[REPLACE] if  ( val < 0 )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 3; i < AVERAGE; i++ )  {^681^^^^^678^690^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt .year (  )  ;^685^^^^^678^690^[REPLACE] int val = dt.getYear (  ) ;^[METHOD] checkDateSetGetYear [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^696^^^^^695^707^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^698^^^^^695^707^[REPLACE] MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^698^^^^^695^707^[ADD] MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^703^^^^^695^707^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^703^^^^^695^707^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  <=  AVERAGE; i++ )  {^699^^^^^695^707^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^699^700^701^702^703^695^707^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Joda", "setHour" ) ; for  ( int j = 0; j < COUNT; j++ )  { dt.setHourOfDay ( 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this )  {System.out.println ( "Anti optimise" ) ;}^703^^^^^695^707^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^703^704^^^^695^707^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^703^^^^^695^707^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j  >  COUNT; j++ )  {^701^^^^^695^707^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^701^702^703^^^695^707^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setHourOfDay ( 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out .print ( name )  ;}^703^^^^^695^707^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 + 4; j < COUNT; j++ )  {^701^^^^^695^707^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  runs; j++ )  {^701^^^^^695^707^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out .print ( object )  ;}^703^^^^^695^707^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 4; i < AVERAGE; i++ )  {^699^^^^^695^707^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 1; j < COUNT; j++ )  {^701^^^^^695^707^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^710^^^^^709^721^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^712^^^^^709^721^[REPLACE] MutableDateTime dt = new MutableDateTime (  ) ;^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^712^^^^^709^721^[ADD] MutableDateTime dt = new MutableDateTime (  ) ;^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^717^^^^^709^721^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^717^718^^^^709^721^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^717^^^^^709^721^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^713^^^^^709^721^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^717^^^^^709^721^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 >> 0; j  >=  COUNT; j++ )  {^715^^^^^709^721^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^715^716^717^^^709^721^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setHourOfDay ( 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 + 2; j < COUNT; j++ )  {^715^^^^^709^721^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^715^^^^^709^721^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i < AVERAGE; i++ )  {^713^^^^^709^721^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^713^714^715^716^717^709^721^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "JISO", "setHour" ) ; for  ( int j = 0; j < COUNT; j++ )  { dt.setHourOfDay ( 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 * 3; j < COUNT; j++ )  {^715^^^^^709^721^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^724^^^^^723^734^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^GregorianCalendar dt = new GregorianCalendar (  ) ;^724^725^^^^723^734^[ADD] int COUNT = COUNT_VERY_FAST; GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^725^^^^^723^734^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^730^^^^^723^734^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^730^731^^^^723^734^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^730^^^^^723^734^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >  AVERAGE; i++ )  {^726^^^^^723^734^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^726^727^728^729^730^723^734^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "GCal", "setHour" ) ; for  ( int j = 0; j < COUNT; j++ )  { dt.set ( GregorianCalendar.HOUR_OF_DAY, 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.print ( "Anti optimise" ) ;}^730^^^^^723^734^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.println ( "Anti optimise" ) ;}^730^^^^^723^734^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 % 2; j  !=  runs; j++ )  {^728^^^^^723^734^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^730^^^^^723^734^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^728^^^^^723^734^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^728^^^^^723^734^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^728^729^730^^^723^734^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.set ( GregorianCalendar.HOUR_OF_DAY, 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out .print ( name )  ;}^730^^^^^723^734^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.print ( "Anti optimise" ) ;}^730^^^^^723^734^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 4; i < AVERAGE; i++ )  {^726^^^^^723^734^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 + 3; j < COUNT; j++ )  {^728^^^^^723^734^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^737^^^^^736^747^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^738^^^^^736^747^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^738^^^^^736^747^[ADD] Date dt = new Date (  ) ;^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != true )  {System.out.println ( "Anti optimise" ) ;}^743^^^^^736^747^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.print ( "Anti optimise" ) ;}^743^^^^^736^747^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^743^744^^^^736^747^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >=  AVERAGE; i++ )  {^739^^^^^736^747^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this  )  {System.out.println ( "Anti optimise" ) ;}^743^^^^^736^747^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^743^^^^^736^747^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^741^^^^^736^747^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^741^742^743^^^736^747^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setHours ( 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this )  {System.out.println ( "Anti optimise" ) ;}^743^^^^^736^747^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^743^^^^^736^747^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^741^^^^^736^747^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != false )  {System.out.println ( "Anti optimise" ) ;}^743^^^^^736^747^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 2; i < AVERAGE; i++ )  {^739^^^^^736^747^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^739^740^741^742^743^736^747^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "setHour" ) ; for  ( int j = 0; j < COUNT; j++ )  { dt.setHours ( 13 ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 / 3; j < COUNT; j++ )  {^741^^^^^736^747^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^753^^^^^752^765^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^753^^^^^752^765^[ADD] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^755^^^^^752^765^[REPLACE] MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this )  {System.out.println ( "Anti optimise" ) ;}^761^^^^^752^765^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^761^^^^^752^765^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 << 2; i  ==  AVERAGE; i++ )  {^756^^^^^752^765^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.print ( "Anti optimise" ) ;}^761^^^^^752^765^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^761^762^^^^752^765^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.print ( "Anti optimise" ) ;}^761^^^^^752^765^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j  >  COUNT; j++ )  {^758^^^^^752^765^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^761^^^^^752^765^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.MutableDateTime (  ) ;^760^^^^^752^765^[REPLACE] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 << 3; j < COUNT; j++ )  {^758^^^^^752^765^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^758^^^^^752^765^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^761^^^^^752^765^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 - 0; i < AVERAGE; i++ )  {^756^^^^^752^765^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^758^^^^^752^765^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^758^759^760^761^^752^765^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setHourOfDay ( 13 ) ; int val = dt.getHourOfDay (  ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^768^^^^^767^780^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^770^^^^^767^780^[REPLACE] MutableDateTime dt = new MutableDateTime (  ) ;^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^776^^^^^767^780^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.print ( "Anti optimise" ) ;}^776^^^^^767^780^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 * 2; i  !=  AVERAGE; i++ )  {^771^^^^^767^780^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out .print ( name )  ;}^776^^^^^767^780^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out.print ( "Anti optimise" ) ;}^776^^^^^767^780^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  runs; j++ )  {^773^^^^^767^780^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != false )  {System.out.print ( "Anti optimise" ) ;}^776^^^^^767^780^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^776^777^^^^767^780^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^776^^^^^767^780^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.MutableDateTime (  ) ;^775^^^^^767^780^[REPLACE] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^775^^^^^767^780^[ADD] int val = dt.getHourOfDay (  ) ;^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j < COUNT; j++ )  {^773^^^^^767^780^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^773^774^775^776^^767^780^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.setHourOfDay ( 13 ) ; int val = dt.getHourOfDay (  ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  runs; j++ )  {^773^^^^^767^780^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out .print ( name )  ;}^776^^^^^767^780^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i < AVERAGE; i++ )  {^771^^^^^767^780^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  MutableDateTime dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^783^^^^^782^794^[REPLACE] int COUNT = COUNT_VERY_FAST;^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^GregorianCalendar dt = new GregorianCalendar (  ) ;^783^784^^^^782^794^[ADD] int COUNT = COUNT_VERY_FAST; GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^784^^^^^782^794^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^790^^^^^782^794^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^790^^^^^782^794^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^790^791^^^^782^794^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  !=  AVERAGE; i++ )  {^785^^^^^782^794^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != this  )  {System.out.println ( "Anti optimise" ) ;}^790^^^^^782^794^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out .print ( object )  ;}^790^^^^^782^794^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  runs; j++ )  {^787^^^^^782^794^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^787^788^789^790^^782^794^[ADD] for  ( int j = 0; j < COUNT; j++ )  { dt.set ( GregorianCalendar.HOUR_OF_DAY, 13 ) ; int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ; if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^790^^^^^782^794^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt .set ( COUNT , COUNT_FAST )  ;^789^^^^^782^794^[REPLACE] int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ;^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^787^^^^^782^794^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt.setTime ( GregorianCalendar.HOUR_OF_DAY ) ;^789^^^^^782^794^[REPLACE] int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ;^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^789^^^^^782^794^[ADD] int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ;^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int val = dt .set ( val , COUNT_FAST )  ;^789^^^^^782^794^[REPLACE] int val = dt.get ( GregorianCalendar.HOUR_OF_DAY ) ;^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i < AVERAGE; i++ )  {^785^^^^^782^794^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^797^^^^^796^808^[REPLACE] int COUNT = COUNT_FAST;^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^797^798^^^^796^808^[ADD] int COUNT = COUNT_FAST; Date dt = new Date (  ) ;^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^798^^^^^796^808^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^798^^^^^796^808^[ADD] Date dt = new Date (  ) ;^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != true )  {System.out.println ( "Anti optimise" ) ;}^804^^^^^796^808^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^804^805^^^^796^808^[ADD] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out .print ( object )  ;}^804^^^^^796^808^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >=  AVERAGE; i++ )  {^799^^^^^796^808^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^799^800^801^802^803^796^808^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "setGetHour" ) ; for  ( int j = 0; j < COUNT; j++ )  { dt.setHours ( 13 ) ; int val = dt.getHours (  ) ;^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt != null )  {System.out.println ( "Anti optimise" ) ;}^804^^^^^796^808^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == true )  {System.out .print ( object )  ;}^804^^^^^796^808^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  runs; j++ )  {^801^^^^^796^808^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == false )  {System.out.println ( "Anti optimise" ) ;}^804^^^^^796^808^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int val = dt.getYear (  ) ;^803^^^^^796^808^[REPLACE] int val = dt.getHours (  ) ;^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 1; j < COUNT; j++ )  {^801^^^^^796^808^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^801^^^^^796^808^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( dt == this )  {System.out.println ( "Anti optimise" ) ;}^804^^^^^796^808^[REPLACE] if  ( dt == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 2; i < AVERAGE; i++ )  {^799^^^^^796^808^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 3; j < COUNT; j++ )  {^801^^^^^796^808^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^803^^^^^796^808^[ADD] int val = dt.getHours (  ) ;^[METHOD] checkDateSetGetHour [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^814^^^^^813^826^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L, GJChronology.getInstance (  )  ) ;^815^^^^^813^826^[REPLACE] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^815^816^^^^813^826^[ADD] DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ; DateTimeFormatter f = DateTimeFormat.forPattern ( "dd MMM yyyy" ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^"dd MMM yyyy"   ;^816^^^^^813^826^[REPLACE] DateTimeFormatter f = DateTimeFormat.forPattern ( "dd MMM yyyy" ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^816^817^818^819^820^813^826^[ADD] DateTimeFormatter f = DateTimeFormat.forPattern ( "dd MMM yyyy" ) ; for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Joda", "toString" ) ; for  ( int j = 0; j < COUNT; j++ )  { String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str != null )  {System.out.println ( "Anti optimise" ) ;}^822^^^^^813^826^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == this )  {System.out.println ( "Anti optimise" ) ;}^822^^^^^813^826^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >=  AVERAGE; i++ )  {^817^^^^^813^826^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^817^818^819^820^^813^826^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Joda", "toString" ) ; for  ( int j = 0; j < COUNT; j++ )  { String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == false )  {System.out.println ( "Anti optimise" ) ;}^822^^^^^813^826^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 - 3; j  <=  COUNT; j++ )  {^819^^^^^813^826^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str != this )  {System.out.println ( "Anti optimise" ) ;}^822^^^^^813^826^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^822^823^^^^813^826^[ADD] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == true )  {System.out.println ( "Anti optimise" ) ;}^822^^^^^813^826^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^String str = dt.DateTime ( "dd MMM yyyy" ) ;^820^^^^^813^826^[REPLACE] String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0 + 4; j < COUNT; j++ )  {^819^^^^^813^826^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^String str = dt .getMonthOfYear (  )  ;^820^^^^^813^826^[REPLACE] String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^819^^^^^813^826^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 1; i < AVERAGE; i++ )  {^817^^^^^813^826^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^820^^^^^813^826^[ADD] String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJodaToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^829^^^^^828^841^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^830^^^^^828^841^[REPLACE] DateTime dt = new DateTime (  ) ;^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^"dd MMM yyyy"   ;^831^^^^^828^841^[REPLACE] DateTimeFormatter f = DateTimeFormat.forPattern ( "dd MMM yyyy" ) ;^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str != null )  {System.out.print ( "Anti optimise" ) ;}^837^^^^^828^841^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == true )  {System.out.println ( "Anti optimise" ) ;}^837^^^^^828^841^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  >=  AVERAGE; i++ )  {^832^^^^^828^841^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^832^833^834^835^^828^841^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "JISO", "toString" ) ; for  ( int j = 0; j < COUNT; j++ )  { String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str != null )  {System.out.println ( "Anti optimise" ) ;}^837^^^^^828^841^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == this )  {System.out.println ( "Anti optimise" ) ;}^837^^^^^828^841^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 2; j  ==  COUNT; j++ )  {^834^^^^^828^841^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^834^835^^837^^828^841^[ADD] for  ( int j = 0; j < COUNT; j++ )  { String str = dt.toString ( "dd MMM yyyy" ) ; if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[ADD]^^837^838^^^^828^841^[ADD] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == false )  {System.out.println ( "Anti optimise" ) ;}^837^^^^^828^841^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^String str = dt.DateTime ( "dd MMM yyyy" ) ;^835^^^^^828^841^[REPLACE] String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^834^^^^^828^841^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^String str = dt .getMonthOfYear (  )  ;^835^^^^^828^841^[REPLACE] String str = dt.toString ( "dd MMM yyyy" ) ;^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >  COUNT; j++ )  {^834^^^^^828^841^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 << 4; i < AVERAGE; i++ )  {^832^^^^^828^841^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkJISOToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  DateTimeFormatter f  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  DateTime dt  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^844^^^^^843^855^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j < COUNT; j++ )  { int val = dt.get ( GregorianCalendar.YEAR ) ;^845^^^^^843^855^[REPLACE] GregorianCalendar dt = new GregorianCalendar (  ) ;^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( str != null )  {System.out.println ( "Anti optimise" ) ;}^851^^^^^843^855^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( str == true )  {System.out.println ( "Anti optimise" ) ;}^851^^^^^843^855^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0 >> 3; i  ==  AVERAGE; i++ )  {^846^^^^^843^855^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  !=  COUNT; j++ )  {^848^^^^^843^855^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( str == true )  {System.out .print ( object )  ;}^851^^^^^843^855^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L ) ;^849^^^^^843^855^[REPLACE] SimpleDateFormat sdf = new SimpleDateFormat ( "dd MMM yyyy" ) ;^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^MutableDateTime dt = new MutableDateTime ( GJChronology.getInstance (  )  ) ;^850^^^^^843^855^[REPLACE] String str = sdf.format ( dt.getTime (  )  ) ;^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^848^^^^^843^855^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^849^^^^^843^855^[ADD] SimpleDateFormat sdf = new SimpleDateFormat ( "dd MMM yyyy" ) ;^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  >=  COUNT; j++ )  {^848^^^^^843^855^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^848^849^850^851^^843^855^[ADD] for  ( int j = 0; j < COUNT; j++ )  { SimpleDateFormat sdf = new SimpleDateFormat ( "dd MMM yyyy" ) ; String str = sdf.format ( dt.getTime (  )  ) ; if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( str != null )  {System.out.print ( "Anti optimise" ) ;}^851^^^^^843^855^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( str == false )  {System.out.println ( "Anti optimise" ) ;}^851^^^^^843^855^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 4; i < AVERAGE; i++ )  {^846^^^^^843^855^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkGCalToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  GregorianCalendar dt  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int count = 0;^858^^^^^857^869^[REPLACE] int COUNT = COUNT_SLOW;^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( GJChronology.getInstance (  )  ) ;^859^^^^^857^869^[REPLACE] Date dt = new Date (  ) ;^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^859^^^^^857^869^[ADD] Date dt = new Date (  ) ;^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str != null )  {System.out.println ( "Anti optimise" ) ;}^865^^^^^857^869^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^865^866^^^^857^869^[ADD] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;} }^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == true )  {System.out.println ( "Anti optimise" ) ;}^865^^^^^857^869^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0; i  ==  AVERAGE; i++ )  {^860^^^^^857^869^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^860^861^862^863^864^857^869^[ADD] for  ( int i = 0; i < AVERAGE; i++ )  { start ( "Date", "toString" ) ; for  ( int j = 0; j < COUNT; j++ )  { SimpleDateFormat sdf = new SimpleDateFormat ( "dd MMM yyyy" ) ; String str = sdf.format ( dt ) ;^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == this )  {System.out .print ( str )  ;}^865^^^^^857^869^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  ==  COUNT; j++ )  {^862^^^^^857^869^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str != false )  {System.out.print ( "Anti optimise" ) ;}^865^^^^^857^869^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^if  ( str == this )  {System.out.print ( "Anti optimise" ) ;}^865^^^^^857^869^[REPLACE] if  ( str == null )  {System.out.println ( "Anti optimise" ) ;}^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L ) ;^863^^^^^857^869^[REPLACE] SimpleDateFormat sdf = new SimpleDateFormat ( "dd MMM yyyy" ) ;^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^DateTime dt = new DateTime ( 12345L ) ;^864^^^^^857^869^[REPLACE] String str = sdf.format ( dt ) ;^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 4; j < COUNT; j++ )  {^862^^^^^857^869^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 0; j  <=  COUNT; j++ )  {^862^^^^^857^869^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[ADD]^^863^^^^^857^869^[ADD] SimpleDateFormat sdf = new SimpleDateFormat ( "dd MMM yyyy" ) ;^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int i = 0L; i < AVERAGE; i++ )  {^860^^^^^857^869^[REPLACE] for  ( int i = 0; i < AVERAGE; i++ )  {^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^for  ( int j = 3; j < COUNT; j++ )  {^862^^^^^857^869^[REPLACE] for  ( int j = 0; j < COUNT; j++ )  {^[METHOD] checkDateToString [TYPE] void [PARAMETER] [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  [TYPE]  Map results  [TYPE]  SimpleDateFormat sdf  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Date dt  [TYPE]  Result res  result 
[REPLACE]^result =  ( Result )  results.get ( str1 +str ) ;^877^^^^^876^886^[REPLACE] result =  ( Result )  results.get ( str1 + str2 ) ;^[METHOD] start [TYPE] void [PARAMETER] String str1 String str2 [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^if  ( result != null )  {^878^^^^^876^886^[REPLACE] if  ( result == null )  {^[METHOD] start [TYPE] void [PARAMETER] String str1 String str2 [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^result =  new DateTimePerformance (  )  ;^879^^^^^876^886^[REPLACE] result = new Result (  ) ;^[METHOD] start [TYPE] void [PARAMETER] String str1 String str2 [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^result.name = str2; ;^880^^^^^876^886^[REPLACE] result.object = str1;^[METHOD] start [TYPE] void [PARAMETER] String str1 String str2 [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^result.object = str1; ;^881^^^^^876^886^[REPLACE] result.name = str2;^[METHOD] start [TYPE] void [PARAMETER] String str1 String str2 [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^880^881^^^^876^886^[ADD] result.object = str1; result.name = str2;^[METHOD] start [TYPE] void [PARAMETER] String str1 String str2 [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^end = System.currentTimeMillis (  ) ; ;^885^^^^^876^886^[REPLACE] start = System.currentTimeMillis (  ) ;^[METHOD] start [TYPE] void [PARAMETER] String str1 String str2 [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^start = System.currentTimeMillis (  ) ; ;^892^^^^^891^898^[REPLACE] end = System.currentTimeMillis (  ) ;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^long time =  ( jodaTotal - time ) ;^893^^^^^891^898^[REPLACE] long time =  ( end - start ) ;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^start = result.start + time;^894^^^^^891^898^[REPLACE] result.time = result.time + time;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^result.runs =val + count;^895^^^^^891^898^[REPLACE] result.runs = result.runs + count;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[ADD]^^895^^^^^891^898^[ADD] result.runs = result.runs + count;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^result.avg =  ( result.time * 1000000 )   ;^896^^^^^891^898^[REPLACE] result.avg =  ( result.time * 1000000 )  / result.runs;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^System.out.println ( "." ) ;^897^^^^^891^898^[REPLACE] System.out.print ( "." ) ;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REMOVE]^System.out.println ( "Date: " + dateTotal ) ;^897^^^^^891^898^[REMOVE] ^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] DateTimePerformance Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^String object ;^42^^^^^^^[REPLACE] String object = null;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^String name = false;^43^^^^^^^[REPLACE] String name = null;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^long time  = null ;^44^^^^^^^[REPLACE] long time = 0;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^long avg ;^45^^^^^^^[REPLACE] long avg = 0;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
[REPLACE]^int runs  = null ;^46^^^^^^^[REPLACE] int runs = 0;^[METHOD] end [TYPE] void [PARAMETER] int count [CLASS] Result   [TYPE]  boolean false  true  [TYPE]  List resultList  [TYPE]  String name  object  str  str1  str2  [TYPE]  Map results  [TYPE]  long avg  dateTotal  end  gcalTotal  jisoTotal  jodaTotal  start  time  [TYPE]  int AVERAGE  COUNT  COUNT_FAST  COUNT_SLOW  COUNT_VERY_FAST  count  i  j  runs  val  [TYPE]  Result res  result 
