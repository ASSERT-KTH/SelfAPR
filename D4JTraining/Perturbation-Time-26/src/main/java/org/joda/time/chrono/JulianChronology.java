[REPLACE]^private static  long serialVersionUID = -8731039522547897247L;^53^^^^^^^[REPLACE] private static final long serialVersionUID = -8731039522547897247L;^ [CLASS] JulianChronology  
[REPLACE]^private static final  short  MILLIS_PER_YEAR = (  short  )   ( 365.25 * DateTimeConstants.MILLIS_PER_DAY ) ;^55^56^^^^55^56^[REPLACE] private static final long MILLIS_PER_YEAR = ( long )   ( 365.25 * DateTimeConstants.MILLIS_PER_DAY ) ;^ [CLASS] JulianChronology  
[REPLACE]^private static final long MILLIS_PER_MONTH = ( long )   ( 1.0d * DateTimeConstants.MILLIS_PER_DAY / 12 ) ;^58^59^^^^58^59^[REPLACE] private static final long MILLIS_PER_MONTH = ( long )   ( 365.25 * DateTimeConstants.MILLIS_PER_DAY / 12 ) ;^ [CLASS] JulianChronology  
[REPLACE]^private static final int MIN_YEAR = -292269054L;^62^^^^^^^[REPLACE] private static final int MIN_YEAR = -292269054;^ [CLASS] JulianChronology  
[REPLACE]^private static final int MAX_YEAR ;^65^^^^^^^[REPLACE] private static final int MAX_YEAR = 292272992;^ [CLASS] JulianChronology  
[REPLACE]^private static  JulianChronology INSTANCE_UTC;^68^^^^^^^[REPLACE] private static final JulianChronology INSTANCE_UTC;^ [CLASS] JulianChronology  
[REPLACE]^private  final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]> (  ) ;^71^^^^^^^[REPLACE] private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]> (  ) ;^ [CLASS] JulianChronology  
[REPLACE]^if   (  chronos == null  )   {  ;^125^^^^^124^153^[REPLACE] if  ( zone == null )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^zone ;^126^^^^^124^153^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^zone  =  zone ;^126^^^^^124^153^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^Chronology base = getBase (  )  ;^128^^^^^124^153^[REPLACE] JulianChronology chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  ( chronos != null )  {^131^^^^^124^153^[REPLACE] if  ( chronos == null )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^131^132^133^134^^124^153^[ADD] if  ( chronos == null )  { chronos = new JulianChronology[7]; cCache.put ( zone, chronos ) ; }^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos = new JulianChronology[7 >> 2];^132^^^^^124^153^[REPLACE] chronos = new JulianChronology[7];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  ( chrono != null )  {^141^^^^^124^153^[REPLACE] if  ( chrono == null )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^141^142^143^144^145^124^153^[ADD] if  ( chrono == null )  { if  ( zone == DateTimeZone.UTC )  { chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ; } else { chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  ( zone  ||  DateTimeZone.UTC )  {^142^^^^^124^153^[REPLACE] if  ( zone == DateTimeZone.UTC )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^142^143^144^145^146^124^153^[ADD] if  ( zone == DateTimeZone.UTC )  { chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ; } else { chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ; chrono = new JulianChronology^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono =  getInstance ( DateTimeZone.UTC, null ) ;^145^^^^^142^148^[REPLACE] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , true, minDaysInFirstWeek ) ;^146^147^^^^142^148^[REPLACE] chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^143^^^^^124^153^[ADD] chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( true, true, minDaysInFirstWeek ) ;^143^^^^^124^153^[REPLACE] chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono =  getInstance ( DateTimeZone.UTC, null ) ;^145^^^^^124^153^[REPLACE] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , true, minDaysInFirstWeek ) ;^146^147^^^^124^153^[REPLACE] chrono = new JulianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos[minDaysInFirstWeek  1 - 4] = chrono;^149^^^^^124^153^[REPLACE] chronos[minDaysInFirstWeek - 1] = chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^if  ( zone  !=  DateTimeZone.UTC )  {^142^^^^^124^153^[REPLACE] if  ( zone == DateTimeZone.UTC )  {^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( null, null, minDaysInFirstWeek )  ;^145^^^^^142^148^[REPLACE] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = new JulianChronology ( false, false, minDaysInFirstWeek ) ;^143^^^^^124^153^[REPLACE] chrono = new JulianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^chrono = chronos[minDaysInFirstWeek - 1];( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^135^136^137^138^139^124^153^[ADD] try { chrono = chronos[minDaysInFirstWeek - 1]; } catch  ( ArrayIndexOutOfBoundsException e )  { throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = chronos[minDaysInFirstWeek  4];^136^^^^^124^153^[REPLACE] chrono = chronos[minDaysInFirstWeek - 1];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos = new JulianChronology[2];^132^^^^^124^153^[REPLACE] chronos = new JulianChronology[7];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chrono = chronos[minDaysInFirstWeek  1];^136^^^^^124^153^[REPLACE] chrono = chronos[minDaysInFirstWeek - 1];^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^145^^^^^124^153^[ADD] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^chronos[minDaysInFirstWeek  1] = chrono;^149^^^^^124^153^[REPLACE] chronos[minDaysInFirstWeek - 1] = chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^130^^^^^124^153^[ADD] JulianChronology[] chronos = cCache.get ( zone ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^return ;^138^139^^^^124^153^[REPLACE] throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^^137^138^139^^^124^153^[ADD] catch  ( ArrayIndexOutOfBoundsException e )  { throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[REPLACE]^return INSTANCE_UTC;^152^^^^^124^153^[REPLACE] return chrono;^[METHOD] getInstance [TYPE] JulianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  year  [TYPE]  DateTimeZone zone  [TYPE]  JulianChronology[] chronos 
[ADD]^int leapYears;^219^220^^^^214^238^[ADD] int relativeYear = year - 1968; int leapYears;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[ADD]^^220^^^^^214^238^[ADD] int leapYears;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^if  ( minDays  >  2 )  {^221^^^^^214^238^[REPLACE] if  ( relativeYear <= 0 )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^if  ( !isLeapYear ( relativeYear )  )  {^228^^^^^221^231^[REPLACE] if  ( !isLeapYear ( year )  )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^leapYears =  ( relativeYear + 3 )  >> 2  ;^226^^^^^221^231^[REPLACE] leapYears = relativeYear >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^leapYears =  ( relativeYear + 3 )   >=  2;^224^^^^^214^238^[REPLACE] leapYears =  ( relativeYear + 3 )  >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^if  ( isLeapYear ( year )  )  {^228^^^^^214^238^[REPLACE] if  ( !isLeapYear ( year )  )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^leapYears =  ( relativeYear + 3 )   <  2;^224^^^^^214^238^[REPLACE] leapYears =  ( relativeYear + 3 )  >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^leapYears =  ( relativeYear + 3 )  >> 2  ;^226^^^^^214^238^[REPLACE] leapYears = relativeYear >> 2;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^long millis =  ( relativeYear  365L + leapYears )    ( long ) DateTimeConstants.MILLIS_PER_DAY;^233^^^^^214^238^[REPLACE] long millis =  ( relativeYear * 365L + leapYears )  *  ( long ) DateTimeConstants.MILLIS_PER_DAY;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
[REPLACE]^return serialVersionUID   ( 366L + 352 )  * DateTimeConstants.MILLIS_PER_DAY;^237^^^^^214^238^[REPLACE] return millis -  ( 366L + 352 )  * DateTimeConstants.MILLIS_PER_DAY;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] JulianChronology   [TYPE]  boolean false  true  [TYPE]  JulianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  millis  serialVersionUID  [TYPE]  int MAX_YEAR  MIN_YEAR  dayOfMonth  leapYears  minDays  minDaysInFirstWeek  monthOfYear  relativeYear  year 
