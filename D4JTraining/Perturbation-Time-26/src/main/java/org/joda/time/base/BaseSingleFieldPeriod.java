[REPLACE]^private static final long serialVersionUID ;^50^^^^^^^[REPLACE] private static final long serialVersionUID = 9386874258972L;^ [CLASS] BaseSingleFieldPeriod  
[REPLACE]^if  ( start != null || end == null )  {^88^^^^^87^105^[REPLACE] if  ( start == null || end == null )  {^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REMOVE]^if  ( index != 0 )  {     throw new IndexOutOfBoundsException ( valueOf ( index )  ) ; }^88^^^^^87^105^[REMOVE] ^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[ADD]^^89^^^^^87^105^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^return ;^89^^^^^87^105^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^if  ( start.size (  )  - 1 != end.size (  )  - 1 )  {^91^^^^^87^105^[REPLACE] if  ( start.size (  )  != end.size (  )  )  {^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[ADD]^^92^^^^^87^105^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^throw new IllegalArgumentException ( "ReadablePartial objects must not be null" )  ;^92^^^^^87^105^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^if  ( start.getFieldType ( i )   ==  end.getFieldType ( i )  )  {^95^^^^^87^105^[REPLACE] if  ( start.getFieldType ( i )  != end.getFieldType ( i )  )  {^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^return ;^96^^^^^87^105^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^for  ( int i = 0 , isize = start.size (  ) ; i < isize; i++ )  {^94^^^^^87^105^[REPLACE] for  ( int i = 0, isize = start.size (  ) ; i < isize; i++ )  {^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^for  ( int i = 0, .getChronology = start.size (  ) ; i < isize; i++ )  {^94^^^^^87^105^[REPLACE] for  ( int i = 0, isize = start.size (  ) ; i < isize; i++ )  {^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^throw new IllegalArgumentException ( "ReadablePartial objects must not be null" )  ;^96^^^^^87^105^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^if  ( DateTimeUtils.isContiguous ( start )   &&  true )  {^99^^^^^87^105^[REPLACE] if  ( DateTimeUtils.isContiguous ( start )  == false )  {^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^return ;^100^^^^^87^105^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^throw new IllegalArgumentException ( "ReadablePartial objects must not be null" )  ;^100^^^^^87^105^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^Chronology chrono = getInstantChronology ( start )  ;^102^^^^^87^105^[REPLACE] Chronology chrono = DateTimeUtils.getChronology ( start.getChronology (  )  ) .withUTC (  ) ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^int[] values = chrono.get ( zeroInstance, chrono.set ( start, 0 ) , chrono.set ( end, 0 )  ) ;^103^^^^^87^105^[REPLACE] int[] values = chrono.get ( zeroInstance, chrono.set ( start, 0L ) , chrono.set ( end, 0L )  ) ;^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^return values[0 % 2];^104^^^^^87^105^[REPLACE] return values[0];^[METHOD] between [TYPE] int [PARAMETER] ReadablePartial start ReadablePartial end ReadablePeriod zeroInstance [CLASS] BaseSingleFieldPeriod   [TYPE]  ReadablePartial end  start  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod zeroInstance  [TYPE]  int[] values  [TYPE]  Chronology chrono  [TYPE]  long serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period 
[REPLACE]^if  ( period != null )  {^128^^^^^127^146^[REPLACE] if  ( period == null )  {^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REMOVE]^if  ( thisValue > otherValue )  {     return 1; }^128^^^^^127^146^[REMOVE] ^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^return 1;  ;^129^^^^^127^146^[REPLACE] return 0;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^return 2;^129^^^^^127^146^[REPLACE] return 0;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[ADD]^^131^132^^^^127^146^[ADD] Chronology iso = ISOChronology.getInstanceUTC (  ) ; long duration = 0L;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[ADD]^^132^^^^^127^146^[ADD] long duration = 0L;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^if  ( value  == isize )  {^135^^^^^127^146^[REPLACE] if  ( value != 0 )  {^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^if  ( field.isPrecise (  )   &&  false )  {^137^^^^^127^146^[REPLACE] if  ( field.isPrecise (  )  == false )  {^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[ADD]^^137^138^139^140^141^127^146^[ADD] if  ( field.isPrecise (  )  == false )  { throw new IllegalArgumentException ( "Cannot convert period to duration as " + field.getName (  )  + " is not precise in the period " + period ) ; }^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^return ;^138^139^140^^^127^146^[REPLACE] throw new IllegalArgumentException ( "Cannot convert period to duration as " + field.getName (  )  + " is not precise in the period " + period ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^"Cannot convert period to duration as " + field .getUnitMillis (  )   + " is not precise in the period " + period ) ;^139^140^^^^127^146^[REPLACE] "Cannot convert period to duration as " + field.getName (  )  + " is not precise in the period " + period ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[ADD]^^139^140^^^^127^146^[ADD] "Cannot convert period to duration as " + field.getName (  )  + " is not precise in the period " + period ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^duration =  FieldUtils.safeAdd ( serialVersionUID, FieldUtils.safeMultiply ( field.getUnitMillis (  ) , value )  ) ;^142^^^^^127^146^[REPLACE] duration = FieldUtils.safeAdd ( duration, FieldUtils.safeMultiply ( field.getUnitMillis (  ) , value )  ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^DurationField field = period .getChronology (  )  .getField ( iso ) ;^136^^^^^127^146^[REPLACE] DurationField field = period.getFieldType ( i ) .getField ( iso ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^if  ( field.isPrecise (  )   !=  false )  {^137^^^^^127^146^[REPLACE] if  ( field.isPrecise (  )  == false )  {^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^duration =  FieldUtils.safeAdd ( null, FieldUtils.safeMultiply ( field.getUnitMillis (  ) , value )  ) ;^142^^^^^127^146^[REPLACE] duration = FieldUtils.safeAdd ( duration, FieldUtils.safeMultiply ( field.getUnitMillis (  ) , value )  ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^for  ( int i = 0 ; i < period.size (  ) ; i++ )  {^133^^^^^127^146^[REPLACE] for  ( int i = 0; i < period.size (  ) ; i++ )  {^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^int value = period .getFieldType ( iPeriod )  ;^134^^^^^127^146^[REPLACE] int value = period.getValue ( i ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[ADD]^^136^^^^^127^146^[ADD] DurationField field = period.getFieldType ( i ) .getField ( iso ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[ADD]^^138^139^140^^^127^146^[ADD] throw new IllegalArgumentException ( "Cannot convert period to duration as " + field.getName (  )  + " is not precise in the period " + period ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
[REPLACE]^return FieldUtils.safeToInt ( serialVersionUID  serialVersionUID ) ;^145^^^^^127^146^[REPLACE] return FieldUtils.safeToInt ( duration / millisPerUnit ) ;^[METHOD] standardPeriodIn [TYPE] int [PARAMETER] ReadablePeriod period long millisPerUnit [CLASS] BaseSingleFieldPeriod   [TYPE]  Chronology iso  [TYPE]  boolean false  true  [TYPE]  ReadablePeriod period  [TYPE]  DurationField field  [TYPE]  long duration  millisPerUnit  serialVersionUID  [TYPE]  int amount  i  iPeriod  isize  period  value 
