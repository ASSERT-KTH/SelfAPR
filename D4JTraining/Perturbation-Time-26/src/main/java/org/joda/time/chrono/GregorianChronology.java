[REPLACE]^private static final long serialVersionUID ;^48^^^^^^^[REPLACE] private static final long serialVersionUID = -861407383323710522L;^ [CLASS] GregorianChronology  
[REPLACE]^private static final long MILLIS_PER_YEAR = ( long )   ( 3.0d * DateTimeConstants.MILLIS_PER_DAY ) ;^50^51^^^^50^51^[REPLACE] private static final long MILLIS_PER_YEAR = ( long )   ( 365.2425 * DateTimeConstants.MILLIS_PER_DAY ) ;^ [CLASS] GregorianChronology  
[REPLACE]^private static   short  MILLIS_PER_MONTH = (  short  )   ( 365.2425 * DateTimeConstants.MILLIS_PER_DAY / 12 ) ;^53^54^^^^53^54^[REPLACE] private static final long MILLIS_PER_MONTH = ( long )   ( 365.2425 * DateTimeConstants.MILLIS_PER_DAY / 12 ) ;^ [CLASS] GregorianChronology  
[REPLACE]^private static final int DAYS_0000_TO_1970 ;^56^^^^^^^[REPLACE] private static final int DAYS_0000_TO_1970 = 719527;^ [CLASS] GregorianChronology  
[REPLACE]^private static final int MIN_YEAR  = null ;^59^^^^^^^[REPLACE] private static final int MIN_YEAR = -292275054;^ [CLASS] GregorianChronology  
[REPLACE]^private static final int MAX_YEAR  = null ;^62^^^^^^^[REPLACE] private static final int MAX_YEAR = 292278993;^ [CLASS] GregorianChronology  
[REPLACE]^private  final GregorianChronology INSTANCE_UTC;^65^^^^^^^[REPLACE] private static final GregorianChronology INSTANCE_UTC;^ [CLASS] GregorianChronology  
[REPLACE]^private static  Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]> (  ) ;^68^^^^^^^[REPLACE] private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]> (  ) ;^ [CLASS] GregorianChronology  
[REPLACE]^if   (  chronos == null  )   {  ;^111^^^^^110^139^[REPLACE] if  ( zone == null )  {^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^zone  =  zone ;^112^^^^^110^139^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^zone ;^112^^^^^110^139^[REPLACE] zone = DateTimeZone.getDefault (  ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^Chronology base = getBase (  )  ;^114^^^^^110^139^[REPLACE] GregorianChronology chrono;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^if  ( chronos != false )  {^117^^^^^110^139^[REPLACE] if  ( chronos == null )  {^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chronos = new GregorianChronology[7 >> 4];^118^^^^^110^139^[REPLACE] chronos = new GregorianChronology[7];^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^if   (  zone == null  )   {  ;^127^^^^^110^139^[REPLACE] if  ( chrono == null )  {^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^if  ( zone  &&  DateTimeZone.UTC )  {^128^^^^^110^139^[REPLACE] if  ( zone == DateTimeZone.UTC )  {^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[ADD]^^128^129^130^131^132^110^139^[ADD] if  ( zone == DateTimeZone.UTC )  { chrono = new GregorianChronology ( null, null, minDaysInFirstWeek ) ; } else { chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ; chrono = new GregorianChronology^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[ADD]^^131^^^^^128^134^[ADD] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono = new GregorianChronology ( ZonedChronology.getInstance ( chrono, zone ) , true, minDaysInFirstWeek ) ;^132^133^^^^128^134^[REPLACE] chrono = new GregorianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[ADD]^^129^^^^^110^139^[ADD] chrono = new GregorianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono = new GregorianChronology ( false, false, minDaysInFirstWeek ) ;^129^^^^^110^139^[REPLACE] chrono = new GregorianChronology ( null, null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono =  getInstance ( DateTimeZone.UTC, MIN_YEAR ) ;^131^^^^^110^139^[REPLACE] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono = new GregorianChronology ( ZonedChronology.getInstance ( chrono, zone ) , this, minDaysInFirstWeek ) ;^132^133^^^^110^139^[REPLACE] chrono = new GregorianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[ADD]^^135^^^^^110^139^[ADD] chronos[minDaysInFirstWeek - 1] = chrono;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^if  ( zone  ) {^128^^^^^110^139^[REPLACE] if  ( zone == DateTimeZone.UTC )  {^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono =  getInstance ( DateTimeZone.UTC, MIN_YEAR ) ;^131^^^^^128^134^[REPLACE] chrono = getInstance ( DateTimeZone.UTC, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono = new GregorianChronology ( ZonedChronology.getInstance ( chrono, zone ) , false, minDaysInFirstWeek ) ;^132^133^^^^128^134^[REPLACE] chrono = new GregorianChronology ( ZonedChronology.getInstance ( chrono, zone ) , null, minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[ADD]^chrono = chronos[minDaysInFirstWeek - 1];( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^121^122^123^124^125^110^139^[ADD] try { chrono = chronos[minDaysInFirstWeek - 1]; } catch  ( ArrayIndexOutOfBoundsException e )  { throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono = chronos[minDaysInFirstWeek MIN_YEAR];^122^^^^^110^139^[REPLACE] chrono = chronos[minDaysInFirstWeek - 1];^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chronos = new GregorianChronology[6];^118^^^^^110^139^[REPLACE] chronos = new GregorianChronology[7];^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^chrono = chronos[minDaysInFirstWeek  1];^122^^^^^110^139^[REPLACE] chrono = chronos[minDaysInFirstWeek - 1];^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^GregorianChronology[] chronos = cCache .put ( zone , chronos )  ;^116^^^^^110^139^[REPLACE] GregorianChronology[] chronos = cCache.get ( zone ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^return ;^124^125^^^^110^139^[REPLACE] throw new IllegalArgumentException ( "Invalid min days in first week: " + minDaysInFirstWeek ) ;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^return chrono;  ;^138^^^^^110^139^[REPLACE] return chrono;^[METHOD] getInstance [TYPE] GregorianChronology [PARAMETER] DateTimeZone zone int minDaysInFirstWeek [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  GregorianChronology INSTANCE_UTC  chrono  [TYPE]  Map cCache  [TYPE]  GregorianChronology[] chronos  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  minDaysInFirstWeek  [TYPE]  DateTimeZone zone 
[REPLACE]^int leapYears =minDaysInFirstWeek  100;^202^^^^^200^218^[REPLACE] int leapYears = year / 100;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^if  ( year  !=  0 - 4 )  {^203^^^^^200^218^[REPLACE] if  ( year < 0 )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^if  ( isLeapYear ( leapYears )  )  {^212^^^^^203^215^[REPLACE] if  ( isLeapYear ( year )  )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[ADD]^leapYears--;^212^213^214^^^203^215^[ADD] if  ( isLeapYear ( year )  )  { leapYears--; }^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^leapYears =  (  (  (  ( year + 3 )  >> 2 )  - leapYears )  +  (  ( leapYears + 3 )  >> 2 )  )  - 1  ;^211^^^^^203^215^[REPLACE] leapYears =  ( year >> 2 )  - leapYears +  ( leapYears >> 2 ) ;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^leapYears =  (  ( year >> 2 )  - leapYears )  +  ( leapYears >> 2 )  ;^209^^^^^200^218^[REPLACE] leapYears =  (  ( year + 3 )  >> 2 )  - leapYears +  (  ( leapYears + 3 )  >> 2 )  - 1;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^if   (  year < 0  )   {  ;^212^^^^^200^218^[REPLACE] if  ( isLeapYear ( year )  )  {^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^leapYears =  (  ( year + 3 )  >> 2 )   leapYears +  (  ( leapYears + 3 )  >> 2 )   1;^209^^^^^200^218^[REPLACE] leapYears =  (  ( year + 3 )  >> 2 )  - leapYears +  (  ( leapYears + 3 )  >> 2 )  - 1;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^leapYears =  ( year >> 2 )  - leapYears   ( leapYears >> 2 ) ;^211^^^^^200^218^[REPLACE] leapYears =  ( year >> 2 )  - leapYears +  ( leapYears >> 2 ) ;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
[REPLACE]^return  ( year  365L +  ( leapYears -serialVersionUID )  )   DateTimeConstants.MILLIS_PER_DAY;^217^^^^^200^218^[REPLACE] return  ( year * 365L +  ( leapYears - DAYS_0000_TO_1970 )  )  * DateTimeConstants.MILLIS_PER_DAY;^[METHOD] calculateFirstDayOfYearMillis [TYPE] long [PARAMETER] int year [CLASS] GregorianChronology   [TYPE]  boolean false  true  [TYPE]  Map cCache  [TYPE]  long MILLIS_PER_MONTH  MILLIS_PER_YEAR  serialVersionUID  [TYPE]  int DAYS_0000_TO_1970  MAX_YEAR  MIN_YEAR  leapYears  minDays  minDaysInFirstWeek  year  [TYPE]  GregorianChronology INSTANCE_UTC  chrono 
