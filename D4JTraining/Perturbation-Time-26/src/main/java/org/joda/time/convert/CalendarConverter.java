[REPLACE]^static final CalendarConverter INSTANCE  = null ;^43^^^^^^^[REPLACE] static final CalendarConverter INSTANCE = new CalendarConverter (  ) ;^ [CLASS] CalendarConverter  
[REPLACE]^if   (  chrono != null  )   {  ;^94^^^^^93^109^[REPLACE] if  ( object.getClass (  ) .getName (  ) .endsWith ( ".BuddhistCalendar" )  )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^return BuddhistChronology.getInstance ( zone ) ;GregorianCalendar gc =  ( GregorianCalendar )  object;long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^94^95^96^97^98^93^109^[ADD] if  ( object.getClass (  ) .getName (  ) .endsWith ( ".BuddhistCalendar" )  )  { return BuddhistChronology.getInstance ( zone ) ; } else if  ( object instanceof GregorianCalendar )  { GregorianCalendar gc =  ( GregorianCalendar )  object; long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  if  ( ! object instanceof GregorianCalendar )  {^96^^^^^93^109^[REPLACE] } else if  ( object instanceof GregorianCalendar )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology.getInstance  (  zone  )  ;  ;^107^^^^^96^108^[REPLACE] return ISOChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^if  ( cutover  !=  Long.MIN_VALUE )  {^99^^^^^93^109^[REPLACE] if  ( cutover == Long.MIN_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  if  ( cutover  ||  Long.MAX_VALUE )  {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^}   return GJChronology.getInstance ( zone, cutover, 4 ) ;^101^102^103^104^105^93^109^[ADD] else if  ( cutover == Long.MAX_VALUE )  { return JulianChronology.getInstance ( zone ) ; } else { return GJChronology.getInstance ( zone, cutover, 4 ) ; }^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 3 ) ;^104^^^^^101^105^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology.getInstance  (  zone  )  ;  ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology .getInstance ( zone , cutover , this )  ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 1 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology.getInstance  (  zone  )  ;  ;^100^^^^^93^109^[REPLACE] return GregorianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^}  else {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 4 >>> 3 ) ;^104^^^^^101^105^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GregorianChronology .getInstance ( zone , cutover , 1 )  ;^100^^^^^93^109^[REPLACE] return GregorianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 3 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^^97^^^^^93^109^[ADD] GregorianCalendar gc =  ( GregorianCalendar )  object;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^^98^^^^^93^109^[ADD] long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^return GregorianChronology.getInstance ( zone ) ;return JulianChronology.getInstance ( zone ) ;^99^100^101^102^^93^109^[ADD] if  ( cutover == Long.MIN_VALUE )  { return GregorianChronology.getInstance ( zone ) ; } else if  ( cutover == Long.MAX_VALUE )  { return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 2 ) ;^104^^^^^101^105^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GregorianChronology .getInstance ( zone , cutover , false )  ;^100^^^^^93^109^[REPLACE] return GregorianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology .getInstance ( zone )  ;^104^^^^^101^105^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology .getInstance ( zone , cutover , false )  ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return ISOChronology .getInstance ( zone , cutover , null )  ;^107^^^^^93^109^[REPLACE] return ISOChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^Calendar cal =  (  ( Calendar )   ( object )  )  ;^97^^^^^93^109^[REPLACE] GregorianCalendar gc =  ( GregorianCalendar )  object;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^Calendar cal =  (  ( Calendar )   ( object )  )  ;^98^^^^^93^109^[REPLACE] long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology.getInstance  (  zone  )  ;  ;^95^^^^^93^109^[REPLACE] return BuddhistChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^} else if  ( ! object instanceof GregorianCalendar )  {^96^^^^^93^109^[REPLACE] } else if  ( object instanceof GregorianCalendar )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^} else if  ( cutover  !=  Long.MAX_VALUE )  {^101^^^^^93^109^[REPLACE] } else if  ( cutover == Long.MAX_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 1 ) ;^104^^^^^101^105^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology .getInstance ( zone , cutover , null )  ;^102^^^^^93^109^[REPLACE] return JulianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 0 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^} else if   (  cutover == Long.MAX_VALUE  )   {  ;^99^^^^^93^109^[REPLACE] if  ( cutover == Long.MIN_VALUE )  {^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REMOVE]^if  ( object instanceof GregorianCalendar )  {     GregorianCalendar gc =  (  ( GregorianCalendar )   ( object )  ) ;     long cutover = gc.getGregorianChange (  ) .getTime (  ) ;     if  ( cutover ==  ( MIN_VALUE )  )  {         return getInstance ( zone ) ;     }else         if  ( cutover ==  ( MAX_VALUE )  )  {             return getInstance ( zone ) ;         }else {             return getInstance ( zone, cutover, 4 ) ;         }      }else {     return getInstance ( zone ) ; }^99^^^^^93^109^[REMOVE] ^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[ADD]^}   return JulianChronology.getInstance ( zone ) ;return GJChronology.getInstance ( zone, cutover, 4 ) ;^101^102^103^104^105^93^109^[ADD] else if  ( cutover == Long.MAX_VALUE )  { return JulianChronology.getInstance ( zone ) ; } else { return GJChronology.getInstance ( zone, cutover, 4 ) ; }^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 2 ) ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GregorianChronology .getInstance ( zone , cutover , null )  ;^100^^^^^93^109^[REPLACE] return GregorianChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology.getInstance ( zone, cutover, 6 ) ;^104^^^^^101^105^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return GJChronology .getInstance ( zone )  ;^104^^^^^93^109^[REPLACE] return GJChronology.getInstance ( zone, cutover, 4 ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
[REPLACE]^return JulianChronology.getInstance  (  zone  )  ;  ;^107^^^^^93^109^[REPLACE] return ISOChronology.getInstance ( zone ) ;^[METHOD] getChronology [TYPE] Chronology [PARAMETER] Object object DateTimeZone zone [CLASS] CalendarConverter   [TYPE]  CalendarConverter INSTANCE  [TYPE]  GregorianCalendar gc  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  DateTimeZone zone  [TYPE]  long cutover 
