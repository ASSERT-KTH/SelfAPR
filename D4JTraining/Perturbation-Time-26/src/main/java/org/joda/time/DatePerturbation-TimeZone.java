[REPLACE]^private static final  short  serialVersionUID = 5546345482340108586L;^92^^^^^^^[REPLACE] private static final long serialVersionUID = 5546345482340108586L;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^public static final DateTimeZone UTC ;^95^^^^^^^[REPLACE] public static final DateTimeZone UTC = new FixedDateTimeZone ( "UTC", "UTC", 0, 0 ) ;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  volatile DateTimeZone cDefault;^104^^^^^^^[REPLACE] private static volatile DateTimeZone cDefault;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;^109^^^^^^^[REPLACE] private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  Map<String, String> cZoneIdConversion;^112^^^^^^^[REPLACE] private static Map<String, String> cZoneIdConversion;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private  String iID;^680^^^^^^^[REPLACE] private final String iID;^ [CLASS] DateTimeZone 1 Stub  
[REPLACE]^private static final long serialVersionUID = -6471952376487863581;^1222^^^^^^^[REPLACE] private static final long serialVersionUID = -6471952376487863581L;^ [CLASS] DateTimeZone 1 Stub  
[ADD]^^133^^^^^132^162^[ADD] DateTimeZone zone = cDefault;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if   (  convId == null  )   {  ;^134^^^^^132^162^[REPLACE] if  ( zone == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^134^135^136^137^138^132^162^[ADD] if  ( zone == null )  { synchronized ( DateTimeZone.class )  { zone = cDefault; if  ( zone == null )  { DateTimeZone temp = null;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone != true )  {^137^^^^^132^162^[REPLACE] if  ( zone == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^137^138^139^140^141^132^162^[ADD] if  ( zone == null )  { DateTimeZone temp = null; try { try { String id = System.getProperty ( "user.timezone" ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID == false )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp = UTC  ;^143^^^^^132^162^[REPLACE] temp = forID ( id ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (cDefault != true )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp ;^149^^^^^132^162^[REPLACE] temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (cDefault != false )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp = forID ( id )  ;^155^^^^^132^162^[REPLACE] temp = UTC;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^String id = System.getProperty ( "user.timezone" ) ;temp = forID ( id ) ;^139^140^141^142^143^132^162^[ADD] try { try { String id = System.getProperty ( "user.timezone" ) ; if  ( id != null )  { temp = forID ( id ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID == null )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^143^144^^^^132^162^[ADD] temp = forID ( id ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( cDefault != this )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp  =  temp ;^149^^^^^132^162^[REPLACE] temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^String id = System.getProperty ( "user.timezone" ) ;temp = forID ( id ) ;^140^141^142^143^144^132^162^[ADD] try { String id = System.getProperty ( "user.timezone" ) ; if  ( id != null )  { temp = forID ( id ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^String id = System .getSecurityManager (  )  ;^141^^^^^132^162^[REPLACE] String id = System.getProperty ( "user.timezone" ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp  = null ;^149^^^^^132^162^[REPLACE] temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^NameProvider nameProvider = null  ;^141^^^^^132^162^[REPLACE] String id = System.getProperty ( "user.timezone" ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID == true )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^149^150^^^^132^162^[ADD] temp = forTimeZone ( TimeZone.getDefault (  )  ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^cAvailableIDs = ids  ;^157^^^^^132^162^[REPLACE] cDefault = zone = temp;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^157^^^^^132^162^[ADD] cDefault = zone = temp;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone dtz = null  ;^138^^^^^132^162^[REPLACE] DateTimeZone temp = null;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id == null )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( temp != null )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (cDefault != null )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^155^^^^^132^162^[ADD] temp = UTC;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (iID == false )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (cDefault != this )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  (iID == null )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^141^^^^^132^162^[ADD] String id = System.getProperty ( "user.timezone" ) ;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^136^^^^^132^162^[ADD] zone = cDefault;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^cDefault = zone  ;^157^^^^^132^162^[REPLACE] cDefault = zone = temp;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^151^152^153^^^132^162^[ADD] catch  ( IllegalArgumentException ex )  {  }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone != false )  {^137^^^^^132^162^[REPLACE] if  ( zone == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( cDefault != false )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( temp != null )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^154^155^156^^^132^162^[ADD] if  ( temp == null )  { temp = UTC; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id ==iID )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^temp = forID ( id ) ;^142^143^144^^^132^162^[ADD] if  ( id != null )  { temp = forID ( id ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( temp != this  )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^temp = forTimeZone ( TimeZone.getDefault (  )  ) ;^148^149^150^^^132^162^[ADD] if  ( temp == null )  { temp = forTimeZone ( TimeZone.getDefault (  )  ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id == true )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^cDefault =  zone^157^^^^^132^162^[REPLACE] cDefault = zone = temp;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^138^^^^^132^162^[ADD] DateTimeZone temp = null;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if   (  convId == null  )   {  ;^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[ADD]^^142^143^144^^^132^162^[ADD] if  ( id != null )  { temp = forID ( id ) ; }^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( cDefault != null )  {^154^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( cDefault != null )  {^148^^^^^132^162^[REPLACE] if  ( temp == null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id == false )  {^142^^^^^132^162^[REPLACE] if  ( id != null )  {^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^temp = UTC  ;^136^^^^^132^162^[REPLACE] zone = cDefault;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^return zone;  ;^161^^^^^132^162^[REPLACE] return zone;^[METHOD] getDefault [TYPE] DateTimeZone [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  RuntimeException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  IllegalArgumentException ex  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID != this )  {^204^^^^^203^224^[REPLACE] if  ( id == null )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^205^^^^^203^224^[REPLACE] return getDefault (  ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID.equals ( "UTC" )  )  {^207^^^^^203^224^[REPLACE] if  ( id.equals ( "UTC" )  )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^208^^^^^203^224^[REPLACE] return DateTimeZone.UTC;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone zone = cProvider.getZone ( iID ) ;^210^^^^^203^224^[REPLACE] DateTimeZone zone = cProvider.getZone ( id ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone == null )  {^211^^^^^203^224^[REPLACE] if  ( zone != null )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return zone;  ;^212^^^^^203^224^[REPLACE] return zone;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if   (  convId.startsWith  (  "GMT+"  )   || convId.startsWith  (  "GMT-"  )    )   {  ;^214^^^^^203^224^[REPLACE] if  ( id.startsWith ( "+" )  || id.startsWith ( "-" )  )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^int offset = parseOffset ( id ) ;return DateTimeZone.UTC;^214^215^216^217^^203^224^[ADD] if  ( id.startsWith ( "+" )  || id.startsWith ( "-" )  )  { int offset = parseOffset ( id ) ; if  ( offset == 0L )  { return DateTimeZone.UTC;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  !=  0 )  {^216^^^^^203^224^[REPLACE] if  ( offset == 0L )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId = printOffset ( offset )  ;^219^^^^^216^221^[REPLACE] id = printOffset ( offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^220^^^^^216^221^[REPLACE] return fixedOffsetZone ( id, offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^217^^^^^203^224^[REPLACE] return DateTimeZone.UTC;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId = printOffset ( offset )  ;^219^^^^^203^224^[REPLACE] id = printOffset ( offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( iID, offset ) ;^220^^^^^203^224^[REPLACE] return fixedOffsetZone ( id, offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = parseOffset ( convId )  ;^215^^^^^203^224^[REPLACE] int offset = parseOffset ( id ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  &&  0 )  {^216^^^^^203^224^[REPLACE] if  ( offset == 0L )  {^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^dtz = getZone ( id )  ;^219^^^^^203^224^[REPLACE] id = printOffset ( offset ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = parseOffset ( iID ) ;^215^^^^^203^224^[REPLACE] int offset = parseOffset ( id ) ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return ;^223^^^^^203^224^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forID [TYPE] DateTimeZone [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( hoursOffset == 0 >> 2 ||true )  {^254^^^^^253^273^[REPLACE] if  ( hoursOffset == 0 && minutesOffset == 0 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^255^^^^^253^273^[REPLACE] return DateTimeZone.UTC;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^if  (  minutesOffset > 59 )  {^257^^^^^253^273^[REPLACE] if  ( minutesOffset < 0 || minutesOffset > 59 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^return ;^258^^^^^253^273^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^260^^^^^253^273^[ADD] int offset = 0;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( hoursInMinutes  <=  3 )  {^263^^^^^253^273^[REPLACE] if  ( hoursInMinutes < 0 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ;minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ;^263^264^265^266^267^253^273^[ADD] if  ( hoursInMinutes < 0 )  { minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ; } else { minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ; }^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^minutesOffset = safeAdd ( hoursInMinutes,  ( -minutesOffset )  )  ;^266^^^^^263^267^[REPLACE] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^minutesOffset = safeAdd ( hoursInMinutes, minutesOffset )  ;^264^^^^^253^273^[REPLACE] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ;minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ;^261^262^263^264^265^253^273^[ADD] try { int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ; if  ( hoursInMinutes < 0 )  { minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ; } else {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( hoursInMinutes  <=  0 )  {^263^^^^^253^273^[REPLACE] if  ( hoursInMinutes < 0 )  {^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^266^^^^^263^267^[ADD] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^264^^^^^253^273^[ADD] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, -minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^minutesOffset = safeAdd ( hoursInMinutes,  ( -minutesOffset )  )  ;^266^^^^^253^273^[REPLACE] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^268^^^^^253^273^[ADD] offset = FieldUtils.safeMultiply ( minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^int hoursInMinutes = FieldUtils .safeMultiply ( minutesOffset )  ;^262^^^^^253^273^[REPLACE] int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^266^^^^^253^273^[ADD] minutesOffset = FieldUtils.safeAdd ( hoursInMinutes, minutesOffset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^offset =  FieldUtils.safeMultiply ( hoursOffset, DateTimeConstants.MILLIS_PER_MINUTE ) ;^268^^^^^253^273^[REPLACE] offset = FieldUtils.safeMultiply ( minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^int hoursInMinutes = FieldUtils.safeMultiply ( offset, 39 ) ;^262^^^^^253^273^[REPLACE] int hoursInMinutes = FieldUtils.safeMultiply ( hoursOffset, 60 ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^throw new IllegalArgumentException ( "Id must not be null" )  ;^270^^^^^253^273^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[ADD]^^269^270^^^^253^273^[ADD] catch  ( ArithmeticException ex )  { throw new IllegalArgumentException  (" ")  ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^return forOffsetMillis ( minutesOffset ) ;^272^^^^^253^273^[REPLACE] return forOffsetMillis ( offset ) ;^[METHOD] forOffsetHoursMinutes [TYPE] DateTimeZone [PARAMETER] int hoursOffset int minutesOffset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  ArithmeticException ex  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  temp  zone  [TYPE]  int hoursInMinutes  hoursOffset  minutesOffset  offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone != false )  {^302^^^^^301^338^[REPLACE] if  ( zone == null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^303^^^^^301^338^[REPLACE] return getDefault (  ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^final String id = zone .getTimeZone ( id )  ;^305^^^^^301^338^[REPLACE] final String id = zone.getID (  ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iID.startsWith ( "UTC" )  )  {^306^^^^^301^338^[REPLACE] if  ( id.equals ( "UTC" )  )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^return DateTimeZone.UTC;^306^307^308^^^301^338^[ADD] if  ( id.equals ( "UTC" )  )  { return DateTimeZone.UTC; }^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^307^^^^^301^338^[REPLACE] return DateTimeZone.UTC;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^311^312^^^^301^338^[ADD] DateTimeZone dtz = null; String convId = getConvertedId ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^312^^^^^301^338^[ADD] String convId = getConvertedId ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  (id == null )  {^313^^^^^301^338^[REPLACE] if  ( convId != null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^dtz = getZone ( id )  ;^314^^^^^301^338^[REPLACE] dtz = cProvider.getZone ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( dtz !=cDefault )  {^316^^^^^301^338^[REPLACE] if  ( dtz == null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^dtz = cProvider.getZone ( id ) ;^316^317^318^^^301^338^[ADD] if  ( dtz == null )  { dtz = cProvider.getZone ( id ) ; }^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^dtz = getZone ( convId )  ;^317^^^^^301^338^[REPLACE] dtz = cProvider.getZone ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^317^^^^^301^338^[ADD] dtz = cProvider.getZone ( id ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if   (  id == null  )   {  ;^319^^^^^301^338^[REPLACE] if  ( dtz != null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^319^320^321^^^301^338^[ADD] if  ( dtz != null )  { return dtz; }^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return dtz;  ;^320^^^^^301^338^[REPLACE] return dtz;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if   (  id == null  )   {  ;^324^^^^^301^338^[REPLACE] if  ( convId == null )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( id.startsWith ( "GMT+" )  && convId.startsWith ( "GMT-" )  )  {^326^^^^^301^338^[REPLACE] if  ( convId.startsWith ( "GMT+" )  || convId.startsWith ( "GMT-" )  )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^326^327^328^329^330^301^338^[ADD] if  ( convId.startsWith ( "GMT+" )  || convId.startsWith ( "GMT-" )  )  { convId = convId.substring ( 3 ) ; int offset = parseOffset ( convId ) ; if  ( offset == 0L )  { return DateTimeZone.UTC;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  ||  0 )  {^329^^^^^301^338^[REPLACE] if  ( offset == 0L )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^id = printOffset ( offset )  ;^332^^^^^329^334^[REPLACE] convId = printOffset ( offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( id, offset ) ;^333^^^^^329^334^[REPLACE] return fixedOffsetZone ( convId, offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^330^^^^^301^338^[REPLACE] return DateTimeZone.UTC;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^int offset = parseOffset ( convId ) ;^327^328^^^^301^338^[ADD] convId = convId.substring ( 3 ) ; int offset = parseOffset ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^id = printOffset ( offset )  ;^332^^^^^301^338^[REPLACE] convId = printOffset ( offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return fixedOffsetZone ( id, offset ) ;^333^^^^^301^338^[REPLACE] return fixedOffsetZone ( convId, offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = parseOffset ( id )  ;^328^^^^^301^338^[REPLACE] int offset = parseOffset ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  !=  serialVersionUID )  {^329^^^^^301^338^[REPLACE] if  ( offset == 0L )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^332^333^^^^329^334^[ADD] convId = printOffset ( offset ) ; return fixedOffsetZone ( convId, offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId =  null.getDisplayName (  ) ;^325^^^^^301^338^[REPLACE] convId = zone.getDisplayName (  ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^convId = convId.substring ( 6 ) ;^327^^^^^301^338^[REPLACE] convId = convId.substring ( 3 ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^328^^^^^301^338^[ADD] int offset = parseOffset ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( convId.startsWith ( "GMT+" )  && convId.startsWith ( "GMT-" )  )  {^326^^^^^301^338^[REPLACE] if  ( convId.startsWith ( "GMT+" )  || convId.startsWith ( "GMT-" )  )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  &&  0L )  {^329^^^^^301^338^[REPLACE] if  ( offset == 0L )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^333^^^^^329^334^[REPLACE] return fixedOffsetZone ( convId, offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^327^^^^^301^338^[ADD] convId = convId.substring ( 3 ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^333^^^^^301^338^[REPLACE] return fixedOffsetZone ( convId, offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^int offset = parseOffset ( id ) ;^328^^^^^301^338^[REPLACE] int offset = parseOffset ( convId ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  (   0L )  {^329^^^^^301^338^[REPLACE] if  ( offset == 0L )  {^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^332^^^^^329^334^[ADD] convId = printOffset ( offset ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^325^^^^^301^338^[ADD] convId = zone.getDisplayName (  ) ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^throw new IllegalArgumentException ( "Offset is too large" )  ;^337^^^^^301^338^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] forTimeZone [TYPE] DateTimeZone [PARAMETER] TimeZone zone [CLASS] DateTimeZone 1 Stub   [TYPE]  TimeZone zone  [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( offset  !=  0 )  {^349^^^^^348^366^[REPLACE] if  ( offset == 0 )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return buf.toString  (    )  ;  ;^350^^^^^348^366^[REPLACE] return DateTimeZone.UTC;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( iFixedOffsetCache != this  )  {^352^^^^^348^366^[REPLACE] if  ( iFixedOffsetCache == null )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>> (  ) ;^352^353^354^^^348^366^[ADD] if  ( iFixedOffsetCache == null )  { iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>> (  ) ; }^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^iFixedOffsetCache ;^353^^^^^348^366^[REPLACE] iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>> (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^iFixedOffsetCache  = null ;^353^^^^^348^366^[REPLACE] iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>> (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^DateTimeZone temp = null  ;^355^^^^^348^366^[REPLACE] DateTimeZone zone;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^Reference<DateTimeZone> ref = iFixedOffsetCache.get ( iID ) ;^356^^^^^348^366^[REPLACE] Reference<DateTimeZone> ref = iFixedOffsetCache.get ( id ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( ref == null )  {^357^^^^^348^366^[REPLACE] if  ( ref != null )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^zone = ref.get (  ) ;return zone;^357^358^359^360^361^348^366^[ADD] if  ( ref != null )  { zone = ref.get (  ) ; if  ( zone != null )  { return zone; }^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone == true )  {^359^^^^^348^366^[REPLACE] if  ( zone != null )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^return zone;^359^360^361^^^348^366^[ADD] if  ( zone != null )  { return zone; }^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return zone;  ;^360^^^^^348^366^[REPLACE] return zone;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^358^^^^^348^366^[ADD] zone = ref.get (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( zone == null )  {^359^^^^^348^366^[REPLACE] if  ( zone != null )  {^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^zone =  null.get (  ) ;^358^^^^^348^366^[REPLACE] zone = ref.get (  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[ADD]^^363^^^^^348^366^[ADD] zone = new FixedDateTimeZone ( id, null, offset, offset ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^iFixedOffsetCache.put ( iID, new SoftReference<DateTimeZone> ( zone )  ) ;^364^^^^^348^366^[REPLACE] iFixedOffsetCache.put ( id, new SoftReference<DateTimeZone> ( zone )  ) ;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^return zone;  ;^365^^^^^348^366^[REPLACE] return zone;^[METHOD] fixedOffsetZone [TYPE] DateTimeZone [PARAMETER] String id int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  [TYPE]  boolean false  true  [TYPE]  Reference ref  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  [TYPE]  Provider cProvider 
[REPLACE]^if  ( provider !=cProvider )  {^415^^^^^414^431^[REPLACE] if  ( provider == null )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^nameProvider = getDefaultNameProvider (  )  ;^416^^^^^414^431^[REPLACE] provider = getDefaultProvider (  ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^416^^^^^414^431^[ADD] provider = getDefaultProvider (  ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^Set<String> ids = cProvider.getAvailableIDs (  ) ;^418^^^^^414^431^[REPLACE] Set<String> ids = provider.getAvailableIDs (  ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( false == false ) {^419^^^^^414^431^[REPLACE] if  ( ids == null || ids.size (  )  == 0 )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^420^421^^^^414^431^[REPLACE] throw new IllegalArgumentException ( "The provider doesn't have any available ids" ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^420^421^^^^414^431^[ADD] throw new IllegalArgumentException ( "The provider doesn't have any available ids" ) ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if   (  id.equals  (  "UTC"  )    )   {  ;^423^^^^^414^431^[REPLACE] if  ( !ids.contains ( "UTC" )  )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new IllegalArgumentException ( "Offset is too large" )  ;^424^^^^^414^431^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^424^^^^^414^431^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( !UTC.forID ( cProvider.getZone ( "UTC" )  )  )  {^426^^^^^414^431^[REPLACE] if  ( !UTC.equals ( provider.getZone ( "UTC" )  )  )  {^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new IllegalArgumentException ( "Offset is too large" )  ;^427^^^^^414^431^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[ADD]^^427^^^^^414^431^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cNameProvider = nameProvider  ;^429^^^^^414^431^[REPLACE] cProvider = provider;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cAvailableIDs =  null;^430^^^^^414^431^[REPLACE] cAvailableIDs = ids;^[METHOD] setProvider0 [TYPE] void [PARAMETER] Provider provider [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  String convId  iID  id  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^Provider provider = this;^443^^^^^442^474^[REPLACE] Provider provider = null;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( providerClass ==id )  {^448^^^^^442^474^[REPLACE] if  ( providerClass != null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^448^449^450^451^452^442^474^[ADD] if  ( providerClass != null )  { try { provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ;Thread thread = Thread.currentThread (  ) ;thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^449^450^451^452^453^442^474^[ADD] try { provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^450^451^452^453^454^442^474^[ADD] provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ; }^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^nameProvider =  (  ( NameProvider )   ( forName ( providerClass ) .newInstance (  )  )  )  ;^450^^^^^442^474^[REPLACE] provider =  ( Provider )  Class.forName ( providerClass ) .newInstance (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^452^453^^^^442^474^[ADD] Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^System.getProperty ( "org.joda.time.DateTimeZone.Provider" ) ;^445^446^447^448^449^442^474^[ADD] try { String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.Provider" ) ; if  ( providerClass != null )  { try {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  (id == null )  {^448^^^^^442^474^[REPLACE] if  ( providerClass != null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread.getThreadGroup (  ) ;^452^^^^^442^474^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^451^452^^^^442^474^[ADD] catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^String providerClass = System .getSecurityManager (  )  ;^446^447^^^^442^474^[REPLACE] String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.Provider" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^452^^^^^442^474^[ADD] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^456^457^458^^^442^474^[ADD] catch  ( SecurityException ex )  {  }^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( provider !=cProvider )  {^460^^^^^442^474^[REPLACE] if  ( provider == null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;Thread thread = Thread.currentThread (  ) ;thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^461^462^463^464^465^442^474^[ADD] try { provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider  = null ;^462^^^^^442^474^[REPLACE] provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider ;^462^^^^^442^474^[REPLACE] provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread.getThreadGroup (  ) ;^464^^^^^442^474^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^462^^^^^442^474^[ADD] provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider  =  provider ;^462^^^^^442^474^[REPLACE] provider = new ZoneInfoProvider ( "org/joda/time/tz/data" ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^464^465^^^^442^474^[ADD] Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  (cProvider != null )  {^469^^^^^442^474^[REPLACE] if  ( provider == null )  {^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^nameProvider = new DefaultNameProvider (  )  ;^470^^^^^442^474^[REPLACE] provider = new UTCProvider (  ) ;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^return cProvider;^473^^^^^442^474^[REPLACE] return provider;^[METHOD] getDefaultProvider [TYPE] Provider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^NameProvider nameProvider = this;^529^^^^^528^549^[REPLACE] NameProvider nameProvider = null;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( providerClass == false )  {^532^^^^^528^549^[REPLACE] if  ( providerClass != null )  {^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;Thread thread = Thread.currentThread (  ) ;thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^533^534^535^536^537^528^549^[ADD] try { nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^534^535^536^537^538^528^549^[ADD] nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ; } catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ; }^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider =  (  ( Provider )   ( forName ( providerClass ) .newInstance (  )  )  )  ;^534^^^^^528^549^[REPLACE] nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^Thread thread = Thread.getThreadGroup (  ) ;^536^^^^^528^549^[REPLACE] Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.NameProvider" ) ;nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;^530^531^532^533^534^528^549^[ADD] try { String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.NameProvider" ) ; if  ( providerClass != null )  { try { nameProvider =  ( NameProvider )  Class.forName ( providerClass ) .newInstance (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( id == null )  {^532^^^^^528^549^[REPLACE] if  ( providerClass != null )  {^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^536^537^^^^528^549^[ADD] Thread thread = Thread.currentThread (  ) ; thread.getThreadGroup (  ) .uncaughtException ( thread, ex ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[ADD]^^535^536^^^^528^549^[ADD] catch  ( Exception ex )  { Thread thread = Thread.currentThread (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^String providerClass = getProperty ( Provider" )  ;^531^^^^^528^549^[REPLACE] String providerClass = System.getProperty ( "org.joda.time.DateTimeZone.NameProvider" ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^if  ( nameProvider != null )  {^544^^^^^528^549^[REPLACE] if  ( nameProvider == null )  {^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^provider = new UTCProvider (  )  ;^545^^^^^528^549^[REPLACE] nameProvider = new DefaultNameProvider (  ) ;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^return cNameProvider;^548^^^^^528^549^[REPLACE] return nameProvider;^[METHOD] getDefaultNameProvider [TYPE] NameProvider [PARAMETER] [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  SecurityException ex  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Exception ex  [TYPE]  Provider cProvider  provider  [TYPE]  Thread thread 
[REPLACE]^NameProvider nameProvider = null  ;^559^^^^^558^598^[REPLACE] Map<String, String> map = cZoneIdConversion;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( null != null )  {^560^^^^^558^598^[REPLACE] if  ( map == null )  {^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^map  = null ;^562^^^^^558^598^[REPLACE] map = new HashMap<String, String> (  ) ;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cZoneIdConversion =  this;^595^^^^^558^598^[REPLACE] cZoneIdConversion = map;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^map  =  map ;^562^^^^^558^598^[REPLACE] map = new HashMap<String, String> (  ) ;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^cZoneIdConversion =  null;^595^^^^^558^598^[REPLACE] cZoneIdConversion = map;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return map.get  (  id  )  ;  ;^597^^^^^558^598^[REPLACE] return map.get ( id ) ;^[METHOD] getConvertedId [TYPE] String [PARAMETER] String id [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return false;^605^^^^^600^618^[REPLACE] return null;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return null;^608^^^^^600^618^[REPLACE] return this;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return null;^611^^^^^600^618^[REPLACE] return this;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return getClass (  )  .getName ( serialVersionUID , false )  ;^614^^^^^600^618^[REPLACE] return getClass (  ) .getName (  ) ;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^NameProvider nameProvider = null  ;^603^^^^^600^618^[REPLACE] Chronology chrono = new BaseChronology (  )  {^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^return - ( int )  offsetFormatter (  ) .withChronology ( chrono ) .toFormatter ( str ) ;^617^^^^^600^618^[REPLACE] return - ( int )  offsetFormatter (  ) .withChronology ( chrono ) .parseMillis ( str ) ;^[METHOD] parseOffset [TYPE] int [PARAMETER] String str [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  Chronology chrono  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  Provider cProvider  provider 
[REPLACE]^NameProvider nameProvider = null  ;^630^^^^^629^661^[REPLACE] StringBuffer buf = new StringBuffer (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (minutes  >  0 )  {^631^^^^^629^661^[REPLACE] if  ( offset >= 0 )  {^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset =  -null;^635^^^^^631^636^[REPLACE] offset = -offset;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf.append ( '-' )  ;^632^^^^^629^661^[REPLACE] buf.append ( '+' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^635^^^^^629^661^[ADD] offset = -offset;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^int hours = minutes  DateTimeConstants.MILLIS_PER_HOUR;^638^^^^^629^661^[REPLACE] int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, hours, 5 ) ;^639^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, hours, 2 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset -=seconds   ( int )  DateTimeConstants.MILLIS_PER_HOUR;^640^^^^^629^661^[REPLACE] offset -= hours *  ( int )  DateTimeConstants.MILLIS_PER_HOUR;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^int minutes = offset  DateTimeConstants.MILLIS_PER_MINUTE;^642^^^^^629^661^[REPLACE] int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf.append ( '-' )  ;^643^^^^^629^661^[REPLACE] buf.append ( ':' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, minutes, 3 ) ;^644^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, minutes, 2 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;^644^645^^^^629^661^[ADD] FormatUtils.appendPaddedInteger ( buf, minutes, 2 ) ; offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^645^^^^^629^661^[ADD] offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (minutes  !=  0 )  {^646^^^^^629^661^[REPLACE] if  ( offset == 0 )  {^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf .StringBuffer (  )  ;^647^^^^^629^661^[REPLACE] return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^650^^^^^629^661^[ADD] int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf.append ( '-' )  ;^651^^^^^629^661^[REPLACE] buf.append ( ':' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^651^652^^^^629^661^[ADD] buf.append ( ':' ) ; FormatUtils.appendPaddedInteger ( buf, seconds, 2 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, seconds, 2 + 1 ) ;^652^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, seconds, 2 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REMOVE]^getConvertedId ( id )  ;^652^^^^^629^661^[REMOVE] ^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^653^^^^^629^661^[ADD] offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( minutes  ||  0 )  {^654^^^^^629^661^[REPLACE] if  ( offset == 0 )  {^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf.StringBuffer (  ) ;^655^^^^^629^661^[REPLACE] return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^buf .toString (  )  ;^658^^^^^629^661^[REPLACE] buf.append ( '.' ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^FormatUtils.appendPaddedInteger ( buf, offset, 3 * 1 ) ;^659^^^^^629^661^[REPLACE] FormatUtils.appendPaddedInteger ( buf, offset, 3 ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[ADD]^^659^660^^^^629^661^[ADD] FormatUtils.appendPaddedInteger ( buf, offset, 3 ) ; return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^return buf .StringBuffer (  )  ;^660^^^^^629^661^[REPLACE] return buf.toString (  ) ;^[METHOD] printOffset [TYPE] String [PARAMETER] int offset [CLASS] DateTimeZone 1 Stub   [TYPE]  StringBuffer buf  [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int hours  minutes  offset  seconds  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offsetLocal = getOffset ( serialVersionUID ) ;^878^^^^^876^897^[REPLACE] int offsetLocal = getOffset ( instantLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offset = getOffset (  ( instantLocal - offsetLocal )  )  ;^880^^^^^876^897^[REPLACE] int offsetAdjusted = getOffset ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( offsetLocal  ==  offsetAdjusted )  {^882^^^^^876^897^[REPLACE] if  ( offsetLocal != offsetAdjusted )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  ( offsetLocal - offsetAdjusted )   <=  0 - 1 )  {^885^^^^^876^897^[REPLACE] if  (  ( offsetLocal - offsetAdjusted )  < 0 )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  ==  nextAdjusted )  {^891^^^^^876^897^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return offsetLocal;  ;^892^^^^^876^897^[REPLACE] return offsetLocal;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return offsetAdjusted;^892^^^^^876^897^[REPLACE] return offsetLocal;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^889^890^^^^876^897^[ADD] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ; long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition (serialVersionUID  offsetAdjusted ) ;^890^^^^^876^897^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition (serialVersionUID  offsetLocal ) ;^889^^^^^876^897^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition (  ( instantLocal - offsetLocal )  )  ;^890^^^^^876^897^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  ( offsetLocal - offsetAdjusted )   >  0 )  {^885^^^^^876^897^[REPLACE] if  (  ( offsetLocal - offsetAdjusted )  < 0 )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (serialVersionUID  ==  nextAdjusted )  {^891^^^^^876^897^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^return offsetLocal;^891^892^893^^^876^897^[ADD] if  ( nextLocal != nextAdjusted )  { return offsetLocal; }^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition ( instantLocal  offsetAdjusted ) ;^889^^^^^876^897^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition ( serialVersionUID  offsetLocal ) ;^889^^^^^876^897^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition ( instantLocal  offsetAdjusted ) ;^890^^^^^876^897^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offsetAdjusted ) ;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return offsetAdjusted;  ;^896^^^^^876^897^[REPLACE] return offsetAdjusted;^[METHOD] getOffsetFromLocal [TYPE] int [PARAMETER] long instantLocal [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  nextAdjusted  nextLocal  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offsetAdjusted  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^int offsetLocalFromOriginal = getOffset ( instantUTC )  ;^960^^^^^958^1001^[REPLACE] int offsetLocal = getOffset ( instantLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^962^^^^^958^1001^[ADD] int offset = getOffset ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( offsetLocal  ==  offset )  {^964^^^^^958^1001^[REPLACE] if  ( offsetLocal != offset )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  offsetLocal < 0 )  {^968^^^^^958^1001^[REPLACE] if  ( strict || offsetLocal < 0 )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (    ( serialVersionUID )  )  {^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^nextLocal = Long.MAX_VALUE;^971^972^973^^^958^1001^[ADD] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  { nextLocal = Long.MAX_VALUE; }^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^972^^^^^958^1001^[ADD] nextLocal = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextAdjusted  ||   ( instantLocal - offset )  )  {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^975^976^977^^^958^1001^[ADD] if  ( nextAdjusted ==  ( instantLocal - offset )  )  { nextAdjusted = Long.MAX_VALUE; }^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^nextLocal = MAX_VALUE  ;^976^^^^^958^1001^[REPLACE] nextAdjusted = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  ==  nextAdjusted )  {^978^^^^^958^1001^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if   (  newZone == this  )   {  ;^980^^^^^958^1001^[REPLACE] if  ( strict )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset =  null;^989^^^^^980^990^[REPLACE] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^982^983^984^^^958^1001^[ADD] throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( serialVersionUID )  )  + "  ( " + getID (  )  + " ) " ) ;^983^984^^^^958^1001^[REPLACE] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^983^984^985^^^958^1001^[ADD] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ; } else {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^getID (  )  ;^984^^^^^958^1001^[REPLACE] "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^984^^^^^958^1001^[ADD] "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^989^^^^^958^1001^[ADD] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^982^983^984^^^958^1001^[REPLACE] throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^989^^^^^980^990^[ADD] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .parseMillis ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^983^984^^^^958^1001^[REPLACE] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^nextAdjusted = MAX_VALUE  ;^972^^^^^958^1001^[REPLACE] nextLocal = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset =  null;^989^^^^^958^1001^[REPLACE] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^970^^^^^958^1001^[ADD] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextAdjusted = nextTransition ( instantLocal  offset ) ;^974^^^^^958^1001^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offset ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (serialVersionUID  ||   ( serialVersionUID - offsetLocal )  )  {^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( serialVersionUID  ) {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^978^979^980^^982^958^1001^[ADD] if  ( nextLocal != nextAdjusted )  {  if  ( strict )  { throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " +^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^980^981^982^983^984^958^1001^[ADD] if  ( strict )  {  throw new IllegalArgumentException ( "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^976^^^^^958^1001^[ADD] nextAdjusted = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( true )  {^968^^^^^958^1001^[REPLACE] if  ( strict || offsetLocal < 0 )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^968^969^970^971^972^958^1001^[ADD] if  ( strict || offsetLocal < 0 )  {  long nextLocal = nextTransition ( instantLocal - offsetLocal ) ; if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  { nextLocal = Long.MAX_VALUE;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextLocal  !=   (originalInstantUTC )  )  {^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (serialVersionUID  !=   ( instantLocal - offset )  )  {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^nextAdjusted = Long.MAX_VALUE;^975^976^977^^^958^1001^[ADD] if  ( nextAdjusted ==  ( instantLocal - offset )  )  { nextAdjusted = Long.MAX_VALUE; }^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition ( instantLocal  offsetLocal ) ;^970^^^^^958^1001^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition (  ( instantLocal - offsetLocal )  )  ;^974^^^^^958^1001^[REPLACE] long nextAdjusted = nextTransition ( instantLocal - offset ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if   (  nextAdjusted ==   (  instantLocal - offset  )    )   {  ;^971^^^^^958^1001^[REPLACE] if  ( nextLocal ==  ( instantLocal - offsetLocal )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( nextAdjusted  ) {^975^^^^^958^1001^[REPLACE] if  ( nextAdjusted ==  ( instantLocal - offset )  )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  ( serialVersionUID  ==  serialVersionUID )  {^978^^^^^958^1001^[REPLACE] if  ( nextLocal != nextAdjusted )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( originalInstantUTC )  )  + "  ( " + getID (  )  + " ) " ) ;^983^984^^^^958^1001^[REPLACE] DateTimeFormat.forPattern ( "yyyy-MM-dd'T'HH:mm:ss.SSS" ) .print ( new Instant ( instantLocal )  )  + "  ( " + getID (  )  + " ) " ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^offset = -offset  ;^989^^^^^958^1001^[REPLACE] offset = offsetLocal;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^long nextLocal = nextTransition (serialVersionUID  offsetLocal ) ;^970^^^^^958^1001^[REPLACE] long nextLocal = nextTransition ( instantLocal - offsetLocal ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^974^^^^^958^1001^[ADD] long nextAdjusted = nextTransition ( instantLocal - offset ) ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[ADD]^^995^^^^^958^1001^[ADD] long instantUTC = instantLocal - offset;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^if  (  ( instantLocal ^ instantUTC )  < 0 ||  ( instantLocal ^ offset )  < 0 )  {^997^^^^^958^1001^[REPLACE] if  (  ( instantLocal ^ instantUTC )  < 0 &&  ( instantLocal ^ offset )  < 0 )  {^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return ;^998^^^^^958^1001^[REPLACE] throw new ArithmeticException  (" ")  ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^throw new IllegalArgumentException ( "The datetime zone must not be null" )  ;^998^^^^^958^1001^[REPLACE] throw new ArithmeticException  (" ")  ;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^return nextLocal;^1000^^^^^958^1001^[REPLACE] return instantUTC;^[METHOD] convertLocalToUTC [TYPE] long [PARAMETER] long instantLocal boolean strict [CLASS] DateTimeZone 1 Stub   [TYPE]  Set cAvailableIDs  ids  [TYPE]  boolean false  strict  true  [TYPE]  NameProvider cNameProvider  nameProvider  [TYPE]  String convId  iID  id  name  nameKey  providerClass  str  [TYPE]  DateTimeFormatter cOffsetFormatter  [TYPE]  Map cZoneIdConversion  iFixedOffsetCache  map  [TYPE]  long instant  instantLocal  instantUTC  nextAdjusted  nextLocal  originalInstantUTC  serialVersionUID  [TYPE]  DateTimeZone UTC  cDefault  dtz  temp  zone  [TYPE]  int offset  offsetLocal  [TYPE]  Provider cProvider  provider 
[REPLACE]^private static final long serialVersionUID = -6471952376487863581;^1222^^^^^^^[REPLACE] private static final long serialVersionUID = -6471952376487863581L;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Stub   [TYPE]  boolean false  true 
