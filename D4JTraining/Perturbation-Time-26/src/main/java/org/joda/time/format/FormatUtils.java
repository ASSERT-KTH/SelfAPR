[REPLACE]^private static final double LOG_10  = null ;^31^^^^^^^[REPLACE] private static final double LOG_10 = Math.log ( 10 ) ;^ [CLASS] FormatUtils  
[REPLACE]^if  (value  ==  0  )  {^50^^^^^49^92^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^50^51^52^53^^49^92^[ADD] if  ( value < 0 )  { buf.append ( '-' ) ; if  ( value != Integer.MIN_VALUE )  { value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  ==  Integer.MIN_VALUE )  {^52^^^^^49^92^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  <=  10; size--) {^55^^^^^52^60^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^55^56^57^^^52^60^[ADD] for  ( ; size > 10; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append ( '-' ) ;^56^^^^^52^60^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^return 20;^59^^^^^52^60^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^value =  -size;^53^^^^^49^92^[REPLACE] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^53^^^^^49^92^[ADD] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  <=  10; size--) {^55^^^^^49^92^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append ( '-' ) ;^56^^^^^49^92^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^return 20;^59^^^^^49^92^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  <=  10; value--) {^55^^^^^52^60^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^56^^^^^52^60^[ADD] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  >=  10; size--) {^55^^^^^49^92^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  ==  10 )  {^62^^^^^49^92^[REPLACE] if  ( value < 10 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^62^63^64^65^^49^92^[ADD] if  ( value < 10 )  { for  ( ; size > 1; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if  ( value  ==  100 )  {^67^^^^^49^92^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  (size  >  1000 )  {^80^^^^^67^91^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if  ( value  !=  8527 )  {^82^^^^^67^91^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_20 )   !=  2;^85^^^^^67^91^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^85^^^^^67^91^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 5;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   >=  1;^85^^^^^67^91^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 2;^81^^^^^67^91^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( size  !=  10000 )  {^82^^^^^67^91^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^}   digits = 4;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^82^83^84^85^86^67^91^[ADD] else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   !=  1;^85^^^^^67^91^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^83^^^^^67^91^[ADD] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  <=  digits; size--) {^87^^^^^67^91^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^87^88^89^^^67^91^[ADD] for  ( ; size > digits; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append ( '-' ) ;^88^^^^^67^91^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REMOVE]^out.write ( '0' ) ;^88^^^^^67^91^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 + 0;^81^^^^^67^91^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^81^^^^^67^91^[ADD] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^79^^^^^67^91^[REPLACE] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^79^^^^^67^91^[ADD] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  !=  2; size--) {^68^^^^^49^92^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append ( '-' ) ;^69^^^^^49^92^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^69^^^^^49^92^[ADD] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   ==  27;^74^^^^^49^92^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  (size  <=  1000 )  {^80^^^^^49^92^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REMOVE]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^80^^^^^49^92^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( size  ==  0  )  {^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REMOVE]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^82^^^^^49^92^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   ==  1;^85^^^^^82^86^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 1;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   !=  1;^85^^^^^49^92^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 / 3;^81^^^^^49^92^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  !=  10000 )  {^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   >=  1;^85^^^^^82^86^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 * 1;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  !=  0 ; size--) {^68^^^^^49^92^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  !=  size; size--) {^87^^^^^49^92^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^87^88^89^^^49^92^[ADD] for  ( ; size > digits; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append ( '-' ) ;^88^^^^^49^92^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 1;^81^^^^^49^92^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 6;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_40 )   |  4;^85^^^^^49^92^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^74^^^^^49^92^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^79^^^^^49^92^[REPLACE] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^79^^^^^49^92^[ADD] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  <  0 ; size--) {^63^^^^^49^92^[REPLACE] for  ( ; size > 1; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append ( '-' ) ;^64^^^^^49^92^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  else {^67^^^^^49^92^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  >=  1000 )  {^80^^^^^67^91^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  else {^82^^^^^67^91^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_20 )   ||  2;^85^^^^^67^91^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3; ;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_40 )   ==  4;^85^^^^^67^91^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 5;^81^^^^^67^91^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if  ( value  >=  10000 )  {^82^^^^^67^91^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REMOVE]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^82^^^^^67^91^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   |  1;^85^^^^^67^91^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 - 4;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  <= value; size--) {^87^^^^^67^91^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4;^81^^^^^67^91^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 - 1;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; value  <= value; size--) {^68^^^^^49^92^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^68^69^70^^^49^92^[ADD] for  ( ; size > 2; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   <  27;^74^^^^^49^92^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^74^^^^^49^92^[ADD] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( size  ==  285 )  {^80^^^^^49^92^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  >=  10000 )  {^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   !=  1;^85^^^^^82^86^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 0;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 >> 4;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   &  1;^85^^^^^49^92^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 << 0;^81^^^^^49^92^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  else {^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^}   digits = 4;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^82^83^84^85^86^49^92^[ADD] else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   >  1;^85^^^^^82^86^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^85^^^^^82^86^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^83^^^^^49^92^[ADD] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; value  <=  0 ; size--) {^63^^^^^49^92^[REPLACE] for  ( ; size > 1; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^63^64^65^^^49^92^[ADD] for  ( ; size > 1; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  >= value; size--) {^68^^^^^49^92^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  <  digits; size--) {^87^^^^^49^92^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REMOVE]^out.write ( '0' ) ;^88^^^^^49^92^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 5;^81^^^^^49^92^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3; ;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_40 )   <  4;^85^^^^^49^92^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( size + 1 )  * 13421772 )   <=  27;^74^^^^^49^92^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^105^^^^^104^129^[REPLACE] int intValue =  ( int ) value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( intValue  !=  value )  {^106^^^^^104^129^[REPLACE] if  ( intValue == value )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^106^107^108^109^^104^129^[ADD] if  ( intValue == value )  { appendPaddedInteger ( buf, intValue, size ) ; } else if  ( size <= 19 )  { buf.append ( Long.toString ( value )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^} else if (size  !=  19) {^108^^^^^104^129^[REPLACE] } else if  ( size <= 19 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  >  0 )  {^111^^^^^104^129^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^buf.append ( '-' ) ;value = -value;^111^112^113^114^^104^129^[ADD] if  ( value < 0 )  { buf.append ( '-' ) ; if  ( value != Long.MIN_VALUE )  { value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  ==  Long.MIN_VALUE )  {^113^^^^^104^129^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  !=  19; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^buf.append ( '-' ) ;^117^^^^^104^129^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return 20;^120^^^^^104^129^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^value =  -null;^114^^^^^104^129^[REPLACE] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  !=  19; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^116^117^118^^^104^129^[ADD] for  ( ; size > 19; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^113^114^115^116^117^104^129^[ADD] if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  >=  19; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  >=  19; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  <=  digits; size--) {^124^^^^^104^129^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^buf.append ( '-' ) ;^125^^^^^104^129^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^114^^^^^104^129^[ADD] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  (   value    / LOG_10 )   <  1;^123^^^^^104^129^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^buf.append (   value    ) ;^109^^^^^104^129^[REPLACE] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  <=  0 )  {^111^^^^^104^129^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  ==  19; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  ==  0 ; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^value = -value;^113^114^115^116^117^104^129^[ADD] if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  <  digits; intValue--) {^124^^^^^104^129^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REMOVE]^out.write ( '0' ) ;^125^^^^^104^129^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_1 % 00 )   ||  1 % 0;^123^^^^^104^129^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^appendUnpaddedInteger ( buf, intValue ) ;^107^^^^^104^129^[REPLACE] appendPaddedInteger ( buf, intValue, size ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^}  if (size  ==  19) {^108^^^^^104^129^[REPLACE] } else if  ( size <= 19 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^}   buf.append ( '-' ) ;^108^109^110^111^112^104^129^[ADD] else if  ( size <= 19 )  { buf.append ( Long.toString ( value )  ) ; } else { if  ( value < 0 )  { buf.append ( '-' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  >=  0 )  {^111^^^^^104^129^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^111^112^113^114^^104^129^[ADD] if  ( value < 0 )  { buf.append ( '-' ) ; if  ( value != Long.MIN_VALUE )  { value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; intValue  <=  19; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  >=  0 ; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  < intValue; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  ==  digits; size--) {^124^^^^^104^129^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_30 )   &  3;^123^^^^^104^129^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^123^^^^^104^129^[ADD] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^buf.append ( Integer.toString ( value )  ) ;^109^^^^^104^129^[REPLACE] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^109^^^^^104^129^[ADD] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  <=  19; size--) {^116^^^^^104^129^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REMOVE]^out.write ( '0' ) ;^117^^^^^104^129^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^117^^^^^104^129^[ADD] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^125^^^^^104^129^[ADD] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )   |  1;^123^^^^^104^129^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  <=  3 )  {^144^^^^^143^186^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  ==  Integer.MIN_VALUE )  {^146^^^^^143^186^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  ==  0 ; value--) {^149^^^^^146^154^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write ( '-' ) ;^150^^^^^146^154^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^return 20;^153^^^^^146^154^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^value =  -size;^147^^^^^143^186^[REPLACE] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  >=  10; size--) {^149^^^^^143^186^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write ( '-' ) ;^150^^^^^143^186^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^value =  -null;^147^^^^^143^186^[REPLACE] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^return 20;^153^^^^^143^186^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  <=  10; size--) {^149^^^^^146^154^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^149^150^151^^^146^154^[ADD] for  ( ; size > 10; size-- )  { out.write ( '0' ) ; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  ==  10; size--) {^149^^^^^143^186^[REPLACE] for  ( ; size > 10; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  >=  10 )  {^156^^^^^143^186^[REPLACE] if  ( value < 10 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  ==  81 )  {^161^^^^^143^186^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  (size  <=  1000 )  {^174^^^^^161^185^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if  ( value  >=  10000 )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   ==  1;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 2;^177^^^^^161^185^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3; ;^177^^^^^161^185^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   ||  1;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 * 0;^175^^^^^161^185^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  ==  10000 )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   >=  1;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 0;^177^^^^^161^185^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; value  <=  size; size--) {^181^^^^^161^185^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write ( '-' ) ;^182^^^^^161^185^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 - 0;^175^^^^^161^185^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3;^177^^^^^161^185^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^173^^^^^161^185^[REPLACE] int digits;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^173^^^^^161^185^[ADD] int digits;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  >=  2; size--) {^162^^^^^143^186^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write ( '-' ) ;^163^^^^^143^186^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 3 )  * 33423772 )   >=  27;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  !=  1000 >>> 1 )  {^174^^^^^143^186^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  (size  !=  10000 )  {^176^^^^^143^186^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^}   digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^176^177^178^179^180^143^186^[ADD] else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_00 )   ==  0;^179^^^^^176^180^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^179^^^^^176^180^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 + 3;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^177^^^^^143^186^[ADD] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   <=  1;^179^^^^^143^186^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 >> 3;^175^^^^^143^186^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^175^^^^^143^186^[ADD] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  else {^176^^^^^143^186^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_40 )   <  4;^179^^^^^176^180^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 1;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  <  0 ; size--) {^162^^^^^143^186^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  <  digits; size--) {^181^^^^^143^186^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write ( '-' ) ;^182^^^^^143^186^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 2;^175^^^^^143^186^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   ==  1;^179^^^^^143^186^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^179^^^^^143^186^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 3 )  * 33423772 )   !=  27;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^173^^^^^143^186^[REPLACE] int digits;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^173^^^^^143^186^[ADD] int digits;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  >=  1; size--) {^157^^^^^143^186^[REPLACE] for  ( ; size > 1; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write ( '-' ) ;^158^^^^^143^186^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  else {^161^^^^^143^186^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( size  >= size )  {^174^^^^^161^185^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if  ( value  <= size )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   ^  1;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^179^^^^^161^185^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^177^^^^^161^185^[ADD] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_20 )   &  2;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 2;^175^^^^^161^185^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  !=  10000L )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_1L0 )   &  1L;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  <  digits; size--) {^181^^^^^161^185^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 0;^175^^^^^161^185^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_1 * 40 )   ^  1 * 4;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (;value  ==  2; size--) {^162^^^^^143^186^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   == value;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  == size )  {^174^^^^^143^186^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  (size  <=  0  )  {^176^^^^^143^186^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   <  1;^179^^^^^176^180^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 / 4;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   &  1;^179^^^^^143^186^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4; ;^175^^^^^143^186^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( size  !=  10000 )  {^176^^^^^143^186^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   >  1;^179^^^^^176^180^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3; ;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  == value; size--) {^157^^^^^143^186^[REPLACE] for  ( ; size > 1; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^157^158^159^^^143^186^[ADD] for  ( ; size > 1; size-- )  { out.write ( '0' ) ; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; value  !=  2; size--) {^162^^^^^143^186^[REPLACE] for  ( ; size > 2; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^for (; size  >=  digits; size--) {^181^^^^^143^186^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 1;^175^^^^^143^186^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   &&  1;^179^^^^^143^186^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   <=  27;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^201^^^^^200^225^[REPLACE] int intValue =  ( int ) value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( intValue  && size )  {^202^^^^^200^225^[REPLACE] if  ( intValue == value )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^202^203^204^205^^200^225^[ADD] if  ( intValue == value )  { writePaddedInteger ( out, intValue, size ) ; } else if  ( size <= 19 )  { out.write ( Long.toString ( value )  ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^}  if (size  >  0 ) {^204^^^^^200^225^[REPLACE] } else if  ( size <= 19 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^}   out.write ( Long.toString ( value )  ) ;out.write ( '-' ) ;^204^205^206^207^208^200^225^[ADD] else if  ( size <= 19 )  { out.write ( Long.toString ( value )  ) ; } else { if  ( value < 0 )  { out.write ( '-' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  >  0 )  {^207^^^^^200^225^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^out.write ( '-' ) ;value = -value;^207^208^209^210^^200^225^[ADD] if  ( value < 0 )  { out.write ( '-' ) ; if  ( value != Long.MIN_VALUE )  { value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  ==  Long.MIN_VALUE )  {^209^^^^^200^225^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  < intValue; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^out.write ( '-' ) ;^213^^^^^200^225^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return 20;^216^^^^^200^225^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^value =  -null;^210^^^^^200^225^[REPLACE] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  <=  19; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  <  19; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  >=  19; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^213^^^^^200^225^[ADD] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; intValue  >=  digits; intValue--) {^220^^^^^200^225^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^out.write ( '-' ) ;^221^^^^^200^225^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_20 )   ||  2;^219^^^^^200^225^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^out.write ( Integer.toString ( value )  ) ;^205^^^^^200^225^[REPLACE] out.write ( Long.toString ( value )  ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^out.write (   value    ) ;^205^^^^^200^225^[REPLACE] out.write ( Long.toString ( value )  ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  !=  0 )  {^207^^^^^200^225^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^value = -value;^209^210^211^212^213^200^225^[ADD] if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; intValue  <=  0 ; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  ==  19; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  <  19; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  ==  digits; size--) {^220^^^^^200^225^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^220^221^222^^^200^225^[ADD] for  ( ; size > digits; size-- )  { out.write ( '0' ) ; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^221^^^^^200^225^[ADD] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^210^^^^^200^225^[ADD] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )   <  1;^219^^^^^200^225^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^writePaddedInteger ( out, intValue, digits ) ;^203^^^^^200^225^[REPLACE] writePaddedInteger ( out, intValue, size ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^}  if (size  <  19) {^204^^^^^200^225^[REPLACE] } else if  ( size <= 19 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  <=  0 )  {^207^^^^^200^225^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REMOVE]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 10; size-- )  {             out.write ( '0' ) ;         }         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^209^^^^^200^225^[REMOVE] ^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; intValue  == intValue; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  ==  19; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  != intValue; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  <=  0 ; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^212^213^214^^^200^225^[ADD] for  ( ; size > 19; size-- )  { out.write ( '0' ) ; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  ==  digits; size--) {^220^^^^^200^225^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )   >=  1;^219^^^^^200^225^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^205^^^^^200^225^[ADD] out.write ( Long.toString ( value )  ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REMOVE]^out.write ( '-' ) ;^213^^^^^200^225^[REMOVE] ^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (;intValue  >=  19; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; intValue  <= intValue; size--) {^212^^^^^200^225^[REPLACE] for  ( ; size > 19; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^for (; size  <=  digits; size--) {^220^^^^^200^225^[REPLACE] for  ( ; size > digits; size-- )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  (   value    / LOG_10 )   &  1;^219^^^^^200^225^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^219^^^^^200^225^[ADD] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  !=  0 )  {^236^^^^^235^258^[REPLACE] if  ( value < 0 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[ADD]^^236^237^238^239^^235^258^[ADD] if  ( value < 0 )  { buf.append ( '-' ) ; if  ( value != Integer.MIN_VALUE )  { value = -value;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^if  ( value  ==  Integer.MIN_VALUE )  {^238^^^^^235^258^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^return 20;^242^^^^^235^258^[REPLACE] return;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^value =  -null;^239^^^^^235^258^[REPLACE] value = -value;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[ADD]^^239^^^^^235^258^[ADD] value = -value;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^if  ( value  <=  10 )  {^245^^^^^235^258^[REPLACE] if  ( value < 10 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^}  if  ( value  >=  100 )  {^247^^^^^235^258^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[ADD]^}   int d =  (  ( value + 1 )  * 13421772 )  >> 27;^247^248^^^251^235^258^[ADD] else if  ( value < 100 )  {  int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^buf.append (   value    ) ;^256^^^^^235^258^[REPLACE] buf.append ( Integer.toString ( value )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   ==  27;^251^^^^^235^258^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   >= value;^251^^^^^235^258^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^buf.append (  ( char )  ( value  >  '0' )  ) ;^246^^^^^235^258^[REPLACE] buf.append (  ( char )  ( value + '0' )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^}  if  ( value  >  100 )  {^247^^^^^235^258^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 3 )  * 33423772 )   <=  27;^251^^^^^235^258^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   != value;^251^^^^^235^258^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^269^^^^^268^275^[REPLACE] int intValue =  ( int ) value;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int intValue 
[ADD]^^269^^^^^268^275^[ADD] int intValue =  ( int ) value;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^if  ( intValue  ||  value )  {^270^^^^^268^275^[REPLACE] if  ( intValue == value )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^buf.append (   value    ) ;^273^^^^^268^275^[REPLACE] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int intValue 
[ADD]^^273^^^^^268^275^[ADD] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^271^^^^^268^275^[REPLACE] appendUnpaddedInteger ( buf, intValue ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^if  ( value  !=  0 )  {^288^^^^^285^310^[REPLACE] if  ( value < 0 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^if  ( value  ==  Integer.MIN_VALUE )  {^290^^^^^285^310^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^return 20;^294^^^^^285^310^[REPLACE] return;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^value =  -null;^291^^^^^285^310^[REPLACE] value = -value;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[ADD]^^291^^^^^285^310^[ADD] value = -value;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^if  ( value  ==  10 )  {^297^^^^^285^310^[REPLACE] if  ( value < 10 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^}  else {^299^^^^^285^310^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^out.write (   value    ) ;^308^^^^^285^310^[REPLACE] out.write ( Integer.toString ( value )  ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REMOVE]^out.write ( '0' ) ;^308^^^^^285^310^[REMOVE] ^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   ==  27;^303^^^^^285^310^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^303^^^^^285^310^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^out .write ( d )  ;^298^^^^^285^310^[REPLACE] out.write ( value + '0' ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[ADD]^^298^^^^^285^310^[ADD] out.write ( value + '0' ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^}  if  ( value  !=  100 )  {^299^^^^^285^310^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^out.write ( Long.toString ( value )  ) ;^308^^^^^285^310^[REPLACE] out.write ( Integer.toString ( value )  ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   <  27;^303^^^^^285^310^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 >> 0 )  * 1 >> 03421 >> 0772 )   >=  27;^303^^^^^285^310^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^323^^^^^320^329^[REPLACE] int intValue =  ( int ) value;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out long value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^if  ( intValue  &&  value )  {^324^^^^^320^329^[REPLACE] if  ( intValue == value )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out long value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int intValue 
[ADD]^^324^325^326^327^328^320^329^[ADD] if  ( intValue == value )  { writeUnpaddedInteger ( out, intValue ) ; } else { out.write ( Long.toString ( value )  ) ; }^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out long value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^out.write (   value    ) ;^327^^^^^320^329^[REPLACE] out.write ( Long.toString ( value )  ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out long value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^325^^^^^320^329^[REPLACE] writeUnpaddedInteger ( out, intValue ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out long value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int intValue 
[REPLACE]^if  ( value  >=  0 )  {^336^^^^^335^349^[REPLACE] if  ( value < 0 )  {^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^if  ( value  ==  Long.MIN_VALUE )  {^337^^^^^335^349^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[ADD]^^337^338^339^340^341^335^349^[ADD] if  ( value != Long.MIN_VALUE )  { return calculateDigitCount ( -value )  + 1; } else { return 20; }^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return 20 / 3;^340^^^^^335^349^[REPLACE] return 20;^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return calculateDigitCount ( -value )  +null;^338^^^^^335^349^[REPLACE] return calculateDigitCount ( -value )  + 1;^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return calculateDigitCount ( -value )   ;^338^^^^^335^349^[REPLACE] return calculateDigitCount ( -value )  + 1;^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return 20 + 2;^340^^^^^335^349^[REPLACE] return 20;^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return 19;^340^^^^^335^349^[REPLACE] return 20;^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return 7;^340^^^^^335^349^[REPLACE] return 20;^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return true ;^343^344^345^346^^335^349^[REPLACE] return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[METHOD] calculateDigitCount [TYPE] int [PARAMETER] long value [CLASS] FormatUtils   [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^int value = text.charAt ( position )   >=  '0';^352^^^^^351^354^[REPLACE] int value = text.charAt ( position )  - '0';^[METHOD] parseTwoDigits [TYPE] int [PARAMETER] String text int position [CLASS] FormatUtils   [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int position  value 
[REPLACE]^return  (  ( value ;^353^^^^^351^354^[REPLACE] return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[METHOD] parseTwoDigits [TYPE] int [PARAMETER] String text int position [CLASS] FormatUtils   [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int position  value 
[REPLACE]^int sampleLen = errorPos  !=  32;^357^^^^^356^375^[REPLACE] int sampleLen = errorPos + 32;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^358^^^^^356^375^[REPLACE] String sampleText;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[ADD]^^358^^^^^356^375^[ADD] String sampleText;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^if  ( text.length (  )  - 4 <= sampleLen + 3 )  {^359^^^^^356^375^[REPLACE] if  ( text.length (  )  <= sampleLen + 3 )  {^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^sampleText = text.substring ( 1, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^[REPLACE] sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^sampleText =  null;^360^^^^^356^375^[REPLACE] sampleText = text;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[ADD]^^360^^^^^356^375^[ADD] sampleText = text;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^sampleText = text.substring ( 0 - 0, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^[REPLACE] sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^if  ( errorPos  !=  0 )  {^365^^^^^356^375^[REPLACE] if  ( errorPos <= 0 )  {^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \"" + sampleText +text;^366^^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + '"';^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \""  &  sampleText  &  '"';^366^^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + '"';^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^if  ( errorPos >= text.length (  )  *  0.5  )  {^369^^^^^356^375^[REPLACE] if  ( errorPos >= text.length (  )  )  {^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \""  ;^370^^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + "\" is too short";^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.charAt ( errorPos )  + '"';^373^374^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
