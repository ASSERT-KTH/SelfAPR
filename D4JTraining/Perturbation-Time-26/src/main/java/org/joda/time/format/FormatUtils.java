[REPLACE]^private static  double LOG_9 = Math.log ( 9 ) ;^31^^^^^^^[REPLACE] private static final double LOG_10 = Math.log ( 10 ) ;^ [CLASS] FormatUtils  
[REPLACE]^if  ( value  >= size )  {^50^^^^^49^92^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  ==  Integer.MIN_VALUE )  {^52^^^^^49^92^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^return;  ;^59^^^^^52^60^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^value =  -size;^53^^^^^49^92^[REPLACE] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^53^^^^^49^92^[ADD] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^return;  ;^59^^^^^49^92^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  >=  10 )  {^62^^^^^49^92^[REPLACE] if  ( value < 10 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  ==  100 )  {^67^^^^^49^92^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^}^67^68^69^70^^49^92^[ADD] else if  ( value < 100 )  { for  ( ; size > 2; size-- )  { buf.append ( '0' ) ; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  >  1000 )  {^80^^^^^67^91^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if   (  value < 100  )   {  ;^82^^^^^67^91^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^85^^^^^82^86^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^83^^^^^67^91^[ADD] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 7;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^85^^^^^67^91^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^81^^^^^67^91^[ADD] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  else {^82^^^^^67^91^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^}   digits = 4;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^82^83^84^85^86^67^91^[ADD] else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_1 >>> 30 )   1 >>> 3;^85^^^^^82^86^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4  ;^81^^^^^67^91^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^85^^^^^67^91^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1  ;^79^^^^^67^91^[REPLACE] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^74^^^^^49^92^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( size  >=  1000 )  {^80^^^^^49^92^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  == size )  {^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REMOVE]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^82^^^^^49^92^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^85^^^^^82^86^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^83^^^^^49^92^[ADD] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_1 / 20 )   1 / 2;^85^^^^^49^92^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 / 2;^81^^^^^49^92^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  !=  0 )  {^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3  ;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4  ;^81^^^^^49^92^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^85^^^^^49^92^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( size + 1 )  * 13421772 )   <  27;^74^^^^^49^92^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1  ;^79^^^^^49^92^[REPLACE] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append ( '-' )  ;^64^^^^^49^92^[REPLACE] buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^buf.append (  (  ( char )   ( d + '0' )  )  )  ;^66^^^^^49^92^[REPLACE] buf.append (  ( char )  ( value + '0' )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  (size  ==  100 )  {^67^^^^^49^92^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  <= size )  {^80^^^^^67^91^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^digits = 3;digits = 4;^80^81^82^83^^67^91^[ADD] if  ( value < 1000 )  { digits = 3; } else if  ( value < 10000 )  { digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3  ;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 2;^81^^^^^67^91^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if  (size  >=  10000 )  {^82^^^^^67^91^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 >>> 0;^81^^^^^67^91^[REPLACE] digits = 3;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 - 2;^83^^^^^67^91^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^79^^^^^67^91^[ADD] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^if   (  value < 0  )   {  ;^80^^^^^49^92^[REPLACE] if  ( value < 1000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if  ( value  !=  10000 )  {^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 7;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 + 2;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if   (  value < 100  )   {  ;^82^^^^^49^92^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 * 2;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 0;^83^^^^^49^92^[REPLACE] digits = 4;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( size + 1 )  * 13421772 )   != value;^74^^^^^49^92^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[ADD]^^79^^^^^49^92^[ADD] int digits;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  digits  size  value 
[REPLACE]^int digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1  ;^105^^^^^104^129^[REPLACE] int intValue =  ( int ) value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  (size  &&  value )  {^106^^^^^104^129^[REPLACE] if  ( intValue == value )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REMOVE]^if  ( value < 10 )  {     for  ( ; size > 1; size-- )  {         out.write ( '0' ) ;     }     out.write (  ( value + '0' )  ) ; }else     if  ( value < 100 )  {         for  ( ; size > 2; size-- )  {             out.write ( '0' ) ;         }         int d =  (  ( value + 1 )  * 13421772 )  >> 27;         out.write (  ( d + '0' )  ) ;         out.write (  (  (  ( value -  ( d << 3 )  )  -  ( d << 1 )  )  + '0' )  ) ;     }else {         int digits;         if  ( value < 1000 )  {             digits = 3;         }else             if  ( value < 10000 )  {                 digits = 4;             }else {                 digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;             }                  for  ( ; size > digits; size-- )  {             out.write ( '0' ) ;         }         out.write ( toString ( value )  ) ;     }^106^^^^^104^129^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^}  else {^108^^^^^104^129^[REPLACE] } else if  ( size <= 19 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  !=  0 )  {^111^^^^^108^128^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REMOVE]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 10; size-- )  {             out.write ( '0' ) ;         }         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^111^^^^^108^128^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  ==  Long.MIN_VALUE )  {^113^^^^^108^128^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return;  ;^120^^^^^113^121^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^114^^^^^108^128^[ADD] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return;  ;^120^^^^^108^128^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if   (  value != Integer.MIN_VALUE  )   {  ;^113^^^^^108^128^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^113^114^115^116^117^108^128^[ADD] if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^value =  -null;^114^^^^^108^128^[REPLACE] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^123^^^^^108^128^[ADD] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^out.write ( toString ( value )  )  ;^109^^^^^104^129^[REPLACE] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^toString ( value )  ;^109^^^^^104^129^[REPLACE] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  !=  0 )  {^111^^^^^104^129^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  ==  Long.MIN_VALUE )  {^113^^^^^104^129^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^value =  -null;^114^^^^^104^129^[REPLACE] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return;  ;^120^^^^^104^129^[REPLACE] return;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if   (  value != Integer.MIN_VALUE  )   {  ;^113^^^^^104^129^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REMOVE]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 10; size-- )  {             out.write ( '0' ) ;         }         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^113^^^^^104^129^[REMOVE] ^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^114^^^^^104^129^[ADD] value = -value;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^123^^^^^104^129^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^writeUnpaddedInteger ( out, intValue )  ;^107^^^^^104^129^[REPLACE] appendPaddedInteger ( buf, intValue, size ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  >=  4 )  {^111^^^^^108^128^[REPLACE] if  ( value < 0 )  {^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^123^^^^^108^128^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^109^^^^^104^129^[ADD] buf.append ( Long.toString ( value )  ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^value = -value;^113^114^115^116^117^104^129^[ADD] if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { buf.append ( '0' ) ;^[METHOD] appendPaddedInteger [TYPE] void [PARAMETER] StringBuffer buf long value int size [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if   (  value < 1000  )   {  ;^144^^^^^143^186^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( size  ==  Integer.MIN_VALUE )  {^146^^^^^143^186^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^value = -value;^146^147^148^149^150^143^186^[ADD] if  ( value != Integer.MIN_VALUE )  { value = -value; } else { for  ( ; size > 10; size-- )  { out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^return;  ;^153^^^^^146^154^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^147^^^^^143^186^[ADD] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^return;  ;^153^^^^^143^186^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  (size  ==  Integer.MIN_VALUE )  {^146^^^^^143^186^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^146^147^148^149^150^143^186^[ADD] if  ( value != Integer.MIN_VALUE )  { value = -value; } else { for  ( ; size > 10; size-- )  { out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^value =  -size;^147^^^^^143^186^[REPLACE] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^value =  -null;^147^^^^^143^186^[REPLACE] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  !=  10L )  {^156^^^^^143^186^[REPLACE] if  ( value < 10 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^156^157^158^159^^143^186^[ADD] if  ( value < 10 )  { for  ( ; size > 1; size-- )  { out.write ( '0' ) ; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if   (  size <= 19  )   {  ;^161^^^^^143^186^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^}^161^162^163^164^^143^186^[ADD] else if  ( value < 100 )  { for  ( ; size > 2; size-- )  { out.write ( '0' ) ; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  (size  >=  1000 )  {^174^^^^^161^185^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^digits = 3;digits = 4;^174^175^176^177^^161^185^[ADD] if  ( value < 1000 )  { digits = 3; } else if  ( value < 10000 )  { digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  <=  6874 )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^179^^^^^176^180^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3  ;^177^^^^^161^185^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^177^^^^^161^185^[ADD] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^179^^^^^161^185^[ADD] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 1;^175^^^^^161^185^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  == size )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^}   digits = 4;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^176^177^178^179^180^161^185^[ADD] else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_1L0 )   1L;^179^^^^^176^180^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^175^^^^^161^185^[ADD] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^179^^^^^161^185^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1  ;^173^^^^^161^185^[REPLACE] int digits;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   !=  27;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( size  >=  2 )  {^174^^^^^143^186^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^} else if   (  value < 100  )   {  ;^176^^^^^143^186^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_00 )   0;^179^^^^^176^180^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 - 1;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 2;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_30 )   3;^179^^^^^143^186^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^175^^^^^143^186^[ADD] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  else {^176^^^^^143^186^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3  ;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 >>> 4;^175^^^^^143^186^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^179^^^^^143^186^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( size + 1 )  * 13421772 )   ==  27;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1  ;^173^^^^^143^186^[REPLACE] int digits;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write (  ( d + '0' )  )  ;^158^^^^^143^186^[REPLACE] out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^out.write ( value  '0' ) ;^160^^^^^143^186^[REPLACE] out.write ( value + '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^160^^^^^143^186^[ADD] out.write ( value + '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  (size  >=  0  )  {^161^^^^^143^186^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if   (  value < 0  )   {  ;^174^^^^^161^185^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( size  !=  10000 )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 1;^177^^^^^161^185^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^}  if  ( value  >  10000 )  {^176^^^^^161^185^[REPLACE] } else if  ( value < 10000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^}   digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^176^177^178^179^180^161^185^[ADD] else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3;^177^^^^^161^185^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 2 )  * 23422772 )   >=  27;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^if  ( value  >=  1000 )  {^174^^^^^143^186^[REPLACE] if  ( value < 1000 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[ADD]^^174^175^176^177^^143^186^[ADD] if  ( value < 1000 )  { digits = 3; } else if  ( value < 10000 )  { digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REMOVE]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^176^^^^^143^186^[REMOVE] ^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 % 1;^175^^^^^143^186^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4L;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 3 >> 3;^175^^^^^143^186^[REPLACE] digits = 3;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits = 4 * 3;^177^^^^^143^186^[REPLACE] digits = 4;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^digits =  ( int )  ( Math.log ( value )  / LOG_1L0 )   1L;^179^^^^^143^186^[REPLACE] digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int d =  (  ( value + 3 )  * 33423772 )   >=  27;^168^^^^^143^186^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out int value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  digits  size  value 
[REPLACE]^int digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1  ;^201^^^^^200^225^[REPLACE] int intValue =  ( int ) value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( intValue  &&  value )  {^202^^^^^200^225^[REPLACE] if  ( intValue == value )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^} else if (intValue  <  0 ) {^204^^^^^200^225^[REPLACE] } else if  ( size <= 19 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  >  0 )  {^207^^^^^204^224^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^207^208^209^210^^204^224^[ADD] if  ( value < 0 )  { out.write ( '-' ) ; if  ( value != Long.MIN_VALUE )  { value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if   (  value != Integer.MIN_VALUE  )   {  ;^209^^^^^204^224^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return;  ;^216^^^^^209^217^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^value =  -null;^210^^^^^204^224^[REPLACE] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return;  ;^216^^^^^204^224^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^210^^^^^204^224^[ADD] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^219^^^^^204^224^[ADD] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^out.write ( toString ( value )  )  ;^205^^^^^200^225^[REPLACE] out.write ( Long.toString ( value )  ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^toString ( value )  ;^205^^^^^200^225^[REPLACE] out.write ( Long.toString ( value )  ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  <=  0 )  {^207^^^^^200^225^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  ==  Long.MIN_VALUE )  {^209^^^^^200^225^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^value = -value;^209^210^211^212^213^200^225^[ADD] if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^value =  -null;^210^^^^^200^225^[REPLACE] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^return;  ;^216^^^^^200^225^[REPLACE] return;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^209^210^211^212^213^200^225^[ADD] if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { out.write ( '0' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^210^^^^^200^225^[ADD] value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^^219^^^^^200^225^[ADD] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^writePaddedInteger ( out, size, size ) ;^203^^^^^200^225^[REPLACE] writePaddedInteger ( out, intValue, size ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^}  if (size  >=  19) {^204^^^^^200^225^[REPLACE] } else if  ( size <= 19 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^}   out.write ( Long.toString ( value )  ) ;out.write ( '-' ) ;^204^205^206^207^208^200^225^[ADD] else if  ( size <= 19 )  { out.write ( Long.toString ( value )  ) ; } else { if  ( value < 0 )  { out.write ( '-' ) ;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  <=  0 )  {^207^^^^^204^224^[REPLACE] if  ( value < 0 )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[ADD]^out.write ( '-' ) ;value = -value;^207^208^209^210^^204^224^[ADD] if  ( value < 0 )  { out.write ( '-' ) ; if  ( value != Long.MIN_VALUE )  { value = -value;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  ==  Long.MIN_VALUE )  {^209^^^^^204^224^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )   1;^219^^^^^204^224^[REPLACE] int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if   (  value != Integer.MIN_VALUE  )   {  ;^209^^^^^200^225^[REPLACE] if  ( value != Long.MIN_VALUE )  {^[METHOD] writePaddedInteger [TYPE] void [PARAMETER] Writer out long value int size [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  long value  [TYPE]  int digits  intValue  size 
[REPLACE]^if  ( value  >=  0 )  {^236^^^^^235^258^[REPLACE] if  ( value < 0 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^if  ( value  ==  Integer.MIN_VALUE )  {^238^^^^^235^258^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[ADD]^^238^239^240^241^242^235^258^[ADD] if  ( value != Integer.MIN_VALUE )  { value = -value; } else { buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ; return;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^return;  ;^242^^^^^238^243^[REPLACE] return;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^value =  -null;^239^^^^^235^258^[REPLACE] value = -value;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^return;  ;^242^^^^^235^258^[REPLACE] return;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REMOVE]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 10; size-- )  {             out.write ( '0' ) ;         }         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^238^^^^^235^258^[REMOVE] ^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^if  ( value  <=  4 )  {^245^^^^^235^258^[REPLACE] if  ( value < 10 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^}  else {^247^^^^^235^258^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[ADD]^}   int d =  (  ( value + 1 )  * 13421772 )  >> 27;^247^248^^^251^235^258^[ADD] else if  ( value < 100 )  {  int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^toString ( value )  ;^256^^^^^247^257^[REPLACE] buf.append ( Integer.toString ( value )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[ADD]^^256^^^^^247^257^[ADD] buf.append ( Integer.toString ( value )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^out.write ( toString ( value )  )  ;^256^^^^^247^257^[REPLACE] buf.append ( Integer.toString ( value )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   ==  27;^251^^^^^235^258^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^251^^^^^235^258^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^buf.append (  ( char )  ( value  '0' )  ) ;^246^^^^^235^258^[REPLACE] buf.append (  ( char )  ( value + '0' )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^}  if  ( value  ==  100 )  {^247^^^^^235^258^[REPLACE] } else if  ( value < 100 )  {^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REMOVE]^out.write ( toString ( value )  )  ;^256^^^^^247^257^[REMOVE] ^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[ADD]^^251^252^^^^235^258^[ADD] int d =  (  ( value + 1 )  * 13421772 )  >> 27; buf.append (  ( char )   ( d + '0' )  ) ;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   <  27;^251^^^^^235^258^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] appendUnpaddedInteger [TYPE] void [PARAMETER] StringBuffer buf int value [CLASS] FormatUtils   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int d  value 
[REPLACE]^if  ( value  >=  0L )  {^288^^^^^287^310^[REPLACE] if  ( value < 0 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^if   (  value != Long.MIN_VALUE  )   {  ;^290^^^^^287^310^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[ADD]^^290^291^292^293^294^287^310^[ADD] if  ( value != Integer.MIN_VALUE )  { value = -value; } else { out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; return;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^return;  ;^294^^^^^290^295^[REPLACE] return;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^value =  -null;^291^^^^^287^310^[REPLACE] value = -value;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^return;  ;^294^^^^^287^310^[REPLACE] return;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^if  ( value  ==  Integer.MIN_VALUE )  {^290^^^^^287^310^[REPLACE] if  ( value != Integer.MIN_VALUE )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^if  ( value  ==  10 )  {^297^^^^^287^310^[REPLACE] if  ( value < 10 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[ADD]^out.write ( value + '0' ) ;^297^298^299^^^287^310^[ADD] if  ( value < 10 )  { out.write ( value + '0' ) ; } else if  ( value < 100 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^}  if  ( value  !=  100 >> 1 )  {^299^^^^^287^310^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^toString ( value )  ;^308^^^^^299^309^[REPLACE] out.write ( Integer.toString ( value )  ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^out.write ( toString ( value )  )  ;^308^^^^^299^309^[REPLACE] out.write ( Integer.toString ( value )  ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 / 0 )  * 1 / 03421 / 0772 )   <  27;^303^^^^^287^310^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 3 )  * 33423772 )   <=  27;^303^^^^^287^310^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^out.write ( value  '0' ) ;^298^^^^^287^310^[REPLACE] out.write ( value + '0' ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^} else if  ( value  ==  100 >> 2 )  {^299^^^^^287^310^[REPLACE] } else if  ( value < 100 )  {^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[ADD]^^308^^^^^299^309^[ADD] out.write ( Integer.toString ( value )  ) ;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[ADD]^^303^^^^^287^310^[ADD] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^303^^^^^287^310^[REPLACE] int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[METHOD] writeUnpaddedInteger [TYPE] void [PARAMETER] Writer out int value [CLASS] FormatUtils   [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  Writer out  [TYPE]  int d  value 
[REPLACE]^int sampleLen = errorPos  0;^357^^^^^356^375^[REPLACE] int sampleLen = errorPos + 32;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^int digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1  ;^358^^^^^356^375^[REPLACE] String sampleText;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^if  ( text.charAt (  )  *  0.5  <= sampleLen + 3 )  {^359^^^^^356^375^[REPLACE] if  ( text.length (  )  <= sampleLen + 3 )  {^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^sampleText = text.substring ( 0 - 1, sampleLen ) .concat ( "..." ) ;^362^^^^^359^363^[REPLACE] sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^sampleText =  null;^360^^^^^356^375^[REPLACE] sampleText = text;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^sampleText = text.substring ( 1, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^[REPLACE] sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^if  ( errorPos  ==  0 )  {^365^^^^^356^375^[REPLACE] if  ( errorPos <= 0 )  {^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[ADD]^^365^366^367^^^356^375^[ADD] if  ( errorPos <= 0 )  { return "Invalid format: \"" + sampleText + '"'; }^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \""  text  '"';^366^^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + '"';^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \"" + sampleText + '"';  ;^366^^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + '"';^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^if  ( errorPos >= text.length (  )  %  0.5  )  {^369^^^^^356^375^[REPLACE] if  ( errorPos >= text.length (  )  )  {^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \""  sampleText  "\" is too short";^370^^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + "\" is too short";^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
[REPLACE]^return "Invalid format: \""  sampleText  "\" is malformed at \""  sampleText.charAt ( errorPos )   '"';^373^374^^^^356^375^[REPLACE] return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[METHOD] createErrorMessage [TYPE] String [PARAMETER] String text final int errorPos [CLASS] FormatUtils   [TYPE]  String sampleText  text  [TYPE]  boolean false  true  [TYPE]  double LOG_10  [TYPE]  int errorPos  sampleLen 
