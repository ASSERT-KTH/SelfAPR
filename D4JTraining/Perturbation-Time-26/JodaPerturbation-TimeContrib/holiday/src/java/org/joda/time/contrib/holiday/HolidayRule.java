[REPLACE]^private  long  iFromYear;^33^^^^^^^[REPLACE] private int iFromYear;^ [CLASS] HolidayRule  
[REPLACE]^private  short  iMonthOfYear;^37^^^^^^^[REPLACE] private int iMonthOfYear;^ [CLASS] HolidayRule  
[REPLACE]^private  short  iWeekOfMonth;^43^^^^^^^[REPLACE] private int iWeekOfMonth;^ [CLASS] HolidayRule  
[REPLACE]^private  long  iRelativeDays;^45^^^^^^^[REPLACE] private int iRelativeDays;^ [CLASS] HolidayRule  
[REPLACE]^private static final int WEEKEND_ADJUST_NEXT_WEEKDAY = 0 >> 1;^50^^^^^^^[REPLACE] private static final int WEEKEND_ADJUST_NEXT_WEEKDAY = 0;^ [CLASS] HolidayRule  
[REPLACE]^private static final  long  WEEKEND_ADJUST_PREVIOUS_WEEKDAY = 1;^52^^^^^^^[REPLACE] private static final int WEEKEND_ADJUST_PREVIOUS_WEEKDAY = 1;^ [CLASS] HolidayRule  
[REPLACE]^private static final int WEEKEND_ADJUST_NEAREST_WEEKDAY  = null ;^54^^^^^^^[REPLACE] private static final int WEEKEND_ADJUST_NEAREST_WEEKDAY = 2;^ [CLASS] HolidayRule  
[REPLACE]^mdt.setDate ( iWeekendAdjust, 1 * 2, 1 * 2 ) ;^183^^^^^182^203^[REPLACE] mdt.setDate ( year, 1, 1 ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  (iRelativeDays  ==  Integer.MIN_VALUE )  {^184^^^^^182^203^[REPLACE] if  ( iMonthOfYear != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[ADD]^^184^185^186^^^182^203^[ADD] if  ( iMonthOfYear != Integer.MIN_VALUE )  { mdt.setMonthOfYear ( iMonthOfYear ) ; }^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.setDayOfWeek ( iMonthOfYear ) ;^185^^^^^182^203^[REPLACE] mdt.setMonthOfYear ( iMonthOfYear ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( year  ==  Integer.MIN_VALUE )  {^187^^^^^182^203^[REPLACE] if  ( iDayOfMonth != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[ADD]^mdt.setDayOfMonth ( iDayOfMonth ) ;^187^188^189^^^182^203^[ADD] if  ( iDayOfMonth != Integer.MIN_VALUE )  { mdt.setDayOfMonth ( iDayOfMonth ) ; }^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.setDayOfWeek ( iDayOfMonth ) ;^188^^^^^182^203^[REPLACE] mdt.setDayOfMonth ( iDayOfMonth ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[ADD]^^188^^^^^182^203^[ADD] mdt.setDayOfMonth ( iDayOfMonth ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( iDayOfWeek  ==  Integer.MIN_VALUE )  {^190^^^^^182^203^[REPLACE] if  ( iDayOfWeek != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( iWeekOfMonth )  !=  ( MIN_VALUE )  )  {     calculateWeekOfMonth ( mdt, iMonthOfYear, iWeekOfMonth ) ; }^190^^^^^182^203^[REMOVE] ^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.setDayOfMonth ( iDayOfWeek ) ;^191^^^^^182^203^[REPLACE] mdt.setDayOfWeek ( iDayOfWeek ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if   (  iWeekendAdjust != Integer.MIN_VALUE  )   {  ;^193^^^^^182^203^[REPLACE] if  ( iWeekOfMonth != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( iDayOfWeek )  !=  ( MIN_VALUE )  )  {     mdt.setDayOfWeek ( iDayOfWeek ) ; }^193^^^^^182^203^[REMOVE] ^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^( mdt.getMonthOfYear (  )  )  ;^194^^^^^182^203^[REPLACE] calculateWeekOfMonth ( mdt, iMonthOfYear, iWeekOfMonth ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  (year  ==  Integer.MIN_VALUE )  {^196^^^^^182^203^[REPLACE] if  ( iRelativeDays != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt .addWeeks ( WEEKEND_ADJUST_PREVIOUS_WEEKDAY )  ;^197^^^^^182^203^[REPLACE] mdt.addDays ( iRelativeDays ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( iWeekendAdjust  ==  Integer.MIN_VALUE )  {^199^^^^^182^203^[REPLACE] if  ( iWeekendAdjust != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^( mdt.getMonthOfYear (  )  )  ;^200^^^^^182^203^[REPLACE] calculateWeekendAdjust ( mdt, iWeekendAdjust ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return mdt;  ;^202^^^^^182^203^[REPLACE] return mdt;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( mdt.getDayOfWeek (  )   ||  DateTimeConstants.SATURDAY )  {^236^^^^^234^257^[REPLACE] if  ( mdt.getDayOfWeek (  )  == DateTimeConstants.SATURDAY )  {^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( mdt.getDayOfWeek (  )   ) {^246^^^^^234^257^[REPLACE] } else if  ( mdt.getDayOfWeek (  )  == DateTimeConstants.SUNDAY )  {^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[ADD]^}   mdt.addDays ( 1 ) ;^246^247^248^249^250^234^257^[ADD] else if  ( mdt.getDayOfWeek (  )  == DateTimeConstants.SUNDAY )  { switch  ( adjust )  { case WEEKEND_ADJUST_NEXT_WEEKDAY: case WEEKEND_ADJUST_NEAREST_WEEKDAY: mdt.addDays ( 1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays ( 3 ) ;^250^^^^^234^257^[REPLACE] mdt.addDays ( 1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays ( -0 ) ;^253^^^^^234^257^[REPLACE] mdt.addDays ( -2 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addWeeks ( 2 - 2 ) ;^239^^^^^234^257^[REPLACE] mdt.addDays ( 2 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REMOVE]^( mdt.getMonthOfYear (  )  )  ;^239^^^^^234^257^[REMOVE] ^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays ( -1 * 0 ) ;^243^^^^^234^257^[REPLACE] mdt.addDays ( -1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^if   (  mdt.getDayOfWeek  (    )   == DateTimeConstants.SATURDAY  )   {  ;^246^^^^^234^257^[REPLACE] } else if  ( mdt.getDayOfWeek (  )  == DateTimeConstants.SUNDAY )  {^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays ( 1 * 4 ) ;^250^^^^^234^257^[REPLACE] mdt.addDays ( 1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays (  ( -1 )  )  ;^253^^^^^234^257^[REPLACE] mdt.addDays ( -2 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[ADD]^^253^^^^^234^257^[ADD] mdt.addDays ( -2 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
