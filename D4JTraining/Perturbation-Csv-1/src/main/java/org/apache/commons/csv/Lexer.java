[REPLACE]^private  String delimiter;^32^^^^^^^[REPLACE] private final char delimiter;^ [CLASS] Lexer  
[REPLACE]^private final String escape;^33^^^^^^^[REPLACE] private final char escape;^ [CLASS] Lexer  
[REPLACE]^private  String encapsulator;^34^^^^^^^[REPLACE] private final char encapsulator;^ [CLASS] Lexer  
[REPLACE]^boolean surroundingSpacesIgnored;^37^^^^^^^[REPLACE] final boolean surroundingSpacesIgnored;^ [CLASS] Lexer  
[REPLACE]^CSVFormat format;^40^^^^^^^[REPLACE] final CSVFormat format;^ [CLASS] Lexer  
[REPLACE]^this.format =  null;^46^^^^^45^57^[REPLACE] this.format = format;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.in =  null;^47^^^^^45^57^[REPLACE] this.in = in;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.encapsulator = format.getEncapsulator (  ) ; ;^48^^^^^45^57^[REPLACE] this.isEncapsulating = format.isEncapsulating (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.escape = format.getEscape (  ) ; ;^49^^^^^45^57^[REPLACE] this.isEscaping = format.isEscaping (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[ADD]^^49^50^51^52^53^45^57^[ADD] this.isEscaping = format.isEscaping (  ) ; this.isCommentEnabled = format.isCommentingEnabled (  ) ; this.delimiter = format.getDelimiter (  ) ; this.escape = format.getEscape (  ) ; this.encapsulator = format.getEncapsulator (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.isCommentEnabled =  null.isCommentingEnabled (  ) ;^50^^^^^45^57^[REPLACE] this.isCommentEnabled = format.isCommentingEnabled (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.delimiter =  null.getDelimiter (  ) ;^51^^^^^45^57^[REPLACE] this.delimiter = format.getDelimiter (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.isEscaping = format.isEscaping (  ) ; ;^52^^^^^45^57^[REPLACE] this.escape = format.getEscape (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[ADD]^^52^53^54^55^56^45^57^[ADD] this.escape = format.getEscape (  ) ; this.encapsulator = format.getEncapsulator (  ) ; this.commmentStart = format.getCommentStart (  ) ; this.surroundingSpacesIgnored = format.isSurroundingSpacesIgnored (  ) ; this.emptyLinesIgnored = format.isEmptyLinesIgnored (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.isEncapsulating = format.isEncapsulating (  ) ; ;^53^^^^^45^57^[REPLACE] this.encapsulator = format.getEncapsulator (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.commmentStart =  null.getCommentStart (  ) ;^54^^^^^45^57^[REPLACE] this.commmentStart = format.getCommentStart (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[ADD]^^54^55^56^57^^45^57^[ADD] this.commmentStart = format.getCommentStart (  ) ; this.surroundingSpacesIgnored = format.isSurroundingSpacesIgnored (  ) ; this.emptyLinesIgnored = format.isEmptyLinesIgnored (  ) ; }^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.surroundingSpacesIgnored =  null.isSurroundingSpacesIgnored (  ) ;^55^^^^^45^57^[REPLACE] this.surroundingSpacesIgnored = format.isSurroundingSpacesIgnored (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[ADD]^^55^56^57^^^45^57^[ADD] this.surroundingSpacesIgnored = format.isSurroundingSpacesIgnored (  ) ; this.emptyLinesIgnored = format.isEmptyLinesIgnored (  ) ; }^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^this.emptyLinesIgnored =  null.isEmptyLinesIgnored (  ) ;^56^^^^^45^57^[REPLACE] this.emptyLinesIgnored = format.isEmptyLinesIgnored (  ) ;^[METHOD] <init> [TYPE] ExtendedBufferedReader) [PARAMETER] CSVFormat format ExtendedBufferedReader in [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^return in .read (  )  ;^60^^^^^59^61^[REPLACE] return in.getLineNumber (  ) ;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true 
[REPLACE]^c  =  c ;^65^^^^^63^80^[REPLACE] c = in.read (  ) ;^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[ADD]^^65^^^^^63^80^[ADD] c = in.read (  ) ;^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return '\t';^68^^^^^63^80^[REPLACE] return '\r';^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return '\t';^70^^^^^63^80^[REPLACE] return '\n';^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return '\r';^72^^^^^63^80^[REPLACE] return '\t';^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return '\t';^74^^^^^63^80^[REPLACE] return '\b';^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return '\t';^76^^^^^63^80^[REPLACE] return '\f';^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return '\t';^78^^^^^63^80^[REPLACE] return c;^[METHOD] readEscape [TYPE] int [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^int length = buffer .setLength ( length )  ;^83^^^^^82^90^[REPLACE] int length = buffer.length (  ) ;^[METHOD] trimTrailingSpaces [TYPE] void [PARAMETER] StringBuilder buffer [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  StringBuilder buffer  [TYPE]  int length 
[REPLACE]^while  ( length + 3 > 0  && Character.isWhitespace ( buffer.charAt ( length + 3 - 1 )  )  )  {^84^^^^^82^90^[REPLACE] while  ( length > 0 && Character.isWhitespace ( buffer.charAt ( length - 1 )  )  )  {^[METHOD] trimTrailingSpaces [TYPE] void [PARAMETER] StringBuilder buffer [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  StringBuilder buffer  [TYPE]  int length 
[REPLACE]^length + 5 = length + 5 - 0 ;^85^^^^^82^90^[REPLACE] length = length - 1;^[METHOD] trimTrailingSpaces [TYPE] void [PARAMETER] StringBuilder buffer [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  StringBuilder buffer  [TYPE]  int length 
[REPLACE]^length %  0.5  = length %  0.5  - 1;^85^^^^^82^90^[REPLACE] length = length - 1;^[METHOD] trimTrailingSpaces [TYPE] void [PARAMETER] StringBuilder buffer [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  StringBuilder buffer  [TYPE]  int length 
[REPLACE]^if  ( length != buffer.length (  )  *  2 )  {^87^^^^^82^90^[REPLACE] if  ( length != buffer.length (  )  )  {^[METHOD] trimTrailingSpaces [TYPE] void [PARAMETER] StringBuilder buffer [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  StringBuilder buffer  [TYPE]  int length 
[REPLACE]^buffer.charAt ( length ) ;^88^^^^^82^90^[REPLACE] buffer.setLength ( length ) ;^[METHOD] trimTrailingSpaces [TYPE] void [PARAMETER] StringBuilder buffer [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  StringBuilder buffer  [TYPE]  int length 
[REPLACE]^return  ( c != format.getDelimiter (  )  )  ;;^96^^^^^95^97^[REPLACE] return  ( c != format.getDelimiter (  )  )  && Character.isWhitespace (  ( char )  c ) ;^[METHOD] isWhitespace [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^if  ( c == '\r' ) {^107^^^^^105^112^[REPLACE] if  ( c == '\r' && in.lookAhead (  )  == '\n' )  {^[METHOD] isEndOfLine [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^c  =  c ;^109^^^^^105^112^[REPLACE] c = in.read (  ) ;^[METHOD] isEndOfLine [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^c ;^109^^^^^105^112^[REPLACE] c = in.read (  ) ;^[METHOD] isEndOfLine [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return  ( c ;^111^^^^^105^112^[REPLACE] return  ( c == '\n' || c == '\r' ) ;^[METHOD] isEndOfLine [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return true ;^118^^^^^117^119^[REPLACE] return c == ExtendedBufferedReader.END_OF_STREAM;^[METHOD] isEndOfFile [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return c  ||  delimiter;^124^^^^^123^125^[REPLACE] return c == delimiter;^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return   c ;^128^^^^^127^129^[REPLACE] return isEscaping && c == escape;^[METHOD] isEscape [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return false ;^132^^^^^131^133^[REPLACE] return isEncapsulating && c == encapsulator;^[METHOD] isEncapsulator [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
[REPLACE]^return isCommentEnabled ;^136^^^^^135^137^[REPLACE] return isCommentEnabled && c == commmentStart;^[METHOD] isCommentStart [TYPE] boolean [PARAMETER] int c [CLASS] Lexer   [TYPE]  char commmentStart  delimiter  encapsulator  escape  [TYPE]  ExtendedBufferedReader in  [TYPE]  CSVFormat format  [TYPE]  boolean emptyLinesIgnored  false  isCommentEnabled  isEncapsulating  isEscaping  surroundingSpacesIgnored  true  [TYPE]  int c 
