[REPLACE]^private static final long serialVersionUID ;^34^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] ViewMatcher Empty Single Multi  
[REPLACE]^final static Empty instance ;^36^^^^^^^[REPLACE] final static Empty instance = new Empty (  ) ;^ [CLASS] ViewMatcher Empty Single Multi  
[REPLACE]^private  final  short  serialVersionUID = 1;^46^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] ViewMatcher Empty Single Multi  
[REPLACE]^private static final long serialVersionUID  = null ;^59^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] ViewMatcher Empty Single Multi  
[REPLACE]^private  Class<?>[] _views;^61^^^^^^^[REPLACE] private final Class<?>[] _views;^ [CLASS] ViewMatcher Empty Single Multi  
[REPLACE]^public Multi ( Class<?>[] v )  { _views = v; }  ;^49^^^^^^^[REPLACE] public Single ( Class<?> v )  { _view = v; }^[METHOD] <init> [TYPE] Class) [PARAMETER] Class<?> v [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  v  [TYPE]  Class[] _views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public Multi ( Class<?>[] v )  { _views =  null; }^63^^^^^^^[REPLACE] public Multi ( Class<?>[] v )  { _views = v; }^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class<?>[] v [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  v  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( views != null )  {^13^^^^^11^23^[REPLACE] if  ( views == null )  {^[METHOD] construct [TYPE] ViewMatcher [PARAMETER] Class<?>[] views [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^14^^^^^11^23^[REPLACE] return Empty.instance;^[METHOD] construct [TYPE] ViewMatcher [PARAMETER] Class<?>[] views [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^18^^^^^11^23^[REPLACE] return Empty.instance;^[METHOD] construct [TYPE] ViewMatcher [PARAMETER] Class<?>[] views [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new Single ( views[1] ) ;^20^^^^^11^23^[REPLACE] return new Single ( views[0] ) ;^[METHOD] construct [TYPE] ViewMatcher [PARAMETER] Class<?>[] views [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new Single ( null[0] )  ;^22^^^^^11^23^[REPLACE] return new Multi ( views ) ;^[METHOD] construct [TYPE] ViewMatcher [PARAMETER] Class<?>[] views [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^39^^^^^38^40^[REPLACE] return false;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  (true )  ;^52^^^^^51^53^[REPLACE] return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( activeView == view )  ) {^70^^^^^66^75^[REPLACE] if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^return false;^71^^^^^66^75^[REPLACE] return true;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = _views.length + 4; i < len; ++i )  {^68^^^^^66^75^[REPLACE] for  ( int i = 0, len = _views.length; i < len; ++i )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[ADD]^^68^69^70^71^72^66^75^[ADD] for  ( int i = 0, len = _views.length; i < len; ++i )  { Class<?> view = _views[i]; if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  { return true; }^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^if  (  ( activeView == true )  && view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^[REPLACE] if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = _views.length; i < len; ++i )  { Class<?> view = _views[i];^69^^^^^66^75^[REPLACE] Class<?> view = _views[i];^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[ADD]^^69^^^^^66^75^[ADD] Class<?> view = _views[i];^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 , len = _views.length; i < len; ++i )  {^68^^^^^66^75^[REPLACE] for  ( int i = 0, len = _views.length; i < len; ++i )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = _views.length; i < len; ++i )  { Class<?> view = _views[i];^68^^^^^66^75^[REPLACE] for  ( int i = 0, len = _views.length; i < len; ++i )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^return true;^74^^^^^66^75^[REPLACE] return false;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] ViewMatcher Empty Single Multi   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^private static  long serialVersionUID = 1L;^34^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Empty   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^final static Empty instance  = null ;^36^^^^^^^[REPLACE] final static Empty instance = new Empty (  ) ;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Empty   [TYPE]  Empty instance  [TYPE]  Class _view  activeView  v  view  [TYPE]  Class[] _views  v  views  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^return true;^39^^^^^38^40^[REPLACE] return false;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Empty   [TYPE]  Empty instance  [TYPE]  Class activeView  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^private static  long serialVersionUID = 1L;^46^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Single   [TYPE]  Empty instance  [TYPE]  Class activeView  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public Single ( Class<?> v )  { _view = v; } @Override ;^49^^^^^^^[REPLACE] public Single ( Class<?> v )  { _view = v; }^[METHOD] <init> [TYPE] Class) [PARAMETER] Class<?> v [CLASS] Single   [TYPE]  Class _view  v  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false ;^52^^^^^51^53^[REPLACE] return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Single   [TYPE]  Class _view  activeView  v  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^private static final long serialVersionUID  = null ;^59^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class _view  activeView  v  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^public Multi ( Class<?>[] v )  { _views =  this; }^63^^^^^^^[REPLACE] public Multi ( Class<?>[] v )  { _views = v; }^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class<?>[] v [CLASS] Multi   [TYPE]  long serialVersionUID  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true 
[REPLACE]^if  (  view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^[REPLACE] if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[ADD]^^70^71^72^^^66^75^[ADD] if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  { return true; }^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^return false;^71^^^^^66^75^[REPLACE] return true;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = _views.length - 3; i < len; ++i )  {^68^^^^^66^75^[REPLACE] for  ( int i = 0, len = _views.length; i < len; ++i )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^if  (  ( activeView == view )  && view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^[REPLACE] if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = _views.length; i < len; ++i )  { Class<?> view = _views[i];^69^^^^^66^75^[REPLACE] Class<?> view = _views[i];^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[ADD]^^69^^^^^66^75^[ADD] Class<?> view = _views[i];^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 , len = _views.length; i < len; ++i )  {^68^^^^^66^75^[REPLACE] for  ( int i = 0, len = _views.length; i < len; ++i )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = _views.length; i < len; ++i )  { Class<?> view = _views[i];^68^^^^^66^75^[REPLACE] for  ( int i = 0, len = _views.length; i < len; ++i )  {^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^return true;^74^^^^^66^75^[REPLACE] return false;^[METHOD] isVisibleForView [TYPE] boolean [PARAMETER] Class<?> activeView [CLASS] Multi   [TYPE]  Class activeView  view  [TYPE]  Class[] _views  v  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
