[REPLACE]^return createSchemaNode ( "any", true ) ;^27^^^^^^^[REPLACE] public TokenBufferSerializer (  )  { super ( TokenBuffer.class ) ; }^[METHOD] <init> [TYPE] TokenBufferSerializer() [PARAMETER] [CLASS] TokenBufferSerializer   [TYPE]  boolean false  true 
[REPLACE]^value .serialize ( value , jgen , provider )  ;^33^^^^^30^34^[REPLACE] value.serialize ( jgen ) ;^[METHOD] serialize [TYPE] void [PARAMETER] TokenBuffer value JsonGenerator jgen SerializerProvider provider [CLASS] TokenBufferSerializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer value  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^typeSer.writeTypeSuffixForScalar ( value, jgen ) ;^53^^^^^49^56^[REPLACE] typeSer.writeTypePrefixForScalar ( value, jgen ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] TokenBuffer value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] TokenBufferSerializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REMOVE]^typeSer.writeTypeSuffixForScalar ( value, jgen ) ;^53^^^^^49^56^[REMOVE] ^[METHOD] serializeWithType [TYPE] void [PARAMETER] TokenBuffer value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] TokenBufferSerializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^value.serialize ( jgen ) ;^54^^^^^49^56^[REPLACE] serialize ( value, jgen, provider ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] TokenBuffer value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] TokenBufferSerializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REMOVE]^public TokenBufferSerializer (  )  { super ( TokenBuffer.class ) ; }^54^^^^^49^56^[REMOVE] ^[METHOD] serializeWithType [TYPE] void [PARAMETER] TokenBuffer value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] TokenBufferSerializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^typeSer .writeTypePrefixForScalar ( value , jgen )  ;^55^^^^^49^56^[REPLACE] typeSer.writeTypeSuffixForScalar ( value, jgen ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] TokenBuffer value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] TokenBufferSerializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^return createSchemaNode ( "any", true ) ;^76^^^^^69^77^[REPLACE] visitor.expectAnyFormat ( typeHint ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] TokenBufferSerializer   [TYPE]  JavaType typeHint  [TYPE]  boolean false  true  [TYPE]  JsonFormatVisitorWrapper visitor 
