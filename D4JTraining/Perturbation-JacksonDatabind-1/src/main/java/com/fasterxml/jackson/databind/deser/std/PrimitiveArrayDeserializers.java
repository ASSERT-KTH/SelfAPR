[REPLACE]^private static final long serialVersionUID = 1;^74^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^private static final long serialVersionUID ;^142^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^private static final long serialVersionUID ;^194^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^private static  long serialVersionUID = 1L;^278^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^private static final long serialVersionUID ;^325^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^public final static IntDeser instance ;^327^^^^^^^[REPLACE] public final static IntDeser instance = new IntDeser (  ) ;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^private static final long serialVersionUID ;^375^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^public final static LongDeser instance  = null ;^377^^^^^^^[REPLACE] public final static LongDeser instance = new LongDeser (  ) ;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^private static final long serialVersionUID  = null ;^424^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^private static final long serialVersionUID = 1;^472^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser  
[REPLACE]^super ( null ) ;^19^^^^^18^20^[REPLACE] super ( cls ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class<T> cls [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class cls  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public ShortDeser (  )  { super ( short[].class ) ; }^76^^^^^^^[REPLACE] public CharDeser (  )  { super ( char[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$CharDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^76^77^78^^^^^[ADD] public CharDeser (  )  { super ( char[].class ) ; }  @Override^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$CharDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public DoubleDeser (  )  { super ( double[].class ) ; }^144^^^^^^^[REPLACE] public BooleanDeser (  )  { super ( boolean[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$BooleanDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^144^145^146^^^^^[ADD] public BooleanDeser (  )  { super ( boolean[].class ) ; }  @Override^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$BooleanDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public IntDeser (  )  { super ( int[].class ) ; }^196^^^^^^^[REPLACE] public ByteDeser (  )  { super ( byte[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$ByteDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^196^197^198^^^^^[ADD] public ByteDeser (  )  { super ( byte[].class ) ; }  @Override^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$ByteDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public FloatDeser (  )  { super ( float[].class ) ; }^280^^^^^^^[REPLACE] public ShortDeser (  )  { super ( short[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$ShortDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public ByteDeser (  )  { super ( byte[].class ) ; }^329^^^^^^^[REPLACE] public IntDeser (  )  { super ( int[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$IntDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public FloatDeser (  )  { super ( float[].class ) ; }^379^^^^^^^[REPLACE] public LongDeser (  )  { super ( long[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$LongDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^379^380^381^^^^^[ADD] public LongDeser (  )  { super ( long[].class ) ; }  @Override^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$LongDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public LongDeser (  )  { super ( long[].class ) ; }^426^^^^^^^[REPLACE] public FloatDeser (  )  { super ( float[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$FloatDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^426^427^428^^^^^[ADD] public FloatDeser (  )  { super ( float[].class ) ; }  @Override^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$FloatDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^public BooleanDeser (  )  { super ( boolean[].class ) ; }^474^^^^^^^[REPLACE] public DoubleDeser (  )  { super ( double[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$DoubleDeser() [PARAMETER] [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawType  !=  Integer.TYPE )  {^25^^^^^23^51^[REPLACE] if  ( rawType == Integer.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return LongDeser.instance;^26^^^^^23^51^[REPLACE] return IntDeser.instance;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawType  &&  Long.TYPE )  {^28^^^^^23^51^[REPLACE] if  ( rawType == Long.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return IntDeser.instance;^29^^^^^23^51^[REPLACE] return LongDeser.instance;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawType  ||  Byte.TYPE )  {^32^^^^^23^51^[REPLACE] if  ( rawType == Byte.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new FloatDeser (  )  ;^33^^^^^23^51^[REPLACE] return new ByteDeser (  ) ;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawType  !=  Short.TYPE )  {^35^^^^^23^51^[REPLACE] if  ( rawType == Short.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^35^36^37^^^23^51^[ADD] if  ( rawType == Short.TYPE )  { return new ShortDeser (  ) ; }^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new FloatDeser (  )  ;^36^^^^^23^51^[REPLACE] return new ShortDeser (  ) ;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawType  !=  Float.TYPE )  {^38^^^^^23^51^[REPLACE] if  ( rawType == Float.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^38^39^40^^^23^51^[ADD] if  ( rawType == Float.TYPE )  { return new FloatDeser (  ) ; }^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new BooleanDeser (  )  ;^39^^^^^23^51^[REPLACE] return new FloatDeser (  ) ;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawType  ||  Double.TYPE )  {^41^^^^^23^51^[REPLACE] if  ( rawType == Double.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new FloatDeser (  )  ;^42^^^^^23^51^[REPLACE] return new DoubleDeser (  ) ;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( this  ||  Boolean.TYPE )  {^44^^^^^23^51^[REPLACE] if  ( rawType == Boolean.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( rawType ==  ( TYPE )  )  {     return new ByteDeser (  ) ; }^44^^^^^23^51^[REMOVE] ^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new FloatDeser (  )  ;^45^^^^^23^51^[REPLACE] return new BooleanDeser (  ) ;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( false  ||  Character.TYPE )  {^47^^^^^23^51^[REPLACE] if  ( rawType == Character.TYPE )  {^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^47^48^49^^^23^51^[ADD] if  ( rawType == Character.TYPE )  { return new CharDeser (  ) ; }^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new FloatDeser (  )  ;^48^^^^^23^51^[REPLACE] return new CharDeser (  ) ;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^50^^^^^23^51^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] forType [TYPE] JsonDeserializer [PARAMETER] Class<?> rawType [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  Class rawType  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new CharDeser (  ) ;^61^^^^^54^62^[REPLACE] return typeDeserializer.deserializeTypedFromArray ( jp, ctxt ) ;^[METHOD] deserializeWithType [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt TypeDeserializer typeDeserializer [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  TypeDeserializer typeDeserializer  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp .nextToken (  )  ;^86^^^^^81^129^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_STRING )  {^87^^^^^81^129^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^87^88^89^90^91^81^129^[ADD] if  ( t == JsonToken.VALUE_STRING )  {  char[] buffer = jp.getTextCharacters (  ) ; int offset = jp.getTextOffset (  ) ; int len = jp.getTextLength (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return new byte[] { value };^95^^^^^81^129^[REPLACE] return result;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^char[] buffer = jp .getTextOffset (  )  ;^89^^^^^81^129^[REPLACE] char[] buffer = jp.getTextCharacters (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^int offset = jp.getTextLength (  ) ;^90^^^^^81^129^[REPLACE] int offset = jp.getTextOffset (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^int len = jp.getTextOffset (  ) ;^91^^^^^81^129^[REPLACE] int len = jp.getTextLength (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^char[] buffer = jp.getTextCharacters (  ) ;^93^^^^^81^129^[REPLACE] char[] result = new char[len];^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^char[] buffer = jp.getTextOffset (  ) ;^89^^^^^81^129^[REPLACE] char[] buffer = jp.getTextCharacters (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^91^^^^^81^129^[ADD] int len = jp.getTextLength (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^while  (  ( t = jp.nextToken (  )  )   ==  JsonToken.END_ARRAY )  {^100^^^^^81^129^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_STRING )  {^101^^^^^81^129^[REPLACE] if  ( t != JsonToken.VALUE_STRING )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^102^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp.getText (  ) ;^102^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^102^^^^^81^129^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.charAt (  )  - 5 != 1 )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  )  + 1+" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of.charAt "+str.length (  ) +" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp.getTextOffset (  ) ;^104^^^^^81^129^[REPLACE] String str = jp.getText (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^106^^^^^81^129^[ADD] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( !jp.isExpectedStartArrayToken (  )  )  {^97^^^^^81^129^[REPLACE] if  ( jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw ctxt .isEnabled (  )   ;^102^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.length (  )  %  2 != 1 )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  )  - 3+" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^101^102^103^^^81^129^[ADD] if  ( t != JsonToken.VALUE_STRING )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return ;^102^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.size (  )  != 1 )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  )  - 1+" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REMOVE]^if  ( str.length (  )  != 1 )  { throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^106^^^^^81^129^[REMOVE] ^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^while  (  ( t =  null.nextToken (  )  )  !^100^^^^^81^129^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return sb.toString (  )  .charAt ( len )  ;^110^^^^^81^129^[REPLACE] return sb.toString (  ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^StringBuilder sb = new StringBuilder ( 51 ) ;^99^^^^^81^129^[REPLACE] StringBuilder sb = new StringBuilder ( 64 ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.length (  )  /  0.5  != 0  )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  )  %  0.5 +" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return new byte[] { value };^110^^^^^81^129^[REPLACE] return sb.toString (  ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^StringBuilder sb = new StringBuilder ( 27 ) ;^99^^^^^81^129^[REPLACE] StringBuilder sb = new StringBuilder ( 64 ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp .getTextOffset (  )  ;^104^^^^^81^129^[REPLACE] String str = jp.getText (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_EMBEDDED_OBJECT )  {^113^^^^^81^129^[REPLACE] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob != null )  return null;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob == true )  return true;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ! ob instanceof char[] )  {^116^^^^^81^129^[REPLACE] if  ( ob instanceof char[] )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return  ( byte[] )  ob;^117^^^^^81^129^[REPLACE] return  ( char[] )  ob;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ! ob instanceof String )  {^119^^^^^81^129^[REPLACE] if  ( ob instanceof String )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return  (  ( String )  ob ) .length (  ) ;^120^^^^^81^129^[REPLACE] return  (  ( String )  ob ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ! ob instanceof byte[] )  {^123^^^^^81^129^[REPLACE] if  ( ob instanceof byte[] )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return Base64Variants.getDefaultVariant (  ) .encode (  ( byte[] )  ob, true ) .toCharArray (  ) ;^124^^^^^81^129^[REPLACE] return Base64Variants.getDefaultVariant (  ) .encode (  ( byte[] )  ob, false ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob == false )  return false;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return Base64Variants.getDefaultVariant (  )  .getIntBuilder (  )  .toCharArray (  ) ;^124^^^^^81^129^[REPLACE] return Base64Variants.getDefaultVariant (  ) .encode (  ( byte[] )  ob, false ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^Object ob = jp.getTextOffset (  ) ;^114^^^^^81^129^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^115^116^117^118^^81^129^[ADD] if  ( ob == null )  return null; if  ( ob instanceof char[] )  { return  ( char[] )  ob; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^return  (  ( String )  ob ) .toCharArray (  ) ;^119^120^121^^^81^129^[ADD] if  ( ob instanceof String )  { return  (  ( String )  ob ) .toCharArray (  ) ; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return  (  ( String )  ob )  .charAt ( len )  ;^120^^^^^81^129^[REPLACE] return  (  ( String )  ob ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^123^124^125^^^81^129^[ADD] if  ( ob instanceof byte[] )  { return Base64Variants.getDefaultVariant (  ) .encode (  ( byte[] )  ob, false ) .toCharArray (  ) ; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob == this )  return this;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^Object ob = jp .getTextOffset (  )  ;^114^^^^^81^129^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^128^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp.getText (  ) ;^128^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^150^^^^^147^167^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return new byte[] { value };^151^^^^^147^167^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.BooleanBuilder builder = ctxt.isEnabled (  ) .getBooleanBuilder (  ) ;^153^^^^^147^167^[REPLACE] ArrayBuilders.BooleanBuilder builder = ctxt.getArrayBuilders (  ) .getBooleanBuilder (  ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^boolean[] chunk = false.resetAndStart (  ) ;^154^^^^^147^167^[REPLACE] boolean[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 2;^155^^^^^147^167^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^155^^^^^147^167^[ADD] int ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^157^^^^^147^167^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length %  2 )  {^160^^^^^147^167^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^160^161^162^163^^147^167^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  1.appendCompletedChunk ( chunk, ix ) ;^161^^^^^147^167^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^ix = 0;^161^162^^^^147^167^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 + 1;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^162^^^^^147^167^[ADD] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^161^^^^^147^167^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^164^^^^^147^167^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^float value = _parseFloatPrimitive ( jp, ctxt ) ;^159^^^^^147^167^[REPLACE] boolean value = _parseBooleanPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  false.appendCompletedChunk ( chunk, ix ) ;^161^^^^^147^167^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 3;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^161^^^^^147^167^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0L;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return this.appendCompletedChunk ( chunk, ix ) ;^166^^^^^147^167^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^173^174^^^^169^183^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .size (  )  == 0  )  {^175^^^^^169^183^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^176^^^^^169^183^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^176^^^^^169^183^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getTextOffset (  ) .length (  )  %  0.5  == 0 )  {^175^^^^^169^183^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return this;^176^^^^^169^183^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt.mappingException ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^179^^^^^169^183^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^180^^^^^169^183^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^180^^^^^169^183^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getText (  ) ;^180^^^^^169^183^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return new double[] { _parseDoublePrimitive ( jp, ctxt )  };^182^^^^^169^183^[REPLACE] return new boolean[] { _parseBooleanPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.nextToken (  ) ;^202^^^^^201^243^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^202^^^^^201^243^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^205^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^return jp.getBinaryValue ( ctxt.getBase64Variant (  )  ) ;^205^206^207^^^201^243^[ADD] if  ( t == JsonToken.VALUE_STRING )  { return jp.getBinaryValue ( ctxt.getBase64Variant (  )  ) ; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return new CharDeser (  ) ;^206^^^^^201^243^[REPLACE] return jp.getBinaryValue ( ctxt.getBase64Variant (  )  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getBinaryValue ( ctxt.getArrayBuilders (  )  ) ;^206^^^^^201^243^[REPLACE] return jp.getBinaryValue ( ctxt.getBase64Variant (  )  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_EMBEDDED_OBJECT )  {^209^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_EMBEDDED_OBJECT )  )  {     Object ob = jp.getEmbeddedObject (  ) ;     if  ( ob == null )          return null;          if  ( ob instanceof char[] )  {         return  (  ( char[] )   ( ob )  ) ;     }     if  ( ob instanceof String )  {         return  (  ( String )   ( ob )  ) .toCharArray (  ) ;     }     if  ( ob instanceof byte[] )  {         return getDefaultVariant (  ) .encode (  (  ( byte[] )   ( ob )  ) , false ) .toCharArray (  ) ;     } }^209^^^^^201^243^[REMOVE] ^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob != true )  return true;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob == true )  return true;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ! ob instanceof byte[] )  {^212^^^^^201^243^[REPLACE] if  ( ob instanceof byte[] )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return  ( char[] )  ob;^213^^^^^201^243^[REPLACE] return  ( byte[] )  ob;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob == false )  return false;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^Object ob = jp .getTextOffset (  )  ;^210^^^^^201^243^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^210^211^^^^201^243^[ADD] Object ob = jp.getEmbeddedObject (  ) ; if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^211^212^213^214^^201^243^[ADD] if  ( ob == null )  return null; if  ( ob instanceof byte[] )  { return  ( byte[] )  ob; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob == this )  return this;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^return  ( byte[] )  ob;^212^213^214^^^201^243^[ADD] if  ( ob instanceof byte[] )  { return  ( byte[] )  ob; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^Object ob = jp.getTextOffset (  ) ;^210^^^^^201^243^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^216^^^^^201^243^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return new byte[] { value };^217^^^^^201^243^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.IntBuilder builder = ctxt.getArrayBuilders (  ) .getIntBuilder (  ) ;^219^^^^^201^243^[REPLACE] ArrayBuilders.ByteBuilder builder = ctxt.getArrayBuilders (  ) .getByteBuilder (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^219^220^^^^201^243^[ADD] ArrayBuilders.ByteBuilder builder = ctxt.getArrayBuilders (  ) .getByteBuilder (  ) ; byte[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^byte[] chunk = 1.resetAndStart (  ) ;^220^^^^^201^243^[REPLACE] byte[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^220^^^^^201^243^[ADD] byte[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 2;^221^^^^^201^243^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  (  ( t = jp.nextToken (  )  )   ==  JsonToken.END_ARRAY )  {^223^^^^^201^243^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT && t == JsonToken.VALUE_NUMBER_FLOAT )  {^226^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_NULL )  {^231^^^^^226^235^[REPLACE] if  ( t != JsonToken.VALUE_NULL )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^231^232^233^^^226^235^[ADD] if  ( t != JsonToken.VALUE_NULL )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return ;^232^^^^^226^235^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getText (  ) ;^232^^^^^226^235^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ; ;^234^^^^^226^235^[REPLACE] value =  ( byte )  0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^234^^^^^226^235^[ADD] value =  ( byte )  0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^232^^^^^226^235^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value =  null.getByteValue (  ) ;^228^^^^^201^243^[REPLACE] value = jp.getByteValue (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_NULL )  {^231^^^^^201^243^[REPLACE] if  ( t != JsonToken.VALUE_NULL )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^232^^^^^201^243^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getText (  ) ;^232^^^^^201^243^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length - 4 )  {^236^^^^^201^243^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^237^^^^^201^243^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^237^238^^^^201^243^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^238^^^^^201^243^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^228^^^^^201^243^[ADD] value = jp.getByteValue (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ; ;^234^^^^^201^243^[REPLACE] value =  ( byte )  0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^240^^^^^201^243^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^float value = _parseFloatPrimitive ( jp, ctxt ) ;^225^^^^^201^243^[REPLACE] byte value;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  t == JsonToken.VALUE_NUMBER_FLOAT )  {^226^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^226^227^228^229^^201^243^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {  value = jp.getByteValue (  ) ; } else {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^232^^^^^226^235^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REMOVE]^return new int[] { _parseIntPrimitive ( jp, ctxt )  };^232^^^^^226^235^[REMOVE] ^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^231^232^233^^^201^243^[ADD] if  ( t != JsonToken.VALUE_NULL )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length + 4 )  {^236^^^^^201^243^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 << 0;^238^^^^^201^243^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^238^^^^^201^243^[ADD] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  (  ( t =  null.nextToken (  )  )  !^223^^^^^201^243^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 - 3;^238^^^^^201^243^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^225^^^^^201^243^[ADD] byte value;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return ;^232^^^^^201^243^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^232^^^^^201^243^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^242^^^^^201^243^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^249^250^^^^247^271^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^249^250^251^252^253^247^271^[ADD] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  { if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .size (  )  == 0  )  {^251^^^^^247^271^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^252^^^^^247^271^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^252^^^^^247^271^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getTextOffset (  ) .length (  )  - 1 == 0 )  {^251^^^^^247^271^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return this;^252^^^^^247^271^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt .getArrayBuilders (  )   )  {^255^^^^^247^271^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^255^256^257^^^247^271^[ADD] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^256^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^256^^^^^247^271^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^256^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^float value = _parseFloatPrimitive ( jp, ctxt ) ;^258^^^^^247^271^[REPLACE] byte value;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp .nextToken (  )  ;^259^^^^^247^271^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^260^^^^^247^271^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^260^261^262^263^^247^271^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {  value = jp.getByteValue (  ) ; } else {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_NULL )  {^265^^^^^247^271^[REPLACE] if  ( t != JsonToken.VALUE_NULL )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REMOVE]^if  ( ! ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  )  {     throw ctxt.mappingException ( _valueClass ) ; }^265^^^^^247^271^[REMOVE] ^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^266^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^266^^^^^247^271^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^266^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getText (  ) ;^266^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ; ;^268^^^^^247^271^[REPLACE] value =  ( byte )  0;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^268^^^^^247^271^[ADD] value =  ( byte )  0;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^value =  null.getByteValue (  ) ;^262^^^^^247^271^[REPLACE] value = jp.getByteValue (  ) ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^265^266^267^^^247^271^[ADD] if  ( t != JsonToken.VALUE_NULL )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^266^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return new CharDeser (  ) ;^270^^^^^247^271^[REPLACE] return new byte[] { value };^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^286^^^^^283^302^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return new byte[] { value };^287^^^^^283^302^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.IntBuilder builder = ctxt.getArrayBuilders (  ) .getIntBuilder (  ) ;^289^^^^^283^302^[REPLACE] ArrayBuilders.ShortBuilder builder = ctxt.getArrayBuilders (  ) .getShortBuilder (  ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^289^290^^^^283^302^[ADD] ArrayBuilders.ShortBuilder builder = ctxt.getArrayBuilders (  ) .getShortBuilder (  ) ; short[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^short[] chunk = null.resetAndStart (  ) ;^290^^^^^283^302^[REPLACE] short[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 3;^291^^^^^283^302^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^293^^^^^283^302^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length + 2 )  {^295^^^^^283^302^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^295^296^297^298^^283^302^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^296^^^^^283^302^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^296^^^^^283^302^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 / 2;^297^^^^^283^302^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^296^^^^^283^302^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^297^^^^^283^302^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^299^^^^^283^302^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^float value = _parseFloatPrimitive ( jp, ctxt ) ;^294^^^^^283^302^[REPLACE] short value = _parseShortPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length /  0 .5  )  {^295^^^^^283^302^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^chunk = builder.appendCompletedChunk ( chunk, ix ) ;ix = 0;^295^296^297^298^^283^302^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  0.appendCompletedChunk ( chunk, ix ) ;^296^^^^^283^302^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 1;^297^^^^^283^302^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^297^^^^^283^302^[ADD] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^301^^^^^283^302^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.mappingException ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^308^309^^^^304^318^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getTextOffset (  ) .length (  )  /  2 == 0 )  {^310^^^^^304^318^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return null;^310^311^312^^^304^318^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^311^^^^^304^318^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  *  0.5  == 0 )  {^310^^^^^304^318^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^311^^^^^304^318^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt.mappingException ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^314^^^^^304^318^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^315^^^^^304^318^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^315^^^^^304^318^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^315^^^^^304^318^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return new boolean[] { _parseBooleanPrimitive ( jp, ctxt )  };^317^^^^^304^318^[REPLACE] return new short[] { _parseShortPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^335^^^^^332^352^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^return new byte[] { value };^336^^^^^332^352^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.IntBuilder builder = ctxt.isEnabled (  ) .getIntBuilder (  ) ;^338^^^^^332^352^[REPLACE] ArrayBuilders.IntBuilder builder = ctxt.getArrayBuilders (  ) .getIntBuilder (  ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^int[] chunk = 1.resetAndStart (  ) ;^339^^^^^332^352^[REPLACE] int[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[ADD]^int ix = 0;^339^340^^^^332^352^[ADD] int[] chunk = builder.resetAndStart (  ) ; int ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 1;^340^^^^^332^352^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^342^^^^^332^352^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length - 1 )  {^345^^^^^332^352^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^346^^^^^332^352^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^347^^^^^332^352^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^346^^^^^332^352^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ix = 3;^347^^^^^332^352^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^349^^^^^332^352^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^long value = _parseLongPrimitive ( jp, ctxt ) ;^344^^^^^332^352^[REPLACE] int value = _parseIntPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[ADD]^^344^^^^^332^352^[ADD] int value = _parseIntPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length /  0.5  )  {^345^^^^^332^352^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ix = 2;^347^^^^^332^352^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[ADD]^^347^^^^^332^352^[ADD] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[ADD]^^346^347^^^^332^352^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^351^^^^^332^352^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  IntBuilder builder  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^358^359^^^^354^368^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  + 4 == 0 )  {^360^^^^^354^368^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return null;^360^361^362^^^354^368^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^361^^^^^354^368^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^361^^^^^354^368^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  + 1 == 0 )  {^360^^^^^354^368^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt .getArrayBuilders (  )   )  {^364^^^^^354^368^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^364^365^366^^^354^368^[ADD] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^365^^^^^354^368^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^365^^^^^354^368^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^365^^^^^354^368^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return new long[] { _parseLongPrimitive ( jp, ctxt )  };^367^^^^^354^368^[REPLACE] return new int[] { _parseIntPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^385^^^^^382^401^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^return handleNonArray ( jp, ctxt ) ;^385^386^387^^^382^401^[ADD] if  ( !jp.isExpectedStartArrayToken (  )  )  { return handleNonArray ( jp, ctxt ) ; }^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return new byte[] { value };^386^^^^^382^401^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.LongBuilder builder = ctxt.isEnabled (  ) .getLongBuilder (  ) ;^388^^^^^382^401^[REPLACE] ArrayBuilders.LongBuilder builder = ctxt.getArrayBuilders (  ) .getLongBuilder (  ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^long[] chunk = true.resetAndStart (  ) ;^389^^^^^382^401^[REPLACE] long[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 3;^390^^^^^382^401^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^392^^^^^382^401^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length - 1 )  {^394^^^^^382^401^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^395^^^^^382^401^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^395^^^^^382^401^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 1;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^396^^^^^382^401^[ADD] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^398^^^^^382^401^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^398^^^^^382^401^[ADD] chunk[ix++] = value;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^float value = _parseFloatPrimitive ( jp, ctxt ) ;^393^^^^^382^401^[REPLACE] long value = _parseLongPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length + 4 )  {^394^^^^^382^401^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^395^^^^^382^401^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 * 0;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 2;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^400^^^^^382^401^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^407^408^^^^403^417^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  *  2 == 0 )  {^409^^^^^403^417^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^return null;^409^410^411^^^403^417^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return false;^410^^^^^403^417^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return true;^410^^^^^403^417^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  %  2 == 0  )  {^409^^^^^403^417^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt.mappingException ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^413^^^^^403^417^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^413^414^415^^^403^417^[ADD] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return ;^414^^^^^403^417^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getText (  ) ;^414^^^^^403^417^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^414^^^^^403^417^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^414^^^^^403^417^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return new boolean[] { _parseBooleanPrimitive ( jp, ctxt )  };^416^^^^^403^417^[REPLACE] return new long[] { _parseLongPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^432^^^^^429^449^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^return handleNonArray ( jp, ctxt ) ;^432^433^434^^^429^449^[ADD] if  ( !jp.isExpectedStartArrayToken (  )  )  { return handleNonArray ( jp, ctxt ) ; }^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^return new byte[] { value };^433^^^^^429^449^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ArrayBuilders.FloatBuilder builder = ctxt.isEnabled (  ) .getFloatBuilder (  ) ;^435^^^^^429^449^[REPLACE] ArrayBuilders.FloatBuilder builder = ctxt.getArrayBuilders (  ) .getFloatBuilder (  ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^float[] chunk = true.resetAndStart (  ) ;^436^^^^^429^449^[REPLACE] float[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^^436^^^^^429^449^[ADD] float[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^int ix = 0 >>> 1;^437^^^^^429^449^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^439^^^^^429^449^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^^439^440^441^^^429^449^[ADD] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {  float value = _parseFloatPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^if  ( ix >= chunk.length /  0 .5  )  {^442^^^^^429^449^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^443^^^^^429^449^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ix = 0 / 0;^444^^^^^429^449^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^^444^^^^^429^449^[ADD] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^443^^^^^429^449^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ix = 0L;^444^^^^^429^449^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk[ix++] =  value;^446^^^^^429^449^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^short value = _parseShortPrimitive ( jp, ctxt ) ;^441^^^^^429^449^[REPLACE] float value = _parseFloatPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^if  ( ix >= chunk.length (  )  )  {^442^^^^^429^449^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^^442^443^444^445^^429^449^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ix = 3;^444^^^^^429^449^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^443^^^^^429^449^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ix = 2;^444^^^^^429^449^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^return true.appendCompletedChunk ( chunk, ix ) ;^448^^^^^429^449^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^455^456^^^^451^465^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .size (  )  == 0  )  {^457^^^^^451^465^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return false;^458^^^^^451^465^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return this;^458^^^^^451^465^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getTextOffset (  ) .length (  )  /  0 .5  == 0  )  {^457^^^^^451^465^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return true;^458^^^^^451^465^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt.mappingException ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^461^^^^^451^465^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^461^462^463^^^451^465^[ADD] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^462^^^^^451^465^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getText (  ) ;^462^^^^^451^465^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return ;^462^^^^^451^465^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return new boolean[] { _parseBooleanPrimitive ( jp, ctxt )  };^464^^^^^451^465^[REPLACE] return new float[] { _parseFloatPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^480^^^^^477^496^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^return handleNonArray ( jp, ctxt ) ;^480^481^482^^^477^496^[ADD] if  ( !jp.isExpectedStartArrayToken (  )  )  { return handleNonArray ( jp, ctxt ) ; }^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return new byte[] { value };^481^^^^^477^496^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.DoubleBuilder builder = ctxt.isEnabled (  ) .getDoubleBuilder (  ) ;^483^^^^^477^496^[REPLACE] ArrayBuilders.DoubleBuilder builder = ctxt.getArrayBuilders (  ) .getDoubleBuilder (  ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^double[] chunk = null.resetAndStart (  ) ;^484^^^^^477^496^[REPLACE] double[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^484^485^^^^477^496^[ADD] double[] chunk = builder.resetAndStart (  ) ; int ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 2;^485^^^^^477^496^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^487^^^^^477^496^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length + 3 )  {^489^^^^^477^496^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^490^^^^^477^496^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^491^^^^^477^496^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  0.appendCompletedChunk ( chunk, ix ) ;^490^^^^^477^496^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^493^^^^^477^496^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^float value = _parseFloatPrimitive ( jp, ctxt ) ;^488^^^^^477^496^[REPLACE] double value = _parseDoublePrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^488^^^^^477^496^[ADD] double value = _parseDoublePrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length *  2 )  {^489^^^^^477^496^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^490^^^^^477^496^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 1;^491^^^^^477^496^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^490^^^^^477^496^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 3;^491^^^^^477^496^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^491^^^^^477^496^[ADD] ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder .resetAndStart (  )  ;^495^^^^^477^496^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) ) {^502^503^^^^498^512^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  /  0.5  == 0 )  {^504^^^^^498^512^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^504^505^506^^^498^512^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return false;^505^^^^^498^512^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getTextOffset (  ) .length (  )  - 5 == 0 )  {^504^^^^^498^512^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return true;^505^^^^^498^512^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^508^^^^^498^512^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^509^^^^^498^512^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^509^^^^^498^512^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^509^^^^^498^512^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return new boolean[] { _parseBooleanPrimitive ( jp, ctxt )  };^511^^^^^498^512^[REPLACE] return new double[] { _parseDoublePrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] PrimitiveArrayDeserializers CharDeser BooleanDeser ByteDeser ShortDeser IntDeser LongDeser FloatDeser DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^private static final long serialVersionUID  = null ;^74^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^int offset = jp.getTextOffset (  ) ;^76^^^^^^^[REPLACE] public CharDeser (  )  { super ( char[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$CharDeser() [PARAMETER] [CLASS] CharDeser   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^JsonToken t = jp.nextToken (  ) ;^86^^^^^81^129^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^86^^^^^81^129^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^87^^^^^81^129^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return  ( char[] )  ob;^95^^^^^81^129^[REPLACE] return result;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^char[] buffer = jp.getTextOffset (  ) ;^89^^^^^81^129^[REPLACE] char[] buffer = jp.getTextCharacters (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^int offset = jp .getTextLength (  )  ;^90^^^^^81^129^[REPLACE] int offset = jp.getTextOffset (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^int len = jp .getTextOffset (  )  ;^91^^^^^81^129^[REPLACE] int len = jp.getTextLength (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^char[] buffer = jp.getTextCharacters (  ) ;^93^^^^^81^129^[REPLACE] char[] result = new char[len];^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^int offset = jp.getTextLength (  ) ;^90^^^^^81^129^[REPLACE] int offset = jp.getTextOffset (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^int len = jp.getTextOffset (  ) ;^91^^^^^81^129^[REPLACE] int len = jp.getTextLength (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^91^^^^^81^129^[ADD] int len = jp.getTextLength (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^while  (  ( t = jp.nextToken (  )  )   ==  JsonToken.END_ARRAY )  {^100^^^^^81^129^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^100^101^102^^^81^129^[ADD] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  { if  ( t != JsonToken.VALUE_STRING )  { throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_STRING )  {^101^^^^^81^129^[REPLACE] if  ( t != JsonToken.VALUE_STRING )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^101^102^103^^^81^129^[ADD] if  ( t != JsonToken.VALUE_STRING )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return ;^102^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^102^^^^^81^129^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp.getText (  ) ;^102^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REMOVE]^String str = jp.getText (  ) ;^102^^^^^81^129^[REMOVE] ^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.length (  )  *  2 != 1 )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^105^106^107^^^81^129^[ADD] if  ( str.length (  )  != 1 )  { throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of.charAt "+str.length (  )  + 2+" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of.charAt "+str.length (  ) +" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^106^^^^^81^129^[ADD] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp.getTextOffset (  ) ;^104^^^^^81^129^[REPLACE] String str = jp.getText (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob instanceof byte[] )  {^97^^^^^81^129^[REPLACE] if  ( jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.length (  )  + 3 != 1 )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  )  - 3+" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.length (  )  + 5 != 0  )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  )  - 1+" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.length (  )  != 1 )  { throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^while  (  ( t =  null.nextToken (  )  )  !^100^^^^^81^129^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return sb.toString (  ) .charAt (  ) ;^110^^^^^81^129^[REPLACE] return sb.toString (  ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^StringBuilder sb = new StringBuilder ( 64 + 2 ) ;^99^^^^^81^129^[REPLACE] StringBuilder sb = new StringBuilder ( 64 ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^104^^^^^81^129^[ADD] String str = jp.getText (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( str.charAt (  )  /  2 != 0  )  {^105^^^^^81^129^[REPLACE] if  ( str.length (  )  != 1 )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  )  %  0.5 +" into a char element of char array" ) ;^106^^^^^81^129^[REPLACE] throw JsonMappingException.from ( jp, "Can not convert a JSON String of length "+str.length (  ) +" into a char element of char array" ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^StringBuilder sb = new StringBuilder ( 3 ) ;^99^^^^^81^129^[REPLACE] StringBuilder sb = new StringBuilder ( 64 ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp .getTextOffset (  )  ;^104^^^^^81^129^[REPLACE] String str = jp.getText (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_EMBEDDED_OBJECT )  {^113^^^^^81^129^[REPLACE] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^113^114^115^116^117^81^129^[ADD] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  { Object ob = jp.getEmbeddedObject (  ) ; if  ( ob == null )  return null; if  ( ob instanceof char[] )  { return  ( char[] )  ob;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob != this )  return this;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^115^116^117^118^^81^129^[ADD] if  ( ob == null )  return null; if  ( ob instanceof char[] )  { return  ( char[] )  ob; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob == false )  return false;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ! ob instanceof char[] )  {^116^^^^^81^129^[REPLACE] if  ( ob instanceof char[] )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return  (  ( String )  ob ) .toCharArray (  ) ;^117^^^^^81^129^[REPLACE] return  ( char[] )  ob;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ! ob instanceof String )  {^119^^^^^81^129^[REPLACE] if  ( ob instanceof String )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return  (  ( String )  ob ) .length (  ) ;^120^^^^^81^129^[REPLACE] return  (  ( String )  ob ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ! ob instanceof byte[] )  {^123^^^^^81^129^[REPLACE] if  ( ob instanceof byte[] )  {^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return Base64Variants.getDefaultVariant (  ) .encode (  ( byte[] )  ob, true ) .toCharArray (  ) ;^124^^^^^81^129^[REPLACE] return Base64Variants.getDefaultVariant (  ) .encode (  ( byte[] )  ob, false ) .toCharArray (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob == this )  return this;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^Object ob = jp .getTextOffset (  )  ;^114^^^^^81^129^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^114^^^^^81^129^[ADD] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^if  ( ob != null )  return null;^115^^^^^81^129^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[ADD]^^116^117^118^^^81^129^[ADD] if  ( ob instanceof char[] )  { return  ( char[] )  ob; }^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^Object ob = jp.getTextOffset (  ) ;^114^^^^^81^129^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^return ;^128^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^String str = jp.getText (  ) ;^128^^^^^81^129^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CharDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^private static final  short  serialVersionUID = 1L;^142^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] deserialize [TYPE] char[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String str  [TYPE]  long serialVersionUID  [TYPE]  int len  offset  [TYPE]  JsonParser jp  [TYPE]  char[] buffer  result 
[REPLACE]^ArrayBuilders.BooleanBuilder builder = ctxt.getArrayBuilders (  ) .getBooleanBuilder (  ) ;^144^^^^^^^[REPLACE] public BooleanDeser (  )  { super ( boolean[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$BooleanDeser() [PARAMETER] [CLASS] BooleanDeser   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( !jp .getCurrentToken (  )   )  {^150^^^^^147^167^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^return handleNonArray ( jp, ctxt ) ;^150^151^152^^^147^167^[ADD] if  ( !jp.isExpectedStartArrayToken (  )  )  { return handleNonArray ( jp, ctxt ) ; }^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.completeAndClearBuffer ( chunk, ix ) ;^151^^^^^147^167^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.BooleanBuilder builder = ctxt .isEnabled (  )  .getBooleanBuilder (  ) ;^153^^^^^147^167^[REPLACE] ArrayBuilders.BooleanBuilder builder = ctxt.getArrayBuilders (  ) .getBooleanBuilder (  ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^boolean[] chunk = 1.resetAndStart (  ) ;^154^^^^^147^167^[REPLACE] boolean[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 4;^155^^^^^147^167^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^157^^^^^147^167^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^157^158^159^^^147^167^[ADD] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {  boolean value = _parseBooleanPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length (  )  )  {^160^^^^^147^167^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  1.appendCompletedChunk ( chunk, ix ) ;^161^^^^^147^167^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 - 1;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  false.appendCompletedChunk ( chunk, ix ) ;^161^^^^^147^167^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^161^162^^^^147^167^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 2;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^164^^^^^147^167^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^boolean[] chunk = builder.resetAndStart (  ) ;^159^^^^^147^167^[REPLACE] boolean value = _parseBooleanPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^159^^^^^147^167^[ADD] boolean value = _parseBooleanPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length %  0 .5  )  {^160^^^^^147^167^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^chunk = builder.appendCompletedChunk ( chunk, ix ) ;ix = 0;^160^161^162^163^^147^167^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^161^^^^^147^167^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0L;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^161^^^^^147^167^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 + 2;^162^^^^^147^167^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^164^^^^^147^167^[ADD] chunk[ix++] = value;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^166^^^^^147^167^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  boolean false  true  value  [TYPE]  BooleanBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  boolean[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^173^174^^^^169^183^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .size (  )  == 0  )  {^175^^^^^169^183^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return null;^175^176^177^^^169^183^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^176^^^^^169^183^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  - 3 == 0  )  {^175^^^^^169^183^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return this;^176^^^^^169^183^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt .getArrayBuilders (  )   )  {^179^^^^^169^183^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^180^^^^^169^183^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^180^^^^^169^183^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^182^^^^^169^183^[REPLACE] return new boolean[] { _parseBooleanPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] BooleanDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^private static final long serialVersionUID  = null ;^194^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] handleNonArray [TYPE] boolean[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ;^196^^^^^^^[REPLACE] public ByteDeser (  )  { super ( byte[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$ByteDeser() [PARAMETER] [CLASS] ByteDeser   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^JsonToken t = jp.nextToken (  ) ;^202^^^^^201^243^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^202^^^^^201^243^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_STRING )  {^205^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getBinaryValue ( ctxt .getArrayBuilders (  )   ) ;^206^^^^^201^243^[REPLACE] return jp.getBinaryValue ( ctxt.getBase64Variant (  )  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_EMBEDDED_OBJECT )  {^209^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^Object ob = jp.getEmbeddedObject (  ) ;if  ( ob == null )  return null;return  ( byte[] )  ob;^209^210^211^212^213^201^243^[ADD] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  { Object ob = jp.getEmbeddedObject (  ) ; if  ( ob == null )  return null; if  ( ob instanceof byte[] )  { return  ( byte[] )  ob;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob != null )  return null;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob == true )  return true;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ! ob instanceof byte[] )  {^212^^^^^201^243^[REPLACE] if  ( ob instanceof byte[] )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^213^^^^^201^243^[REPLACE] return  ( byte[] )  ob;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob == false )  return false;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^Object ob = jp.getByteValue (  ) ;^210^^^^^201^243^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ob != this  )  return this ;^211^^^^^201^243^[REPLACE] if  ( ob == null )  return null;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^211^212^213^214^^201^243^[ADD] if  ( ob == null )  return null; if  ( ob instanceof byte[] )  { return  ( byte[] )  ob; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^Object ob = jp .getByteValue (  )  ;^210^^^^^201^243^[REPLACE] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^210^^^^^201^243^[ADD] Object ob = jp.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^216^^^^^201^243^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^216^217^218^^^201^243^[ADD] if  ( !jp.isExpectedStartArrayToken (  )  )  { return handleNonArray ( jp, ctxt ) ; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return new byte[] { value };^217^^^^^201^243^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.ByteBuilder builder = ctxt.getArrayBuilders (  )  .length (  )  ;^219^^^^^201^243^[REPLACE] ArrayBuilders.ByteBuilder builder = ctxt.getArrayBuilders (  ) .getByteBuilder (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^byte[] chunk = 0 .completeAndClearBuffer ( chunk , ix )  ;^220^^^^^201^243^[REPLACE] byte[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 0 - 1;^221^^^^^201^243^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  (  ( t = jp.nextToken (  )  )   ==  JsonToken.END_ARRAY )  {^223^^^^^201^243^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  t == JsonToken.VALUE_NUMBER_FLOAT )  {^226^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_NULL )  {^231^^^^^226^235^[REPLACE] if  ( t != JsonToken.VALUE_NULL )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return ;^232^^^^^226^235^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .getBase64Variant (  )   ;^232^^^^^226^235^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ;^232^^^^^226^235^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REMOVE]^if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  { throw ctxt.mappingException  (" ")  ;^232^^^^^226^235^[REMOVE] ^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ; ;^234^^^^^226^235^[REPLACE] value =  ( byte )  0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^234^^^^^226^235^[ADD] value =  ( byte )  0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value =  null.getByteValue (  ) ;^228^^^^^201^243^[REPLACE] value = jp.getByteValue (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^228^^^^^201^243^[ADD] value = jp.getByteValue (  ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_NULL )  {^231^^^^^201^243^[REPLACE] if  ( t != JsonToken.VALUE_NULL )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return ;^232^^^^^201^243^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .getBase64Variant (  )   ;^232^^^^^201^243^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ;^232^^^^^201^243^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^232^^^^^201^243^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length (  )  )  {^236^^^^^201^243^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^237^^^^^201^243^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 % 1;^238^^^^^201^243^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ; ;^234^^^^^201^243^[REPLACE] value =  ( byte )  0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  1.appendCompletedChunk ( chunk, ix ) ;^237^^^^^201^243^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^237^^^^^201^243^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^238^^^^^201^243^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^238^^^^^201^243^[ADD] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^240^^^^^201^243^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getCurrentToken (  ) ;^225^^^^^201^243^[REPLACE] byte value;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT && t == JsonToken.VALUE_NUMBER_FLOAT )  {^226^^^^^201^243^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^226^227^228^229^^201^243^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {  value = jp.getByteValue (  ) ; } else {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_STRING )  )  {     return jp.getBinaryValue ( ctxt.getBase64Variant (  )  ) ; }^231^^^^^226^235^[REMOVE] ^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^231^232^233^^^201^243^[ADD] if  ( t != JsonToken.VALUE_NULL )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length - 1 )  {^236^^^^^201^243^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^236^237^238^239^^201^243^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^237^^^^^201^243^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 2;^238^^^^^201^243^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  (  ( t =  null.nextToken (  )  )  !^223^^^^^201^243^[REPLACE] while  (  ( t = jp.nextToken (  )  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 1;^238^^^^^201^243^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder .resetAndStart (  )  ;^242^^^^^201^243^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  byte[] chunk  [TYPE]  ByteBuilder builder  [TYPE]  boolean false  true  [TYPE]  byte value  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^249^250^^^^247^271^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[ADD]^^249^250^251^252^253^247^271^[ADD] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  { if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  - 1 == 0 )  {^251^^^^^247^271^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^return false;^252^^^^^247^271^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^return true;^252^^^^^247^271^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  /  0 .5  == 0  )  {^251^^^^^247^271^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^return this;^252^^^^^247^271^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt .getArrayBuilders (  )   )  {^255^^^^^247^271^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^return ;^256^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[ADD]^^256^^^^^247^271^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ;^256^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getCurrentToken (  ) ;^258^^^^^247^271^[REPLACE] byte value;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.nextToken (  ) ;^259^^^^^247^271^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^if  (  t == JsonToken.VALUE_NUMBER_FLOAT )  {^260^^^^^247^271^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[ADD]^^260^261^262^263^^247^271^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {  value = jp.getByteValue (  ) ; } else {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.VALUE_NULL )  {^265^^^^^247^271^[REPLACE] if  ( t != JsonToken.VALUE_NULL )  {^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[ADD]^^265^266^267^^^247^271^[ADD] if  ( t != JsonToken.VALUE_NULL )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^return ;^266^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[ADD]^^266^^^^^247^271^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ;^266^^^^^247^271^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^value = jp.getByteValue (  ) ; ;^268^^^^^247^271^[REPLACE] value =  ( byte )  0;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^value =  null.getByteValue (  ) ;^262^^^^^247^271^[REPLACE] value = jp.getByteValue (  ) ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[ADD]^^262^^^^^247^271^[ADD] value = jp.getByteValue (  ) ;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^270^^^^^247^271^[REPLACE] return new byte[] { value };^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ByteDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^private static final long serialVersionUID  = null ;^278^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] handleNonArray [TYPE] byte[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  byte value  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  { short value = _parseShortPrimitive ( jp, ctxt ) ;^280^^^^^^^[REPLACE] public ShortDeser (  )  { super ( short[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$ShortDeser() [PARAMETER] [CLASS] ShortDeser   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( !jp .getCurrentToken (  )   )  {^286^^^^^283^302^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.completeAndClearBuffer ( chunk, ix ) ;^287^^^^^283^302^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.ShortBuilder builder = ctxt.isEnabled (  ) .getShortBuilder (  ) ;^289^^^^^283^302^[REPLACE] ArrayBuilders.ShortBuilder builder = ctxt.getArrayBuilders (  ) .getShortBuilder (  ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^short[] chunk = this.resetAndStart (  ) ;^290^^^^^283^302^[REPLACE] short[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 0 << 0;^291^^^^^283^302^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^293^^^^^283^302^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^293^294^^^^283^302^[ADD] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  { short value = _parseShortPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length + 4 )  {^295^^^^^283^302^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^295^296^297^298^^283^302^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^296^^^^^283^302^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^296^^^^^283^302^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 3;^297^^^^^283^302^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^297^^^^^283^302^[ADD] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^296^^^^^283^302^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^297^^^^^283^302^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^299^^^^^283^302^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^short[] chunk = builder.resetAndStart (  ) ;^294^^^^^283^302^[REPLACE] short value = _parseShortPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^294^^^^^283^302^[ADD] short value = _parseShortPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length - 1 )  {^295^^^^^283^302^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 * 2;^297^^^^^283^302^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^296^^^^^283^302^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^296^297^^^^283^302^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 2;^297^^^^^283^302^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^299^^^^^283^302^[ADD] chunk[ix++] = value;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder .resetAndStart (  )  ;^301^^^^^283^302^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  boolean false  true  [TYPE]  ShortBuilder builder  [TYPE]  short[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  short value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^308^309^^^^304^318^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^308^309^310^311^312^304^318^[ADD] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  { if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (  ) .length (  )  %  2 == 0  )  {^310^^^^^304^318^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^311^^^^^304^318^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return this;^311^^^^^304^318^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  + 5 == 0  )  {^310^^^^^304^318^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^311^^^^^304^318^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^314^^^^^304^318^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^315^^^^^304^318^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^315^^^^^304^318^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^315^^^^^304^318^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^317^^^^^304^318^[REPLACE] return new short[] { _parseShortPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] ShortDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^private static  long serialVersionUID = 1L;^325^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^public final static IntDeser instance ;^327^^^^^^^[REPLACE] public final static IntDeser instance = new IntDeser (  ) ;^[METHOD] handleNonArray [TYPE] short[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.IntBuilder builder = ctxt.getArrayBuilders (  ) .getIntBuilder (  ) ;^329^^^^^^^[REPLACE] public IntDeser (  )  { super ( int[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$IntDeser() [PARAMETER] [CLASS] IntDeser   [TYPE]  long serialVersionUID  [TYPE]  IntDeser instance  [TYPE]  boolean false  true 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^335^^^^^332^352^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^return new int[] { _parseIntPrimitive ( jp, ctxt )  };^336^^^^^332^352^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.IntBuilder builder = ctxt.isEnabled (  ) .getIntBuilder (  ) ;^338^^^^^332^352^[REPLACE] ArrayBuilders.IntBuilder builder = ctxt.getArrayBuilders (  ) .getIntBuilder (  ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^int[] chunk = false.resetAndStart (  ) ;^339^^^^^332^352^[REPLACE] int[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 3;^340^^^^^332^352^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^342^^^^^332^352^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length + 1 )  {^345^^^^^332^352^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^346^^^^^332^352^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[ADD]^^346^^^^^332^352^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0L;^347^^^^^332^352^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^346^^^^^332^352^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ix = 3;^347^^^^^332^352^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[ADD]^^347^^^^^332^352^[ADD] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^349^^^^^332^352^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.IntBuilder builder = ctxt.getArrayBuilders (  ) .getIntBuilder (  ) ;^344^^^^^332^352^[REPLACE] int value = _parseIntPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length (  )  )  {^345^^^^^332^352^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[ADD]^^345^346^347^348^^332^352^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^346^^^^^332^352^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^ix = 2;^347^^^^^332^352^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^351^^^^^332^352^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  IntBuilder builder  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  int[] chunk  [TYPE]  long serialVersionUID  [TYPE]  int ix  value  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^358^359^^^^354^368^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  /  0.5  == 0 )  {^360^^^^^354^368^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^360^361^362^^^354^368^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^361^^^^^354^368^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .size (  )  == 0 )  {^360^^^^^354^368^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^361^^^^^354^368^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^364^^^^^354^368^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^365^^^^^354^368^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^365^^^^^354^368^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^365^^^^^354^368^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^367^^^^^354^368^[REPLACE] return new int[] { _parseIntPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] IntDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^private static final long serialVersionUID  = null ;^375^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^public  static LongDeser instance = new LongDeser (  ) ;^377^^^^^^^[REPLACE] public final static LongDeser instance = new LongDeser (  ) ;^[METHOD] handleNonArray [TYPE] int[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  IntDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.LongBuilder builder = ctxt.getArrayBuilders (  ) .getLongBuilder (  ) ;^379^^^^^^^[REPLACE] public LongDeser (  )  { super ( long[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$LongDeser() [PARAMETER] [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^385^^^^^382^401^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.completeAndClearBuffer ( chunk, ix ) ;^386^^^^^382^401^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.LongBuilder builder = ctxt.isEnabled (  ) .getLongBuilder (  ) ;^388^^^^^382^401^[REPLACE] ArrayBuilders.LongBuilder builder = ctxt.getArrayBuilders (  ) .getLongBuilder (  ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^388^^^^^382^401^[ADD] ArrayBuilders.LongBuilder builder = ctxt.getArrayBuilders (  ) .getLongBuilder (  ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^long[] chunk = null.resetAndStart (  ) ;^389^^^^^382^401^[REPLACE] long[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^389^390^^^^382^401^[ADD] long[] chunk = builder.resetAndStart (  ) ; int ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 3;^390^^^^^382^401^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^390^^^^^382^401^[ADD] int ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^392^^^^^382^401^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length - 4 )  {^394^^^^^382^401^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^395^^^^^382^401^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 4;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^395^^^^^382^401^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^ix = 0;^395^396^^^^382^401^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0L;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^398^^^^^382^401^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.LongBuilder builder = ctxt.getArrayBuilders (  ) .getLongBuilder (  ) ;^393^^^^^382^401^[REPLACE] long value = _parseLongPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length + 2 )  {^394^^^^^382^401^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^chunk = builder.appendCompletedChunk ( chunk, ix ) ;ix = 0;^394^395^396^397^^382^401^[ADD] if  ( ix >= chunk.length )  { chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0; }^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 3;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^395^396^^^^382^401^[ADD] chunk = builder.appendCompletedChunk ( chunk, ix ) ; ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0 / 0;^396^^^^^382^401^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^^396^^^^^382^401^[ADD] ix = 0;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^400^^^^^382^401^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  LongBuilder builder  [TYPE]  long[] chunk  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  value  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) ) {^407^408^^^^403^417^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^407^408^409^410^411^403^417^[ADD] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  { if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  %  2 == 0 )  {^409^^^^^403^417^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^return null;^409^410^411^^^403^417^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return true;^410^^^^^403^417^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  *  2 == 0 )  {^409^^^^^403^417^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return false;^410^^^^^403^417^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return this;^410^^^^^403^417^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^413^^^^^403^417^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^413^414^415^^^403^417^[ADD] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  { throw ctxt.mappingException  (" ")  ; }^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return ;^414^^^^^403^417^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^414^^^^^403^417^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[ADD]^^414^^^^^403^417^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^416^^^^^403^417^[REPLACE] return new long[] { _parseLongPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] LongDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^private static final long serialVersionUID ;^424^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] handleNonArray [TYPE] long[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  LongDeser instance  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  value  [TYPE]  JsonParser jp 
[REPLACE]^float value = _parseFloatPrimitive ( jp, ctxt ) ;^426^^^^^^^[REPLACE] public FloatDeser (  )  { super ( float[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$FloatDeser() [PARAMETER] [CLASS] FloatDeser   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^432^^^^^429^449^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^return builder.completeAndClearBuffer ( chunk, ix ) ;^433^^^^^429^449^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ArrayBuilders.FloatBuilder builder = ctxt .isEnabled (  )  .getFloatBuilder (  ) ;^435^^^^^429^449^[REPLACE] ArrayBuilders.FloatBuilder builder = ctxt.getArrayBuilders (  ) .getFloatBuilder (  ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^float[] chunk = null.resetAndStart (  ) ;^436^^^^^429^449^[REPLACE] float[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^int ix = 1;^437^^^^^429^449^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^^437^^^^^429^449^[ADD] int ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^439^^^^^429^449^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^if  ( ix >= chunk.length /  2 )  {^442^^^^^429^449^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk =  this.appendCompletedChunk ( chunk, ix ) ;^443^^^^^429^449^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ix = 0L;^444^^^^^429^449^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk =  1.appendCompletedChunk ( chunk, ix ) ;^443^^^^^429^449^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk[ix++] =  value;^446^^^^^429^449^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ArrayBuilders.FloatBuilder builder = ctxt.getArrayBuilders (  ) .getFloatBuilder (  ) ;^441^^^^^429^449^[REPLACE] float value = _parseFloatPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^if  ( ix >= chunk.length - 4 )  {^442^^^^^429^449^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^443^^^^^429^449^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^ix = 1;^444^^^^^429^449^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^^444^^^^^429^449^[ADD] ix = 0;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[ADD]^^441^^^^^429^449^[ADD] float value = _parseFloatPrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^return builder .resetAndStart (  )  ;^448^^^^^429^449^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  boolean false  true  [TYPE]  FloatBuilder builder  [TYPE]  DeserializationContext ctxt  [TYPE]  float value  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp  [TYPE]  float[] chunk 
[REPLACE]^if  (  ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^455^456^^^^451^465^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (  ) .size (  )  == 0  )  {^457^^^^^451^465^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^458^^^^^451^465^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return this;^458^^^^^451^465^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  %  2 == 0  )  {^457^^^^^451^465^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^458^^^^^451^465^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^461^^^^^451^465^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^462^^^^^451^465^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^462^^^^^451^465^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .isEnabled (  )   ;^462^^^^^451^465^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^464^^^^^451^465^[REPLACE] return new float[] { _parseFloatPrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] FloatDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^private static final long serialVersionUID ;^472^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] handleNonArray [TYPE] float[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^double[] chunk = builder.resetAndStart (  ) ;^474^^^^^^^[REPLACE] public DoubleDeser (  )  { super ( double[].class ) ; }^[METHOD] <init> [TYPE] PrimitiveArrayDeserializers$DoubleDeser() [PARAMETER] [CLASS] DoubleDeser   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( jp.isExpectedStartArrayToken (  )  )  {^480^^^^^477^496^[REPLACE] if  ( !jp.isExpectedStartArrayToken (  )  )  {^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[ADD]^return handleNonArray ( jp, ctxt ) ;^480^481^482^^^477^496^[ADD] if  ( !jp.isExpectedStartArrayToken (  )  )  { return handleNonArray ( jp, ctxt ) ; }^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.completeAndClearBuffer ( chunk, ix ) ;^481^^^^^477^496^[REPLACE] return handleNonArray ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ArrayBuilders.DoubleBuilder builder = ctxt.getArrayBuilders (  )  ._parseDoublePrimitive ( true , null )  ;^483^^^^^477^496^[REPLACE] ArrayBuilders.DoubleBuilder builder = ctxt.getArrayBuilders (  ) .getDoubleBuilder (  ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^double[] chunk = false.resetAndStart (  ) ;^484^^^^^477^496^[REPLACE] double[] chunk = builder.resetAndStart (  ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^int ix = 0 / 3;^485^^^^^477^496^[REPLACE] int ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^while  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^487^^^^^477^496^[REPLACE] while  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ix >= chunk.length (  )  )  {^489^^^^^477^496^[REPLACE] if  ( ix >= chunk.length )  {^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  true.appendCompletedChunk ( chunk, ix ) ;^490^^^^^477^496^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 1;^491^^^^^477^496^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  null.appendCompletedChunk ( chunk, ix ) ;^490^^^^^477^496^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 0L;^491^^^^^477^496^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk[ix++] =  value;^493^^^^^477^496^[REPLACE] chunk[ix++] = value;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^double[] chunk = builder.resetAndStart (  ) ;^488^^^^^477^496^[REPLACE] double value = _parseDoublePrimitive ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^chunk =  false.appendCompletedChunk ( chunk, ix ) ;^490^^^^^477^496^[REPLACE] chunk = builder.appendCompletedChunk ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^ix = 2;^491^^^^^477^496^[REPLACE] ix = 0;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^return builder.appendCompletedChunk ( chunk, ix ) ;^495^^^^^477^496^[REPLACE] return builder.completeAndClearBuffer ( chunk, ix ) ;^[METHOD] deserialize [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DoubleBuilder builder  [TYPE]  boolean false  true  [TYPE]  double[] chunk  [TYPE]  double value  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int ix  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) || ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^502^503^^^^498^512^[REPLACE] if  (  ( jp.getCurrentToken (  )  == JsonToken.VALUE_STRING ) && ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .length (  )  /  2 == 0 )  {^504^^^^^498^512^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^505^^^^^498^512^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^505^^^^^498^512^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getText (  ) .size (  )  == 0 )  {^504^^^^^498^512^[REPLACE] if  ( jp.getText (  ) .length (  )  == 0 )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return null;^504^505^506^^^498^512^[ADD] if  ( jp.getText (  ) .length (  )  == 0 )  { return null; }^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return this;^505^^^^^498^512^[REPLACE] return null;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( !ctxt .getArrayBuilders (  )   )  {^508^^^^^498^512^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY )  )  {^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^509^^^^^498^512^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^double[] chunk = builder.resetAndStart (  ) ;^509^^^^^498^512^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^509^^^^^498^512^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return handleNonArray ( jp, ctxt ) ;^511^^^^^498^512^[REPLACE] return new double[] { _parseDoublePrimitive ( jp, ctxt )  };^[METHOD] handleNonArray [TYPE] double[] [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] DoubleDeser   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
