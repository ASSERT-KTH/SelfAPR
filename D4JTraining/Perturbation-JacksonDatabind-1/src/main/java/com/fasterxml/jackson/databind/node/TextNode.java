[REPLACE]^final static int INT_SPACE ;^18^^^^^^^[REPLACE] final static int INT_SPACE = ' ';^ [CLASS] TextNode  
[REPLACE]^final static TextNode EMPTY_STRING_NODE  = null ;^20^^^^^^^[REPLACE] final static TextNode EMPTY_STRING_NODE = new TextNode ( "" ) ;^ [CLASS] TextNode  
[REPLACE]^String _value;^22^^^^^^^[REPLACE] final String _value;^ [CLASS] TextNode  
[REPLACE]^int len = str.length (  )  ;^68^^^^^66^157^[REPLACE] ByteArrayBuilder builder = new ByteArrayBuilder ( 100 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^int len = str.length (  )  ;^69^^^^^66^157^[REPLACE] final String str = _value;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^int ptr = 0 + 2;^70^^^^^66^157^[REPLACE] int ptr = 0;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^int len = str.trim (  ) ;^71^^^^^66^157^[REPLACE] int len = str.length (  ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  ==  len )  {^79^^^^^66^157^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^break main_loop;^79^80^81^^^66^157^[ADD] if  ( ptr >= len )  { break main_loop; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  ==  0 )  {^84^^^^^66^157^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 2 )  ;^85^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 0 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  (decodedData  !=  len )  {^89^^^^^66^157^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^_reportBase64EOF (  ) ;^89^90^91^^^66^157^[ADD] if  ( ptr >= len )  { _reportBase64EOF (  ) ; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^builder.appendTwoBytes ( decodedData )  ;^90^^^^^66^157^[REPLACE] _reportBase64EOF (  ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  <=  0 )  {^94^^^^^66^157^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^_reportInvalidBase64 ( b64variant, ch, 1 ) ;^94^95^96^^^66^157^[ADD] if  ( bits < 0 )  { _reportInvalidBase64 ( b64variant, ch, 1 ) ; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 0 ) ;^95^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 1 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  <  len )  {^99^^^^^66^157^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if   (  !b64variant.usesPaddingChar  (  ch  )    )   {  ;^101^^^^^66^157^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 2  ;^103^^^^^66^157^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( !b60variant .usesPaddingChar ( ch )   )  {^101^^^^^66^157^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 3;^103^^^^^66^157^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  >  0 )  {^113^^^^^66^157^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^113^114^115^116^^66^157^[ADD] if  ( bits < 0 )  { if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  { _reportInvalidBase64 ( b64variant, ch, 2 ) ; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  (ptr  ==  Base64Variant.BASE64_VALUE_PADDING )  {^114^^^^^66^157^[REPLACE] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 2L ) ;^115^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 2 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( decodedData  >  len )  {^118^^^^^66^157^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^builder.appendTwoBytes ( decodedData )  ;^119^^^^^66^157^[REPLACE] _reportBase64EOF (  ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( b64variant.usesPaddingChar ( ch )  )  {^122^^^^^66^157^[REPLACE] if  ( !b64variant.usesPaddingChar ( ch )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^122^123^124^^^66^157^[ADD] if  ( !b64variant.usesPaddingChar ( ch )  )  { _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 3L, "expected padding character '"b64variant.getPaddingChar (  ) "'" ) ;^123^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant .usesPaddingChar ( ch )  +"'" ) ;^123^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REMOVE]^b64variant.usesPaddingChar ( ch )  ;^123^^^^^66^157^[REMOVE] ^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^121^^^^^66^157^[ADD] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 2  ;^126^^^^^66^157^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  ==  Base64Variant.BASE64_VALUE_PADDING )  {^114^^^^^66^157^[REPLACE] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 5 ) ;^115^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 2 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  (decodedData  <=  len )  {^118^^^^^66^157^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^} else if   (  b64variant.usesPaddingChar  (  ch  )    )   {  ;^122^^^^^66^157^[REPLACE] if  ( !b64variant.usesPaddingChar ( ch )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^122^123^124^^^66^157^[ADD] if  ( !b64variant.usesPaddingChar ( ch )  )  { _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"b64variant.getPaddingChar (  ) "'" ) ;^123^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  <  len )  {^133^^^^^66^157^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^133^134^135^136^137^66^157^[ADD] if  ( ptr >= len )  {  if  ( !b64variant.usesPadding (  )  )  { decodedData >>= 2; builder.appendTwoBytes ( decodedData ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( b64variant.usesPadding (  )  )  {^135^^^^^66^157^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 2 / 0;^136^^^^^66^157^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^builder.appendTwoBytes ( decodedData ) ;^136^137^^^^66^157^[ADD] decodedData >>= 2; builder.appendTwoBytes ( decodedData ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if   (  !b64variant.usesPaddingChar  (  ch  )    )   {  ;^135^^^^^66^157^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REMOVE]^if  ( ptr >= len )  {     if  ( ! ( b64variant.usesPadding (  )  )  )  {         decodedData >>= 2;         builder.appendTwoBytes ( decodedData ) ;         break;     }     _reportBase64EOF (  ) ; }^135^^^^^66^157^[REMOVE] ^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 1;^136^^^^^66^157^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  ==  0 )  {^144^^^^^66^157^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^152^153^^^^144^154^[ADD] decodedData =  ( decodedData << 6 )  | bits; builder.appendThreeBytes ( decodedData ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  ==  Base64Variant.BASE64_VALUE_PADDING )  {^145^^^^^66^157^[REPLACE] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^_reportInvalidBase64 ( b64variant, ch, 3 ) ;^145^146^147^^^66^157^[ADD] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  { _reportInvalidBase64 ( b64variant, ch, 3 ) ; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 2 )  ;^146^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REMOVE]^_reportInvalidBase64 ( b64variant, ch, 2 )  ;^146^^^^^66^157^[REMOVE] ^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 2 / 2;^148^^^^^66^157^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  ==  EMPTY_STRING_NODE )  {^145^^^^^66^157^[REPLACE] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 0 ) ;^146^^^^^66^157^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^ch =  null.charAt ( ptr++ ) ;^78^^^^^66^157^[REPLACE] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^92^^^^^66^157^[ADD] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^bits =  null.decodeBase64Char ( ch ) ;^93^^^^^66^157^[REPLACE] bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData =  ( decodedData << 6 )  & bits;^97^^^^^66^157^[REPLACE] decodedData =  ( decodedData << 6 )  | bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 2;^103^^^^^66^157^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^ch =  null.charAt ( ptr++ ) ;^109^^^^^66^157^[REPLACE] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^110^^^^^66^157^[ADD] bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[ADD]^^126^127^^^^66^157^[ADD] decodedData >>= 4; builder.append ( decodedData ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData =  ( decodedData << 6 )  & bits;^131^^^^^66^157^[REPLACE] decodedData =  ( decodedData << 6 )  | bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 4  ;^136^^^^^66^157^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^ch =  null.charAt ( ptr++ ) ;^142^^^^^66^157^[REPLACE] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^bits =  null.decodeBase64Char ( ch ) ;^143^^^^^66^157^[REPLACE] bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 3;^148^^^^^66^157^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^decodedData =  ( ptr )  & bits;^152^^^^^66^157^[REPLACE] decodedData =  ( decodedData << 6 )  | bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^int len = str.length (  )  ;^76^^^^^66^157^[REPLACE] char ch;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^int bits = b64variant.usesPaddingChar ( ch ) ;^83^^^^^66^157^[REPLACE] int bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^int decodedData = ptr;^87^^^^^66^157^[REPLACE] int decodedData = bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^return builder.toByteArray  (    )  ;  ;^156^^^^^66^157^[REPLACE] return builder.toByteArray (  ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_SPACE  bits  decodedData  len  ptr 
[REPLACE]^int len = str.length (  )  ;^279^^^^^278^294^[REPLACE] String base;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^if  ( ch  !=  INT_SPACE )  {^280^^^^^278^294^[REPLACE] if  ( ch <= INT_SPACE )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^280^281^282^283^^278^294^[ADD] if  ( ch <= INT_SPACE )  { base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units"; } else if  ( b64variant.usesPaddingChar ( ch )  )  { base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^}  else {^282^^^^^278^294^[REPLACE] } else if  ( b64variant.usesPaddingChar ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^}   base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^282^283^284^^286^278^294^[ADD] else if  ( b64variant.usesPaddingChar ( ch )  )  { base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character"; } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  { base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^}  if  ( Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^284^^^^^278^294^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^}   base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^284^285^286^287^288^278^294^[ADD] else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {  base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; } else { base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^^288^^^^^284^289^[ADD] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^^286^^^^^278^294^[ADD] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^288^^^^^278^294^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base = "Unexpected padding character  ( '"b64variant.getPaddingChar (  ) "' )  as character #" ( bindex1 ) " of 4-char base64 unit: padding only legal as 3rd or 4th character";^283^^^^^278^294^[REPLACE] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REMOVE]^if  ( b64variant.usesPaddingChar ( ch )  )  {     base =  (  (  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  )  + "' )  as character #" )  +  ( bindex + 1 )  )  + " of 4-char base64 unit: padding only legal as 3rd or 4th character"; }else     if  (  ( ! ( isDefined ( ch )  )  )  ||  ( isISOControl ( ch )  )  )  {         base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }else {         base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }^284^^^^^278^294^[REMOVE] ^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base = "Illegal character '"ch"'  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^288^^^^^284^289^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base = "Illegal character  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^286^^^^^278^294^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base = "Illegal character '"ch"'  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^288^^^^^278^294^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base = "Illegal white space character  ( code 0x"Integer.toHexString ( ch ) " )  as character #" ( bindex1 ) " of 4-char base64 unit: can only used between units";^281^^^^^278^294^[REPLACE] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^}  if  ( b64variant.usesPaddingChar ( ch )  )  {^282^^^^^278^294^[REPLACE] } else if  ( b64variant.usesPaddingChar ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^288^^^^^284^289^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^286^^^^^278^294^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^}  if  (  Character.isISOControl ( ch )  )  {^284^^^^^278^294^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^if  ( msg == null )  {^290^^^^^278^294^[REPLACE] if  ( msg != null )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^^290^291^292^^^278^294^[ADD] if  ( msg != null )  { base = base + ": " + msg; }^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^^291^^^^^278^294^[ADD] base = base + ": " + msg;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[REPLACE]^base = base  ": " str;^291^^^^^278^294^[REPLACE] base = base + ": " + msg;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
[ADD]^^293^^^^^278^294^[ADD] throw new JsonParseException  (" ")  ;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int INT_SPACE  bindex  bits  decodedData  defaultValue  len  ptr 
