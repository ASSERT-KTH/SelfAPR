[REPLACE]^private  final long serialVersionUID = 5345570420394408290;^27^^^^^^^[REPLACE] private static final long serialVersionUID = 5345570420394408290L;^ [CLASS] AsWrapperTypeDeserializer  
[REPLACE]^super ( bt, idRes, typePropertyName, typeIdVisible, false ) ;^32^^^^^29^33^[REPLACE] super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [CLASS] AsWrapperTypeDeserializer   [TYPE]  JavaType bt  [TYPE]  Class defaultImpl  [TYPE]  String typePropertyName  [TYPE]  boolean false  true  typeIdVisible  [TYPE]  long serialVersionUID  [TYPE]  TypeIdResolver idRes 
[REPLACE]^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^36^^^^^35^37^[REPLACE] super ( src, property ) ;^[METHOD] <init> [TYPE] BeanProperty) [PARAMETER] AsWrapperTypeDeserializer src BeanProperty property [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  AsWrapperTypeDeserializer src  [TYPE]  BeanProperty property 
[ADD]^^36^^^^^35^37^[ADD] super ( src, property ) ;^[METHOD] <init> [TYPE] BeanProperty) [PARAMETER] AsWrapperTypeDeserializer src BeanProperty property [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  AsWrapperTypeDeserializer src  [TYPE]  BeanProperty property 
[REPLACE]^if  ( prop  !=  _property )  {^42^^^^^40^46^[REPLACE] if  ( prop == _property )  {^[METHOD] forProperty [TYPE] TypeDeserializer [PARAMETER] BeanProperty prop [CLASS] AsWrapperTypeDeserializer   [TYPE]  long serialVersionUID  [TYPE]  BeanProperty prop  [TYPE]  boolean false  true 
[ADD]^return this;^42^43^44^^^40^46^[ADD] if  ( prop == _property )  { return this; }^[METHOD] forProperty [TYPE] TypeDeserializer [PARAMETER] BeanProperty prop [CLASS] AsWrapperTypeDeserializer   [TYPE]  long serialVersionUID  [TYPE]  BeanProperty prop  [TYPE]  boolean false  true 
[REPLACE]^return null;^43^^^^^40^46^[REPLACE] return this;^[METHOD] forProperty [TYPE] TypeDeserializer [PARAMETER] BeanProperty prop [CLASS] AsWrapperTypeDeserializer   [TYPE]  long serialVersionUID  [TYPE]  BeanProperty prop  [TYPE]  boolean false  true 
[REPLACE]^return new AsWrapperTypeDeserializer ( null, prop ) ;^45^^^^^40^46^[REPLACE] return new AsWrapperTypeDeserializer ( this, prop ) ;^[METHOD] forProperty [TYPE] TypeDeserializer [PARAMETER] BeanProperty prop [CLASS] AsWrapperTypeDeserializer   [TYPE]  long serialVersionUID  [TYPE]  BeanProperty prop  [TYPE]  boolean false  true 
[REPLACE]^return new AsWrapperTypeDeserializer ( this, prop ) ;^50^^^^^49^51^[REPLACE] return As.WRAPPER_OBJECT;^[METHOD] getTypeInclusion [TYPE] As [PARAMETER] [CLASS] AsWrapperTypeDeserializer   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return new AsWrapperTypeDeserializer ( this, prop ) ;^60^^^^^57^61^[REPLACE] return _deserialize ( jp, ctxt ) ;^[METHOD] deserializeTypedFromObject [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return new AsWrapperTypeDeserializer ( this, prop ) ;^67^^^^^64^68^[REPLACE] return _deserialize ( jp, ctxt ) ;^[METHOD] deserializeTypedFromArray [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return new AsWrapperTypeDeserializer ( this, prop ) ;^74^^^^^71^75^[REPLACE] return _deserialize ( jp, ctxt ) ;^[METHOD] deserializeTypedFromScalar [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return new AsWrapperTypeDeserializer ( this, prop ) ;^81^^^^^78^82^[REPLACE] return _deserialize ( jp, ctxt ) ;^[METHOD] deserializeTypedFromAny [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getCurrentToken (  )   ==  JsonToken.START_OBJECT )  {^99^^^^^97^131^[REPLACE] if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REMOVE]^if  (  ( jp.nextToken (  )  )  !=  ( JsonToken.END_OBJECT )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; }^99^^^^^97^131^[REMOVE] ^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; ;^100^101^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^100^101^^^^97^131^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, typeId+baseTypeName (  )  ) ;^100^101^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^"need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^101^^^^^97^131^[REPLACE] "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (  )   ==  JsonToken.FIELD_NAME )  {^104^^^^^97^131^[REPLACE] if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^105^106^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^105^106^^^^97^131^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of " >= baseTypeName (  )  >= " ) " ) ;^105^106^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^"need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^106^^^^^97^131^[REPLACE] "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^106^107^^^^97^131^[ADD] "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ; }^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; ;^105^106^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^final String typeId = jp.nextToken (  ) ;^108^^^^^97^131^[REPLACE] final String typeId = jp.getText (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^Object value = deser.deserialize ( jp, ctxt ) ;^109^^^^^97^131^[REPLACE] JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^109^^^^^97^131^[ADD] JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^jp.getText (  ) ;^110^^^^^97^131^[REPLACE] jp.nextToken (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _typeIdVisible || jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^113^^^^^97^131^[REPLACE] if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^113^114^115^116^117^97^131^[ADD] if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {  @SuppressWarnings ( "resource" ) TokenBuffer tb = new TokenBuffer ( null ) ; tb.writeStartObject (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^jp =  JsonParserSequence.createFlattened ( null.asParser ( jp ) , jp ) ;^120^^^^^97^131^[REPLACE] jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^TokenBuffer tb = new TokenBuffer ( this ) ;^116^^^^^97^131^[REPLACE] TokenBuffer tb = new TokenBuffer ( null ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^116^117^^^^97^131^[ADD] TokenBuffer tb = new TokenBuffer ( null ) ; tb.writeStartObject (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^TokenBuffer tb = new TokenBuffer ( false ) ;^116^^^^^97^131^[REPLACE] TokenBuffer tb = new TokenBuffer ( null ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^Object value = this.deserialize ( jp, ctxt ) ;^124^^^^^97^131^[REPLACE] Object value = deser.deserialize ( jp, ctxt ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (  )   ==  JsonToken.END_OBJECT )  {^126^^^^^97^131^[REPLACE] if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^127^128^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .wrongTokenException ( jp )  ;^127^128^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return _deserialize ( jp, ctxt ) ;^130^^^^^97^131^[REPLACE] return value;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
