[REPLACE]^private static  long serialVersionUID = 5345570420394408290L;^27^^^^^^^[REPLACE] private static final long serialVersionUID = 5345570420394408290L;^ [CLASS] AsWrapperTypeDeserializer  
[REPLACE]^if  ( jp.getCurrentToken (  )   ==  JsonToken.START_OBJECT )  {^99^^^^^97^131^[REPLACE] if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^100^101^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, typeIdbaseTypeName (  )  ) ;^100^101^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^super ( bt, idRes, typePropertyName, typeIdVisible, null )  ;^101^^^^^97^131^[REPLACE] "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (  )   ==  JsonToken.FIELD_NAME )  {^104^^^^^97^131^[REPLACE] if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^104^105^106^107^^97^131^[ADD] if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  { throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ; }^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^105^106^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "baseTypeName (  ) " ) " ) ;^105^106^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^105^106^^^^97^131^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^super ( bt, idRes, typePropertyName, typeIdVisible, null )  ;^106^^^^^97^131^[REPLACE] "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^108^^^^^97^131^[ADD] final String typeId = jp.getText (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^final String typeId = jp.getText (  )  ;^109^^^^^97^131^[REPLACE] JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^( jp.nextToken (  )  )  ;^110^^^^^97^131^[REPLACE] jp.nextToken (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _typeIdVisible || jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^113^^^^^97^131^[REPLACE] if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^jp =  JsonParserSequence.createFlattened ( null.asParser ( jp ) , jp ) ;^120^^^^^97^131^[REPLACE] jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^tb.writeStartObject (  ) ;^116^117^^^^97^131^[ADD] TokenBuffer tb = new TokenBuffer ( null ) ; tb.writeStartObject (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^TokenBuffer tb = new TokenBuffer ( true ) ;^116^^^^^97^131^[REPLACE] TokenBuffer tb = new TokenBuffer ( null ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^Object value = null.deserialize ( jp, ctxt ) ;^124^^^^^97^131^[REPLACE] Object value = deser.deserialize ( jp, ctxt ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (  )   ==  JsonToken.END_OBJECT )  {^126^^^^^97^131^[REPLACE] if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^127^128^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .wrongTokenException ( jp )  ;^127^128^^^^97^131^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^127^128^^^^97^131^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return value;  ;^130^^^^^97^131^[REPLACE] return value;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object value  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
