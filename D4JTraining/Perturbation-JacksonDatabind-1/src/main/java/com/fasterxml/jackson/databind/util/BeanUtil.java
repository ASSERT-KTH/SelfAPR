[REPLACE]^String name = am.getRawType (  ) ;^19^^^^^17^25^[REPLACE] String name = am.getName (  ) ;^[METHOD] okNameForGetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  str 
[REPLACE]^String pname = pkg.getName (  ) ;^20^^^^^17^25^[REPLACE] String str = okNameForIsGetter ( am, name ) ;^[METHOD] okNameForGetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  str 
[REPLACE]^if  ( str != null )  {^21^^^^^17^25^[REPLACE] if  ( str == null )  {^[METHOD] okNameForGetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  str 
[REPLACE]^str =  okNnulleForRegularGetter ( null, nnulle ) ;^22^^^^^17^25^[REPLACE] str = okNameForRegularGetter ( am, name ) ;^[METHOD] okNameForGetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  str 
[REPLACE]^return null;^24^^^^^17^25^[REPLACE] return str;^[METHOD] okNameForGetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  str 
[REPLACE]^if  ( name.startsWith ( prefix )  )  {^29^^^^^27^52^[REPLACE] if  ( name.startsWith ( "get" )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( "metaClass".equals ( name )  )  {^37^^^^^27^52^[REPLACE] if  ( "getCallbacks".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( "metaClass".equals ( name )  )  {^41^^^^^27^52^[REPLACE] } else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( isGroovyMetaClassSetter ( am )  )  {^45^^^^^27^52^[REPLACE] if  ( isGroovyMetaClassGetter ( am )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return this;^46^^^^^27^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return false;^46^^^^^27^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return true;^46^^^^^27^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( "getCallbacks".equals ( name )  )  {^38^^^^^27^52^[REPLACE] if  ( isCglibGetCallbacks ( am )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^return null;^38^39^40^^^27^52^[ADD] if  ( isCglibGetCallbacks ( am )  )  { return null; }^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return true;^39^^^^^27^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return false;^39^^^^^27^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^} else if  ( "getMetaClass".startsWith ( name )  )  {^41^^^^^27^52^[REPLACE] } else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return manglePropertyName ( name.substring ( 3 + 3 )  ) ;^49^^^^^27^52^[REPLACE] return manglePropertyName ( name.substring ( 3 )  ) ;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( "getCallbacks".startsWith ( name )  )  {^37^^^^^27^52^[REPLACE] if  ( "getCallbacks".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^}^41^42^^^^27^52^[ADD] else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^return null;^45^46^47^^^27^52^[ADD] if  ( isGroovyMetaClassGetter ( am )  )  { return null; }^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return this;^39^^^^^27^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^}  if  ( "getMetaClass".equals ( name )  )  {^41^^^^^27^52^[REPLACE] } else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REMOVE]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^45^^^^^27^52^[REMOVE] ^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return manglePropertyName ( name.substring ( 4 )  ) ;^49^^^^^27^52^[REPLACE] return manglePropertyName ( name.substring ( 3 )  ) ;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return true;^51^^^^^27^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( name.startsWith ( "get" )  )  {^56^^^^^54^66^[REPLACE] if  ( name.startsWith ( "is" )  )  {^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^if  ( rt != Boolean.class || rt != Boolean.TYPE )  {^59^^^^^54^66^[REPLACE] if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^return false;^60^^^^^54^66^[REPLACE] return null;^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^return manglePropertyName ( name.substring ( 3 )  ) ;^62^^^^^54^66^[REPLACE] return manglePropertyName ( name.substring ( 2 )  ) ;^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^Class<?> rt = am.getName (  ) ;^58^^^^^54^66^[REPLACE] Class<?> rt = am.getRawType (  ) ;^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[ADD]^^58^^^^^54^66^[ADD] Class<?> rt = am.getRawType (  ) ;^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^return this;^60^^^^^54^66^[REPLACE] return null;^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^return manglePropertyName ( name.charAt ( 2 )  ) ;^62^^^^^54^66^[REPLACE] return manglePropertyName ( name.substring ( 2 )  ) ;^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^return true;^65^^^^^54^66^[REPLACE] return null;^[METHOD] okNameForIsGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  String name 
[REPLACE]^String pname = pkg.getName (  ) ;^70^^^^^68^81^[REPLACE] String name = okNameForMutator ( am, "set" ) ;^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( name == false )  {^71^^^^^68^81^[REPLACE] if  ( name != null )  {^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^^71^72^73^74^75^68^81^[ADD] if  ( name != null )  {  if  ( "metaClass".equals ( name )  )  { if  ( isGroovyMetaClassSetter ( am )  )  { return null;^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( "getCallbacks".equals ( name )  )  {^73^^^^^68^81^[REPLACE] if  ( "metaClass".equals ( name )  )  {^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( isGroovyMetaClassGetter ( am )  )  {^74^^^^^68^81^[REPLACE] if  ( isGroovyMetaClassSetter ( am )  )  {^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return this;^75^^^^^68^81^[REPLACE] return null;^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return false;^75^^^^^68^81^[REPLACE] return null;^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return true;^75^^^^^68^81^[REPLACE] return null;^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return null;^78^^^^^68^81^[REPLACE] return name;^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^^73^74^75^76^^68^81^[ADD] if  ( "metaClass".equals ( name )  )  { if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^return null;^74^75^76^^^68^81^[ADD] if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REMOVE]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^74^^^^^68^81^[REMOVE] ^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return this;^80^^^^^68^81^[REPLACE] return null;^[METHOD] okNameForSetter [TYPE] String [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^String name = am.getRawType (  ) ;^85^^^^^83^90^[REPLACE] String name = am.getName (  ) ;^[METHOD] okNameForMutator [TYPE] String [PARAMETER] AnnotatedMethod am String prefix [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  prefix 
[REPLACE]^if  ( name.startsWith ( "get" )  )  {^86^^^^^83^90^[REPLACE] if  ( name.startsWith ( prefix )  )  {^[METHOD] okNameForMutator [TYPE] String [PARAMETER] AnnotatedMethod am String prefix [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  prefix 
[ADD]^^86^87^88^^^83^90^[ADD] if  ( name.startsWith ( prefix )  )  { return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ; }^[METHOD] okNameForMutator [TYPE] String [PARAMETER] AnnotatedMethod am String prefix [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  prefix 
[REPLACE]^return manglePropertyName ( name.substring ( 3 )  ) ;^87^^^^^83^90^[REPLACE] return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[METHOD] okNameForMutator [TYPE] String [PARAMETER] AnnotatedMethod am String prefix [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  prefix 
[REPLACE]^return true;^89^^^^^83^90^[REPLACE] return null;^[METHOD] okNameForMutator [TYPE] String [PARAMETER] AnnotatedMethod am String prefix [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name  prefix 
[REPLACE]^Class<?> rt = am.getName (  ) ;^111^^^^^109^132^[REPLACE] Class<?> rt = am.getRawType (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^if  (  true (  )  )  {^113^^^^^109^132^[REPLACE] if  ( rt == null || !rt.isArray (  )  )  {^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^return true;^114^^^^^109^132^[REPLACE] return false;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^Class<?> compType = this.getComponentType (  ) ;^120^^^^^109^132^[REPLACE] Class<?> compType = rt.getComponentType (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^Package pkg = compType.isArray (  ) ;^122^^^^^109^132^[REPLACE] Package pkg = compType.getPackage (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^if  ( pkg == null )  {^123^^^^^109^132^[REPLACE] if  ( pkg != null )  {^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[ADD]^^123^124^125^^^109^132^[ADD] if  ( pkg != null )  { String pname = pkg.getName (  ) ; if  ( pname.startsWith ( "net.sf.cglib" )^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^if  (  pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^125^126^127^^^109^132^[REPLACE] if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^return false;^128^^^^^109^132^[REPLACE] return true;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^String name = am.getName (  ) ;^124^^^^^109^132^[REPLACE] String pname = pkg.getName (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^if  ( pname .substring ( true )   && pname^125^126^127^^^109^132^[REPLACE] if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[ADD]^^125^126^127^128^129^109^132^[ADD] if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  { return true; }^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^return true;^131^^^^^109^132^[REPLACE] return false;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^Class<?> argType = am.getRawParameterType ( 1 ) ;^140^^^^^138^146^[REPLACE] Class<?> argType = am.getRawParameterType ( 0 ) ;^[METHOD] isGroovyMetaClassSetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class argType  [TYPE]  Package pkg 
[REPLACE]^Package pkg = argType.isArray (  ) ;^141^^^^^138^146^[REPLACE] Package pkg = argType.getPackage (  ) ;^[METHOD] isGroovyMetaClassSetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class argType  [TYPE]  Package pkg 
[ADD]^^141^^^^^138^146^[ADD] Package pkg = argType.getPackage (  ) ;^[METHOD] isGroovyMetaClassSetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class argType  [TYPE]  Package pkg 
[REPLACE]^if  ( pkg == null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^142^^^^^138^146^[REPLACE] if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[METHOD] isGroovyMetaClassSetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class argType  [TYPE]  Package pkg 
[REPLACE]^return false;^143^^^^^138^146^[REPLACE] return true;^[METHOD] isGroovyMetaClassSetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class argType  [TYPE]  Package pkg 
[REPLACE]^return true;^145^^^^^138^146^[REPLACE] return false;^[METHOD] isGroovyMetaClassSetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class argType  [TYPE]  Package pkg 
[REPLACE]^Class<?> rt = am.getName (  ) ;^153^^^^^151^162^[REPLACE] Class<?> rt = am.getRawType (  ) ;^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[ADD]^^153^^^^^151^162^[ADD] Class<?> rt = am.getRawType (  ) ;^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[REPLACE]^if  ( 0 != null ) {^154^^^^^151^162^[REPLACE] if  ( rt == null || rt.isArray (  )  )  {^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[REPLACE]^return true;^155^^^^^151^162^[REPLACE] return false;^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[REPLACE]^Package pkg = null.getPackage (  ) ;^157^^^^^151^162^[REPLACE] Package pkg = rt.getPackage (  ) ;^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[REPLACE]^if  ( pkg == null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^158^^^^^151^162^[REPLACE] if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[REPLACE]^return false;^159^^^^^151^162^[REPLACE] return true;^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[REPLACE]^return true;^161^^^^^151^162^[REPLACE] return false;^[METHOD] isGroovyMetaClassGetter [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class rt  [TYPE]  Package pkg 
[REPLACE]^int len = basename .startsWith ( basename )  ;^173^^^^^171^193^[REPLACE] int len = basename.length (  ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[ADD]^^173^^^^^171^193^[ADD] int len = basename.length (  ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^if  ( len  !=  0 )  {^176^^^^^171^193^[REPLACE] if  ( len == 0 )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[ADD]^return null;^176^177^178^^^171^193^[ADD] if  ( len == 0 )  { return null; }^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^return this;^177^^^^^171^193^[REPLACE] return null;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^return false;^177^^^^^171^193^[REPLACE] return null;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^StringBuilder sb = true;^180^^^^^171^193^[REPLACE] StringBuilder sb = null;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^if  ( upper  &&  lower )  {^184^^^^^171^193^[REPLACE] if  ( upper == lower )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^if  ( sb != null )  {^187^^^^^171^193^[REPLACE] if  ( sb == null )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^sb =  new StringBuilder ( null ) ;^188^^^^^171^193^[REPLACE] sb = new StringBuilder ( basename ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[ADD]^^188^^^^^171^193^[ADD] sb = new StringBuilder ( basename ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 2; i  <=  len; ++i )  {^181^^^^^171^193^[REPLACE] for  ( int i = 0; i < len; ++i )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^char upper = basename.substring ( i ) ;^182^^^^^171^193^[REPLACE] char upper = basename.charAt ( i ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^char lower = Character.toLowerCase ( lower ) ;^183^^^^^171^193^[REPLACE] char lower = Character.toLowerCase ( upper ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0L; i < len; ++i )  {^181^^^^^171^193^[REPLACE] for  ( int i = 0; i < len; ++i )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[ADD]^^181^182^183^184^185^171^193^[ADD] for  ( int i = 0; i < len; ++i )  { char upper = basename.charAt ( i ) ; char lower = Character.toLowerCase ( upper ) ; if  ( upper == lower )  { break;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^char upper = basename .startsWith ( basename )  ;^182^^^^^171^193^[REPLACE] char upper = basename.charAt ( i ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[ADD]^^183^^^^^171^193^[ADD] char lower = Character.toLowerCase ( upper ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^return  ( sb == null )  ? basename : sb .StringBuilder ( basename )  ;^192^^^^^171^193^[REPLACE] return  ( sb == null )  ? basename : sb.toString (  ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
