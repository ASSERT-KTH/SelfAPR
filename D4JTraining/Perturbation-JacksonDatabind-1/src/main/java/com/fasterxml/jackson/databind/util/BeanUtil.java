[REPLACE]^if   (  name.startsWith  (  prefix  )    )   {  ;^29^^^^^28^52^[REPLACE] if  ( name.startsWith ( "get" )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if  ( "getCallbacks".startsWith ( name )  )  {^37^^^^^28^52^[REPLACE] if  ( "getCallbacks".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if   (  "metaClass".equals  (  name  )    )   {  ;^41^^^^^28^52^[REPLACE] } else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^}^41^42^^^^28^52^[ADD] else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if   (  isGroovyMetaClassSetter  (  am  )    )   {  ;^45^^^^^28^52^[REPLACE] if  ( isGroovyMetaClassGetter ( am )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REMOVE]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^45^^^^^28^52^[REMOVE] ^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return null;  ;^46^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return false;^46^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if   (  "getCallbacks".equals  (  name  )    )   {  ;^38^^^^^28^52^[REPLACE] if  ( isCglibGetCallbacks ( am )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return false;^39^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return null;  ;^39^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return true;^39^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^}  if  ( "getMetaClass".startsWith ( name )  )  {^41^^^^^28^52^[REPLACE] } else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REMOVE]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^41^^^^^28^52^[REMOVE] ^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^return null;^45^46^47^^^28^52^[ADD] if  ( isGroovyMetaClassGetter ( am )  )  { return null; }^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return this;^46^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return manglePropertyName ( name.substring ( 2 )  ) ;^49^^^^^28^52^[REPLACE] return manglePropertyName ( name.substring ( 3 )  ) ;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^if   (  "metaClass".equals  (  name  )    )   {  ;^37^^^^^28^52^[REPLACE] if  ( "getCallbacks".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^^37^38^39^40^^28^52^[ADD] if  ( "getCallbacks".equals ( name )  )  { if  ( isCglibGetCallbacks ( am )  )  { return null; }^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^}  if  ( "getMetaClass" .startsWith ( name )   )  {^41^^^^^28^52^[REPLACE] } else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return this;^39^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REMOVE]^if  ( "metaClass".equals ( name )  )  {     if  ( isGroovyMetaClassSetter ( am )  )  {         return null;     } }^38^^^^^28^52^[REMOVE] ^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^}  if  ( "getMetaClass".equals ( name )  )  {^41^^^^^28^52^[REPLACE] } else if  ( "getMetaClass".equals ( name )  )  {^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return manglePropertyName ( name.substring ( 3 - 1 )  ) ;^49^^^^^28^52^[REPLACE] return manglePropertyName ( name.substring ( 3 )  ) ;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[REPLACE]^return false;^51^^^^^28^52^[REPLACE] return null;^[METHOD] okNameForRegularGetter [TYPE] String [PARAMETER] AnnotatedMethod am String name [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  String name 
[ADD]^^111^^^^^110^132^[ADD] Class<?> rt = am.getRawType (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^if   (  rt == null || rt.isArray  (    )    )   {  ;^113^^^^^110^132^[REPLACE] if  ( rt == null || !rt.isArray (  )  )  {^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^return true;^114^^^^^110^132^[REPLACE] return false;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^Class<?> argType = am.getRawParameterType ( 0 )  ;^120^^^^^110^132^[REPLACE] Class<?> compType = rt.getComponentType (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^Package pkg = null.getPackage (  ) ;^122^^^^^110^132^[REPLACE] Package pkg = compType.getPackage (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^if  ( pkg == this )  {^123^^^^^110^132^[REPLACE] if  ( pkg != null )  {^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[ADD]^^123^124^125^^^110^132^[ADD] if  ( pkg != null )  { String pname = pkg.getName (  ) ; if  ( pname.startsWith ( "net.sf.cglib" )^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^if  ( pname .substring ( null )   && pname^125^126^127^^^110^132^[REPLACE] if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^return false;^128^^^^^125^129^[REPLACE] return true;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^return false;^128^^^^^110^132^[REPLACE] return true;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^String pname = pkg .getRawType (  )  ;^124^^^^^110^132^[REPLACE] String pname = pkg.getName (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[ADD]^^125^126^127^128^129^110^132^[ADD] if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  { return true; }^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^String name = am.getName (  )  ;^124^^^^^110^132^[REPLACE] String pname = pkg.getName (  ) ;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[REPLACE]^return true;^131^^^^^110^132^[REPLACE] return false;^[METHOD] isCglibGetCallbacks [TYPE] boolean [PARAMETER] AnnotatedMethod am [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  AnnotatedMethod am  [TYPE]  Class compType  rt  [TYPE]  Package pkg  [TYPE]  String pname 
[ADD]^^173^^^^^172^193^[ADD] int len = basename.length (  ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^if  ( len  !=  3 )  {^176^^^^^172^193^[REPLACE] if  ( len == 0 )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^return this;^177^^^^^172^193^[REPLACE] return null;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^return false;^177^^^^^172^193^[REPLACE] return null;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^StringBuilder sb = this;^180^^^^^172^193^[REPLACE] StringBuilder sb = null;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^if  ( upper  &&  lower )  {^184^^^^^172^193^[REPLACE] if  ( upper == lower )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[ADD]^break;^184^185^186^^^172^193^[ADD] if  ( upper == lower )  { break; }^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^if  ( sb != true )  {^187^^^^^172^193^[REPLACE] if  ( sb == null )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[ADD]^^187^188^189^^^172^193^[ADD] if  ( sb == null )  { sb = new StringBuilder ( basename ) ; }^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^sb =  new StringBuilder ( null ) ;^188^^^^^172^193^[REPLACE] sb = new StringBuilder ( basename ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 * 1; i < len; ++i )  {^181^^^^^172^193^[REPLACE] for  ( int i = 0; i < len; ++i )  {^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^char upper = basename.substring ( i ) ;^182^^^^^172^193^[REPLACE] char upper = basename.charAt ( i ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^char lower = Character.toLowerCase ( lower ) ;^183^^^^^172^193^[REPLACE] char lower = Character.toLowerCase ( upper ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
[REPLACE]^return sb .StringBuilder ( basename )  ;^192^^^^^172^193^[REPLACE] return  ( sb == null )  ? basename : sb.toString (  ) ;^[METHOD] manglePropertyName [TYPE] String [PARAMETER] String basename [CLASS] BeanUtil   [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  char lower  upper  [TYPE]  String basename  [TYPE]  int i  len 
