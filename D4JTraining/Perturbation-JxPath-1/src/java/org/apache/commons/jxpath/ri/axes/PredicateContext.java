[REPLACE]^private boolean done  = null ;^37^^^^^^^[REPLACE] private boolean done = false;^ [CLASS] PredicateContext  
[REPLACE]^Object pred = nameTestExpression.computeValue ( parentContext ) ;^42^^^^^41^48^[REPLACE] super ( parentContext ) ;^[METHOD] <init> [TYPE] Expression) [PARAMETER] EvalContext parentContext Expression expression [CLASS] PredicateContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean done  false  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[ADD]^^42^^^^^41^48^[ADD] super ( parentContext ) ;^[METHOD] <init> [TYPE] Expression) [PARAMETER] EvalContext parentContext Expression expression [CLASS] PredicateContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean done  false  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^this.expression =  nameTestExpression;^43^^^^^41^48^[REPLACE] this.expression = expression;^[METHOD] <init> [TYPE] Expression) [PARAMETER] EvalContext parentContext Expression expression [CLASS] PredicateContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean done  false  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( ! expression instanceof NameAttributeTest )  {^44^^^^^41^48^[REPLACE] if  ( expression instanceof NameAttributeTest )  {^[METHOD] <init> [TYPE] Expression) [PARAMETER] EvalContext parentContext Expression expression [CLASS] PredicateContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean done  false  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^nameTestExpression =  (  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ;^45^46^^^^41^48^[REPLACE] nameTestExpression = (  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ;^[METHOD] <init> [TYPE] Expression) [PARAMETER] EvalContext parentContext Expression expression [CLASS] PredicateContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean done  false  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( ok )  {^51^^^^^50^107^[REPLACE] if  ( done )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return true;^52^^^^^50^107^[REPLACE] return false;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( !setupDynamicPropertyPointer (  )  )  {^55^^^^^50^107^[REPLACE] if  ( setupDynamicPropertyPointer (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^55^56^57^^^50^107^[ADD] if  ( setupDynamicPropertyPointer (  )  )  { Object pred = nameTestExpression.computeValue ( parentContext ) ; String propertyName = InfoSetUtil.stringValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! pred instanceof Iterator )  {^83^^^^^55^104^[REPLACE] if  ( pred instanceof Iterator )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^83^84^85^86^^55^104^[ADD] if  ( pred instanceof Iterator )  { if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { return false; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! (  ( Iterator )  pred ) .next (  )  )  {^84^^^^^55^104^[REPLACE] if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return true;^85^^^^^55^104^[REPLACE] return false;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^pred =  (  ( NodePointer )  pred ) .getNode (  ) ; ;^87^^^^^55^104^[REPLACE] pred =  (  ( Iterator )  pred ) .next (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! pred instanceof NodePointer )  {^90^^^^^55^104^[REPLACE] if  ( pred instanceof NodePointer )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REMOVE]^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  {     return false; }^90^^^^^55^104^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^pred =  (  ( Iterator )  pred ) .next (  ) ; ;^91^^^^^55^104^[REPLACE] pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^91^^^^^55^104^[ADD] pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! pred instanceof Number )  {^94^^^^^55^104^[REPLACE] if  ( pred instanceof Number )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( InfoSetUtil.doubleValue ( pred )  )  {^100^^^^^55^104^[REPLACE] else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^position++;return true;^100^101^102^103^^55^104^[ADD] else if  ( InfoSetUtil.booleanValue ( pred )  )  { position++; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return false;^102^^^^^55^104^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^ok = true; ;^97^^^^^55^104^[REPLACE] done = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return   pos   ;^98^^^^^55^104^[REPLACE] return parentContext.setPosition ( pos ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^Object pred = nameTestExpression.computeValue ( parentContext ) ;^95^^^^^55^104^[REPLACE] int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^else if  ( InfoSetUtil .doubleValue ( pred )   )  {^100^^^^^55^104^[REPLACE] else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^100^101^102^103^^55^104^[ADD] else if  ( InfoSetUtil.booleanValue ( pred )  )  { position++; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^done = false;^97^^^^^55^104^[REPLACE] done = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return parentContext .reset (  )  ;^98^^^^^55^104^[REPLACE] return parentContext.setPosition ( pos ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^Object pred = nameTestExpression.computeValue ( parentContext ) ;^82^^^^^55^104^[REPLACE] Object pred = expression.computeValue ( parentContext ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^82^^^^^55^104^[ADD] Object pred = expression.computeValue ( parentContext ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^int pos =  ( int )  InfoSetUtil .booleanValue ( pred )  ;^95^^^^^55^104^[REPLACE] int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( pred instanceof Iterator )  {^70^^^^^50^107^[REPLACE] if  ( names[i].equals ( propertyName )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^70^71^72^73^^50^107^[ADD] if  ( names[i].equals ( propertyName )  )  { ok = true; break; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^ok = false;^71^^^^^50^107^[REPLACE] ok = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^71^72^^^^50^107^[ADD] ok = true; break;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( done )  {^75^^^^^50^107^[REPLACE] if  ( ok )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return false;^78^^^^^50^107^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^for  ( int i = 0 ; i < names.length %  0 .5 ; i++ )  {^69^^^^^50^107^[REPLACE] for  ( int i = 0; i < names.length; i++ )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^ok = true;break;^70^71^72^73^^50^107^[ADD] if  ( names[i].equals ( propertyName )  )  { ok = true; break; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^done = true; ;^71^^^^^50^107^[REPLACE] ok = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^break;^71^72^^^^50^107^[ADD] ok = true; break;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^Object pred = nameTest  parentContext   ;^56^^^^^50^107^[REPLACE] Object pred = nameTestExpression.computeValue ( parentContext ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^String propertyName = InfoSetUtil.doubleValue ( pred ) ;^57^^^^^50^107^[REPLACE] String propertyName = InfoSetUtil.stringValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^boolean ok = true;^67^^^^^50^107^[REPLACE] boolean ok = false;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^67^68^^^^50^107^[ADD] boolean ok = false; String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^String names[] = dynamicPropertyPointer.getValuePointer (  ) ;^68^^^^^50^107^[REPLACE] String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^for  ( int i = 0 ; i < names.length; i++ )  {^69^^^^^50^107^[REPLACE] for  ( int i = 0; i < names.length; i++ )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! pred instanceof Iterator )  {^83^^^^^50^107^[REPLACE] if  ( pred instanceof Iterator )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^83^84^85^86^^50^107^[ADD] if  ( pred instanceof Iterator )  { if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { return false; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! (  ( Iterator )  pred ) .next (  )  )  {^84^^^^^50^107^[REPLACE] if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return true;^85^^^^^50^107^[REPLACE] return false;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^pred =  (  ( NodePointer )  pred ) .getNode (  ) ; ;^87^^^^^50^107^[REPLACE] pred =  (  ( Iterator )  pred ) .next (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! pred instanceof NodePointer )  {^90^^^^^50^107^[REPLACE] if  ( pred instanceof NodePointer )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^90^91^92^^^50^107^[ADD] if  ( pred instanceof NodePointer )  { pred =  (  ( NodePointer )  pred ) .getNode (  ) ; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^pred =  (  ( Iterator )  pred ) .next (  ) ; ;^91^^^^^50^107^[REPLACE] pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! pred instanceof Number )  {^94^^^^^50^107^[REPLACE] if  ( pred instanceof Number )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^else {^100^^^^^50^107^[REPLACE] else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return false;^102^^^^^50^107^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^done = false;^97^^^^^50^107^[REPLACE] done = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return parentContext .reset (  )  ;^98^^^^^50^107^[REPLACE] return parentContext.setPosition ( pos ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^Object pred = nameTestExpression.computeValue ( parentContext ) ;^95^^^^^50^107^[REPLACE] int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( InfoSetUtil.doubleValue ( pred )  )  {^100^^^^^50^107^[REPLACE] else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^position++;return true;^100^101^102^103^^50^107^[ADD] else if  ( InfoSetUtil.booleanValue ( pred )  )  { position++; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^for  ( int i = 0; i < names.length *  0.5 ; i++ )  {^69^^^^^50^107^[REPLACE] for  ( int i = 0; i < names.length; i++ )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^69^70^71^72^73^50^107^[ADD] for  ( int i = 0; i < names.length; i++ )  { if  ( names[i].equals ( propertyName )  )  { ok = true; break; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^String propertyName = InfoSetUtil .doubleValue ( pred )  ;^57^^^^^50^107^[REPLACE] String propertyName = InfoSetUtil.stringValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^Object pred = nameTestExpression.computeValue ( parentContext ) ;^82^^^^^50^107^[REPLACE] Object pred = expression.computeValue ( parentContext ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^82^^^^^50^107^[ADD] Object pred = expression.computeValue ( parentContext ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^int pos =  ( int )  InfoSetUtil .booleanValue ( pred )  ;^95^^^^^50^107^[REPLACE] int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( ! (  ( Iterator )  pred )  .next (  )   )  {^84^^^^^55^104^[REPLACE] if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^84^85^86^^^55^104^[ADD] if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { return false; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^90^91^92^^^55^104^[ADD] if  ( pred instanceof NodePointer )  { pred =  (  ( NodePointer )  pred ) .getNode (  ) ; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( InfoSetUtil .doubleValue ( pred )   )  {^100^^^^^55^104^[REPLACE] else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^95^^^^^55^104^[ADD] int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REMOVE]^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  {     return false; }^100^^^^^55^104^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^return parentContext.setPosition ( pos ) ;^97^98^^^^55^104^[ADD] done = true; return parentContext.setPosition ( pos ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REMOVE]^if  ( ! ( setupDynamicPropertyPointer (  )  )  )  {     return setPositionStandard ( position ) ; }^75^^^^^50^107^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^for  ( int i = 0; i < names.length - 4; i++ )  {^69^^^^^50^107^[REPLACE] for  ( int i = 0; i < names.length; i++ )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^String names[] = dynamicPropertyPointer .setPropertyName ( propertyName )  ;^68^^^^^50^107^[REPLACE] String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REMOVE]^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  {     return false; }^100^^^^^50^107^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return   pos   ;^98^^^^^50^107^[REPLACE] return parentContext.setPosition ( pos ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^for  ( int i = 0; i < names.length (  ) ; i++ )  {^69^^^^^50^107^[REPLACE] for  ( int i = 0; i < names.length; i++ )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^71^^^^^50^107^[ADD] ok = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^87^^^^^50^107^[ADD] pred =  (  ( Iterator )  pred ) .next (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[ADD]^^97^^^^^50^107^[ADD] done = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^return true;^106^^^^^50^107^[REPLACE] return false;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  Expression expression  nameTestExpression  [TYPE]  Object pred  [TYPE]  String propertyName  [TYPE]  String[] names  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  int i  pos 
[REPLACE]^if  ( nameTestExpression != null )  {^114^^^^^113^131^[REPLACE] if  ( nameTestExpression == null )  {^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return true;^115^^^^^113^131^[REPLACE] return false;^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^NodePointer parent = parentContext .nextNode (  )  ;^118^^^^^113^131^[REPLACE] NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( parent != this  )  {^119^^^^^113^131^[REPLACE] if  ( parent == null )  {^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[ADD]^^119^120^121^^^113^131^[ADD] if  ( parent == null )  { return false; }^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return true;^120^^^^^113^131^[REPLACE] return false;^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^parent =  null.getValuePointer (  ) ;^122^^^^^113^131^[REPLACE] parent = parent.getValuePointer (  ) ;^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( ! ! ( parent instanceof PropertyOwnerPointer )  )  {^123^^^^^113^131^[REPLACE] if  ( ! ( parent instanceof PropertyOwnerPointer )  )  {^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[ADD]^return false;^123^124^125^^^113^131^[ADD] if  ( ! ( parent instanceof PropertyOwnerPointer )  )  { return false; }^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return true;^124^^^^^113^131^[REPLACE] return false;^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^dynamicPropertyPointer =  ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^126^127^128^129^^113^131^[REPLACE] dynamicPropertyPointer = ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return false;^130^^^^^113^131^[REPLACE] return true;^[METHOD] setupDynamicPropertyPointer [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  NodePointer parent  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( nameTestExpression != null )  {^134^^^^^133^150^[REPLACE] if  ( nameTestExpression == null )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^if  ( dynamicPropertyPointer != null )  {^138^^^^^133^150^[REPLACE] if  ( dynamicPropertyPointer == null )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[ADD]^^138^139^140^141^^133^150^[ADD] if  ( dynamicPropertyPointer == null )  { if  ( !setupDynamicPropertyPointer (  )  )  { return setPositionStandard ( position ) ; }^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^if  ( setupDynamicPropertyPointer (  )  )  {^139^^^^^133^150^[REPLACE] if  ( !setupDynamicPropertyPointer (  )  )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^return parentContext.nextSet (  ) ;^140^^^^^133^150^[REPLACE] return setPositionStandard ( position ) ;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^if  ( position < 1 / 2 && position > dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^[REPLACE] if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^return true;^145^^^^^133^150^[REPLACE] return false;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^return false;^148^^^^^133^150^[REPLACE] return true;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^return parentContext.nextSet (  ) ;^135^^^^^133^150^[REPLACE] return setPositionStandard ( position ) ;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[ADD]^return setPositionStandard ( position ) ;^139^140^141^^^133^150^[ADD] if  ( !setupDynamicPropertyPointer (  )  )  { return setPositionStandard ( position ) ; }^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^if  ( position < 1 &&true (  )  )  {^143^144^^^^133^150^[REPLACE] if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REMOVE]^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  {     return false; }^143^^^^^133^150^[REMOVE] ^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^if  ( position  ||  1 )  {^153^^^^^152^164^[REPLACE] if  ( position == 0 )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[ADD]^^153^154^155^156^^152^164^[ADD] if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( !setPosition ( 0 )  )  {^154^^^^^152^164^[REPLACE] if  ( !setPosition ( 1 )  )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return false;^155^^^^^152^164^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return true;^155^^^^^152^164^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( !setPosition ( 1L )  )  {^154^^^^^152^164^[REPLACE] if  ( !setPosition ( 1 )  )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[ADD]^^154^155^156^^^152^164^[ADD] if  ( !setPosition ( 1 )  )  { return null; }^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return this;^155^^^^^152^164^[REPLACE] return null;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( dynamicPropertyPointer == true )  {^158^^^^^152^164^[REPLACE] if  ( dynamicPropertyPointer != null )  {^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return parentContext.nextNode (  ) ;^162^^^^^152^164^[REPLACE] return parentContext.getCurrentNodePointer (  ) ;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return dynamicPropertyPointer.getLength (  ) ;^159^^^^^152^164^[REPLACE] return dynamicPropertyPointer.getValuePointer (  ) ;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^super.getNode (  ) ;^167^^^^^166^170^[REPLACE] super.reset (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^parentContext.nextSet (  ) ;^168^^^^^166^170^[REPLACE] parentContext.reset (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^done = true;^169^^^^^166^170^[REPLACE] done = false;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[ADD]^^169^^^^^166^170^[ADD] done = false;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^parentContext.reset (  ) ;^173^^^^^172^175^[REPLACE] reset (  ) ;^[METHOD] nextSet [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^return parentContext .reset (  )  ;^174^^^^^172^175^[REPLACE] return parentContext.nextSet (  ) ;^[METHOD] nextSet [TYPE] boolean [PARAMETER] [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression 
[REPLACE]^if  ( this.position  !=  position )  {^178^^^^^177^188^[REPLACE] if  ( this.position > position )  {^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^parentContext.reset (  ) ;^179^^^^^177^188^[REPLACE] reset (  ) ;^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^while  ( this.position  >=  position )  {^182^^^^^177^188^[REPLACE] while  ( this.position < position )  {^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[ADD]^^182^183^184^^^177^188^[ADD] while  ( this.position < position )  { if  ( !nextNode (  )  )  { return false;^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^if  ( nextNode (  )  )  {^183^^^^^177^188^[REPLACE] if  ( !nextNode (  )  )  {^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^return true;^184^^^^^177^188^[REPLACE] return false;^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[ADD]^^183^184^185^^^177^188^[ADD] if  ( !nextNode (  )  )  { return false; }^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
[REPLACE]^return false;^187^^^^^177^188^[REPLACE] return true;^[METHOD] setPositionStandard [TYPE] boolean [PARAMETER] int position [CLASS] PredicateContext   [TYPE]  boolean done  false  ok  true  [TYPE]  PropertyPointer dynamicPropertyPointer  [TYPE]  Expression expression  nameTestExpression  [TYPE]  int position 
