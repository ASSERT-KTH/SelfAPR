[REPLACE]^private boolean setStarted  = null ;^35^^^^^^^[REPLACE] private boolean setStarted = false;^ [CLASS] PrecedingOrFollowingContext  
[REPLACE]^private boolean started ;^36^^^^^^^[REPLACE] private boolean started = false;^ [CLASS] PrecedingOrFollowingContext  
[REPLACE]^currentNodePointer = it.getNodePointer (  ) ;^48^^^^^43^51^[REPLACE] super ( parentContext ) ;^[METHOD] <init> [TYPE] NodeTest,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean reverse [CLASS] PrecedingOrFollowingContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^48^^^^^43^51^[ADD] super ( parentContext ) ;^[METHOD] <init> [TYPE] NodeTest,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean reverse [CLASS] PrecedingOrFollowingContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^this.nodeTest =  null;^49^^^^^43^51^[REPLACE] this.nodeTest = nodeTest;^[METHOD] <init> [TYPE] NodeTest,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean reverse [CLASS] PrecedingOrFollowingContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^49^^^^^43^51^[ADD] this.nodeTest = nodeTest;^[METHOD] <init> [TYPE] NodeTest,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean reverse [CLASS] PrecedingOrFollowingContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^this.reverse =  true;^50^^^^^43^51^[REPLACE] this.reverse = reverse;^[METHOD] <init> [TYPE] NodeTest,boolean) [PARAMETER] EvalContext parentContext NodeTest nodeTest boolean reverse [CLASS] PrecedingOrFollowingContext   [TYPE]  EvalContext parentContext  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^54^^^^^53^55^[REPLACE] return currentNodePointer;^[METHOD] getCurrentNodePointer [TYPE] NodePointer [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return reverse ? -3 : 3;^58^^^^^57^59^[REPLACE] return reverse ? -1 : 1;^[METHOD] getDocumentOrder [TYPE] int [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^super .getCurrentPosition (  )  ;^62^^^^^61^65^[REPLACE] super.reset (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^62^^^^^61^65^[ADD] super.reset (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack  =  stack ;^63^^^^^61^65^[REPLACE] stack = new Stack (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^setStarted = true;^64^^^^^61^65^[REPLACE] setStarted = false;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^64^^^^^61^65^[ADD] setStarted = false;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( position  ==  this.position )  {^68^^^^^67^78^[REPLACE] if  ( position < this.position )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.pop (  ) ;^69^^^^^67^78^[REPLACE] reset (  ) ;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Stack nameStack  stack 
[REPLACE]^while  ( this.position  !=  position )  {^72^^^^^67^78^[REPLACE] while  ( this.position < position )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( nextNode (  )  )  {^73^^^^^67^78^[REPLACE] if  ( !nextNode (  )  )  {^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Stack nameStack  stack 
[REPLACE]^return true;^74^^^^^67^78^[REPLACE] return false;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Stack nameStack  stack 
[ADD]^^73^74^75^^^67^78^[ADD] if  ( !nextNode (  )  )  { return false; }^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^77^^^^^67^78^[REPLACE] return true;^[METHOD] setPosition [TYPE] boolean [PARAMETER] int position [CLASS] PrecedingOrFollowingContext   [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( setStarted )  {^81^^^^^80^165^[REPLACE] if  ( !setStarted )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( parent == null )  {^85^^^^^80^165^[REPLACE] if  ( parent != null )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( parent.childIterator ( true, reverse, currentRootLocation )  ) ;^87^88^^^^80^165^[REPLACE] stack.push ( parent.childIterator ( null, reverse, currentRootLocation )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^parent.childIterator ( false, reverse, currentRootLocation )  ) ;^88^^^^^80^165^[REPLACE] parent.childIterator ( null, reverse, currentRootLocation )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^setStarted = false; ;^82^^^^^80^165^[REPLACE] setStarted = true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentRootLocation ;^83^^^^^80^165^[REPLACE] currentRootLocation = parentContext.getCurrentNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodePointer parent = currentRootLocation.isRoot (  ) ;^84^^^^^80^165^[REPLACE] NodePointer parent = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( parent ==currentRootLocation )  {^85^^^^^80^165^[REPLACE] if  ( parent != null )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^85^86^87^88^89^80^165^[ADD] if  ( parent != null )  {  stack.push ( parent.childIterator ( null, reverse, currentRootLocation )  ) ; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( parent.childIterator ( this, reverse, currentRootLocation )  ) ;^87^88^^^^80^165^[REPLACE] stack.push ( parent.childIterator ( null, reverse, currentRootLocation )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^87^88^^^^80^165^[ADD] stack.push ( parent.childIterator ( null, reverse, currentRootLocation )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodePointer parent = currentRootLocation .isRoot (  )  ;^84^^^^^80^165^[REPLACE] NodePointer parent = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^while  ( false )  {^92^^^^^80^165^[REPLACE] while  ( true )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^while  ( stack.isEmpty (  )  )  {^111^^^^^80^165^[REPLACE] while  ( !stack.isEmpty (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( reverse )  {^112^^^^^80^165^[REPLACE] if  ( !reverse )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^112^113^114^115^^80^165^[ADD] if  ( !reverse )  { NodeIterator it =  ( NodeIterator )  stack.peek (  ) ; if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  { currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   &  4 )  )  {^136^^^^^112^161^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( stack.isEmpty (  )  )  {^152^^^^^136^160^[REPLACE] if  ( !stack.isEmpty (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^it =  ( PropertyIterator )  stack.peek (  ) ;currentNodePointer = it.getNodePointer (  ) ;super.setPosition ( getCurrentPosition (  )  + 1 ) ;^152^153^154^155^156^136^160^[ADD] if  ( !stack.isEmpty (  )  )  { it =  ( PropertyIterator )  stack.peek (  ) ; currentNodePointer = it.getNodePointer (  ) ; if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^else if  ( currentNodePointer.testNode ( nodeTest )  )  {^155^^^^^136^160^[REPLACE] if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^157^^^^^136^160^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it ;^153^^^^^136^160^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer =  null.getNodePointer (  ) ;^154^^^^^136^160^[REPLACE] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentNodePointer.isLeaf (  )  )  {^138^^^^^112^161^[REPLACE] if  ( !currentNodePointer.isLeaf (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^138^139^140^141^142^112^161^[ADD] if  ( !currentNodePointer.isLeaf (  )  )  { stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentNodePointer.testNode ( nodeTest )  )  {^145^^^^^112^161^[REPLACE] else if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^147^^^^^112^161^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( this, reverse,^139^140^141^142^^112^161^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( false, reverse, false )  ) ;^140^141^142^143^^112^161^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^else {^145^^^^^112^161^[REPLACE] else if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^145^146^147^148^^112^161^[ADD] else if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer =  null.getNodePointer (  ) ;^137^^^^^112^161^[REPLACE] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer .isRoot (  )  ( true, reverse,^139^140^141^142^^112^161^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer .isRoot (  )   ) ;^140^141^142^143^^112^161^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( stack.isEmpty (  )  )  {^152^^^^^112^161^[REPLACE] if  ( !stack.isEmpty (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^else if  ( currentNodePointer.testNode ( nodeTest )  )  {^155^^^^^112^161^[REPLACE] if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^157^^^^^112^161^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it ;^153^^^^^112^161^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer =  null.getNodePointer (  ) ;^154^^^^^112^161^[REPLACE] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^154^^^^^112^161^[ADD] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^155^156^157^158^^112^161^[ADD] if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^137^^^^^112^161^[ADD] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it  =  it ;^153^^^^^112^161^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodeIterator it =  ( NodeIterator )  stack.pop (  ) ;^135^^^^^112^161^[REPLACE] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   !=  3 )  )  {^114^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.peek (  ) ;^131^^^^^114^132^[REPLACE] stack.pop (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( !setStarted )  {^116^^^^^80^165^[REPLACE] if  ( !currentNodePointer.isLeaf (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( true, reverse,^117^118^119^120^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( this, reverse, this )  ) ;^118^119^120^121^^80^165^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^118^119^120^^^80^165^[ADD] currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^else if  ( currentNodePointer.testNode ( nodeTest )  )  {^123^^^^^80^165^[REPLACE] if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^super.setPosition ( getCurrentPosition (  )  + 1 ) ;return true;^123^124^125^126^^80^165^[ADD] if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^125^^^^^80^165^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer =  null.getNodePointer (  ) ;^115^^^^^80^165^[REPLACE] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( !currentNodePointer.testNode (  )  )  {^116^^^^^80^165^[REPLACE] if  ( !currentNodePointer.isLeaf (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( false, reverse,^117^118^119^120^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^115^^^^^80^165^[ADD] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodeIterator it =  ( NodeIterator )  stack.pop (  ) ;^113^^^^^80^165^[REPLACE] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   &&  1 << 2 )  )  {^114^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^114^115^116^117^118^80^165^[ADD] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  { currentNodePointer = it.getNodePointer (  ) ; if  ( !currentNodePointer.isLeaf (  )  )  { stack.push ( currentNodePointer.childIterator (^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentNodePointer.isLeaf (  )  )  {^116^^^^^80^165^[REPLACE] if  ( !currentNodePointer.isLeaf (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack .peek (  )  ( currentNodePointer.childIterator ( this, reverse,^117^118^119^120^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( false, reverse, false )  ) ;^118^119^120^121^^80^165^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^123^124^125^126^^80^165^[ADD] if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^116^117^118^119^120^80^165^[ADD] if  ( !currentNodePointer.isLeaf (  )  )  { stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( this, reverse,^117^118^119^120^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   <  1 )  )  {^136^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^super.setPosition ( getCurrentPosition (  )  + 1 ) ;return true;^155^156^157^158^^136^160^[ADD] if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^153^154^^^^136^160^[ADD] it =  ( PropertyIterator )  stack.peek (  ) ; currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^155^156^157^158^^136^160^[ADD] if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it  =  it ;^153^^^^^136^160^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentNodePointer.isLeaf (  )  )  {^138^^^^^80^165^[REPLACE] if  ( !currentNodePointer.isLeaf (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentNodePointer.testNode ( nodeTest )  )  {^145^^^^^80^165^[REPLACE] else if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^147^^^^^80^165^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( true, reverse,^139^140^141^142^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^139^140^141^^^80^165^[ADD] stack.push ( currentNodePointer.childIterator ( null,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( this, reverse, this )  ) ;^140^141^142^143^^80^165^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^140^141^142^^^80^165^[ADD] currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer =  null.getNodePointer (  ) ;^137^^^^^80^165^[REPLACE] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( this, reverse,^139^140^141^142^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( stack.isEmpty (  )  )  {^152^^^^^80^165^[REPLACE] if  ( !stack.isEmpty (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REMOVE]^if  ( it.setPosition (  (  ( it.getPosition (  )  )  + 1 )  )  )  {     currentNodePointer = it.getNodePointer (  ) ;     if  ( ! ( currentNodePointer.isLeaf (  )  )  )  {         stack.push ( currentNodePointer.childIterator ( null, reverse, null )  ) ;     }else         if  ( currentNodePointer.testNode ( nodeTest )  )  {             super.setPosition (  (  ( getCurrentPosition (  )  )  + 1 )  ) ;             return true;         }      }else {     stack.pop (  ) ;     if  ( ! ( stack.isEmpty (  )  )  )  {         it =  (  ( PropertyIterator )   ( stack.peek (  )  )  ) ;         currentNodePointer = it.getNodePointer (  ) ;         if  ( currentNodePointer.testNode ( nodeTest )  )  {             super.setPosition (  (  ( getCurrentPosition (  )  )  + 1 )  ) ;             return true;         }     } }^152^^^^^80^165^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^else if  ( currentNodePointer.testNode ( nodeTest )  )  {^155^^^^^80^165^[REPLACE] if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return false;^157^^^^^80^165^[REPLACE] return true;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it  =  it ;^153^^^^^80^165^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^153^154^^^^80^165^[ADD] it =  ( PropertyIterator )  stack.peek (  ) ; currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer =  null.getNodePointer (  ) ;^154^^^^^80^165^[REPLACE] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^154^^^^^80^165^[ADD] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^super.setPosition ( getCurrentPosition (  )  + 1 ) ;return true;^155^156^157^158^^80^165^[ADD] if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^113^^^^^80^165^[ADD] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodeIterator it =  ( NodeIterator )  stack .push ( false )  ;^135^^^^^80^165^[REPLACE] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( !stack.isEmpty (  )  )  {^93^^^^^80^165^[REPLACE] if  ( stack.isEmpty (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentRootLocation != null ) {^96^97^^^^80^165^[REPLACE] if  ( currentRootLocation == null || currentRootLocation.isRoot (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^96^97^98^99^^80^165^[ADD] if  ( currentRootLocation == null || currentRootLocation.isRoot (  )  )  { break; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentRootLocation == this  )  {^102^^^^^80^165^[REPLACE] if  ( parent != null )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( parent.childIterator ( this, reverse,^103^104^105^106^^80^165^[REPLACE] stack.push ( parent.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^103^104^105^^^80^165^[ADD] stack.push ( parent.childIterator ( null,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^parent.childIterator ( this, reverse, currentRootLocation )  ) ;^104^105^106^107^^80^165^[REPLACE] parent.childIterator ( null, reverse, currentRootLocation )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentRootLocation  = null ;^94^^^^^80^165^[REPLACE] currentRootLocation = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^94^^^^^80^165^[ADD] currentRootLocation = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodePointer parent = currentRootLocation .isRoot (  )  ;^101^^^^^80^165^[REPLACE] NodePointer parent = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^101^^^^^80^165^[ADD] NodePointer parent = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  (  currentRootLocation.testNode (  )  )  {^96^97^^^^80^165^[REPLACE] if  ( currentRootLocation == null || currentRootLocation.isRoot (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( parent == null )  {^102^^^^^80^165^[REPLACE] if  ( parent != null )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REMOVE]^if  ( ! ( currentNodePointer.isLeaf (  )  )  )  {     stack.push ( currentNodePointer.childIterator ( null, reverse, null )  ) ; }^102^^^^^80^165^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack .peek (  )  ( currentRootLocation.childIterator ( true, reverse,^103^104^105^106^^80^165^[REPLACE] stack.push ( parent.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   ||  1 )  )  {^136^^^^^112^161^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^154^^^^^136^160^[ADD] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it  = null ;^153^^^^^136^160^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( true, reverse,^139^140^141^142^^112^161^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( true, reverse, true )  ) ;^140^141^142^143^^112^161^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^140^141^142^^^112^161^[ADD] currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( current  nodeTest    )  {^145^^^^^112^161^[REPLACE] else if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^152^153^154^155^156^112^161^[ADD] if  ( !stack.isEmpty (  )  )  { it =  ( PropertyIterator )  stack.peek (  ) ; currentNodePointer = it.getNodePointer (  ) ; if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^super.setPosition ( getCurrentPosition (  )  + 1 ) ;return true;^155^156^157^158^^112^161^[ADD] if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it .setPosition ( null )   )  {^114^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^117^118^119^^^80^165^[ADD] stack.push ( currentNodePointer.childIterator ( null,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( true, reverse, true )  ) ;^118^119^120^121^^80^165^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodeIterator it =  ( NodeIterator )  stack .push ( 1 )  ;^113^^^^^80^165^[REPLACE] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   !=  1 )  )  {^114^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^131^^^^^114^132^[ADD] stack.pop (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   ^  1 )  )  {^136^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^currentNodePointer = it.getNodePointer (  ) ;^136^137^138^139^140^80^165^[ADD] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  { currentNodePointer = it.getNodePointer (  ) ; if  ( !currentNodePointer.isLeaf (  )  )  { stack.push ( currentNodePointer.childIterator (^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( current  nodeTest    )  {^155^^^^^136^160^[REPLACE] if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^else {^145^^^^^80^165^[REPLACE] else if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^super.setPosition ( getCurrentPosition (  )  + 1 ) ;return true;^145^146^147^148^^80^165^[ADD] else if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( true, reverse, true )  ) ;^140^141^142^143^^80^165^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( false, reverse,^139^140^141^142^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it ;^153^^^^^80^165^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( current  nodeTest    )  {^155^^^^^80^165^[REPLACE] if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentRootLocation  =  currentRootLocation ;^94^^^^^80^165^[REPLACE] currentRootLocation = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodePointer parent = currentRootLocation.isRoot (  ) ;^101^^^^^80^165^[REPLACE] NodePointer parent = currentRootLocation.getParent (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodeIterator it =  ( NodeIterator )  stack.pop (  ) ;^135^^^^^80^165^[REPLACE] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REMOVE]^if  ( it.setPosition (  (  ( it.getPosition (  )  )  + 1 )  )  )  {     currentNodePointer = it.getNodePointer (  ) ;     if  ( ! ( currentNodePointer.isLeaf (  )  )  )  {         stack.push ( currentNodePointer.childIterator ( null, reverse, null )  ) ;     }else         if  ( currentNodePointer.testNode ( nodeTest )  )  {             super.setPosition (  (  ( getCurrentPosition (  )  )  + 1 )  ) ;             return true;         }      }else {     stack.pop (  ) ;     if  ( ! ( stack.isEmpty (  )  )  )  {         it =  (  ( PropertyIterator )   ( stack.peek (  )  )  ) ;         currentNodePointer = it.getNodePointer (  ) ;         if  ( currentNodePointer.testNode ( nodeTest )  )  {             super.setPosition (  (  ( getCurrentPosition (  )  )  + 1 )  ) ;             return true;         }     } }^112^^^^^80^165^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   <=  4 )  )  {^136^^^^^112^161^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentNodePointer .isRoot (  )   )  {^138^^^^^112^161^[REPLACE] if  ( !currentNodePointer.isLeaf (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( currentNodePointer.childIterator ( false, reverse,^139^140^141^142^^112^161^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^super.setPosition ( getCurrentPosition (  )  + 1 ) ;return true;^145^146^147^148^^112^161^[ADD] else if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^it  = null ;^153^^^^^112^161^[REPLACE] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^153^^^^^112^161^[ADD] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^135^^^^^112^161^[ADD] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   >  1 )  )  {^114^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   ==  1 )  )  {^114^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^153^^^^^136^160^[ADD] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( false, reverse, false )  ) ;^140^141^142^143^^80^165^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^152^153^154^155^156^80^165^[ADD] if  ( !stack.isEmpty (  )  )  { it =  ( PropertyIterator )  stack.peek (  ) ; currentNodePointer = it.getNodePointer (  ) ; if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentRootLocation != null || currentRootLocation .isLeaf (  )   )  {^96^97^^^^80^165^[REPLACE] if  ( currentRootLocation == null || currentRootLocation.isRoot (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentRootLocation == null )  {^102^^^^^80^165^[REPLACE] if  ( parent != null )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^102^103^104^105^106^80^165^[ADD] if  ( parent != null )  { stack.push ( parent.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^parent.childIterator ( false, reverse, currentRootLocation )  ) ;^104^105^106^107^^80^165^[REPLACE] parent.childIterator ( null, reverse, currentRootLocation )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^104^105^106^^^80^165^[ADD] parent.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( currentRootLocation != true ) {^96^97^^^^80^165^[REPLACE] if  ( currentRootLocation == null || currentRootLocation.isRoot (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack.push ( parent.childIterator ( false, reverse,^103^104^105^106^^80^165^[REPLACE] stack.push ( parent.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^parent.childIterator ( true, reverse, currentRootLocation )  ) ;^104^105^106^107^^80^165^[REPLACE] parent.childIterator ( null, reverse, currentRootLocation )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   !=  1 )  )  {^136^^^^^112^161^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^currentNodePointer.childIterator ( this, reverse, this )  ) ;^140^141^142^143^^112^161^[REPLACE] currentNodePointer.childIterator ( null, reverse, null )  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^currentNodePointer = it.getNodePointer (  ) ;^153^154^^^^112^161^[ADD] it =  ( PropertyIterator )  stack.peek (  ) ; currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( !currentNodePointer .isRoot (  )   )  {^116^^^^^80^165^[REPLACE] if  ( !currentNodePointer.isLeaf (  )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( current  nodeTest    )  {^123^^^^^80^165^[REPLACE] if  ( currentNodePointer.testNode ( nodeTest )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   <  1 )  )  {^114^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^currentNodePointer = it.getNodePointer (  ) ;^114^115^116^117^118^80^165^[ADD] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  { currentNodePointer = it.getNodePointer (  ) ; if  ( !currentNodePointer.isLeaf (  )  )  { stack.push ( currentNodePointer.childIterator (^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack .push ( null )  ;^131^^^^^114^132^[REPLACE] stack.pop (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REMOVE]^it =  ( PropertyIterator )  stack.peek (  ) ;^131^^^^^114^132^[REMOVE] ^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^if  ( it.setPosition ( it.getPosition (  )   >  1 )  )  {^136^^^^^80^165^[REPLACE] if  ( it.setPosition ( it.getPosition (  )  + 1 )  )  {^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^138^139^140^141^142^80^165^[ADD] if  ( !currentNodePointer.isLeaf (  )  )  { stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^stack .peek (  )  ( currentNodePointer.childIterator ( false, reverse,^139^140^141^142^^80^165^[REPLACE] stack.push ( currentNodePointer.childIterator ( null, reverse,^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^145^146^147^148^^80^165^[ADD] else if  ( currentNodePointer.testNode ( nodeTest )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; return true; }^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^153^^^^^80^165^[ADD] it =  ( PropertyIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[ADD]^^137^^^^^80^165^[ADD] currentNodePointer = it.getNodePointer (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^NodeIterator it =  ( NodeIterator )  stack .push ( null )  ;^135^^^^^80^165^[REPLACE] NodeIterator it =  ( NodeIterator )  stack.peek (  ) ;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
[REPLACE]^return true;^164^^^^^80^165^[REPLACE] return false;^[METHOD] nextNode [TYPE] boolean [PARAMETER] [CLASS] PrecedingOrFollowingContext   [TYPE]  NodeIterator it  [TYPE]  boolean false  reverse  setStarted  started  true  [TYPE]  NodePointer currentNodePointer  currentRootLocation  parent  [TYPE]  NodeTest nodeTest  [TYPE]  Stack nameStack  stack 
