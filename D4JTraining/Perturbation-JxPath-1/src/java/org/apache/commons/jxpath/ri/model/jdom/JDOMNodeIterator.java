[REPLACE]^private int position  = null ;^39^^^^^^^[REPLACE] private int position = 0;^ [CLASS] JDOMNodeIterator  
[REPLACE]^private int index  = null ;^40^^^^^^^[REPLACE] private int index = 0;^ [CLASS] JDOMNodeIterator  
[REPLACE]^this.parent =  startWith;^48^^^^^47^65^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( parent == this )  {^49^^^^^47^65^[REPLACE] if  ( startWith != null )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^this.child = startWith.getNode (  ) ;^49^50^51^^^47^65^[ADD] if  ( startWith != null )  { this.child = startWith.getNode (  ) ; }^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.child =  null.getNode (  ) ;^50^^^^^47^65^[REPLACE] this.child = startWith.getNode (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.child =  parent.getNode (  ) ;^50^^^^^47^65^[REPLACE] this.child = startWith.getNode (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^Object node = startWith.getNode (  ) ;^53^^^^^47^65^[REPLACE] Object node = parent.getNode (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( ! node instanceof Document )  {^54^^^^^47^65^[REPLACE] if  ( node instanceof Document )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  node instanceof Document  )   {  ;^57^^^^^47^65^[REPLACE] else if  ( node instanceof Element )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^this.children =  (  ( Element )  node ) .getContent (  ) ;^57^58^59^^^47^65^[ADD] else if  ( node instanceof Element )  { this.children =  (  ( Element )  node ) .getContent (  ) ; }^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^61^^^^^57^62^[ADD] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^58^^^^^47^65^[ADD] this.children =  (  ( Element )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children =  (  ( Document )   ( node )  ) .getContent (  )  ;^58^^^^^47^65^[REPLACE] this.children =  (  ( Element )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^61^^^^^47^65^[ADD] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^55^^^^^47^65^[ADD] this.children =  (  ( Document )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^else {^57^^^^^47^65^[REPLACE] else if  ( node instanceof Element )  {^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children  =  this.children ;^61^^^^^57^62^[REPLACE] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children =  (  ( Element )   ( node )  ) .getContent (  )  ;^55^^^^^47^65^[REPLACE] this.children =  (  ( Document )  node ) .getContent (  ) ;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.children  =  this.children ;^61^^^^^47^65^[REPLACE] this.children = Collections.EMPTY_LIST;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^this.nodeTest =  null;^63^^^^^47^65^[REPLACE] this.nodeTest = nodeTest;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^64^^^^^47^65^[ADD] this.reverse = reverse;^[METHOD] <init> [TYPE] NodePointer) [PARAMETER] NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( reverse )  {^104^^^^^102^121^[REPLACE] if  ( !reverse )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  !previous  (    )    )   {  ;^115^^^^^104^119^[REPLACE] if  ( testChild (  )  )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^return true;^115^116^117^^^104^119^[ADD] if  ( testChild (  )  )  { return true; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^114^^^^^104^119^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^116^^^^^104^119^[REPLACE] return true;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  !previous  (    )    )   {  ;^107^^^^^102^121^[REPLACE] if  ( testChild (  )  )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^107^108^109^^^102^121^[ADD] if  ( testChild (  )  )  { return true; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^108^^^^^102^121^[REPLACE] return true;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^106^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  !previous  (    )    )   {  ;^115^^^^^102^121^[REPLACE] if  ( testChild (  )  )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^116^^^^^102^121^[REPLACE] return true;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  = null ;^106^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^114^^^^^102^121^[REPLACE] child = children.get ( index ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^120^^^^^102^121^[REPLACE] return false;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( reverse )  {^125^^^^^123^161^[REPLACE] if  ( !reverse )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^125^126^127^128^129^123^161^[ADD] if  ( !reverse )  { if  ( position == 1 )  { index = 0; if  ( child != null )  { index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( index  ||  1 )  {^144^^^^^125^160^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == null )  {^146^^^^^125^160^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  (  ( position )  == 1 )  {     index =  ( children.size (  )  )  - 1;     if  (  ( child )  != null )  {         index =  ( children.indexOf ( child )  )  - 1;     } }else {      ( index ) --; }^146^^^^^125^160^[REMOVE] ^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^147^^^^^125^160^[ADD] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.size (  )  - 2 - 1;^145^^^^^125^160^[REPLACE] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   1;^147^^^^^125^160^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^index = children.indexOf ( child )  - 1;^146^147^148^^^125^160^[ADD] if  ( child != null )  { index = children.indexOf ( child )  - 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  !previous  (    )    )   {  ;^155^^^^^125^160^[REPLACE] if  ( testChild (  )  )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  ( ! ( next (  )  )  )  {     return false; }^155^^^^^125^160^[REMOVE] ^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^156^^^^^125^160^[REPLACE] return true;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index =  ( children.indexOf ( child )  )  - 1  ;^145^^^^^125^160^[REPLACE] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index =  ( children.size (  )  )  - 1  ;^147^^^^^125^160^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^154^^^^^125^160^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;  ;^159^^^^^125^160^[REPLACE] return false;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( position  !=  1 )  {^126^^^^^123^161^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^126^127^128^129^130^123^161^[ADD] if  ( position == 1 )  { index = 0; if  ( child != null )  { index = children.indexOf ( child )  + 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == null )  {^128^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^129^^^^^123^161^[ADD] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^127^^^^^123^161^[ADD] index = 0;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index =  ( children.size (  )  )  - 1  ;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  child == null  )   {  ;^128^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  !previous  (    )    )   {  ;^137^^^^^123^161^[REPLACE] if  ( testChild (  )  )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^138^^^^^123^161^[REPLACE] return true;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = 3;^127^^^^^123^161^[REPLACE] index = 0;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )  position;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child ;^136^^^^^123^161^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^141^^^^^123^161^[REPLACE] return false;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( position  != index )  {^126^^^^^123^161^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^index = children.indexOf ( child )  + 1;^128^129^130^^^123^161^[ADD] if  ( child != null )  { index = children.indexOf ( child )  + 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   1;^129^^^^^123^161^[REPLACE] index = children.indexOf ( child )  + 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( position  ||  1 )  {^144^^^^^123^161^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  child == null  )   {  ;^146^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REMOVE]^if  (  ( position )  == 1 )  {     index =  ( children.size (  )  )  - 1;     if  (  ( child )  != null )  {         index =  ( children.indexOf ( child )  )  - 1;     } }else {      ( index ) --; }^146^^^^^123^161^[REMOVE] ^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index =  ( children.size (  )  )  - 1  ;^147^^^^^123^161^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^145^^^^^123^161^[ADD] index = children.size (  )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^index = children.indexOf ( child )   1;^147^^^^^123^161^[REPLACE] index = children.indexOf ( child )  - 1;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if  ( child == this  )  {^146^^^^^123^161^[REPLACE] if  ( child != null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^index = children.indexOf ( child )  - 1;^146^147^148^^^123^161^[ADD] if  ( child != null )  { index = children.indexOf ( child )  - 1; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^if   (  !previous  (    )    )   {  ;^155^^^^^123^161^[REPLACE] if  ( testChild (  )  )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;^156^^^^^123^161^[REPLACE] return true;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[ADD]^^136^^^^^123^161^[ADD] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^child  =  child ;^154^^^^^123^161^[REPLACE] child = children.get ( index ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;  ;^138^^^^^123^161^[REPLACE] return true;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return false;  ;^141^^^^^123^161^[REPLACE] return false;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
[REPLACE]^return true;^159^^^^^123^161^[REPLACE] return false;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] JDOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  List children  [TYPE]  Object child  node  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int index  position 
