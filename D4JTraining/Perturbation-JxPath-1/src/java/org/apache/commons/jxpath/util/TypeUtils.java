[REPLACE]^private  TypeConverter typeConverter = new BasicTypeConverter (  ) ;^26^^^^^^^[REPLACE] private static TypeConverter typeConverter = new BasicTypeConverter (  ) ;^ [CLASS] TypeUtils  
[REPLACE]^typeConverter =  null;^32^^^^^31^33^[REPLACE] typeConverter = converter;^[METHOD] setTypeConverter [TYPE] void [PARAMETER] TypeConverter converter [CLASS] TypeUtils   [TYPE]  TypeConverter converter  typeConverter  [TYPE]  boolean false  true 
[REPLACE]^return typeConverter.convert ( object, toType ) ;^39^^^^^38^40^[REPLACE] return typeConverter;^[METHOD] getTypeConverter [TYPE] TypeConverter [PARAMETER] [CLASS] TypeUtils   [TYPE]  TypeConverter converter  typeConverter  [TYPE]  boolean false  true 
[REPLACE]^return typeConverter .convert ( object , toType )  ;^47^^^^^46^48^[REPLACE] return typeConverter.canConvert ( object, toType ) ;^[METHOD] canConvert [TYPE] boolean [PARAMETER] Object object Class toType [CLASS] TypeUtils   [TYPE]  TypeConverter converter  typeConverter  [TYPE]  Object object  [TYPE]  Class toType  [TYPE]  boolean false  true 
[REPLACE]^return typeConverter.canConvert ( object, toType ) ;^55^^^^^54^56^[REPLACE] return typeConverter.convert ( object, toType ) ;^[METHOD] convert [TYPE] Object [PARAMETER] Object object Class toType [CLASS] TypeUtils   [TYPE]  TypeConverter converter  typeConverter  [TYPE]  Object object  [TYPE]  Class toType  [TYPE]  boolean false  true 
