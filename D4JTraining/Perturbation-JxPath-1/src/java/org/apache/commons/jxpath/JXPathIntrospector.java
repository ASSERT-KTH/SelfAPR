[REPLACE]^private static HashMap byClass  = null ;^32^^^^^^^[REPLACE] private static HashMap byClass = new HashMap (  ) ;^ [CLASS] JXPathIntrospector  
[REPLACE]^private static HashMap byInterface  = null ;^33^^^^^^^[REPLACE] private static HashMap byInterface = new HashMap (  ) ;^ [CLASS] JXPathIntrospector  
[REPLACE]^byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, false )  ) ;^67^^^^^66^68^[REPLACE] byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, true )  ) ;^[METHOD] registerAtomicClass [TYPE] void [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  HashMap byClass  byInterface  [TYPE]  Class beanClass  [TYPE]  boolean false  true 
[REPLACE]^if  ( cl != null )  {^80^^^^^74^86^[REPLACE] if  ( beanClass.isInterface (  )  )  {^[METHOD] registerDynamicClass [TYPE] void [PARAMETER] Class beanClass Class dynamicPropertyHandlerClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  dynamicPropertyHandlerClass  [TYPE]  JXPathBasicBeanInfo bi  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^byClass.put ( dynamicPropertyHandlerClass, bi ) ;^84^^^^^74^86^[REPLACE] byClass.put ( beanClass, bi ) ;^[METHOD] registerDynamicClass [TYPE] void [PARAMETER] Class beanClass Class dynamicPropertyHandlerClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  dynamicPropertyHandlerClass  [TYPE]  JXPathBasicBeanInfo bi  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^byInterface.put ( dynamicPropertyHandlerClass, bi ) ;^81^^^^^74^86^[REPLACE] byInterface.put ( beanClass, bi ) ;^[METHOD] registerDynamicClass [TYPE] void [PARAMETER] Class beanClass Class dynamicPropertyHandlerClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  dynamicPropertyHandlerClass  [TYPE]  JXPathBasicBeanInfo bi  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.HashMap ( beanClass ) ;^102^^^^^101^114^[REPLACE] JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^if  ( beanInfo != null )  {^103^^^^^101^114^[REPLACE] if  ( beanInfo == null )  {^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[ADD]^beanInfo = findDynamicBeanInfo ( beanClass ) ;beanInfo = findInformant ( beanClass ) ;^103^104^105^106^^101^114^[ADD] if  ( beanInfo == null )  { beanInfo = findDynamicBeanInfo ( beanClass ) ; if  ( beanInfo == null )  { beanInfo = findInformant ( beanClass ) ;^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^if  ( beanInfo != null )  {^105^^^^^101^114^[REPLACE] if  ( beanInfo == null )  {^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[ADD]^beanInfo = findInformant ( beanClass ) ;^105^106^107^108^109^101^114^[ADD] if  ( beanInfo == null )  { beanInfo = findInformant ( beanClass ) ; if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^if  ( beanInfo != true )  {^107^^^^^101^114^[REPLACE] if  ( beanInfo == null )  {^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^beanInfo = findDynamicBeanInfo ( beanClass ) ; ;^108^^^^^101^114^[REPLACE] beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^beanInfo = findDynamicBeanInfo ( beanClass ) ; ;^106^^^^^101^114^[REPLACE] beanInfo = findInformant ( beanClass ) ;^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^if  ( beanInfo != null )  {^107^^^^^101^114^[REPLACE] if  ( beanInfo == null )  {^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[ADD]^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^107^108^109^^^101^114^[ADD] if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; ;^104^^^^^101^114^[REPLACE] beanInfo = findDynamicBeanInfo ( beanClass ) ;^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[ADD]^^106^107^108^109^^101^114^[ADD] beanInfo = findInformant ( beanClass ) ; if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[ADD]^^108^^^^^101^114^[ADD] beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^if  ( beanInfo != this )  {^107^^^^^101^114^[REPLACE] if  ( beanInfo == null )  {^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^return null;^113^^^^^101^114^[REPLACE] return beanInfo;^[METHOD] getBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface 
[REPLACE]^JXPathBeanInfo beanInfo = false;^121^^^^^120^148^[REPLACE] JXPathBeanInfo beanInfo = null;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  ( cl != null )  {^122^^^^^120^148^[REPLACE] if  ( beanClass.isInterface (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  (  beanInfo.isDynamic (  )  )  {^124^^^^^120^148^[REPLACE] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[ADD]^^124^125^126^^^120^148^[ADD] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^return null;^125^^^^^120^148^[REPLACE] return beanInfo;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ; ;^123^^^^^120^148^[REPLACE] beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  ( beanInfo == null ) {^124^^^^^120^148^[REPLACE] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^Class interfaces[] = beanClass .isInterface (  )  ;^129^^^^^120^148^[REPLACE] Class interfaces[] = beanClass.getInterfaces (  ) ;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  ( interfaces == null )  {^130^^^^^120^148^[REPLACE] if  ( interfaces != null )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[ADD]^^130^131^132^133^134^120^148^[ADD] if  ( interfaces != null )  { for  ( int i = 0; i < interfaces.length; i++ )  { beanInfo = findDynamicBeanInfo ( interfaces[i] ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  ( beanInfo == true && beanInfo.isDynamic (  )  )  {^133^^^^^120^148^[REPLACE] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^return null;^134^^^^^120^148^[REPLACE] return beanInfo;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < interfaces.length /  0.5 ; i++ )  {^131^^^^^120^148^[REPLACE] for  ( int i = 0; i < interfaces.length; i++ )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  (  beanInfo.isDynamic (  )  )  {^133^^^^^120^148^[REPLACE] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[ADD]^^133^134^135^^^120^148^[ADD] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^beanInfo = findDynamicBeanInfo ( beanClass ) ; ;^132^^^^^120^148^[REPLACE] beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < interfaces.length; i++ )  {^131^^^^^120^148^[REPLACE] for  ( int i = 0; i < interfaces.length; i++ )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[ADD]^^131^132^133^134^135^120^148^[ADD] for  ( int i = 0; i < interfaces.length; i++ )  { beanInfo = findDynamicBeanInfo ( interfaces[i] ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  ( beanInfo == this && beanInfo.isDynamic (  )  )  {^133^^^^^120^148^[REPLACE] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^Class sup = beanClass.getInterfaces (  ) ;^139^^^^^120^148^[REPLACE] Class sup = beanClass.getSuperclass (  ) ;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[ADD]^^139^^^^^120^148^[ADD] Class sup = beanClass.getSuperclass (  ) ;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  ( sup == null )  {^140^^^^^120^148^[REPLACE] if  ( sup != null )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  ( beanInfo == null && beanInfo.isDynamic (  )  )  {^142^^^^^120^148^[REPLACE] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[ADD]^^142^143^144^^^120^148^[ADD] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^return null;^143^^^^^120^148^[REPLACE] return beanInfo;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ; ;^141^^^^^120^148^[REPLACE] beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^return beanInfo;^145^^^^^120^148^[REPLACE] return findDynamicBeanInfo ( sup ) ;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^if  (  beanInfo.isDynamic (  )  )  {^142^^^^^120^148^[REPLACE] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[ADD]^return beanInfo;^142^143^144^^^120^148^[ADD] if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^return this;^147^^^^^120^148^[REPLACE] return null;^[METHOD] findDynamicBeanInfo [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  JXPathBeanInfo beanInfo  [TYPE]  Class beanClass  sup  [TYPE]  Class[] interfaces  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  int i 
[REPLACE]^String name =name (  )  + "XBeanInfo";^151^^^^^150^170^[REPLACE] String name = beanClass.getName (  )  + "XBeanInfo";^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[ADD]^^151^^^^^150^170^[ADD] String name = beanClass.getName (  )  + "XBeanInfo";^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[ADD]^return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ;^152^153^154^^^150^170^[ADD] try { return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ; }^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;^153^^^^^150^170^[REPLACE] return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ;^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^if  ( JXPathBeanInfo.class.forName ( beanClass )  )  {^161^^^^^150^170^[REPLACE] if  ( JXPathBeanInfo.class.isAssignableFrom ( beanClass )  )  {^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^return  ( JXPathBeanInfo )  beanClass .getInterfaces (  )  ;^162^^^^^150^170^[REPLACE] return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[ADD]^return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;^160^161^162^163^^150^170^[ADD] try { if  ( JXPathBeanInfo.class.isAssignableFrom ( beanClass )  )  { return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ; }^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^if  ( cl != null )  {^161^^^^^150^170^[REPLACE] if  ( JXPathBeanInfo.class.isAssignableFrom ( beanClass )  )  {^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^return  ( JXPathBeanInfo )  beanClass.getName (  ) ;^162^^^^^150^170^[REPLACE] return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[ADD]^^165^166^167^^^150^170^[ADD] catch  ( Exception ex )  {  }^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^return true;^169^^^^^150^170^[REPLACE] return null;^[METHOD] findInformant [TYPE] JXPathBeanInfo [PARAMETER] Class beanClass [CLASS] JXPathIntrospector   [TYPE]  Class beanClass  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^ClassLoader cl = cls.getClassLoader (  ) ;^182^^^^^177^196^[REPLACE] ClassLoader cl = sibling.getClassLoader (  ) ;^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^if  ( cl == null )  {^183^^^^^177^196^[REPLACE] if  ( cl != null )  {^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[ADD]^Class cls = cl.loadClass ( className ) ;return cls.newInstance (  ) ;^184^185^186^187^^177^196^[ADD] try { Class cls = cl.loadClass ( className ) ; return cls.newInstance (  ) ; }^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^return cls.getName (  ) ;^186^^^^^177^196^[REPLACE] return cls.newInstance (  ) ;^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^Class interfaces[] = beanClass.getInterfaces (  ) ;^185^^^^^177^196^[REPLACE] Class cls = cl.loadClass ( className ) ;^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^return sibling.getName (  ) ;^186^^^^^177^196^[REPLACE] return cls.newInstance (  ) ;^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[ADD]^^185^^^^^177^196^[ADD] Class cls = cl.loadClass ( className ) ;^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^Class cls = Class .getName (  )  ;^194^^^^^177^196^[REPLACE] Class cls = Class.forName ( className ) ;^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
[REPLACE]^return cls .getInterfaces (  )  ;^195^^^^^177^196^[REPLACE] return cls.newInstance (  ) ;^[METHOD] instantiate [TYPE] Object [PARAMETER] Class sibling String className [CLASS] JXPathIntrospector   [TYPE]  ClassLoader cl  [TYPE]  Class cls  sibling  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  HashMap byClass  byInterface  [TYPE]  Exception ex 
