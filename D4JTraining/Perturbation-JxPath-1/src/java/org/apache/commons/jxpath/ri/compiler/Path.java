[REPLACE]^private boolean basicKnown  = null ;^44^^^^^^^[REPLACE] private boolean basicKnown = false;^ [CLASS] Path  
[REPLACE]^if  ( ! ! ( nodeTest instanceof NodeNameTest )  ) {^107^^^^^104^115^[REPLACE] if  ( ! ( nodeTest instanceof NodeNameTest )  ) {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if  (  (  ( NodeNameTest )  nodeTest )  .getPredicates (  )   )  {^111^^^^^104^115^[REPLACE] if  (  (  ( NodeNameTest )  nodeTest ) .isWildcard (  )  )  {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[ADD]^return false;^111^112^113^^^104^115^[ADD] if  (  (  ( NodeNameTest )  nodeTest ) .isWildcard (  )  )  { return false; }^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return true;^108^^^^^104^115^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return true;^112^^^^^104^115^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return areBasicPredicates  (  step.getPredicates  (    )    )  ;  ;^114^^^^^104^115^[REPLACE] return areBasicPredicates ( step.getPredicates (  )  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^NodeTest nodeTest = step .getPredicates (  )  ;^106^^^^^104^115^[REPLACE] NodeTest nodeTest = step.getNodeTest (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if   (  nodeTest instanceof NodeNameTest  )   {  ;^107^^^^^92^117^[REPLACE] if  ( ! ( nodeTest instanceof NodeNameTest )  ) {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[ADD]^return false;^107^108^109^^^92^117^[ADD] if  ( ! ( nodeTest instanceof NodeNameTest )  ) { return false; }^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return true;^108^^^^^92^117^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if  (  (  ( NodeNameTest )  nodeTest ) .getPredicates (  )  )  {^111^^^^^92^117^[REPLACE] if  (  (  ( NodeNameTest )  nodeTest ) .isWildcard (  )  )  {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[ADD]^return false;^111^112^113^^^92^117^[ADD] if  (  (  ( NodeNameTest )  nodeTest ) .isWildcard (  )  )  { return false; }^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return true;^112^^^^^92^117^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return false;  ;^112^^^^^92^117^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return areBasicPredicates  (  step.getPredicates  (    )    )  ;  ;^114^^^^^92^117^[REPLACE] return areBasicPredicates ( step.getPredicates (  )  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^NodeTest nodeTest = step .getPredicates (  )  ;^106^^^^^92^117^[REPLACE] NodeTest nodeTest = step.getNodeTest (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if  ( ! ! ( nodeTest instanceof NodeTypeTest )  )  {^95^^^^^92^117^[REPLACE] if  ( ! ( nodeTest instanceof NodeTypeTest )  )  {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return true;^96^^^^^92^117^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return true;^100^^^^^92^117^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return areBasicPredicates  (  step.getPredicates  (    )    )  ;  ;^102^^^^^92^117^[REPLACE] return areBasicPredicates ( step.getPredicates (  )  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[ADD]^^94^^^^^92^117^[ADD] NodeTest nodeTest = step.getNodeTest (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[ADD]^^98^^^^^92^117^[ADD] int nodeType =  (  ( NodeTypeTest )  nodeTest ) .getNodeType (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if   (  nodeTest instanceof NodeNameTest  )   {  ;^95^^^^^92^117^[REPLACE] if  ( ! ( nodeTest instanceof NodeTypeTest )  )  {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return false;  ;^96^^^^^92^117^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[ADD]^^107^108^109^^^104^115^[ADD] if  ( ! ( nodeTest instanceof NodeNameTest )  ) { return false; }^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if  (  (  ( NodeNameTest )  nodeTest ) .getPredicates (  )  )  {^111^^^^^104^115^[REPLACE] if  (  (  ( NodeNameTest )  nodeTest ) .isWildcard (  )  )  {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REMOVE]^if  ( ! ( nodeTest instanceof NodeNameTest )  )  {     return false; }^111^^^^^104^115^[REMOVE] ^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^Step[] steps = getSteps (  )  ;^106^^^^^104^115^[REPLACE] NodeTest nodeTest = step.getNodeTest (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if  ( ! ! ( nodeTest instanceof NodeNameTest )  ) {^107^^^^^92^117^[REPLACE] if  ( ! ( nodeTest instanceof NodeNameTest )  ) {^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^NodeTest nodeTest = step .getPredicates (  )  ;^94^^^^^92^117^[REPLACE] NodeTest nodeTest = step.getNodeTest (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^int nodeType =  (  ( NodeTypeTest )  nodeTest ) .getNodeTest (  ) ;^98^^^^^92^117^[REPLACE] int nodeType =  (  ( NodeTypeTest )  nodeTest ) .getNodeType (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[ADD]^^106^^^^^92^117^[ADD] NodeTest nodeTest = step.getNodeTest (  ) ;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^return true;^116^^^^^92^117^[REPLACE] return false;^[METHOD] isSimpleStep [TYPE] boolean [PARAMETER] Step step [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  true  [TYPE]  Step step  [TYPE]  NodeTest nodeTest  [TYPE]  int nodeType 
[REPLACE]^if  ( predicates != null ) {^120^^^^^119^142^[REPLACE] if  ( predicates != null && predicates.length != 0 )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  ( ! predicates[i] instanceof NameAttributeTest )  {^123^^^^^119^142^[REPLACE] if  ( predicates[i] instanceof NameAttributeTest )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[ADD]^^123^124^125^126^127^119^142^[ADD] if  ( predicates[i] instanceof NameAttributeTest )  { if  (  (  ( NameAttributeTest )  predicates[i] ) .getNameTestExpression (  ) .isContextDependent (  )  )  { return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  ( predicates[i].getNodeTest (  )  )  {^130^^^^^119^142^[REPLACE] else if  ( predicates[i].isContextDependent (  )  )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  ( !true )  {^134^^^^^130^138^[REPLACE] if  ( !firstIndex )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REMOVE]^if  ( ctx.hasNext (  )  )  {     return null; }^134^^^^^130^138^[REMOVE] ^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^firstIndex = true;^137^^^^^130^138^[REPLACE] firstIndex = false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return false;  ;^135^^^^^130^138^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return false;  ;^131^^^^^119^142^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  ( !false )  {^134^^^^^119^142^[REPLACE] if  ( !firstIndex )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return false;  ;^135^^^^^119^142^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^firstIndex = true;^137^^^^^119^142^[REPLACE] firstIndex = false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return true;^131^^^^^119^142^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return true;^135^^^^^119^142^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  (  (  ( NameAttributeTest )  predicates[i] ) .getNodeTest (  ) .isContextDependent (  )  )  {^124^125^126^^^119^142^[REPLACE] if  (  (  ( NameAttributeTest )  predicates[i] ) .getNameTestExpression (  ) .isContextDependent (  )  )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return true;^127^^^^^124^128^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return true;^127^^^^^119^142^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  (  (  ( NameAttributeTest )  predicates[i] )  .getNamespaceURI ( null )  .isContextDependent (  )  )  {^124^125^126^^^119^142^[REPLACE] if  (  (  ( NameAttributeTest )  predicates[i] ) .getNameTestExpression (  ) .isContextDependent (  )  )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[ADD]^^124^125^126^127^128^119^142^[ADD] if  (  (  ( NameAttributeTest )  predicates[i] ) .getNameTestExpression (  ) .isContextDependent (  )  )  { return false; }^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[ADD]^^130^131^132^^^119^142^[ADD] else if  ( predicates[i].isContextDependent (  )  )  { return false; }^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^else if   (  predicates[i].isContextDependent  (    )    )   {  ;^134^^^^^130^138^[REPLACE] if  ( !firstIndex )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return true;^135^^^^^130^138^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  ( firstIndex )  {^134^^^^^119^142^[REPLACE] if  ( !firstIndex )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[ADD]^^137^^^^^119^142^[ADD] firstIndex = false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return false;  ;^127^^^^^119^142^[REPLACE] return false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^boolean firstIndex = false;^121^^^^^119^142^[REPLACE] boolean firstIndex = true;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[ADD]^^122^123^124^125^^119^142^[ADD] for  ( int i = 0; i < predicates.length; i++ )  { if  ( predicates[i] instanceof NameAttributeTest )  { if  (  (  ( NameAttributeTest )  predicates[i] ) .getNameTestExpression (  )^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^else {^130^^^^^119^142^[REPLACE] else if  ( predicates[i].isContextDependent (  )  )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  ( !true )  {^134^^^^^119^142^[REPLACE] if  ( !firstIndex )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^if  (  (  ( NameAttributeTest )  predicates[i] ) .getNameTestExpression (  ) .getNodeTest (  )  )  {^124^125^126^^^119^142^[REPLACE] if  (  (  ( NameAttributeTest )  predicates[i] ) .getNameTestExpression (  ) .isContextDependent (  )  )  {^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[ADD]^^137^^^^^130^138^[ADD] firstIndex = false;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[REPLACE]^return false;^141^^^^^119^142^[REPLACE] return true;^[METHOD] areBasicPredicates [TYPE] boolean [PARAMETER] Expression[] predicates [CLASS] Path   [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  Expression[] predicates  [TYPE]  int i 
[ADD]^^184^185^^^^183^213^[ADD] EvalContext ctx = buildContextChain ( context, steps.length, true ) ; Pointer pointer = ctx.getSingleNodePointer (  ) ;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^Pointer pointer = context.getJXPathContext (  ) ;^185^^^^^183^213^[REPLACE] Pointer pointer = ctx.getSingleNodePointer (  ) ;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^if  (partial == null )  {^187^^^^^183^213^[REPLACE] if  ( pointer != null )  {^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return pointer;  ;^188^^^^^183^213^[REPLACE] return pointer;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^if  ( isSimpleStep ( steps[i] )  )  {^192^^^^^183^213^[REPLACE] if  ( !isSimpleStep ( steps[i] )  )  {^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return null;  ;^193^^^^^183^213^[REPLACE] return null;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^if  ( ctx.next (  )  )  {^196^^^^^183^213^[REPLACE] if  ( ctx.hasNext (  )  )  {^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^if  ( context.next (  )  )  {^198^^^^^183^213^[REPLACE] if  ( ctx.hasNext (  )  )  {^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return true;^201^^^^^183^213^[REPLACE] return null;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^if  ( ! partial instanceof NodePointer )  {^203^^^^^183^213^[REPLACE] if  ( partial instanceof NodePointer )  {^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return SimplePathInterpreter .interpretSimpleLocationPath ( context , null , steps )   partial, steps,^204^205^206^207^^183^213^[REPLACE] return SimplePathInterpreter.createNullPointer ( context, ( NodePointer )  partial, steps,^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return this;^201^^^^^183^213^[REPLACE] return null;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[ADD]^^197^^^^^183^213^[ADD] Pointer partial =  ( Pointer )  ctx.next (  ) ;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^if  ( context.hasNext (  )  )  {^198^^^^^183^213^[REPLACE] if  ( ctx.hasNext (  )  )  {^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[ADD]^^198^199^^201^202^183^213^[ADD] if  ( ctx.hasNext (  )  )  {  return null; }^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^ctx = buildContextChain ( context, i, false ) ;^195^^^^^183^213^[REPLACE] ctx = buildContextChain ( context, i, true ) ;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return true;^193^^^^^183^213^[REPLACE] return null;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return null;  ;^201^^^^^183^213^[REPLACE] return null;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return SimplePathInterpreter .interpretSimpleLocationPath ( ctx , this , steps )   partial, steps,^204^205^206^207^^183^213^[REPLACE] return SimplePathInterpreter.createNullPointer ( context, ( NodePointer )  partial, steps,^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^int j = 0  ;^191^^^^^183^213^[REPLACE] for  ( int i = steps.length; --i > 0; )  {^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^Pointer partial =  ( Pointer )  context.next (  ) ;^197^^^^^183^213^[REPLACE] Pointer partial =  ( Pointer )  ctx.next (  ) ;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^return true;^212^^^^^183^213^[REPLACE] return null;^[METHOD] searchForPath [TYPE] Pointer [PARAMETER] EvalContext context [CLASS] Path   [TYPE]  EvalContext context  ctx  [TYPE]  Step[] steps  [TYPE]  Pointer partial  pointer  [TYPE]  boolean basic  basicKnown  false  firstIndex  true  [TYPE]  int i 
[REPLACE]^if  ( true )  {^228^^^^^227^251^[REPLACE] if  ( createInitialContext )  {^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^context = new PredicateContext ( context, predicates[j] )  ;^229^^^^^227^251^[REPLACE] context = new InitialContext ( context ) ;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[ADD]^^229^^^^^227^251^[ADD] context = new InitialContext ( context ) ;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^if  ( steps.length *  0.5  == 0 )  {^231^^^^^227^251^[REPLACE] if  ( steps.length == 0 )  {^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REMOVE]^if  ( ctx.hasNext (  )  )  {     return null; }^231^^^^^227^251^[REMOVE] ^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^return pointer;  ;^232^^^^^227^251^[REPLACE] return context;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^if  ( predicates == null )  {^241^^^^^227^251^[REPLACE] if  ( predicates != null )  {^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^if  ( j  ==  0 )  {^243^^^^^227^251^[REPLACE] if  ( j != 0 )  {^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[ADD]^context = new UnionContext ( context, new EvalContext[]{context} ) ;^243^244^245^^^227^251^[ADD] if  ( j != 0 )  { context = new UnionContext ( context, new EvalContext[]{context} ) ; }^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^context =  new UnionContext ( null, new EvalContext[]{null} ) ;^244^^^^^227^251^[REPLACE] context = new UnionContext ( context, new EvalContext[]{context} ) ;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[ADD]^^244^^^^^227^251^[ADD] context = new UnionContext ( context, new EvalContext[]{context} ) ;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^context = new InitialContext ( context )  ;^246^^^^^227^251^[REPLACE] context = new PredicateContext ( context, predicates[j] ) ;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^for  ( int j = 0 ; j < predicates.length; j++ )  {^242^^^^^227^251^[REPLACE] for  ( int j = 0; j < predicates.length; j++ )  {^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^context =  createContextForStep ( null, steps[i].getAxis (  ) ,^235^236^237^238^^227^251^[REPLACE] context = createContextForStep ( context, steps[i].getAxis (  ) ,^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^for  ( int i = 0 - 4; i < stepCount; i++ )  {^234^^^^^227^251^[REPLACE] for  ( int i = 0; i < stepCount; i++ )  {^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[ADD]^^240^^^^^227^251^[ADD] Expression predicates[] = steps[i].getPredicates (  ) ;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^return pointer;  ;^250^^^^^227^251^[REPLACE] return context;^[METHOD] buildContextChain [TYPE] EvalContext [PARAMETER] EvalContext context int stepCount boolean createInitialContext [CLASS] Path   [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  int i  j  stepCount  [TYPE]  Expression[] predicates 
[REPLACE]^if   (  !  (  nodeTest instanceof NodeTypeTest  )    )   {  ;^262^^^^^261^302^[REPLACE] if  ( nodeTest instanceof NodeNameTest )  {^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  ( namespaceURI == null )  {^268^^^^^261^302^[REPLACE] if  ( namespaceURI != null )  {^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^nodeTest =  new NodeNameTest ( null, namespaceURI ) ;^269^^^^^261^302^[REPLACE] nodeTest = new NodeNameTest ( qname, namespaceURI ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^int nodeType =  (  ( NodeTypeTest )   ( nodeTest )  ) .getNodeType (  )  ;^263^^^^^261^302^[REPLACE] QName qname =  (  ( NodeNameTest )  nodeTest ) .getNodeName (  ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^int j = 0  ;^264^^^^^261^302^[REPLACE] String prefix = qname.getPrefix (  ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[ADD]^^265^266^267^^^261^302^[ADD] String namespaceURI = prefix != null ? context.getJXPathContext (  ) .getNamespaceURI ( prefix ) : context.getJXPathContext (  ) .getDefaultNamespaceURI (  ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^if  (prefix == null )  {^268^^^^^261^302^[REPLACE] if  ( namespaceURI != null )  {^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[ADD]^nodeTest = new NodeNameTest ( qname, namespaceURI ) ;^268^269^270^^^261^302^[ADD] if  ( namespaceURI != null )  { nodeTest = new NodeNameTest ( qname, namespaceURI ) ; }^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[ADD]^^269^^^^^261^302^[ADD] nodeTest = new NodeNameTest ( qname, namespaceURI ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^QName qname =  (  ( NodeNameTest )  nodeTest ) .getNodeType (  ) ;^263^^^^^261^302^[REPLACE] QName qname =  (  ( NodeNameTest )  nodeTest ) .getNodeName (  ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^String namespaceURI  =  context.getJXPathContext (  ) .getDefaultNamespaceURI (  ) ;^265^266^267^^^261^302^[REPLACE] String namespaceURI = prefix != null ? context.getJXPathContext (  ) .getNamespaceURI ( prefix ) : context.getJXPathContext (  ) .getDefaultNamespaceURI (  ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new AncestorContext ( context, true, nodeTest ) ;^275^^^^^261^302^[REPLACE] return new AncestorContext ( context, false, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new AncestorContext ( context, false, nodeTest ) ;^277^^^^^261^302^[REPLACE] return new AncestorContext ( context, true, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new PrecedingOrFollowingContext  (  context, nodeTest, true  )  ;  ;^279^^^^^261^302^[REPLACE] return new AttributeContext ( context, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new ChildContext ( context, nodeTest, true, false ) ;^281^^^^^261^302^[REPLACE] return new ChildContext ( context, nodeTest, false, false ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new DescendantContext ( context, true, nodeTest ) ;^283^^^^^261^302^[REPLACE] return new DescendantContext ( context, false, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new DescendantContext ( context, false, nodeTest ) ;^285^^^^^261^302^[REPLACE] return new DescendantContext ( context, true, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new PrecedingOrFollowingContext ( context, nodeTest, true ) ;^287^^^^^261^302^[REPLACE] return new PrecedingOrFollowingContext ( context, nodeTest, false ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new ChildContext ( context, nodeTest, false, false ) ;^289^^^^^261^302^[REPLACE] return new ChildContext ( context, nodeTest, true, false ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new PrecedingOrFollowingContext  (  context, nodeTest, true  )  ;  ;^291^^^^^261^302^[REPLACE] return new NamespaceContext ( context, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new PrecedingOrFollowingContext  (  context, nodeTest, true  )  ;  ;^293^^^^^261^302^[REPLACE] return new ParentContext ( context, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new PrecedingOrFollowingContext ( context, nodeTest, false ) ;^295^^^^^261^302^[REPLACE] return new PrecedingOrFollowingContext ( context, nodeTest, true ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new ChildContext ( context, nodeTest, false, true ) ;^297^^^^^261^302^[REPLACE] return new ChildContext ( context, nodeTest, true, true ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return new PrecedingOrFollowingContext  (  context, nodeTest, true  )  ;  ;^299^^^^^261^302^[REPLACE] return new SelfContext ( context, nodeTest ) ;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
[REPLACE]^return true;^301^^^^^261^302^[REPLACE] return null;^[METHOD] createContextForStep [TYPE] EvalContext [PARAMETER] EvalContext context int axis NodeTest nodeTest [CLASS] Path   [TYPE]  boolean basic  basicKnown  createInitialContext  false  firstIndex  true  [TYPE]  QName qname  [TYPE]  EvalContext context  [TYPE]  Step[] steps  [TYPE]  String namespaceURI  prefix  [TYPE]  int axis  [TYPE]  NodeTest nodeTest 
