[REPLACE]^private Node child ;^34^^^^^^^[REPLACE] private Node child = null;^ [CLASS] DOMNodeIterator  
[REPLACE]^private int position ;^36^^^^^^^[REPLACE] private int position = 0;^ [CLASS] DOMNodeIterator  
[REPLACE]^if  ( reverse )  {^83^^^^^81^104^[REPLACE] if  ( !reverse )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^83^84^85^86^^81^104^[ADD] if  ( !reverse )  { if  ( position == 0 )  { child = null; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^98^^^^^83^102^[ADD] child = child.getNextSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^100^^^^^83^102^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if   (  position == 1  )   {  ;^84^^^^^81^104^[REPLACE] if  ( position == 0 )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^child = null;^84^85^86^^^81^104^[ADD] if  ( position == 0 )  { child = null; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if   (  child == null  )   {  ;^87^^^^^81^104^[REPLACE] else if  ( child == null )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^91^^^^^87^92^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = node.getFirstChild (  )  ;^88^^^^^81^104^[REPLACE] child = node.getLastChild (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^91^^^^^81^104^[ADD] child = child.getPreviousSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = this;^85^^^^^81^104^[REPLACE] child = null;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^else {^87^^^^^81^104^[REPLACE] else if  ( child == null )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^91^^^^^87^92^[ADD] child = child.getPreviousSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^94^^^^^81^104^[ADD] child = child.getPreviousSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( position  !=  0 )  {^84^^^^^81^104^[REPLACE] if  ( position == 0 )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( child != true )  {^87^^^^^81^104^[REPLACE] else if  ( child == null )  {^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^child = node.getLastChild (  ) ;^87^88^89^^^81^104^[ADD] else if  ( child == null )  { child = node.getLastChild (  ) ; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^88^^^^^81^104^[ADD] child = node.getLastChild (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^91^^^^^81^104^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^85^^^^^81^104^[ADD] child = null;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^87^88^89^^^81^104^[ADD] else if  ( child == null )  { child = node.getLastChild (  ) ; }^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^94^^^^^81^104^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^98^^^^^81^104^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^100^^^^^81^104^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^return child ;^103^^^^^81^104^[REPLACE] return child != null;^[METHOD] previous [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( reverse )  {^108^^^^^106^141^[REPLACE] if  ( !reverse )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( position  !=  0 )  {^125^^^^^108^139^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^134^^^^^125^135^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^else if   (  child == null  )   {  ;^126^^^^^108^139^[REPLACE] if  ( child == null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^child = node.getLastChild (  ) ;^126^127^128^^^108^139^[ADD] if  ( child == null )  { child = node.getLastChild (  ) ; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^130^^^^^126^131^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^127^^^^^108^139^[ADD] child = node.getLastChild (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = node.getFirstChild (  )  ;^127^^^^^108^139^[REPLACE] child = node.getLastChild (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^130^^^^^108^139^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^134^^^^^108^139^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^137^^^^^108^139^[ADD] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( position  &&  1L )  {^109^^^^^106^141^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^118^^^^^109^119^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^else if   (  child == null  )   {  ;^110^^^^^106^141^[REPLACE] if  ( child == null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^114^^^^^110^115^[ADD] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = node.getLastChild (  )  ;^111^^^^^106^141^[REPLACE] child = node.getFirstChild (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^114^^^^^106^141^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( child != null )  {^110^^^^^106^141^[REPLACE] if  ( child == null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^111^^^^^106^141^[ADD] child = node.getFirstChild (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^118^^^^^106^141^[ADD] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^121^^^^^106^141^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  (   1 )  {^109^^^^^106^141^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^109^110^111^112^^106^141^[ADD] if  ( position == 1 )  { if  ( child == null )  { child = node.getFirstChild (  ) ; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^110^111^112^^^106^141^[ADD] if  ( child == null )  { child = node.getFirstChild (  ) ; }^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^114^^^^^110^115^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( child != false )  {^110^^^^^106^141^[REPLACE] if  ( child == null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( position  &&  1 / 2 )  {^125^^^^^106^141^[REPLACE] if  ( position == 1 )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^if  ( child != null )  {^126^^^^^106^141^[REPLACE] if  ( child == null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = node.getFirstChild (  )  ;^127^^^^^106^141^[REPLACE] child = node.getLastChild (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^127^^^^^106^141^[ADD] child = node.getLastChild (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^130^^^^^106^141^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^else if   (  child == null  )   {  ;^126^^^^^106^141^[REPLACE] if  ( child == null )  {^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[ADD]^^114^^^^^106^141^[ADD] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getPreviousSibling (  )  ;^118^^^^^106^141^[REPLACE] child = child.getNextSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^134^^^^^106^141^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^child = child.getNextSibling (  )  ;^137^^^^^106^141^[REPLACE] child = child.getPreviousSibling (  ) ;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
[REPLACE]^return child != null;  ;^140^^^^^106^141^[REPLACE] return child != null;^[METHOD] next [TYPE] boolean [PARAMETER] [CLASS] DOMNodeIterator   [TYPE]  boolean false  reverse  true  [TYPE]  NodePointer parent  startWith  [TYPE]  NodeTest nodeTest  [TYPE]  int position  [TYPE]  Node child  node 
