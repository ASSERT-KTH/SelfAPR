[BugLab_Wrong_Literal]^return stringToInt ( str, 1 ) ;^61^^^^^60^62^return stringToInt ( str, 0 ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str [VARIABLES] boolean  String  str  
[BugLab_Wrong_Literal]^return stringToInt ( str, 4 ) ;^61^^^^^60^62^return stringToInt ( str, 0 ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str [VARIABLES] boolean  String  str  
[BugLab_Variable_Misuse]^if  ( mant == null )  {^139^^^^^124^154^if  ( val == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( val != null )  {^139^^^^^124^154^if  ( val == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( numeric.length (  )  == 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( val.length (  )  != 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( val.length (  )  == decPos )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( mant.startsWith ( "--" )  )  {^145^^^^^130^160^if  ( val.startsWith ( "--" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( numeric.startsWith ( "--" )  )  {^145^^^^^130^160^if  ( val.startsWith ( "--" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( numeric.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( val.startsWith ( "0x" )  && val.startsWith ( "-0x" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createInteger ( numeric ) ;^153^^^^^138^168^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( mant.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^char lastChar = numeric.charAt ( val.length (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^char lastChar = val.charAt ( val.length (  )   &  1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^char lastChar = val.charAt ( val.length (  )   ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^char lastChar = val.charAt ( val.length (  )   ==  1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^int decPos = numeric.indexOf ( '.' ) ;^159^^^^^144^174^int decPos = val.indexOf ( '.' ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^int expPos = numeric.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^int expPos = val.indexOf ( 'e' )  ||  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^int expPos = val.indexOf ( 'e' )   !=  val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  ;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( expPos > -1 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( decPos >= -1 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( decPos > -expPos )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( decPos > -decPos )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( decPos > -2 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( decPos > -0 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( decPos > -1 )  {^174^^^^^162^180^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos >= -1 )  {^174^^^^^162^180^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = numeric;^177^^^^^162^180^mant = val;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = numeric.substring ( 0, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = val.substring ( 0, decPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^mant = expPos.substring ( 0, val ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^mant = val.substring ( -1, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = mant.substring ( 0, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^mant = val.substring ( 1, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( decPos > -1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos >= -1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > - )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -expPos )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -decPos )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = numeric.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = val.substring ( expPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^dec = decPos.substring ( val + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^dec = val.substring ( decPos  ||  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos + decPos ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = mant.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^dec = val.substring ( decPos  &  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos  ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( decPos < expPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos == decPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = numeric.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^dec = expPos.substring ( decPos + 1, val ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^dec = decPos.substring ( val + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos , expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^dec = val.substring ( expPos + 1, decPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos + expPos, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( expPos < expPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos <= decPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = numeric.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = val.substring ( expPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^dec = decPos.substring ( val + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^dec = val.substring ( decPos  >  1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos + expPos ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = val.substring ( 0, expPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^mant = decPos.substring ( 0, val ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = mant.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^dec = val.substring ( decPos  <=  1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = numeric.substring ( 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^mant = val.substring ( -1, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos == -1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -0 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -2 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^dec = val.substring ( decPos  ==  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos + expPos ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^dec = val.substring ( decPos  |  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = mant.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = val.substring ( expPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > decPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( decPos > -1 )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos >= -1 )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -decPos )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = numeric;^177^^^^^174^178^mant = val;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = numeric.substring ( 0, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = val.substring ( 0, decPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^mant = expPos.substring ( 0, val ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^mant = val.substring ( expPos, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^dec = val.substring ( decPos  &&  1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos + decPos ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^mant = val.substring ( 1, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = mant;^177^^^^^162^192^mant = val;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^dec = val.substring ( decPos + 1, decPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^dec = val.substring ( decPos  ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^mant = mant.substring ( 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^mant = val.substring ( decPos, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( decPos > -1 && expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( expPos > -1 && expPos < numeric.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( val > -1 && expPos < expPos.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 || expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos >= -1 && expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos <= val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos < val.length (  )   <=  1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -expPos && expPos < val.length (  )  - expPos )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -decPos && expPos < val.length (  )  - decPos )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^exp = mant.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^exp = val.substring ( decPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^exp = expPos.substring ( val + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  >=  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^exp = val.substring ( expPos , val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^exp = numeric.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  !=  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^exp = val.substring ( expPos + expPos, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( numeric == null && exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( dec == null && val == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( exp == null && dec == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( decec == null && exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec == null || exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec != null && exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec == null && exp != null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  &&  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F || !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  <= 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  &&  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D || !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  != 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Float f = createFloat ( numeric ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Double d = createDouble ( mant ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigDecimal ( numeric ) ;^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^boolean allZeros = isAllZeros ( numeric )  && isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( val ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^boolean allZeros = isAllZeros ( exp )  && isAllZeros ( mant ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^boolean allZeros = isAllZeros ( mant )  || isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Float f = createFloat ( mant ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Double d = createDouble ( numeric ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigDecimal ( mant ) ;^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createInteger ( mant ) ;^251^^^^^236^266^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createLong ( numeric ) ;^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createLong ( mant ) ;^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigInteger ( mant ) ;^260^^^^^245^275^return createBigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createInteger ( numeric ) ;^251^^^^^236^266^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigInteger ( numeric ) ;^260^^^^^245^275^return createBigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  >= 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  < 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  > 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  ==  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^boolean allZeros = isAllZeros ( val )  && isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( decPos > -1 && expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( expPos > -1 && expPos < mant.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( val > -1 && expPos < expPos.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 || expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos >= -1 && expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos <= val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos < val.length (  )   !=  1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos < val.length (  )   ||  1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -1 && expPos < val.length (  )   )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -expPos && expPos < val.length (  )  - expPos )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^exp = mant.substring ( expPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^exp = val.substring ( decPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^exp = expPos.substring ( val + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  !=  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  )   &  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^exp = val.substring ( expPos + expPos, val.length (  )  - expPos ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^exp = val.substring ( expPos + decPos, val.length (  )  - decPos ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (   instanceof   )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  )   |  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^exp = val.substring ( expPos + , val.length (  )  -  ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^exp = numeric.substring ( expPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( val == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( dec == null && val == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( dec == null && exp == null && isDigits ( val.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( exp == null && dec == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( numeric == null && exp == null && isDigits ( dec.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec == null || exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec != null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec == null && exp != null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' && Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  != '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( decPos )  == '-' || Character.isDigit ( numeric.charAt ( decPos )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( -1 )  == '-' || Character.isDigit ( numeric.charAt ( -1 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createLong ( mant ) ;^198^^^^^193^204^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createLong ( val ) ;^198^^^^^193^204^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigInteger ( val ) ;^202^^^^^193^204^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  &&  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F || !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  < 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  &&  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D || !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  != 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createLong ( mant ) ;^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createLong ( val ) ;^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  != 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Float f = NumberUtils.createFloat ( mant ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Float f = NumberUtils.createFloat ( val ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  < 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Double d = NumberUtils.createDouble ( val ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigDecimal ( val ) ;^231^^^^^216^246^return createBigDecimal ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  >=  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  )   ==  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^exp = val.substring ( expPos , val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigInteger ( mant ) ;^202^^^^^187^217^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^String numeric = mant.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^String numeric = val.substring ( 0, val.length (  )   >=  1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^String numeric = val.substring ( decPos, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^String numeric = val.substring ( 0, val.length (  )  - decPos ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^boolean allZeros = isAllZeros ( val )  && isAllZeros ( exp ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( numeric ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^boolean allZeros = isAllZeros ( exp )  && isAllZeros ( mant ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^boolean allZeros = isAllZeros ( mant )  || isAllZeros ( exp ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( expPos > -1 && expPos < numeric.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  >  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  )   ||  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^String numeric = val.substring ( 0, val.length (  )   &  1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^String numeric = val.substring ( 0, val.length (  )   ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( val ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^&& isDigits ( val.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^&& isDigits ( numeric.substring ( 0 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^&& isDigits ( mant.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^&&  ( val.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^&&  ( numeric.charAt ( -1 )  == '-' || Character.isDigit ( numeric.charAt ( -1 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^&&  ( mant.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^&&  ( numeric.charAt (  )  == '-' || Character.isDigit ( numeric.charAt (  )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos < val.length (  )   >>  1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos < val.length (  )   |  1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -decPos && expPos < val.length (  )  - decPos )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  ||  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  )   <  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  ^  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Argument_Swapping]^if  ( dec == null && numeric == null && isDigits ( exp.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( expPos )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 1 )  == '-' || Character.isDigit ( numeric.charAt ( 1 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( expPos > -1 && expPos < mant.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( expPos > -1 && expPos < val.length (  )   >  1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^if  ( expPos > -1 && expPos < val.length (  )   )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  |  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  ^  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^if  ( val == null && exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  != 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  <= 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  > 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^Double d = NumberUtils.createDouble ( mant ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigDecimal ( mant ) ;^231^^^^^216^246^return createBigDecimal ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  |  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  )   !=  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^exp = val.substring ( expPos + decPos, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^return createBigInteger ( val ) ;^202^^^^^187^217^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^String numeric = val.substring ( 0, val.length (  )   >>  1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( numeric ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^exp = val.substring ( expPos + 1, val.length (  )   <<  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^String numeric = val.substring ( expPos, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Variable_Misuse]^String numeric = numeric.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^&& isDigits ( numeric.substring ( expPos )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^&& isDigits ( numeric.substring ( decPos )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Literal]^&&  ( numeric.charAt ( decPos )  == '-' || Character.isDigit ( numeric.charAt ( decPos )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[BugLab_Wrong_Operator]^if  ( s != null )  {^298^^^^^297^307^if  ( s == null )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Literal]^return false;^299^^^^^297^307^return true;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Argument_Swapping]^if  ( i.charAt ( s )  != '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Operator]^if  ( s.charAt ( i )  == '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Literal]^return true;^303^^^^^297^307^return false;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Argument_Swapping]^for  ( snt i = i.length (  )  - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Operator]^for  ( int i = s.length (  )   &  1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Operator]^for  ( int i = s.length (  )  - 1; i > 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Literal]^for  ( int i = s.length (  )  - i; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Operator]^if  ( s.charAt ( i )  >= '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Operator]^for  ( int i = s.length (  )   &&  1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Literal]^for  ( int i = s.length (  )  - ; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Wrong_Operator]^return s.length (  )  >= 0;^306^^^^^297^307^return s.length (  )  > 0;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[BugLab_Variable_Misuse]^if  ( c < a )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^if  ( b < c )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Argument_Swapping]^if  ( a < b )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Wrong_Operator]^if  ( b == a )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^a = c;^393^^^^^391^399^a = b;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^if  ( b < a )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Argument_Swapping]^if  ( a < c )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Wrong_Operator]^if  ( c <= a )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^a = b;^396^^^^^391^399^a = c;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^return c;^398^^^^^391^399^return a;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^if  ( c < a )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^if  ( b < c )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Argument_Swapping]^if  ( a < b )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Wrong_Operator]^if  ( b <= a )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^a = c;^411^^^^^409^417^a = b;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^if  ( b < a )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^if  ( c < b )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Argument_Swapping]^if  ( a < c )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Wrong_Operator]^if  ( c <= a )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^a = b;^414^^^^^409^417^a = c;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^return c;^416^^^^^409^417^return a;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^if  ( c > a )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Argument_Swapping]^if  ( a > b )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Wrong_Operator]^if  ( b >= a )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^a = c;^429^^^^^427^435^a = b;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Argument_Swapping]^if  ( a > c )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Wrong_Operator]^if  ( c >= a )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^a = b;^432^^^^^427^435^a = c;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^return c;^434^^^^^427^435^return a;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[BugLab_Variable_Misuse]^if  ( c > a )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^if  ( b > c )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Argument_Swapping]^if  ( a > b )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Wrong_Operator]^if  ( b >= a )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^a = c;^447^^^^^445^453^a = b;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^if  ( b > a )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Argument_Swapping]^if  ( a > c )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Wrong_Operator]^if  ( c >= a )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^a = b;^450^^^^^445^453^a = c;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Variable_Misuse]^return c;^452^^^^^445^453^return a;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[BugLab_Argument_Swapping]^if  ( rhs < lhs )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhs <= rhs )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return -2;^493^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Argument_Swapping]^if  ( rhs > lhs )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhs >= rhs )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return +2;^496^^^^^491^518^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Variable_Misuse]^long rhsBits = Double.doubleToLongBits ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Variable_Misuse]^long lhsBits = Double.doubleToLongBits ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Argument_Swapping]^if  ( rhsBits == lhsBits )  {^504^^^^^491^518^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhsBits >= rhsBits )  {^504^^^^^491^518^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return -1;^505^^^^^491^518^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return 2;^505^^^^^491^518^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Argument_Swapping]^if  ( rhsBits < lhsBits )  {^513^^^^^491^518^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhsBits > rhsBits )  {^513^^^^^491^518^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return +2;^516^^^^^513^517^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return -0;^514^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return +2;^516^^^^^491^518^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[BugLab_Argument_Swapping]^if  ( rhs < lhs )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhs <= rhs )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return -2;^554^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return -lhsBits;^554^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Argument_Swapping]^if  ( rhs > lhs )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhs >= rhs )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return +rhsBits;^557^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return +lhsBits;^557^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Variable_Misuse]^int rhsBits = Float.floatToIntBits ( lhs ) ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Variable_Misuse]^int lhsBits = Float.floatToIntBits ( rhs ) ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Argument_Swapping]^if  ( rhsBits == lhsBits )  {^565^^^^^552^579^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhsBits != rhsBits )  {^565^^^^^552^579^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return rhsBits;^566^^^^^552^579^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Argument_Swapping]^if  ( rhsBits < lhsBits )  {^574^^^^^552^579^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  ( lhsBits == rhsBits )  {^574^^^^^552^579^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return +2;^577^^^^^574^578^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return -lhsBits;^575^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Literal]^return +lhsBits;^577^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[BugLab_Wrong_Operator]^if  (  ( str == null )  &&  ( str.length (  )  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Operator]^if  (  ( str != null )  ||  ( str.length (  )  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Operator]^if  (  ( str == null )  ||  ( str.length (  )  != 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Literal]^return true;^595^^^^^593^603^return false;^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Argument_Swapping]^if  ( !Character.isDigit ( i.charAt ( str )  )  )  {^598^^^^^593^603^if  ( !Character.isDigit ( str.charAt ( i )  )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Literal]^return true;^599^^^^^593^603^return false;^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Argument_Swapping]^for  ( strnt i = 0; i < i.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= str.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < str.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < str.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Literal]^return false;^602^^^^^593^603^return true;^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[BugLab_Wrong_Literal]^return true;^620^^^^^605^635^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^int sz = start;^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^int sz = chars.length.length;^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^int sz = chars;^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^boolean hasExp = true;^624^^^^^609^639^boolean hasExp = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^boolean hasDecPoint = true;^625^^^^^610^640^boolean hasDecPoint = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^boolean allowSigns = true;^626^^^^^611^641^boolean allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^boolean foundDigit = true;^627^^^^^612^642^boolean foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^int start =  ( chars[0] >= '-' )  ? 1 : 0;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^int start =  ( chars[start] == '-' )  ? 1 : start;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^int start =  ( chars[0] == '-' )  ? 0 : 0;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( start > start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( sz > sz + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( sz < start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( sz > start  ||  1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( sz > start  <=  1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  >>  ( sz > start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( sz >= start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^if  ( sz > start  )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( chars[start] == '0' && chars[sz + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[start] == '0' || chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[start] != '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  |  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ||  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[start] >= '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^if  ( chars[start] == '0' && chars[start ] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( start == sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( i == start )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^if  ( sz == i )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( i < sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^634^^^^^619^649^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) ||  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' && chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] <= '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] < '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] > 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] >= 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] <= 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] >= 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^641^^^^^638^642^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^for  ( ; sz < chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^for  ( ; i < sz; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^for  ( ; chars.length < i; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^for  ( ; i < chars.length.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^for  ( ; i <= chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] == '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] <= 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^641^^^^^626^656^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return false;^644^^^^^629^659^return true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^int i = sz + 2;^632^^^^^617^647^int i = start + 2;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^int i = start + ;^632^^^^^617^647^int i = start + 2;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( i > sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] == '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] >= '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] == 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] == 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^for  ( ; chars < i.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^for  ( ; i > chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ^  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[start] <= '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^if  ( chars[start] == '0' && chars[start + sz] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] > '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] > 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^for  ( ; i == chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^int i = start + sz;^632^^^^^617^647^int i = start + 2;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( i >= sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] < 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^int i = sz;^649^^^^^634^664^int i = start;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^while  ( sz < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^while  ( i < start ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^while  ( i < sz ||  ( i < sz + 1 && hasExp && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !hasExp )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^while  ( sz < i ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^while  ( i < sz &&  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^while  ( i <= sz ||  ( i <= sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^while  ( i < sz ||  ( i < sz + 1 || allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^while  ( i < sz ||  ( i == sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^while  ( i < sz ||  ( i < sz  <=  1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^while  ( i < sz ||  ( i < sz  && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] >= '0' || chars[i] <= '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] > '0' && chars[i] <= '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] >= '0' && chars[i] > '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^} else szf  ( chars[i] == '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^} else charsf  ( i[i] == '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] != '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] >= '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^} else szf  ( chars[i] == 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == 'e' && chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] != 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == 'e' || chars[i] <= 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] >= 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^} else szf  ( chars[i] == '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == '+' && chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] != '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == '+' || chars[i] <= '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^681^^^^^674^682^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( !hasExp )  {^675^^^^^660^690^if  ( !allowSigns )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^676^^^^^661^691^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^allowSigns = true;^678^^^^^663^693^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^foundDigit = true;^679^^^^^664^694^foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^681^^^^^666^696^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^667^^^^^652^682^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( !hasExp )  {^669^^^^^654^684^if  ( !foundDigit )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^670^^^^^655^685^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^hasExp = false;^672^^^^^657^687^hasExp = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^allowSigns = false;^673^^^^^658^688^allowSigns = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( hasDecPoint )  {^665^^^^^650^680^if  ( hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^} else charsf  ( i[i] == '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( foundDigit || hasExp )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( hasDecPoint || foundDigit )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^if  ( hasExp || hasDecPoint )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( hasDecPoint && hasExp )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^660^^^^^645^675^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^hasDecPoint = false;^662^^^^^647^677^hasDecPoint = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^} else charsf  ( i[i] == 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == 'e' || chars[i] > 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] <= 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] > 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] <= '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == '+' || chars[i] != '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == '+' || chars[i] < '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^foundDigit = false;^654^^^^^639^669^foundDigit = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^allowSigns = true;^655^^^^^640^670^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] <= '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] > '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == '+' || chars[i] >= '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] < 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == 'e' || chars[i] >= 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] < '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] >= '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] >= '0' && chars[i] < '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] < '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] > '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^} else if  ( chars[i] == 'e' || chars[i] != 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( sz < chars.length )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( i < sz )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^if  ( chars < i.length )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Argument_Swapping]^if  ( chars.length < i )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( i <= chars.length )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] >= '0' || chars[i] <= '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] > '0' && chars[i] <= '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] >= '0' && chars[i] < '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return false;^688^^^^^673^703^return true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] == 'e' && chars[i] == 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] <= 'e' || chars[i] == 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] == 'e' || chars[i] != 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^692^^^^^677^707^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^if  ( !hasExp &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( !allowSigns ||  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( !allowSigns &&  ( chars[i] == 'd' && chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( !allowSigns &&  ( chars[i] != 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] >= 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( !allowSigns &&  ( chars[i] >= 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^return hasExp;^699^^^^^694^700^return foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] == 'l' && chars[i] == 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] <= 'l' || chars[i] == 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] == 'l' || chars[i] != 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^return hasDecPoint && !hasExp;^704^^^^^701^705^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^return foundDigit || !hasExp;^704^^^^^701^705^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^return hasExp;^699^^^^^684^714^return foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^return hasDecPoint && !hasExp;^704^^^^^689^719^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^return foundDigit || !hasExp;^704^^^^^689^719^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Literal]^return true;^707^^^^^692^722^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] >= '0' && chars[i] > '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] > 'e' || chars[i] == 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] > 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( !allowSigns &&  ( chars[i] <= 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] >= 'l' || chars[i] == 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^if  ( chars[i] == 'l' || chars[i] < 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^return !hasExp && foundDigit;^711^^^^^696^726^return !allowSigns && foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Variable_Misuse]^return !allowSigns && hasExp;^711^^^^^696^726^return !allowSigns && foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[BugLab_Wrong_Operator]^return !allowSigns || foundDigit;^711^^^^^696^726^return !allowSigns && foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
