[buglab_swap_variables]^return reflectionEquals ( rhs, lhs, false, null, null ) ;^125^^^^^124^126^return reflectionEquals ( lhs, rhs, false, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs [VARIABLES] Object  lhs  rhs  boolean  isEquals  
[buglab_swap_variables]^return reflectionEquals (  rhs, false, null, null ) ;^125^^^^^124^126^return reflectionEquals ( lhs, rhs, false, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs [VARIABLES] Object  lhs  rhs  boolean  isEquals  
[buglab_swap_variables]^return reflectionEquals ( lhs,  false, null, null ) ;^125^^^^^124^126^return reflectionEquals ( lhs, rhs, false, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs [VARIABLES] Object  lhs  rhs  boolean  isEquals  
[buglab_swap_variables]^return reflectionEquals ( rhs, lhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^148^^^^^147^149^return reflectionEquals ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  isEquals  
[buglab_swap_variables]^return reflectionEquals (  rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^148^^^^^147^149^return reflectionEquals ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  isEquals  
[buglab_swap_variables]^return reflectionEquals ( lhs, excludeFields, ReflectionToStringBuilder.toNoNullStringArray ( rhs )  ) ;^148^^^^^147^149^return reflectionEquals ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  isEquals  
[buglab_swap_variables]^return reflectionEquals ( lhs,  ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^148^^^^^147^149^return reflectionEquals ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  isEquals  
[buglab_swap_variables]^return reflectionEquals ( rhs, lhs, false, null, excludeFields ) ;^171^^^^^170^172^return reflectionEquals ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  boolean  isEquals  String[]  excludeFields  
[buglab_swap_variables]^return reflectionEquals (  rhs, false, null, excludeFields ) ;^171^^^^^170^172^return reflectionEquals ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  boolean  isEquals  String[]  excludeFields  
[buglab_swap_variables]^return reflectionEquals ( lhs,  false, null, excludeFields ) ;^171^^^^^170^172^return reflectionEquals ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  boolean  isEquals  String[]  excludeFields  
[buglab_swap_variables]^return reflectionEquals ( excludeFields, rhs, false, null, lhs ) ;^171^^^^^170^172^return reflectionEquals ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  boolean  isEquals  String[]  excludeFields  
[buglab_swap_variables]^return reflectionEquals ( lhs, rhs, false, null ) ;^171^^^^^170^172^return reflectionEquals ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  boolean  isEquals  String[]  excludeFields  
[buglab_swap_variables]^return reflectionEquals ( testTransients, rhs, lhs, null, null ) ;^195^^^^^194^196^return reflectionEquals ( lhs, rhs, testTransients, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients [VARIABLES] Object  lhs  rhs  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals (  rhs, testTransients, null, null ) ;^195^^^^^194^196^return reflectionEquals ( lhs, rhs, testTransients, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients [VARIABLES] Object  lhs  rhs  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( rhs, lhs, testTransients, null, null ) ;^195^^^^^194^196^return reflectionEquals ( lhs, rhs, testTransients, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients [VARIABLES] Object  lhs  rhs  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( lhs,  testTransients, null, null ) ;^195^^^^^194^196^return reflectionEquals ( lhs, rhs, testTransients, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients [VARIABLES] Object  lhs  rhs  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( lhs, rhs,  null, null ) ;^195^^^^^194^196^return reflectionEquals ( lhs, rhs, testTransients, null, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients [VARIABLES] Object  lhs  rhs  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( rhs, lhs, testTransients, reflectUpToClass, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals (  rhs, testTransients, reflectUpToClass, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( lhs,  testTransients, reflectUpToClass, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( testTransients, rhs, lhs, reflectUpToClass, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( lhs, rhs,  reflectUpToClass, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( lhs, reflectUpToClass, testTransients, rhs, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( lhs, rhs, testTransients,  null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( lhs, rhs, reflectUpToClass, testTransients, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^return reflectionEquals ( reflectUpToClass, rhs, testTransients, lhs, null ) ;^224^^^^^223^225^return reflectionEquals ( lhs, rhs, testTransients, reflectUpToClass, null ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass [VARIABLES] Object  lhs  rhs  Class  reflectUpToClass  boolean  isEquals  testTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^255^^^^^240^270^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^258^^^^^243^273^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^if  ( rhsClass.isInstance ( lhs )  )  {^268^^^^^253^283^if  ( lhsClass.isInstance ( rhs )  )  {^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^} else if  ( lhsClass.isInstance ( rhs )  )  {^274^^^^^259^289^} else if  ( rhsClass.isInstance ( lhs )  )  {^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^} else if  ( lhs.isInstance ( rhsClass )  )  {^274^^^^^259^289^} else if  ( rhsClass.isInstance ( lhs )  )  {^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^if  ( rhs.isInstance ( lhsClass )  )  {^268^^^^^253^283^if  ( lhsClass.isInstance ( rhs )  )  {^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^while  ( reflectUpToClass.getSuperclass (  )  != null && testClass != testClass )  {^287^^^^^272^302^while  ( testClass.getSuperclass (  )  != null && testClass != reflectUpToClass )  {^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( rhs, lhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend (  rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, testClass, rhs, equalsBuilder, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs,  testClass, equalsBuilder, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( testClass, rhs, lhs, equalsBuilder, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs,  equalsBuilder, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( equalsBuilder, rhs, testClass, lhs, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass,  testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, testTransients, equalsBuilder, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, equalsBuilder,  excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, excludeFields, testTransients ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, equalsBuilder, testClass, rhs, testTransients, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( testTransients, rhs, testClass, equalsBuilder, lhs, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( excludeFields, rhs, testClass, equalsBuilder, testTransients, lhs ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( rhs, lhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend (  rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs,  testClass, equalsBuilder, testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, excludeFields, equalsBuilder, testTransients, testClass ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs,  equalsBuilder, testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, excludeFields, testTransients, equalsBuilder ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass,  testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, testTransients, testClass, equalsBuilder, rhs, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, equalsBuilder,  excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testTransients, equalsBuilder, testClass, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, testTransients, testClass, equalsBuilder, rhs, excludeFields ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, excludeFields, testClass, equalsBuilder, testTransients, rhs ) ;^289^^^^^274^304^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, testClass, rhs, equalsBuilder, testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, equalsBuilder, testClass, testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, equalsBuilder, testClass, rhs, testTransients, excludeFields ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, excludeFields, testTransients ) ;^286^^^^^271^301^reflectionAppend ( lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionEquals [RETURN_TYPE] boolean   Object lhs Object rhs boolean testTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClass  reflectUpToClass  rhsClass  testClass  EqualsBuilder  equalsBuilder  boolean  isEquals  testTransients  String[]  excludeFields  IllegalArgumentException  e  
[buglab_swap_variables]^if  ( !excludedFieldList.contains ( useTransients.getName (  )  ) &&  ( f.getName (  ) .indexOf ( '$' )  == -1 ) &&  ( f || !Modifier.isTransient ( f.getModifiers (  )  )  ) &&  ( !Modifier.isStatic ( f.getModifiers (  )  )  )  )  {^325^326^327^328^^313^338^if  ( !excludedFieldList.contains ( f.getName (  )  ) &&  ( f.getName (  ) .indexOf ( '$' )  == -1 ) &&  ( useTransients || !Modifier.isTransient ( f.getModifiers (  )  )  ) &&  ( !Modifier.isStatic ( f.getModifiers (  )  )  )  )  {^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( f.get ( lhs ) .get ( rhs )  ) ;^330^^^^^313^338^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( f.get ( rhs ) , f.get ( lhs )  ) ;^330^^^^^313^338^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( lhs.get ( f ) , f.get ( rhs )  ) ;^330^^^^^313^338^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( rhs.get ( lhs ) , f.get ( f )  ) ;^330^^^^^313^338^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^for  ( fields.lengthnt i = 0; i < i && builder.isEquals; i++ )  {^323^^^^^313^338^for  ( int i = 0; i < fields.length && builder.isEquals; i++ )  {^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^for  ( int i = 0; i < builder.isEquals.length && fields; i++ )  {^323^^^^^313^338^for  ( int i = 0; i < fields.length && builder.isEquals; i++ )  {^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^for  ( int i = 0; i < fields.length && builder.isEquals.isEquals; i++ )  {^323^^^^^313^338^for  ( int i = 0; i < fields.length && builder.isEquals; i++ )  {^[CLASS] EqualsBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz EqualsBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  isEquals  testTransients  useTransients  Object  lhs  rhs  Class  clazz  EqualsBuilder  builder  List  excludedFieldList  String[]  excludeFields  Field[]  fields  int  i  IllegalAccessException  e  
[buglab_swap_variables]^if  ( rhs == lhs )  {^371^^^^^356^386^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object lhs Object rhs [VARIABLES] Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^374^^^^^359^389^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object lhs Object rhs [VARIABLES] Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^isEquals = rhs.equals ( lhs ) ;^381^^^^^366^396^isEquals = lhs.equals ( rhs ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object lhs Object rhs [VARIABLES] Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^} else if  ( rhs.getClass (  )  != lhs.getClass (  )  )  {^382^^^^^367^397^} else if  ( lhs.getClass (  )  != rhs.getClass (  )  )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object lhs Object rhs [VARIABLES] Object  lhs  rhs  Class  lhsClass  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^isEquals =  ( rhs == lhs ) ;^426^^^^^422^428^isEquals =  ( lhs == rhs ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long lhs long rhs [VARIABLES] long  lhs  rhs  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^isEquals =  ( rhs == lhs ) ;^441^^^^^437^443^isEquals =  ( lhs == rhs ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int lhs int rhs [VARIABLES] int  lhs  rhs  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^isEquals =  ( rhs == lhs ) ;^456^^^^^452^458^isEquals =  ( lhs == rhs ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short lhs short rhs [VARIABLES] short  lhs  rhs  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^isEquals =  ( rhs == lhs ) ;^471^^^^^467^473^isEquals =  ( lhs == rhs ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char lhs char rhs [VARIABLES] char  lhs  rhs  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^isEquals =  ( rhs == lhs ) ;^486^^^^^482^488^isEquals =  ( lhs == rhs ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte lhs byte rhs [VARIABLES] byte  lhs  rhs  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^return append ( Double.doubleToLongBits ( rhs ) , Double.doubleToLongBits ( lhs )  ) ;^507^^^^^503^508^return append ( Double.doubleToLongBits ( lhs ) , Double.doubleToLongBits ( rhs )  ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double lhs double rhs [VARIABLES] double  lhs  rhs  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^return append ( Float.floatToIntBits ( rhs ) , Float.floatToIntBits ( lhs )  ) ;^527^^^^^523^528^return append ( Float.floatToIntBits ( lhs ) , Float.floatToIntBits ( rhs )  ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float lhs float rhs [VARIABLES] float  lhs  rhs  boolean  isEquals  superEquals  testTransients  useTransients  
[buglab_swap_variables]^isEquals =  ( rhs == lhs ) ;^541^^^^^537^543^isEquals =  ( lhs == rhs ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean lhs boolean rhs [VARIABLES] boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^559^^^^^555^574^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^562^^^^^555^574^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^566^^^^^555^574^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( isEqualsnt i = 0; i < lhs.length && i; ++i )  {^570^^^^^555^574^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( int i = 0; i < isEquals.length && lhs; ++i )  {^570^^^^^555^574^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && isEquals; ++i )  {^570^^^^^555^574^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^571^^^^^555^574^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^571^^^^^555^574^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   Object[] lhs Object[] rhs [VARIABLES] Object[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^590^^^^^586^605^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^593^^^^^586^605^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^597^^^^^586^605^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs != lhs.length.length )  {^597^^^^^586^605^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && isEquals; ++i )  {^601^^^^^586^605^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( int i = 0; i < isEquals.length && lhs; ++i )  {^601^^^^^586^605^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( int i = 0; i < lhs && isEquals; ++i )  {^601^^^^^586^605^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^602^^^^^586^605^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^602^^^^^586^605^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^621^^^^^617^636^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int[] lhs int[] rhs [VARIABLES] int[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^624^^^^^617^636^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int[] lhs int[] rhs [VARIABLES] int[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^628^^^^^617^636^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int[] lhs int[] rhs [VARIABLES] int[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs != lhs.length.length )  {^628^^^^^617^636^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int[] lhs int[] rhs [VARIABLES] int[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( lhsnt i = 0; i < i.length && isEquals; ++i )  {^632^^^^^617^636^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int[] lhs int[] rhs [VARIABLES] int[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^633^^^^^617^636^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int[] lhs int[] rhs [VARIABLES] int[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^633^^^^^617^636^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   int[] lhs int[] rhs [VARIABLES] int[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^652^^^^^648^667^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^655^^^^^648^667^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( lhs.length.length != rhs.length )  {^659^^^^^648^667^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^659^^^^^648^667^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs != lhs.length.length )  {^659^^^^^648^667^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( lhs.length != rhs )  {^659^^^^^648^667^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( lhsnt i = 0; i < i.length && isEquals; ++i )  {^663^^^^^648^667^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && isEquals; ++i )  {^663^^^^^648^667^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( int i = 0; i < isEquals && lhs.length; ++i )  {^663^^^^^648^667^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^664^^^^^648^667^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^664^^^^^648^667^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^683^^^^^679^698^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^686^^^^^679^698^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^690^^^^^679^698^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs.length.length != lhs )  {^690^^^^^679^698^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && isEquals; ++i )  {^694^^^^^679^698^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^for  ( int i = 0; i < isEquals && lhs.length; ++i )  {^694^^^^^679^698^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^695^^^^^679^698^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^695^^^^^679^698^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   char[] lhs char[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  char[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs == lhs )  {^714^^^^^710^729^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^717^^^^^710^729^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( lhs.length.length != rhs.length )  {^721^^^^^710^729^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^721^^^^^710^729^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( lhsnt i = 0; i < i.length && isEquals; ++i )  {^725^^^^^710^729^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( isEqualsnt i = 0; i < lhs.length && i; ++i )  {^725^^^^^710^729^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^726^^^^^710^729^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^726^^^^^710^729^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^745^^^^^741^760^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^748^^^^^741^760^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^752^^^^^741^760^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs != lhs.length.length )  {^752^^^^^741^760^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( lhs.length != rhs )  {^752^^^^^741^760^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( isEqualsnt i = 0; i < lhs.length && i; ++i )  {^756^^^^^741^760^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^for  ( int i = 0; i < isEquals && lhs.length; ++i )  {^756^^^^^741^760^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^757^^^^^741^760^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^757^^^^^741^760^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  
[buglab_swap_variables]^if  ( rhs == lhs )  {^776^^^^^772^791^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^779^^^^^772^791^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^783^^^^^772^791^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && isEquals; ++i )  {^787^^^^^772^791^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^for  ( int i = 0; i < lhs.length.length && isEquals; ++i )  {^787^^^^^772^791^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^for  ( int i = 0; i < isEquals && lhs.length; ++i )  {^787^^^^^772^791^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^788^^^^^772^791^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^788^^^^^772^791^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   float[] lhs float[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  float[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs == lhs )  {^807^^^^^803^822^if  ( lhs == rhs )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^810^^^^^803^822^if  ( lhs == null || rhs == null )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^814^^^^^803^822^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^if  ( rhs != lhs.length.length )  {^814^^^^^803^822^if  ( lhs.length != rhs.length )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^for  ( isEqualsnt i = 0; i < lhs.length && i; ++i )  {^818^^^^^803^822^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^for  ( int i = 0; i < lhs.length.length && isEquals; ++i )  {^818^^^^^803^822^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^for  ( int i = 0; i < lhs && isEquals; ++i )  {^818^^^^^803^822^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^for  ( int i = 0; i < isEquals && lhs.length; ++i )  {^818^^^^^803^822^for  ( int i = 0; i < lhs.length && isEquals; ++i )  {^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^819^^^^^803^822^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^819^^^^^803^822^append ( lhs[i], rhs[i] ) ;^[CLASS] EqualsBuilder  [METHOD] append [RETURN_TYPE] EqualsBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  i  boolean  isEquals  lhs  rhs  superEquals  testTransients  useTransients  boolean[]  lhs  rhs  
