[buglab_swap_variables]^return toInt ( defaultValue, str ) ;^151^^^^^150^152^return toInt ( str, defaultValue ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str int defaultValue [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  defaultValue  
[buglab_swap_variables]^return toInt (  defaultValue ) ;^151^^^^^150^152^return toInt ( str, defaultValue ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str int defaultValue [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  defaultValue  
[buglab_swap_variables]^return toInt ( str ) ;^151^^^^^150^152^return toInt ( str, defaultValue ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str int defaultValue [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  defaultValue  
[buglab_swap_variables]^mant = expPos.substring ( 0, str ) ;^434^^^^^421^439^mant = str.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^mant = str.substring ( 0 ) ;^434^^^^^421^439^mant = str.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^dec = decPos.substring ( str + 1 ) ;^429^^^^^423^430^dec = str.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( decPos < expPos )  {^424^^^^^409^439^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^dec = decPos.substring ( str + 1, expPos ) ;^427^^^^^412^442^dec = str.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^dec = str.substring ( expPos + 1, decPos ) ;^427^^^^^412^442^dec = str.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^dec = str.substring ( decPos + 1 ) ;^427^^^^^412^442^dec = str.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^dec = decPos.substring ( str + 1 ) ;^429^^^^^414^444^dec = str.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^mant = decPos.substring ( 0, str ) ;^431^^^^^416^446^mant = str.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^mant = str.substring ( 0 ) ;^431^^^^^416^446^mant = str.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^dec = expPos.substring ( decPos + 1, str ) ;^427^^^^^412^442^dec = str.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^mant = expPos.substring ( 0, str ) ;^434^^^^^419^449^mant = str.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^mant = str.substring ( 0 ) ;^434^^^^^419^449^mant = str.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( str > -1 && expPos < expPos.length (  )  - 1 )  {^502^^^^^487^517^if  ( expPos > -1 && expPos < str.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^exp = expPos.substring ( str + 1, str.length (  )  ) ;^503^^^^^488^518^exp = str.substring ( expPos + 1, str.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^exp = str.substring ( expPos + 1.length (  )  ) ;^503^^^^^488^518^exp = str.substring ( expPos + 1, str.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^boolean allZeros = isAllZeros ( exp )  && isAllZeros ( mant ) ;^523^^^^^508^538^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( str > -1 && expPos < expPos.length (  )  - 1 )  {^441^^^^^426^456^if  ( expPos > -1 && expPos < str.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^exp = expPos.substring ( str + 1, str.length (  )  - 1 ) ;^442^^^^^427^457^exp = str.substring ( expPos + 1, str.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^exp = str.substring ( expPos + 1.length (  )  - 1 ) ;^442^^^^^427^457^exp = str.substring ( expPos + 1, str.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( exp == null && dec == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^452^453^454^455^^437^467^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( dec == null && numeric == null && isDigits ( exp.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^452^453^454^455^^437^467^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^boolean allZeros = isAllZeros ( exp )  && isAllZeros ( mant ) ;^448^^^^^433^463^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( numeric == null && exp == null && isDigits ( dec.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^452^453^454^455^^437^467^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( exp == null && dec == null )  {^507^^^^^492^522^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( expec == null && d == null )  {^507^^^^^492^522^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  
[buglab_swap_variables]^if  ( i.charAt ( str )  != '0' )  {^560^^^^^555^565^if  ( str.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^for  ( strnt i = i.length (  )  - 1; i >= 0; i-- )  {^559^^^^^555^565^for  ( int i = str.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^684^^^^^680^697^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  min  int  i  
[buglab_swap_variables]^} else if  ( array == 0 )  {^684^^^^^680^697^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  min  int  i  
[buglab_swap_variables]^if  ( min[i] < array )  {^691^^^^^680^697^if  ( array[i] < min )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  min  int  i  
[buglab_swap_variables]^for  ( array.lengthnt i = 1; i < i; i++ )  {^690^^^^^680^697^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  min  int  i  
[buglab_swap_variables]^for  ( arraynt i = 1; i < i.length; i++ )  {^690^^^^^680^697^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  min  int  i  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^711^^^^^707^724^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  min  
[buglab_swap_variables]^} else if  ( array == 0 )  {^711^^^^^707^724^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  min  
[buglab_swap_variables]^for  ( int array = 1; j < j.length; j++ )  {^717^^^^^707^724^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  min  
[buglab_swap_variables]^for  ( int array.length = 1; j < j; j++ )  {^717^^^^^707^724^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  min  
[buglab_swap_variables]^if  ( min[j] < array )  {^718^^^^^707^724^if  ( array[j] < min )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  min  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^738^^^^^734^751^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^} else if  ( array == 0 )  {^738^^^^^734^751^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^if  ( min[i] < array )  {^745^^^^^734^751^if  ( array[i] < min )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^for  ( array.lengthnt i = 1; i < i; i++ )  {^744^^^^^734^751^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^765^^^^^761^778^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  min  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^} else if  ( array == 0 )  {^765^^^^^761^778^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  min  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^if  ( min[i] < array )  {^772^^^^^761^778^if  ( array[i] < min )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  min  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^for  ( array.lengthnt i = 1; i < i; i++ )  {^771^^^^^761^778^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  min  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^for  ( int i = 1; i < array; i++ )  {^771^^^^^761^778^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  min  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^792^^^^^788^805^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  float[]  array  
[buglab_swap_variables]^} else if  ( array == 0 )  {^792^^^^^788^805^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  float[]  array  
[buglab_swap_variables]^if  ( min[i] < array )  {^799^^^^^788^805^if  ( array[i] < min )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  float[]  array  
[buglab_swap_variables]^for  ( array.lengthnt i = 1; i < i; i++ )  {^798^^^^^788^805^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  min  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  float[]  array  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^821^^^^^817^834^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  max  int  j  
[buglab_swap_variables]^} else if  ( array == 0 )  {^821^^^^^817^834^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  max  int  j  
[buglab_swap_variables]^for  ( int array.length = 1; j < j; j++ )  {^827^^^^^817^834^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  max  int  j  
[buglab_swap_variables]^for  ( int array = 1; j < j.length; j++ )  {^827^^^^^817^834^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  max  int  j  
[buglab_swap_variables]^if  ( max[j] > array )  {^828^^^^^817^834^if  ( array[j] > max )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] long   long[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  long[]  array  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  max  int  j  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^848^^^^^844^861^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  max  
[buglab_swap_variables]^} else if  ( array == 0 )  {^848^^^^^844^861^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  max  
[buglab_swap_variables]^if  ( max[j] > array )  {^855^^^^^844^861^if  ( array[j] > max )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  max  
[buglab_swap_variables]^for  ( int array.length = 1; j < j; j++ )  {^854^^^^^844^861^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  max  
[buglab_swap_variables]^for  ( int j = 1; j < array; j++ )  {^854^^^^^844^861^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] int   int[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  int[]  array  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  max  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^875^^^^^871^888^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^} else if  ( array == 0 )  {^875^^^^^871^888^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^if  ( max[i] > array )  {^882^^^^^871^888^if  ( array[i] > max )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^for  ( array.lengthnt i = 1; i < i; i++ )  {^881^^^^^871^888^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^for  ( arraynt i = 1; i < i.length; i++ )  {^881^^^^^871^888^for  ( int i = 1; i < array.length; i++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] short   short[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short[]  array  short  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^902^^^^^898^915^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  max  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  
[buglab_swap_variables]^} else if  ( array == 0 )  {^902^^^^^898^915^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  max  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  
[buglab_swap_variables]^if  ( max[j] > array )  {^909^^^^^898^915^if  ( array[j] > max )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  max  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  
[buglab_swap_variables]^for  ( int array = 1; j < j.length; j++ )  {^908^^^^^898^915^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  max  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  
[buglab_swap_variables]^for  ( int j = 1; j < array.length.length; j++ )  {^908^^^^^898^915^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  max  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  
[buglab_swap_variables]^for  ( int array.length = 1; j < j; j++ )  {^908^^^^^898^915^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double[]  array  double  max  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  
[buglab_swap_variables]^} else if  ( array.length.length == 0 )  {^929^^^^^925^942^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  float[]  array  
[buglab_swap_variables]^} else if  ( array == 0 )  {^929^^^^^925^942^} else if  ( array.length == 0 )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  float[]  array  
[buglab_swap_variables]^for  ( int array.length = 1; j < j; j++ )  {^935^^^^^925^942^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  float[]  array  
[buglab_swap_variables]^for  ( int array = 1; j < j.length; j++ )  {^935^^^^^925^942^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  float[]  array  
[buglab_swap_variables]^for  ( int j = 1; j < array; j++ )  {^935^^^^^925^942^for  ( int j = 1; j < array.length; j++ )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  float[]  array  
[buglab_swap_variables]^if  ( max[j] > array )  {^936^^^^^925^942^if  ( array[j] > max )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float[] array [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  max  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  j  float[]  array  
[buglab_swap_variables]^if  ( a < b )  {^955^^^^^954^962^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] long   long a long b long c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  a  b  c  
[buglab_swap_variables]^if  ( a < c )  {^958^^^^^954^962^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] long   long a long b long c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  a  b  c  
[buglab_swap_variables]^if  ( a < b )  {^973^^^^^972^980^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] int   int a int b int c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  a  b  c  
[buglab_swap_variables]^if  ( a < c )  {^976^^^^^972^980^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] int   int a int b int c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  a  b  c  
[buglab_swap_variables]^if  ( a < b )  {^991^^^^^990^998^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] short   short a short b short c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( a < c )  {^994^^^^^990^998^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] short   short a short b short c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( a < b )  {^1009^^^^^1008^1016^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] byte   byte a byte b byte c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  byte  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( a < c )  {^1012^^^^^1008^1016^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] byte   byte a byte b byte c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  byte  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( b, a ) , c ) ;^1030^^^^^1029^1031^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min (  b ) , c ) ;^1030^^^^^1029^1031^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( a ) , c ) ;^1030^^^^^1029^1031^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( c, b ) , a ) ;^1030^^^^^1029^1031^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( a, b )  ) ;^1030^^^^^1029^1031^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( a, c ) , b ) ;^1030^^^^^1029^1031^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( c, b ) , a ) ;^1045^^^^^1044^1046^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min (  b ) , c ) ;^1045^^^^^1044^1046^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( b, a ) , c ) ;^1045^^^^^1044^1046^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( a ) , c ) ;^1045^^^^^1044^1046^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( a, c ) , b ) ;^1045^^^^^1044^1046^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.min ( Math.min ( a, b )  ) ;^1045^^^^^1044^1046^return Math.min ( Math.min ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] min [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( a > b )  {^1059^^^^^1058^1066^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] long   long a long b long c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  a  b  c  
[buglab_swap_variables]^if  ( a > c )  {^1062^^^^^1058^1066^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] long   long a long b long c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  a  b  c  
[buglab_swap_variables]^if  ( a > b )  {^1077^^^^^1076^1084^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] int   int a int b int c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  a  b  c  
[buglab_swap_variables]^if  ( a > c )  {^1080^^^^^1076^1084^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] int   int a int b int c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  a  b  c  
[buglab_swap_variables]^if  ( a > b )  {^1095^^^^^1094^1102^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] short   short a short b short c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( a > c )  {^1098^^^^^1094^1102^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] short   short a short b short c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  short  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( a > b )  {^1113^^^^^1112^1120^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] byte   byte a byte b byte c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  byte  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( a > c )  {^1116^^^^^1112^1120^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] byte   byte a byte b byte c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  byte  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( b, a ) , c ) ;^1134^^^^^1133^1135^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max (  b ) , c ) ;^1134^^^^^1133^1135^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( a ) , c ) ;^1134^^^^^1133^1135^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( a, c ) , b ) ;^1134^^^^^1133^1135^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( a, b )  ) ;^1134^^^^^1133^1135^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( c, b ) , a ) ;^1134^^^^^1133^1135^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] double   double a double b double c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  a  b  c  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( b, a ) , c ) ;^1149^^^^^1148^1150^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max (  b ) , c ) ;^1149^^^^^1148^1150^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( a ) , c ) ;^1149^^^^^1148^1150^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( c, b ) , a ) ;^1149^^^^^1148^1150^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( a, b )  ) ;^1149^^^^^1148^1150^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^return Math.max ( Math.max ( a, c ) , b ) ;^1149^^^^^1148^1150^return Math.max ( Math.max ( a, b ) , c ) ;^[CLASS] NumberUtils  [METHOD] max [RETURN_TYPE] float   float a float b float c [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  a  b  c  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  
[buglab_swap_variables]^if  ( rhs < lhs )  {^1188^^^^^1187^1214^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  lhs  rhs  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( rhs > lhs )  {^1191^^^^^1187^1214^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  lhs  rhs  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( rhsBits == lhsBits )  {^1200^^^^^1187^1214^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  lhs  rhs  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( rhsBits < lhsBits )  {^1209^^^^^1187^1214^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  double  lhs  rhs  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  long  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( rhs < lhs )  {^1249^^^^^1248^1275^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  lhs  rhs  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( rhs > lhs )  {^1252^^^^^1248^1275^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  lhs  rhs  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( rhsBits == lhsBits )  {^1261^^^^^1248^1275^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  lhs  rhs  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( rhsBits < lhsBits )  {^1270^^^^^1248^1275^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  float  lhs  rhs  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  lhsBits  rhsBits  
[buglab_swap_variables]^if  ( !Character.isDigit ( i.charAt ( str )  )  )  {^1293^^^^^1288^1298^if  ( !Character.isDigit ( str.charAt ( i )  )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^for  ( strnt i = 0; i < i.length (  ) ; i++ )  {^1292^^^^^1288^1298^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  
[buglab_swap_variables]^int sz = chars.length.length;^1318^^^^^1303^1333^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^int sz = chars;^1318^^^^^1303^1333^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^if  ( start > sz + 1 )  {^1325^^^^^1310^1340^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^if  ( sz == i )  {^1328^^^^^1313^1343^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^for  ( ; chars.length < i; i++ )  {^1332^^^^^1317^1347^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^for  ( ; i < chars.length.length; i++ )  {^1332^^^^^1317^1347^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^for  ( ; chars < i.length; i++ )  {^1332^^^^^1317^1347^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^for  ( ; i < chars; i++ )  {^1332^^^^^1317^1347^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^while  ( allowSigns < sz ||  ( i < sz + 1 && i && !foundDigit )  )  {^1347^^^^^1332^1362^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^while  ( sz < i ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^1347^^^^^1332^1362^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^} else charsf  ( i[i] == '.' )  {^1352^^^^^1337^1367^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^} else charsf  ( i[i] == '+' || chars[i] == '-' )  {^1369^^^^^1354^1384^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^if  ( hasExp || hasDecPoint )  {^1353^^^^^1338^1368^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^} else charsf  ( i[i] == 'e' || chars[i] == 'E' )  {^1358^^^^^1343^1373^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^if  ( chars < i.length )  {^1380^^^^^1365^1395^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^if  ( i < chars.length.length )  {^1380^^^^^1365^1395^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
[buglab_swap_variables]^if  ( chars.length < i )  {^1380^^^^^1365^1395^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  
