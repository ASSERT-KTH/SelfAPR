[BugLab_Wrong_Operator]^private transient static final String MUST_BE_THROWABLE = "The Nestable implementation passed to the NestableDelegate ( Nestable )  >>  " + "constructor must extend java.lang.Throwable";^51^52^53^^^51^53^private transient static final String MUST_BE_THROWABLE = "The Nestable implementation passed to the NestableDelegate ( Nestable )  " + "constructor must extend java.lang.Throwable";^[CLASS] NestableDelegate   [VARIABLES] 
[BugLab_Wrong_Literal]^public static boolean topDown = false;^70^^^^^65^75^public static boolean topDown = true;^[CLASS] NestableDelegate   [VARIABLES] 
[BugLab_Wrong_Literal]^public static boolean trimStackFrames = false;^80^^^^^75^85^public static boolean trimStackFrames = true;^[CLASS] NestableDelegate   [VARIABLES] 
[BugLab_Wrong_Literal]^public static boolean matchSubclasses = false;^90^^^^^85^95^public static boolean matchSubclasses = true;^[CLASS] NestableDelegate   [VARIABLES] 
[BugLab_Wrong_Operator]^if  ( nestable  &&  Throwable )  {^101^^^^^100^106^if  ( nestable instanceof Throwable )  {^[CLASS] NestableDelegate  [METHOD] <init> [RETURN_TYPE] Nestable)   Nestable nestable [VARIABLES] Throwable  nestable  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  Nestable  nestable  
[BugLab_Variable_Misuse]^if  ( Nestable.class.isInstance ( nestable )  )  {^123^^^^^121^127^if  ( Nestable.class.isInstance ( t )  )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   int index [VARIABLES] Throwable  nestable  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  int  index  
[BugLab_Wrong_Literal]^return  (  ( Nestable )  t ) .getMessage ( index ) ;^124^^^^^121^127^return  (  ( Nestable )  t ) .getMessage ( 0 ) ;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   int index [VARIABLES] Throwable  nestable  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  int  index  
[BugLab_Wrong_Literal]^return  (  ( Nestable )  t ) .getMessage (  ) ;^124^^^^^121^127^return  (  ( Nestable )  t ) .getMessage ( 0 ) ;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   int index [VARIABLES] Throwable  nestable  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  int  index  
[BugLab_Variable_Misuse]^return nestable.getMessage (  ) ;^126^^^^^121^127^return t.getMessage (  ) ;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   int index [VARIABLES] Throwable  nestable  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  int  index  
[BugLab_Variable_Misuse]^Throwable nestedCause = ExceptionUtils.getCause ( t ) ;^140^^^^^139^149^Throwable nestedCause = ExceptionUtils.getCause ( this.nestable ) ;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^String causeMsg = t == null ? null : nestedCause.getMessage (  ) ;^141^^^^^139^149^String causeMsg = nestedCause == null ? null : nestedCause.getMessage (  ) ;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Wrong_Operator]^String causeMsg = nestedCause != null ? null : nestedCause.getMessage (  ) ;^141^^^^^139^149^String causeMsg = nestedCause == null ? null : nestedCause.getMessage (  ) ;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^if  ( t == null || causeMsg == null )  {^142^^^^^139^149^if  ( nestedCause == null || causeMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^if  ( nestedCause == null || MUST_BE_THROWABLE == null )  {^142^^^^^139^149^if  ( nestedCause == null || causeMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Argument_Swapping]^if  ( causeMsg == null || nestedCause == null )  {^142^^^^^139^149^if  ( nestedCause == null || causeMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Wrong_Operator]^if  ( nestedCause == null && causeMsg == null )  {^142^^^^^139^149^if  ( nestedCause == null || causeMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Wrong_Operator]^if  ( nestedCause != null || causeMsg == null )  {^142^^^^^139^149^if  ( nestedCause == null || causeMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Wrong_Operator]^if  ( nestedCause == null || causeMsg != null )  {^142^^^^^139^149^if  ( nestedCause == null || causeMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^return causeMsg;^143^^^^^139^149^return baseMsg;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^if  ( MUST_BE_THROWABLE == null )  {^145^^^^^139^149^if  ( baseMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Wrong_Operator]^if  ( baseMsg != null )  {^145^^^^^139^149^if  ( baseMsg == null )  {^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^return baseMsg;^146^^^^^139^149^return causeMsg;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^return MUST_BE_THROWABLE + ": " + causeMsg;^148^^^^^139^149^return baseMsg + ": " + causeMsg;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^return baseMsg + ": " + MUST_BE_THROWABLE;^148^^^^^139^149^return baseMsg + ": " + causeMsg;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Argument_Swapping]^return causeMsg + ": " + baseMsg;^148^^^^^139^149^return baseMsg + ": " + causeMsg;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Wrong_Operator]^return baseMsg  |  ": " + causeMsg;^148^^^^^139^149^return baseMsg + ": " + causeMsg;^[CLASS] NestableDelegate  [METHOD] getMessage [RETURN_TYPE] String   String baseMsg [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Argument_Swapping]^for  ( throwables.lengthnt i = 0; i < i; i++ )  {^163^^^^^160^170^for  ( int i = 0; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] getMessages [RETURN_TYPE] String[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  String[]  msgs  Throwable[]  throwables  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= throwables.length; i++ )  {^163^^^^^160^170^for  ( int i = 0; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] getMessages [RETURN_TYPE] String[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  String[]  msgs  Throwable[]  throwables  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < throwables.length; i++ )  {^163^^^^^160^170^for  ( int i = 0; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] getMessages [RETURN_TYPE] String[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  String[]  msgs  Throwable[]  throwables  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < throwables.length; i++ )  {^163^^^^^160^170^for  ( int i = 0; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] getMessages [RETURN_TYPE] String[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  String[]  msgs  Throwable[]  throwables  int  i  
[BugLab_Wrong_Literal]^msgs[i] = ( Nestable.class.isInstance ( throwables[i] ) ?  (  ( Nestable )  throwables[i] ) .getMessage ( i ) : throwables[i].getMessage (  )  ) ;^164^165^166^167^^160^170^msgs[i] = ( Nestable.class.isInstance ( throwables[i] ) ?  (  ( Nestable )  throwables[i] ) .getMessage ( 0 ) : throwables[i].getMessage (  )  ) ;^[CLASS] NestableDelegate  [METHOD] getMessages [RETURN_TYPE] String[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  String[]  msgs  Throwable[]  throwables  int  i  
[BugLab_Wrong_Literal]^?  (  ( Nestable )  throwables[i] ) .getMessage (  ) : throwables[i].getMessage (  )  ) ;^166^167^^^^160^170^?  (  ( Nestable )  throwables[i] ) .getMessage ( 0 ) : throwables[i].getMessage (  )  ) ;^[CLASS] NestableDelegate  [METHOD] getMessages [RETURN_TYPE] String[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  String[]  msgs  Throwable[]  throwables  int  i  
[BugLab_Wrong_Operator]^if  ( index != 0 )  {^185^^^^^184^190^if  ( index == 0 )  {^[CLASS] NestableDelegate  [METHOD] getThrowable [RETURN_TYPE] Throwable   int index [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  index  
[BugLab_Wrong_Literal]^if  ( index == index )  {^185^^^^^184^190^if  ( index == 0 )  {^[CLASS] NestableDelegate  [METHOD] getThrowable [RETURN_TYPE] Throwable   int index [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  index  
[BugLab_Variable_Misuse]^return t;^186^^^^^184^190^return this.nestable;^[CLASS] NestableDelegate  [METHOD] getThrowable [RETURN_TYPE] Throwable   int index [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  index  
[BugLab_Variable_Misuse]^return ExceptionUtils.getThrowableCount ( t ) ;^200^^^^^199^201^return ExceptionUtils.getThrowableCount ( this.nestable ) ;^[CLASS] NestableDelegate  [METHOD] getThrowableCount [RETURN_TYPE] int   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^return ExceptionUtils.getThrowables ( t ) ;^212^^^^^211^213^return ExceptionUtils.getThrowables ( this.nestable ) ;^[CLASS] NestableDelegate  [METHOD] getThrowables [RETURN_TYPE] Throwable[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Variable_Misuse]^return ExceptionUtils.getThrowables ( nestedCause ) ;^212^^^^^211^213^return ExceptionUtils.getThrowables ( this.nestable ) ;^[CLASS] NestableDelegate  [METHOD] getThrowables [RETURN_TYPE] Throwable[]   [VARIABLES] Throwable  nestable  nestedCause  t  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  
[BugLab_Wrong_Operator]^if  ( type != null )  {^240^^^^^239^265^if  ( type == null )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Literal]^return -fromIndex;^241^^^^^239^265^return -1;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^if  ( i < 0 )  {^243^^^^^239^265^if  ( fromIndex < 0 )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^if  ( fromIndex == 0 )  {^243^^^^^239^265^if  ( fromIndex < 0 )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Literal]^if  ( fromIndex <  )  {^243^^^^^239^265^if  ( fromIndex < 0 )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^Throwable[] throwables = ExceptionUtils.getThrowables ( t ) ;^246^^^^^239^265^Throwable[] throwables = ExceptionUtils.getThrowables ( this.nestable ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^if  ( fromIndex >= i )  {^247^^^^^239^265^if  ( fromIndex >= throwables.length )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^if  ( throwables.length >= fromIndex )  {^247^^^^^239^265^if  ( fromIndex >= throwables.length )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^if  ( fromIndex >= throwables.length.length )  {^247^^^^^239^265^if  ( fromIndex >= throwables.length )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^if  ( fromIndex >= throwables )  {^247^^^^^239^265^if  ( fromIndex >= throwables.length )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^if  ( fromIndex > throwables.length )  {^247^^^^^239^265^if  ( fromIndex >= throwables.length )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + i + " >= " + throwables.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + i ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + throwables.length + " >= " + fromIndex ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: "  !=  fromIndex  !=  " >= " + throwables.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: "  &  fromIndex + " >= " + throwables.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: "   instanceof   fromIndex + " >= " + throwables.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + throwables + " >= " + fromIndex.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: "  ^  fromIndex + " >= " + throwables.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: "  <=  fromIndex  <=  " >= " + throwables.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "The start index was out of bounds: "  ||  fromIndex + " >= " + throwables.length ) ;^248^249^^^^239^265^throw new IndexOutOfBoundsException ( "The start index was out of bounds: " + fromIndex + " >= " + throwables.length ) ;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^if  ( trimStackFrames )  {^251^^^^^239^265^if  ( matchSubclasses )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^return fromIndex;^260^^^^^251^263^return i;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^for  ( fromIndexnt i = fromIndex; i < throwables.length; i++ )  {^258^^^^^251^263^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^for  ( int i = fromIndex; i < fromIndex; i++ )  {^258^^^^^251^263^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( fromIndexnt i = i; i < throwables.length; i++ )  {^258^^^^^251^263^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( throwables.lengthnt i = fromIndex; i < i; i++ )  {^258^^^^^251^263^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^for  ( int i = fromIndex; i > throwables.length; i++ )  {^258^^^^^251^263^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^if  ( throwables.equals ( type[i].getClass (  )  )  )  {^259^^^^^251^263^if  ( type.equals ( throwables[i].getClass (  )  )  )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^if  ( throwables.isAssignableFrom ( type[i].getClass (  )  )  )  {^253^^^^^239^265^if  ( type.isAssignableFrom ( throwables[i].getClass (  )  )  )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^return fromIndex;^254^^^^^239^265^return i;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^for  ( fromIndexnt i = fromIndex; i < throwables.length; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( fromIndexnt i = i; i < throwables.length; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( throwables.lengthnt i = fromIndex; i < i; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( int i = fromIndex; i < throwables; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^for  ( int i = fromIndex; i > throwables.length; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^if  ( throwables.equals ( type[i].getClass (  )  )  )  {^259^^^^^239^265^if  ( type.equals ( throwables[i].getClass (  )  )  )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^for  ( int i = fromIndex; i < fromIndex; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( int i = fromIndex; i < throwables.length.length; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( int i = throwables.length; i < fromIndex; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^for  ( int i = fromIndex; i <= throwables.length; i++ )  {^252^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^for  ( fromIndexnt i = fromIndex; i < throwables.length; i++ )  {^258^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^for  ( int i = fromIndex; i < fromIndex; i++ )  {^258^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( fromIndexnt i = i; i < throwables.length; i++ )  {^258^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( throwables.lengthnt i = fromIndex; i < i; i++ )  {^258^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( int i = throwables; i < fromIndex.length; i++ )  {^258^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Argument_Swapping]^for  ( int i = throwables.length; i < fromIndex; i++ )  {^258^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Operator]^for  ( int i = fromIndex; i <= throwables.length; i++ )  {^258^^^^^239^265^for  ( int i = fromIndex; i < throwables.length; i++ )  {^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Variable_Misuse]^return fromIndex;^260^^^^^239^265^return i;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Literal]^return -fromIndex;^264^^^^^239^265^return -1;^[CLASS] NestableDelegate  [METHOD] indexOfThrowable [RETURN_TYPE] int   Class type int fromIndex [VARIABLES] Throwable  nestable  nestedCause  t  Class  type  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  Throwable[]  throwables  int  fromIndex  i  
[BugLab_Wrong_Literal]^PrintWriter pw = new PrintWriter ( out, true ) ;^284^^^^^282^289^PrintWriter pw = new PrintWriter ( out, false ) ;^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintStream out [VARIABLES] Throwable  nestable  nestedCause  t  PrintStream  out  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  PrintWriter  pw  
[BugLab_Variable_Misuse]^Throwable throwable = t;^303^^^^^288^318^Throwable throwable = this.nestable;^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Wrong_Operator]^if  ( throwable  ||  Nestable )  {^306^^^^^291^321^if  ( throwable instanceof Nestable )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Wrong_Operator]^if  ( throwable  ==  Nestable )  {^306^^^^^291^321^if  ( throwable instanceof Nestable )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^while  ( t != null )  {^316^^^^^301^331^while  ( throwable != null )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Wrong_Operator]^while  ( throwable == null )  {^316^^^^^301^331^while  ( throwable != null )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^throwable = ExceptionUtils.getCause ( t ) ;^319^^^^^304^334^throwable = ExceptionUtils.getCause ( throwable ) ;^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^String[] st = getStackFrames ( t ) ;^317^^^^^302^332^String[] st = getStackFrames ( throwable ) ;^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^if  ( !trimStackFrames )  {^324^^^^^309^339^if  ( !topDown )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^if  ( topDown )  {^330^^^^^315^345^if  ( trimStackFrames )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^out.print ( causeMsg ) ;^341^^^^^326^356^out.print ( separatorLine ) ;^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^for  ( Iterator lenter=stacks.iterator (  ) ; iter.hasNext (  ) ; )  {^335^^^^^320^350^for  ( Iterator iter=stacks.iterator (  ) ; iter.hasNext (  ) ; )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Argument_Swapping]^for  ( Iterator i=stacks.iterator (  ) ; iterter.hasNext (  ) ; )  {^335^^^^^320^350^for  ( Iterator iter=stacks.iterator (  ) ; iter.hasNext (  ) ; )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Variable_Misuse]^for  ( lennt i=0, len=st.length; i < len; i++ )  {^337^^^^^322^352^for  ( int i=0, len=st.length; i < len; i++ )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Argument_Swapping]^for  ( lennt i=0, i=st.length; i < len; i++ )  {^337^^^^^322^352^for  ( int i=0, len=st.length; i < len; i++ )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Wrong_Operator]^for  ( int i=0, len=st.length; i <= len; i++ )  {^337^^^^^322^352^for  ( int i=0, len=st.length; i < len; i++ )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Wrong_Literal]^for  ( int i=1, len=st.length; i < len; i++ )  {^337^^^^^322^352^for  ( int i=0, len=st.length; i < len; i++ )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Wrong_Literal]^for  ( int i=-1, len=st.length; i < len; i++ )  {^337^^^^^322^352^for  ( int i=0, len=st.length; i < len; i++ )  {^[CLASS] NestableDelegate  [METHOD] printStackTrace [RETURN_TYPE] void   PrintWriter out [VARIABLES] boolean  matchSubclasses  topDown  trimStackFrames  Iterator  iter  Throwable  nestable  nestedCause  t  throwable  List  stacks  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  st  int  i  len  PrintWriter  out  
[BugLab_Wrong_Literal]^PrintWriter pw = new PrintWriter ( sw, false ) ;^358^^^^^356^367^PrintWriter pw = new PrintWriter ( sw, true ) ;^[CLASS] NestableDelegate  [METHOD] getStackFrames [RETURN_TYPE] String[]   Throwable t [VARIABLES] Throwable  nestable  nestedCause  t  throwable  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  StringWriter  sw  PrintWriter  pw  
[BugLab_Variable_Misuse]^if  ( throwable instanceof Nestable )  {^361^^^^^356^367^if  ( t instanceof Nestable )  {^[CLASS] NestableDelegate  [METHOD] getStackFrames [RETURN_TYPE] String[]   Throwable t [VARIABLES] Throwable  nestable  nestedCause  t  throwable  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  StringWriter  sw  PrintWriter  pw  
[BugLab_Wrong_Operator]^if  ( t  >  Nestable )  {^361^^^^^356^367^if  ( t instanceof Nestable )  {^[CLASS] NestableDelegate  [METHOD] getStackFrames [RETURN_TYPE] String[]   Throwable t [VARIABLES] Throwable  nestable  nestedCause  t  throwable  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  StringWriter  sw  PrintWriter  pw  
[BugLab_Variable_Misuse]^if  ( size > 0 )  {^387^^^^^377^395^if  ( trimmed > 0 )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Operator]^if  ( trimmed >= 0 )  {^387^^^^^377^395^if  ( trimmed > 0 )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^if  ( trimmed > size )  {^387^^^^^377^395^if  ( trimmed > 0 )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^stacks.set ( trimmed, currList.toArray ( new String[currList.size (  ) ] ) ) ;^389^390^391^392^^377^395^stacks.set ( i, currList.toArray ( new String[currList.size (  ) ] ) ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^stacks.set ( i, nextList.toArray ( new String[currList.size (  ) ] ) ) ;^389^390^391^392^^377^395^stacks.set ( i, currList.toArray ( new String[currList.size (  ) ] ) ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^stacks.set ( currList, i.toArray ( new String[currList.size (  ) ] ) ) ;^389^390^391^392^^377^395^stacks.set ( i, currList.toArray ( new String[currList.size (  ) ] ) ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^for  ( int trimmed=stacks.size (  ) , i=size-1; i > 0; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^for  ( trimmednt size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Operator]^for  ( int size=stacks.size (  ) , i=size-1; i == 0; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Operator]^for  ( int size=stacks.size (  ) , i=size-1; i >= 0; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^for  ( int size=stacks.size (  ) , i=size-i; i > 0; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^for  ( int size=stacks.size (  ) , i=size-1; i > i; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^for  ( int size=stacks.size (  ) , i=size-2; i > 0; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^if  ( trimmed > 1 )  {^387^^^^^377^395^if  ( trimmed > 0 )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^stacks.set ( i, stacks.toArray ( new String[currList.size (  ) ] ) ) ;^389^390^391^392^^377^395^stacks.set ( i, currList.toArray ( new String[currList.size (  ) ] ) ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^List nextList = new ArrayList ( Arrays.asList ( curr )  ) ;^382^^^^^377^395^List currList = new ArrayList ( Arrays.asList ( curr )  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^List currList = new ArrayList ( Arrays.asList ( next )  ) ;^383^^^^^377^395^List nextList = new ArrayList ( Arrays.asList ( next )  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^String[] curr =  ( String[] )  stacks.get ( trimmed ) ;^379^^^^^377^395^String[] curr =  ( String[] )  stacks.get ( i ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^String[] curr =  ( String[] )  i.get ( stacks ) ;^379^^^^^377^395^String[] curr =  ( String[] )  stacks.get ( i ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^String[] next =  ( String[] )  nextList.get ( i-1 ) ;^380^^^^^377^395^String[] next =  ( String[] )  stacks.get ( i-1 ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^String[] next =  ( String[] )  stacks.get ( trimmed-1 ) ;^380^^^^^377^395^String[] next =  ( String[] )  stacks.get ( i-1 ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^String[] next =  ( String[] )  i.get ( stacks-1 ) ;^380^^^^^377^395^String[] next =  ( String[] )  stacks.get ( i-1 ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^String[] next =  ( String[] )  stacks.get ( i-0 ) ;^380^^^^^377^395^String[] next =  ( String[] )  stacks.get ( i-1 ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^int trimmed = next.length - currList.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^int trimmed = curr.length - stacks.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^int trimmed = size - currList.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^int trimmed = curr.length.length - currList.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^int trimmed = currList - curr.length.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^int trimmed = curr - curr.lengthList.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Operator]^int trimmed = curr.length  <=  currList.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^String[] curr =  ( String[] )  nextList.get ( i ) ;^379^^^^^377^395^String[] curr =  ( String[] )  stacks.get ( i ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^String[] next =  ( String[] )  stacks.get ( i-2 ) ;^380^^^^^377^395^String[] next =  ( String[] )  stacks.get ( i-1 ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^ExceptionUtils.removeCommonFrames ( currList, stacks ) ;^384^^^^^377^395^ExceptionUtils.removeCommonFrames ( currList, nextList ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^ExceptionUtils.removeCommonFrames ( nextList, currList ) ;^384^^^^^377^395^ExceptionUtils.removeCommonFrames ( currList, nextList ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^for  ( int size=stacks.size (  ) , i=size-size; i > 0; i-- )  {^378^^^^^377^395^for  ( int size=stacks.size (  ) , i=size-1; i > 0; i-- )  {^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Wrong_Literal]^String[] next =  ( String[] )  stacks.get ( i- ) ;^380^^^^^377^395^String[] next =  ( String[] )  stacks.get ( i-1 ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Argument_Swapping]^int trimmed = currList.length - curr.size (  ) ;^386^^^^^377^395^int trimmed = curr.length - currList.size (  ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
[BugLab_Variable_Misuse]^ExceptionUtils.removeCommonFrames ( stacks, nextList ) ;^384^^^^^377^395^ExceptionUtils.removeCommonFrames ( currList, nextList ) ;^[CLASS] NestableDelegate  [METHOD] trimStackFrames [RETURN_TYPE] void   List stacks [VARIABLES] Throwable  nestable  nestedCause  t  throwable  List  currList  nextList  stacks  boolean  matchSubclasses  topDown  trimStackFrames  String  MUST_BE_THROWABLE  baseMsg  causeMsg  separatorLine  String[]  curr  next  int  i  size  trimmed  
