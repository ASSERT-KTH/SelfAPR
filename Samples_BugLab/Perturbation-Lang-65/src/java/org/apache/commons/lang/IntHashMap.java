[BugLab_Variable_Misuse]^this.hash = threshold;^83^^^^^82^87^this.hash = hash;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap$Entry)   int hash int key Object value Entry next [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  key  threshold  Entry[]  table  
[BugLab_Variable_Misuse]^this.key = threshold;^84^^^^^82^87^this.key = key;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap$Entry)   int hash int key Object value Entry next [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  key  threshold  Entry[]  table  
[BugLab_Wrong_Literal]^this ( 19, 0.75f ) ;^95^^^^^94^96^this ( 20, 0.75f ) ;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap()   [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  key  threshold  Entry[]  table  
[BugLab_Variable_Misuse]^this ( threshold, 0.75f ) ;^107^^^^^106^108^this ( initialCapacity, 0.75f ) ;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int)   int initialCapacity [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Variable_Misuse]^if  ( key < 0 )  {^121^^^^^119^134^if  ( initialCapacity < 0 )  {^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Operator]^if  ( initialCapacity <= 0 )  {^121^^^^^119^134^if  ( initialCapacity < 0 )  {^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Literal]^if  ( initialCapacity < threshold )  {^121^^^^^119^134^if  ( initialCapacity < 0 )  {^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Operator]^if  ( loadFactor < 0 )  {^124^^^^^119^134^if  ( loadFactor <= 0 )  {^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Variable_Misuse]^if  ( threshold == 0 )  {^127^^^^^119^134^if  ( initialCapacity == 0 )  {^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Operator]^if  ( initialCapacity != 0 )  {^127^^^^^119^134^if  ( initialCapacity == 0 )  {^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Literal]^if  ( initialCapacity == key )  {^127^^^^^119^134^if  ( initialCapacity == 0 )  {^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Literal]^initialCapacity = key;^128^^^^^119^134^initialCapacity = 1;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Argument_Swapping]^threshold =  ( int )   ( loadFactor * initialCapacity ) ;^133^^^^^119^134^threshold =  ( int )   ( initialCapacity * loadFactor ) ;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Operator]^threshold =  ( int )   ( initialCapacity + loadFactor ) ;^133^^^^^119^134^threshold =  ( int )   ( initialCapacity * loadFactor ) ;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Variable_Misuse]^return threshold;^142^^^^^141^143^return count;^[CLASS] IntHashMap Entry  [METHOD] size [RETURN_TYPE] int   [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Variable_Misuse]^return threshold == 0;^152^^^^^151^153^return count == 0;^[CLASS] IntHashMap Entry  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Operator]^return count > 0;^152^^^^^151^153^return count == 0;^[CLASS] IntHashMap Entry  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Literal]^return count == key;^152^^^^^151^153^return count == 0;^[CLASS] IntHashMap Entry  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[BugLab_Wrong_Operator]^if  ( value != null )  {^174^^^^^173^187^if  ( value == null )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( next.value.equals ( value )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( value.value.equals ( e )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( value.equals ( e.value )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( e.equals ( value )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Literal]^return false;^182^^^^^173^187^return true;^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( int i = table.length; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( thresholdnt i = tab.length; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( int i = key; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( tabnt i = i.length; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( tab.lengthnt i = i; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^for  ( int i = tab.length; i-- >= 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Literal]^for  ( int i = tab.length; i-- > hash; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = table[i]; e != null; e = e.next )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry next = tab[i]; e != null; e = e.next )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = tab[i]; e != null; e = next )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry e.next = tab[i]; e != null; e = e )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^for  ( Entry e = tab[i]; e == null; e = e.next )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( e.value.value.equals ( value )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry tab = e[i]; e != null; e = e.next )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( int i = tab.length.length; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( int i = tab; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Literal]^return true;^186^^^^^173^187^return false;^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int hash = initialCapacity;^216^^^^^214^224^int hash = key;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int index =  ( threshold & 0x7FFFFFFF )  % tab.length;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int index =  ( hash & 0x7FFFFFFF )  % table.length;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int index =  ( hash & 0x7FFFFFFF )  % initialCapacity;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^int index =  ( hash & 0x7FFFFFFF )  % tab.length.length;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash & 0x7FFFFFFF )   |  tab.length;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash  >  0x7FFFFFFF )  % tab.length;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( next.hash == hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( e.hash == threshold )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( threshold == hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( hash.hash == e )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( hash == e.hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^if  ( e.hash != hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Literal]^return false;^220^^^^^214^224^return true;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = table[index]; e != null; e = e.next )  {^218^^^^^214^224^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry next = tab[index]; e != null; e = e.next )  {^218^^^^^214^224^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = tab[index]; e != null; e = next )  {^218^^^^^214^224^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry e.next = tab[index]; e != null; e = e )  {^218^^^^^214^224^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^for  ( Entry e = tab[index]; e == null; e = e.next )  {^218^^^^^214^224^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( e.hash == key )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( e.hash.hash == hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Literal]^return true;^223^^^^^214^224^return false;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int hash = initialCapacity;^237^^^^^235^245^int hash = key;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int index =  ( threshold & 0x7FFFFFFF )  % tab.length;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int index =  ( hash & 0x7FFFFFFF )  % table.length;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int index =  ( hash & 0x7FFFFFFF )  % key;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^int index =  ( hash & 0x7FFFFFFF )  % tab.length.length;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash & 0x7FFFFFFF )   >  tab.length;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash  ||  0x7FFFFFFF )  % tab.length;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( next.hash == hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( e.hash == threshold )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( initialCapacity == hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( e.hash.hash == hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( hash == e.hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( e == hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^if  ( e.hash <= hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^return next.value;^241^^^^^235^245^return e.value;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^return value;^241^^^^^235^245^return e.value;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^return e.value.value;^241^^^^^235^245^return e.value;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^return e;^241^^^^^235^245^return e.value;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = table[index]; e != null; e = e.next )  {^239^^^^^235^245^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry next = tab[index]; e != null; e = e.next )  {^239^^^^^235^245^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = tab[index]; e != null; e = next )  {^239^^^^^235^245^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry e.next = tab[index]; e != null; e = e )  {^239^^^^^235^245^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^for  ( Entry e = tab[index]; e == null; e = e.next )  {^239^^^^^235^245^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^if  ( threshold == hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Argument_Swapping]^if  ( hash.hash == e )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Wrong_Operator]^if  ( e.hash != hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[BugLab_Variable_Misuse]^int oldCapacity = tab.length;^257^^^^^256^276^int oldCapacity = table.length;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int oldCapacity = table;^257^^^^^256^276^int oldCapacity = table.length;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int oldCapacity = table.length.length;^257^^^^^256^276^int oldCapacity = table.length;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry oldMap[] = tab;^258^^^^^256^276^Entry oldMap[] = table;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int newCapacity = threshold * 2 + 1;^260^^^^^256^276^int newCapacity = oldCapacity * 2 + 1;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int newCapacity = oldCapacity / 2 + 1;^260^^^^^256^276^int newCapacity = oldCapacity * 2 + 1;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Literal]^int newCapacity = oldCapacity * newCapacity + 1;^260^^^^^256^276^int newCapacity = oldCapacity * 2 + 1;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Literal]^int newCapacity = oldCapacity * 2 ;^260^^^^^256^276^int newCapacity = oldCapacity * 2 + 1;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^threshold =  ( int )   ( loadFactor * newCapacity ) ;^263^^^^^256^276^threshold =  ( int )   ( newCapacity * loadFactor ) ;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^threshold =  ( int )   ( newCapacity / loadFactor ) ;^263^^^^^256^276^threshold =  ( int )   ( newCapacity * loadFactor ) ;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^table = table;^264^^^^^256^276^table = newMap;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( int i = newCapacity; i-- > 0; )  {^266^^^^^256^276^for  ( int i = oldCapacity; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( keynt i = oldCapacity; i-- > 0; )  {^266^^^^^256^276^for  ( int i = oldCapacity; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( int i = nextCapacity; i-- > 0; )  {^266^^^^^256^276^for  ( int i = oldCapacity; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^for  ( int i = oldCapacity; i-- < 0; )  {^266^^^^^256^276^for  ( int i = oldCapacity; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Literal]^for  ( int i = oldCapacity; i-- > index; )  {^266^^^^^256^276^for  ( int i = oldCapacity; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry old = table[i]; old != null; )  {^267^^^^^256^276^for  ( Entry old = oldMap[i]; old != null; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry next = oldMap[i]; old != null; )  {^267^^^^^256^276^for  ( Entry old = oldMap[i]; old != null; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^for  ( Entry old = oldMap[i]; old == null; )  {^267^^^^^256^276^for  ( Entry old = oldMap[i]; old != null; )  {^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^old = next.next;^269^^^^^256^276^old = old.next;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^old = old.next.next;^269^^^^^256^276^old = old.next;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^old = old;^269^^^^^256^276^old = old.next;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^e.next = table[index];^272^^^^^256^276^e.next = newMap[index];^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^newMap[index] = old;^273^^^^^256^276^newMap[index] = e;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry e = next;^268^^^^^256^276^Entry e = old;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( old.hash & 0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( e.hash & 0x7FFFFFFF )  % threshold;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( e.hash.hash & 0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( newCapacity & 0x7FFFFFFF )  % e.hash;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( e.hash & 0x7FFFFFFF )   |  newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( e.hash  >  0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^old = next;^269^^^^^256^276^old = old.next;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( threshold & 0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( e.hash & 0x7FFFFFFF )   >  newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( e.hash & 0x7FFFFFFF )  % key;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( key & 0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( newCapacity.hash & 0x7FFFFFFF )  % e;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( e & 0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( e.hash & 0x7FFFFFFF )   <  newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( e.hash  ||  0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( newCapacity & 0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( e.hash & 0x7FFFFFFF )   ||  newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( e.hash  ==  0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry tab[] = oldMap;^295^^^^^293^319^Entry tab[] = table;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int hash = newCapacity;^296^^^^^293^319^int hash = key;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( newCapacity & 0x7FFFFFFF )  % tab.length;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( hash & 0x7FFFFFFF )  % key;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( hash & 0x7FFFFFFF )  % tab.length.length;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( hash & 0x7FFFFFFF )  % tab;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash & 0x7FFFFFFF )   ^  tab.length;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash  <  0x7FFFFFFF )  % tab.length;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( next.hash == hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( e.hash == threshold )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( initialCapacity == hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^if  ( hash == e.hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^if  ( e == hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^if  ( e.hash <= hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^e.valuold = value;^301^^^^^293^319^e.value = value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^e.value = old;^301^^^^^293^319^e.value = value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Object old = next.value;^300^^^^^293^319^Object old = e.value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Object old = value;^300^^^^^293^319^Object old = e.value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^Object old = e.value.value;^300^^^^^293^319^Object old = e.value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^Object old = e;^300^^^^^293^319^Object old = e.value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = table[index]; e != null; e = e.next )  {^298^^^^^293^319^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry old = tab[index]; e != null; e = e.next )  {^298^^^^^293^319^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = tab[index]; e != null; e = old )  {^298^^^^^293^319^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry e.next = tab[index]; e != null; e = e )  {^298^^^^^293^319^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^for  ( Entry e = tab[index]; e == null; e = e.next )  {^298^^^^^293^319^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( threshold == hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^if  ( e.hash.hash == hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^if  ( e.hash != hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^return value;^302^^^^^293^319^return old;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( newCapacity >= threshold )  {^306^^^^^293^319^if  ( count >= threshold )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( count >= initialCapacity )  {^306^^^^^293^319^if  ( count >= threshold )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^if  ( count > threshold )  {^306^^^^^293^319^if  ( count >= threshold )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^tab = tab;^310^^^^^293^319^tab = table;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^index =  ( oldCapacity & 0x7FFFFFFF )  % tab.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^index =  ( hash & 0x7FFFFFFF )  % table.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^index =  ( hash & 0x7FFFFFFF )  % initialCapacity;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^index =  ( tab.length & 0x7FFFFFFF )  % hash;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^index =  ( hash & 0x7FFFFFFF )  % tab.length.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^index =  ( hash & 0x7FFFFFFF )   >  tab.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^index =  ( hash  ==  0x7FFFFFFF )  % tab.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^index =  ( threshold & 0x7FFFFFFF )  % tab.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^index =  ( hash & 0x7FFFFFFF )  % oldCapacity;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^index =  ( hash & 0x7FFFFFFF )  % tab;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^index =  ( hash & 0x7FFFFFFF )   <  tab.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^index =  ( hash  ^  0x7FFFFFFF )  % tab.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry e = new Entry ( threshold, key, value, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry e = new Entry ( hash, newCapacity, value, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry e = new Entry ( hash, key, old, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry e = new Entry ( hash, key, value, table[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^Entry e = new Entry ( hash, key, tab, value[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^Entry e = new Entry ( hash, tab, value, key[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry e = new Entry ( hash, threshold, value, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^Entry e = new Entry ( key, hash, value, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^tab[index] = old;^316^^^^^293^319^tab[index] = e;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry tab[] = oldMap;^333^^^^^332^350^Entry tab[] = table;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int hash = oldCapacity;^334^^^^^332^350^int hash = key;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( threshold & 0x7FFFFFFF )  % tab.length;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( hash & 0x7FFFFFFF )  % table.length;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^int index =  ( hash & 0x7FFFFFFF )  % newCapacity;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^int index =  ( tab & 0x7FFFFFFF )  % hash.length;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash & 0x7FFFFFFF )   >=  tab.length;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^int index =  ( hash  <<  0x7FFFFFFF )  % tab.length;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( prev.hash == hash )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( e.hash == key )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( key == hash )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^if  ( hash == e.hash )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^if  ( e.hash != hash )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( old != null )  {^338^^^^^332^350^if  ( prev != null )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^if  ( prev == null )  {^338^^^^^332^350^if  ( prev != null )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^tab[index] = prev.next;^341^^^^^332^350^tab[index] = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^tab[index] = prev;^341^^^^^332^350^tab[index] = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^tab[index] = e.next.next;^341^^^^^332^350^tab[index] = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^tab[index] = e;^341^^^^^332^350^tab[index] = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^prev.next = old.next;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^prev.next = old;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^prev.next = e.next.next;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^prev.next = e;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^prev.next = prev.next;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^prev.next = prev;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^e.valuprev = null;^345^^^^^332^350^e.value = null;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^return value;^346^^^^^332^350^return oldValue;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Object oldValue = prev.value;^344^^^^^332^350^Object oldValue = e.value;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Object oldValue = value;^344^^^^^332^350^Object oldValue = e.value;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^Object oldValue = e.value.value;^344^^^^^332^350^Object oldValue = e.value;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^Object oldValue = e;^344^^^^^332^350^Object oldValue = e.value;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^tab[index] = old;^341^^^^^332^350^tab[index] = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = table[index], prev = null; e != null; prev = e, e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry prev = tab[index], prev = null; e != null; prev = e, e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = prev )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry tab = e[index], prev = null; e != null; prev = e, e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry prev = tab[index], e = null; e != null; prev = e, e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry e = tab[index], e.next = null; e != null; prev = e, e = prev )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^for  ( Entry e = tab[index], prev = null; e == null; prev = e, e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( e.hash == newCapacity )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^if  ( newCapacity == hash )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( Entry e.next = tab[index], prev = null; e != null; prev = e, e = e )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^Entry tab[] = oldMap;^356^^^^^355^361^Entry tab[] = table;^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( int index = table.length; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( int oldCapacity = tab.length; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^for  ( int index = newCapacity; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( int index = tab.length.length; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( int tab.length = index; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Operator]^for  ( int index = tab.length; --index == 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Literal]^for  ( int index = tab.length; --index >= initialCapacity; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Argument_Swapping]^for  ( int index = tab; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Wrong_Literal]^count = key;^360^^^^^355^361^count = 0;^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[BugLab_Variable_Misuse]^this.key = hash;^84^^^^^82^87^this.key = key;^[CLASS] Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap$Entry)   int hash int key Object value Entry next [VARIABLES] Entry  next  Object  value  boolean  int  hash  key  
