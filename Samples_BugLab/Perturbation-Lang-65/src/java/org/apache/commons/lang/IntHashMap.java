[buglab_swap_variables]^threshold =  ( int )   ( loadFactor * initialCapacity ) ;^133^^^^^119^134^threshold =  ( int )   ( initialCapacity * loadFactor ) ;^[CLASS] IntHashMap Entry  [METHOD] <init> [RETURN_TYPE] IntHashMap(int,float)   int initialCapacity float loadFactor [VARIABLES] Entry  next  Object  value  boolean  float  loadFactor  int  count  hash  initialCapacity  key  threshold  Entry[]  table  
[buglab_swap_variables]^if  ( value.value.equals ( e )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( value.equals ( e.value )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( tabnt i = i.length; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( tab.lengthnt i = i; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( Entry e = e.next[i]; e != null; e = tab )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( e.value.value.equals ( value )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( e.equals ( value )  )  {^181^^^^^173^187^if  ( e.value.equals ( value )  )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( Entry e.next = tab[i]; e != null; e = e )  {^180^^^^^173^187^for  ( Entry e = tab[i]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( int i = tab.length.length; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( int i = tab; i-- > 0; )  {^179^^^^^173^187^for  ( int i = tab.length; i-- > 0; )  {^[CLASS] IntHashMap Entry  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^int index =  ( hash & 0x7FFFFFFF )  % tab.length.length;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^int index =  ( hash & 0x7FFFFFFF )  % tab;^217^^^^^214^224^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( e.hash.hash == hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( hash == e.hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( Entry tab = e[index]; e != null; e = e.next )  {^218^^^^^214^224^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( e == hash )  {^219^^^^^214^224^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( Entry e.next = tab[index]; e != null; e = e )  {^218^^^^^214^224^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] containsKey [RETURN_TYPE] boolean   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^int index =  ( tab & 0x7FFFFFFF )  % hash.length;^238^^^^^235^245^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( hash.hash == e )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^return e.value.value;^241^^^^^235^245^return e.value;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^return e;^241^^^^^235^245^return e.value;^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^for  ( Entry e.next = tab[index]; e != null; e = e )  {^239^^^^^235^245^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( e.hash.hash == hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^if  ( hash == e.hash )  {^240^^^^^235^245^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] get [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  threshold  Entry[]  tab  table  
[buglab_swap_variables]^int oldCapacity = table;^257^^^^^256^276^int oldCapacity = table.length;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int oldCapacity = table.length.length;^257^^^^^256^276^int oldCapacity = table.length;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^threshold =  ( int )   ( loadFactor * newCapacity ) ;^263^^^^^256^276^threshold =  ( int )   ( newCapacity * loadFactor ) ;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^old = old.next.next;^269^^^^^256^276^old = old.next;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^old = old;^269^^^^^256^276^old = old.next;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( e.hash.hash & 0x7FFFFFFF )  % newCapacity;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( newCapacity & 0x7FFFFFFF )  % e.hash;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( newCapacity.hash & 0x7FFFFFFF )  % e;^271^^^^^256^276^int index =  ( e.hash & 0x7FFFFFFF )  % newCapacity;^[CLASS] IntHashMap Entry  [METHOD] rehash [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  Object  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( tab & 0x7FFFFFFF )  % hash.length;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( hash & 0x7FFFFFFF )  % tab;^297^^^^^293^319^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^if  ( hash == e.hash )  {^299^^^^^293^319^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Object old = e.value.value;^300^^^^^293^319^Object old = e.value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Object old = e;^300^^^^^293^319^Object old = e.value;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( Entry e.next = tab[index]; e != null; e = e )  {^298^^^^^293^319^for  ( Entry e = tab[index]; e != null; e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^if  ( threshold >= count )  {^306^^^^^293^319^if  ( count >= threshold )  {^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^index =  ( tab & 0x7FFFFFFF )  % hash.length;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^index =  ( hash & 0x7FFFFFFF )  % tab;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^index =  ( tab.length & 0x7FFFFFFF )  % hash;^311^^^^^293^319^index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry (  key, value, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry ( hash,  value, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry ( hash, value, key, tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry ( hash, key,  tab[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry ( tab, key, value, hash[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry ( hash, key, value[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry ( hash, key, tab, value[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Entry e = new Entry ( hash, tab, value, key[index] ) ;^315^^^^^293^319^Entry e = new Entry ( hash, key, value, tab[index] ) ;^[CLASS] IntHashMap Entry  [METHOD] put [RETURN_TYPE] Object   int key Object value [VARIABLES] Entry  e  next  old  Object  old  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( tab.length & 0x7FFFFFFF )  % hash;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^int index =  ( hash & 0x7FFFFFFF )  % tab.length.length;^335^^^^^332^350^int index =  ( hash & 0x7FFFFFFF )  % tab.length;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^if  ( hash == e.hash )  {^337^^^^^332^350^if  ( e.hash == hash )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^tab[index] = e.next.next;^341^^^^^332^350^tab[index] = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^tab[index] = e;^341^^^^^332^350^tab[index] = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^prev.next = e.next.next;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Object oldValue = e.value.value;^344^^^^^332^350^Object oldValue = e.value;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^Object oldValue = e;^344^^^^^332^350^Object oldValue = e.value;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( Entry prev = tab[index], e = null; e != null; prev = e, e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( Entry e = tab[index], prev = null; e != null; prev =  e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( Entry e = tab[index] = null; e != null; prev = e, e = e.next )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^prev.next = e;^339^^^^^332^350^prev.next = e.next;^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( Entry e.next = tab[index], prev = null; e != null; prev = e, e = e )  {^336^^^^^332^350^for  ( Entry e = tab[index], prev = null; e != null; prev = e, e = e.next )  {^[CLASS] IntHashMap Entry  [METHOD] remove [RETURN_TYPE] Object   int key [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( int tab = index.length; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( int index = tab; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
[buglab_swap_variables]^for  ( int index = tab.length.length; --index >= 0; )  {^357^^^^^355^361^for  ( int index = tab.length; --index >= 0; )  {^[CLASS] IntHashMap Entry  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] Entry  e  next  old  prev  Object  old  oldValue  value  boolean  float  loadFactor  int  count  hash  i  index  initialCapacity  key  newCapacity  oldCapacity  threshold  Entry[]  newMap  oldMap  tab  table  
