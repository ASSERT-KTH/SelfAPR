[buglab_swap_variables]^return reflectionCompare ( rhs, lhs, false, null, null ) ;^141^^^^^140^142^return reflectionCompare ( lhs, rhs, false, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs [VARIABLES] int  comparison  Object  lhs  rhs  boolean  
[buglab_swap_variables]^return reflectionCompare (  rhs, false, null, null ) ;^141^^^^^140^142^return reflectionCompare ( lhs, rhs, false, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs [VARIABLES] int  comparison  Object  lhs  rhs  boolean  
[buglab_swap_variables]^return reflectionCompare ( lhs,  false, null, null ) ;^141^^^^^140^142^return reflectionCompare ( lhs, rhs, false, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs [VARIABLES] int  comparison  Object  lhs  rhs  boolean  
[buglab_swap_variables]^return reflectionCompare ( rhs, lhs, compareTransients, null, null ) ;^173^^^^^172^174^return reflectionCompare ( lhs, rhs, compareTransients, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients [VARIABLES] int  comparison  Object  lhs  rhs  boolean  compareTransients  
[buglab_swap_variables]^return reflectionCompare (  rhs, compareTransients, null, null ) ;^173^^^^^172^174^return reflectionCompare ( lhs, rhs, compareTransients, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients [VARIABLES] int  comparison  Object  lhs  rhs  boolean  compareTransients  
[buglab_swap_variables]^return reflectionCompare ( lhs,  compareTransients, null, null ) ;^173^^^^^172^174^return reflectionCompare ( lhs, rhs, compareTransients, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients [VARIABLES] int  comparison  Object  lhs  rhs  boolean  compareTransients  
[buglab_swap_variables]^return reflectionCompare ( compareTransients, rhs, lhs, null, null ) ;^173^^^^^172^174^return reflectionCompare ( lhs, rhs, compareTransients, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients [VARIABLES] int  comparison  Object  lhs  rhs  boolean  compareTransients  
[buglab_swap_variables]^return reflectionCompare ( lhs, rhs,  null, null ) ;^173^^^^^172^174^return reflectionCompare ( lhs, rhs, compareTransients, null, null ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients [VARIABLES] int  comparison  Object  lhs  rhs  boolean  compareTransients  
[buglab_swap_variables]^return reflectionCompare ( rhs, lhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^205^^^^^204^206^return reflectionCompare ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare (  rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^205^^^^^204^206^return reflectionCompare ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare ( lhs,  ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^205^^^^^204^206^return reflectionCompare ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare ( excludeFields, rhs, ReflectionToStringBuilder.toNoNullStringArray ( lhs )  ) ;^205^^^^^204^206^return reflectionCompare ( lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray ( excludeFields )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs Collection excludeFields [VARIABLES] Collection  excludeFields  Object  lhs  rhs  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare ( rhs, lhs, false, null, excludeFields ) ;^237^^^^^236^238^return reflectionCompare ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  String[]  excludeFields  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare (  rhs, false, null, excludeFields ) ;^237^^^^^236^238^return reflectionCompare ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  String[]  excludeFields  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare ( lhs,  false, null, excludeFields ) ;^237^^^^^236^238^return reflectionCompare ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  String[]  excludeFields  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare ( lhs, excludeFields, false, null, rhs ) ;^237^^^^^236^238^return reflectionCompare ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  String[]  excludeFields  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare ( lhs, rhs, false, null ) ;^237^^^^^236^238^return reflectionCompare ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  String[]  excludeFields  boolean  int  comparison  
[buglab_swap_variables]^return reflectionCompare ( excludeFields, rhs, false, null, lhs ) ;^237^^^^^236^238^return reflectionCompare ( lhs, rhs, false, null, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs String[] excludeFields [VARIABLES] Object  lhs  rhs  String[]  excludeFields  boolean  int  comparison  
[buglab_swap_variables]^if  ( rhs == lhs )  {^279^^^^^272^296^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^if  ( rhs == null || lhs == null )  {^282^^^^^272^296^if  ( lhs == null || rhs == null )  {^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( compareTransients, rhs, lhsClazz, compareToBuilder, lhs, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend (  rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( rhs, lhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs,  lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, compareTransients, compareToBuilder, lhsClazz, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs,  compareToBuilder, compareTransients, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( compareToBuilder, rhs, lhsClazz, lhs, compareTransients, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz,  compareTransients, excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder,  excludeFields ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( excludeFields, rhs, lhsClazz, compareToBuilder, compareTransients, lhs ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients ) ;^290^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^while  ( reflectUpToClass.getSuperclass (  )  != null && lhsClazz != lhsClazz )  {^291^^^^^272^296^while  ( lhsClazz.getSuperclass (  )  != null && lhsClazz != reflectUpToClass )  {^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( rhs, lhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend (  rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs,  lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhsClazz, rhs, lhs, compareToBuilder, compareTransients, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs,  compareToBuilder, compareTransients, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( compareToBuilder, rhs, lhsClazz, lhs, compareTransients, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz,  compareTransients, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( compareTransients, rhs, lhsClazz, compareToBuilder, lhs, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder,  excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz, excludeFields, compareTransients, compareToBuilder ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, compareTransients, compareToBuilder, lhsClazz, excludeFields ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, excludeFields, compareTransients ) ;^293^^^^^272^296^reflectionAppend ( lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionCompare [RETURN_TYPE] int   Object lhs Object rhs boolean compareTransients Class reflectUpToClass String[] excludeFields [VARIABLES] Object  lhs  rhs  Class  lhsClazz  reflectUpToClass  boolean  compareTransients  String[]  excludeFields  CompareToBuilder  compareToBuilder  int  comparison  
[buglab_swap_variables]^if  ( !excludedFieldList.contains ( useTransients.getName (  )  ) &&  ( f.getName (  ) .indexOf ( '$' )  == -1 ) &&  ( f || !Modifier.isTransient ( f.getModifiers (  )  )  ) &&  ( !Modifier.isStatic ( f.getModifiers (  )  )  )  )  {^322^323^324^325^^315^335^if  ( !excludedFieldList.contains ( f.getName (  )  ) &&  ( f.getName (  ) .indexOf ( '$' )  == -1 ) &&  ( useTransients || !Modifier.isTransient ( f.getModifiers (  )  )  ) &&  ( !Modifier.isStatic ( f.getModifiers (  )  )  )  )  {^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( lhs.get ( f ) , f.get ( rhs )  ) ;^327^^^^^315^335^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( f.get ( lhs ) .get ( rhs )  ) ;^327^^^^^315^335^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( f.get ( rhs ) , f.get ( lhs )  ) ;^327^^^^^315^335^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^builder.append ( rhs.get ( lhs ) , f.get ( f )  ) ;^327^^^^^315^335^builder.append ( f.get ( lhs ) , f.get ( rhs )  ) ;^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^for  ( fields.lengthnt i = 0; i < i && builder.comparison == 0; i++ )  {^320^^^^^315^335^for  ( int i = 0; i < fields.length && builder.comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^for  ( int i = 0; i < builder.length && fields.comparison == 0; i++ )  {^320^^^^^315^335^for  ( int i = 0; i < fields.length && builder.comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^for  ( int i = 0; i < builderields.length && f.comparison == 0; i++ )  {^320^^^^^315^335^for  ( int i = 0; i < fields.length && builder.comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^for  ( builder.comparisonnt i = 0; i < fields.length && i == 0; i++ )  {^320^^^^^315^335^for  ( int i = 0; i < fields.length && builder.comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] reflectionAppend [RETURN_TYPE] void   Object lhs Object rhs Class clazz CompareToBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field  f  boolean  useTransients  Object  lhs  rhs  Class  clazz  List  excludedFieldList  String[]  excludeFields  CompareToBuilder  builder  int  comparison  i  Field[]  fields  IllegalAccessException  e  
[buglab_swap_variables]^return append ( rhs, lhs, null ) ;^375^^^^^374^376^return append ( lhs, rhs, null ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs [VARIABLES] int  comparison  i  superCompareTo  Object  lhs  rhs  boolean  
[buglab_swap_variables]^return append (  rhs, null ) ;^375^^^^^374^376^return append ( lhs, rhs, null ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs [VARIABLES] int  comparison  i  superCompareTo  Object  lhs  rhs  boolean  
[buglab_swap_variables]^return append ( lhs,  null ) ;^375^^^^^374^376^return append ( lhs, rhs, null ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs [VARIABLES] int  comparison  i  superCompareTo  Object  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^407^^^^^392^422^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = lhs.compare ( comparator, rhs ) ;^448^^^^^445^449^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = comparator.compare ( rhs, lhs ) ;^448^^^^^445^449^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = comparator.compare (  rhs ) ;^448^^^^^445^449^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = rhs.compare ( lhs, comparator ) ;^448^^^^^445^449^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = comparator.compare ( lhs ) ;^448^^^^^445^449^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = rhs.compare ( lhs, comparator ) ;^448^^^^^433^463^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = comparator.compare ( rhs, lhs ) ;^448^^^^^433^463^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = comparator.compare (  rhs ) ;^448^^^^^433^463^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = comparator.compare ( lhs ) ;^448^^^^^433^463^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^append (  ( Object[] )  lhs,  ( Object[] )  rhs ) ;^441^^^^^436^442^append (  ( Object[] )  lhs,  ( Object[] )  rhs, comparator ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^append (  ( Object[] )  lhs,  ( Object[] )  rhs ) ;^441^^^^^426^456^append (  ( Object[] )  lhs,  ( Object[] )  rhs, comparator ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison = lhs.compare ( comparator, rhs ) ;^448^^^^^433^463^comparison = comparator.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object lhs Object rhs Comparator comparator [VARIABLES] Object  lhs  rhs  boolean  int  comparison  i  superCompareTo  Comparator  comparator  
[buglab_swap_variables]^comparison =  (  ( rhs < lhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^467^^^^^463^469^comparison =  (  ( lhs < rhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long lhs long rhs [VARIABLES] int  comparison  i  superCompareTo  long  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  (  ( rhs < lhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^483^^^^^479^485^comparison =  (  ( lhs < rhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int lhs int rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  (  ( rhs < lhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^499^^^^^495^501^comparison =  (  ( lhs < rhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short lhs short rhs [VARIABLES] short  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  (  ( rhs < lhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^515^^^^^511^517^comparison =  (  ( lhs < rhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char lhs char rhs [VARIABLES] char  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  (  ( rhs < lhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^531^^^^^527^533^comparison =  (  ( lhs < rhs )  ? -1 :  (  ( lhs > rhs )  ? 1 : 0 )  ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte lhs byte rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  byte  lhs  rhs  boolean  
[buglab_swap_variables]^comparison = NumberUtils.compare ( rhs, lhs ) ;^552^^^^^548^554^comparison = NumberUtils.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double lhs double rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  double  lhs  rhs  boolean  
[buglab_swap_variables]^comparison = NumberUtils.compare (  rhs ) ;^552^^^^^548^554^comparison = NumberUtils.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double lhs double rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  double  lhs  rhs  boolean  
[buglab_swap_variables]^comparison = NumberUtils.compare ( lhs ) ;^552^^^^^548^554^comparison = NumberUtils.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double lhs double rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  double  lhs  rhs  boolean  
[buglab_swap_variables]^comparison = NumberUtils.compare ( rhs, lhs ) ;^573^^^^^569^575^comparison = NumberUtils.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float lhs float rhs [VARIABLES] float  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison = NumberUtils.compare (  rhs ) ;^573^^^^^569^575^comparison = NumberUtils.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float lhs float rhs [VARIABLES] float  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison = NumberUtils.compare ( lhs ) ;^573^^^^^569^575^comparison = NumberUtils.compare ( lhs, rhs ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float lhs float rhs [VARIABLES] float  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^589^^^^^585^598^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean lhs boolean rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean  lhs  rhs  
[buglab_swap_variables]^return append ( rhs, lhs, null ) ;^622^^^^^621^623^return append ( lhs, rhs, null ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  boolean  
[buglab_swap_variables]^return append (  rhs, null ) ;^622^^^^^621^623^return append ( lhs, rhs, null ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  boolean  
[buglab_swap_variables]^return append ( lhs,  null ) ;^622^^^^^621^623^return append ( lhs, rhs, null ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^652^^^^^648^671^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^663^^^^^648^671^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^664^^^^^648^671^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && comparison == 0; i++ )  {^667^^^^^648^671^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^for  ( comparisonnt i = 0; i < lhs.length && i == 0; i++ )  {^667^^^^^648^671^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^append ( comparator[i], rhs[i], lhs ) ;^668^^^^^648^671^append ( lhs[i], rhs[i], comparator ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^append ( rhs[i], lhs[i], comparator ) ;^668^^^^^648^671^append ( lhs[i], rhs[i], comparator ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^append ( lhs[i][i], comparator ) ;^668^^^^^648^671^append ( lhs[i], rhs[i], comparator ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^append ( lhs[i], rhs[i] ) ;^668^^^^^648^671^append ( lhs[i], rhs[i], comparator ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   Object[] lhs Object[] rhs Comparator comparator [VARIABLES] boolean  int  comparison  i  lhs  rhs  superCompareTo  Object[]  lhs  rhs  Comparator  comparator  
[buglab_swap_variables]^if  ( rhs == lhs )  {^692^^^^^688^711^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs.length.length != lhs )  {^703^^^^^688^711^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs != lhs.length.length )  {^703^^^^^688^711^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^703^^^^^688^711^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^704^^^^^688^711^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs < lhs.length.length )  ? -1 : +1;^704^^^^^688^711^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( lhs.length < rhs )  ? -1 : +1;^704^^^^^688^711^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( comparisonnt i = 0; i < lhs.length && i == 0; i++ )  {^707^^^^^688^711^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison && lhs.length == 0; i++ )  {^707^^^^^688^711^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison.length && lhs == 0; i++ )  {^707^^^^^688^711^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^708^^^^^688^711^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^708^^^^^688^711^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   long[] lhs long[] rhs [VARIABLES] long[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^732^^^^^728^751^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs.length.length != lhs )  {^743^^^^^728^751^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^743^^^^^728^751^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( lhs != rhs.length )  {^743^^^^^728^751^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^744^^^^^728^751^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length.length < lhs )  ? -1 : +1;^744^^^^^728^751^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( lhs.length.length < rhs.length )  ? -1 : +1;^744^^^^^728^751^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && comparison == 0; i++ )  {^747^^^^^728^751^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < lhs.length.length && comparison == 0; i++ )  {^747^^^^^728^751^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison && lhs.length == 0; i++ )  {^747^^^^^728^751^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( comparisonnt i = 0; i < lhs.length && i == 0; i++ )  {^747^^^^^728^751^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^748^^^^^728^751^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^748^^^^^728^751^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   int[] lhs int[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  int[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^772^^^^^768^791^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^783^^^^^768^791^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( lhs != rhs.length )  {^783^^^^^768^791^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^784^^^^^768^791^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length.length < lhs )  ? -1 : +1;^784^^^^^768^791^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( comparisonnt i = 0; i < lhs.length && i == 0; i++ )  {^787^^^^^768^791^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && comparison == 0; i++ )  {^787^^^^^768^791^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^788^^^^^768^791^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^788^^^^^768^791^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   short[] lhs short[] rhs [VARIABLES] short[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^812^^^^^808^831^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^823^^^^^808^831^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( lhs.length != rhs.length.length )  {^823^^^^^808^831^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^824^^^^^808^831^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs < lhs.length.length )  ? -1 : +1;^824^^^^^808^831^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( lhs.length.length < rhs.length )  ? -1 : +1;^824^^^^^808^831^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( comparisonnt i = 0; i < lhs.length && i == 0; i++ )  {^827^^^^^808^831^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && comparison == 0; i++ )  {^827^^^^^808^831^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^828^^^^^808^831^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^828^^^^^808^831^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   char[] lhs char[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  char[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^852^^^^^848^871^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( lhs.length.length != rhs.length )  {^863^^^^^848^871^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^863^^^^^848^871^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^864^^^^^848^871^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs < lhs.length.length )  ? -1 : +1;^864^^^^^848^871^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( lhsnt i = 0; i < i.length && comparison == 0; i++ )  {^867^^^^^848^871^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison.length && lhs == 0; i++ )  {^867^^^^^848^871^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison && lhs.length == 0; i++ )  {^867^^^^^848^871^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^868^^^^^848^871^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^868^^^^^848^871^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   byte[] lhs byte[] rhs [VARIABLES] byte[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^892^^^^^888^911^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs.length.length != lhs )  {^903^^^^^888^911^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^903^^^^^888^911^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^904^^^^^888^911^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( rhs < lhs.length.length )  ? -1 : +1;^904^^^^^888^911^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( lhs.length < rhs.length.length )  ? -1 : +1;^904^^^^^888^911^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^comparison =  ( lhs < rhs.length )  ? -1 : +1;^904^^^^^888^911^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison.length && lhs == 0; i++ )  {^907^^^^^888^911^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && comparison == 0; i++ )  {^907^^^^^888^911^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison && lhs.length == 0; i++ )  {^907^^^^^888^911^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^908^^^^^888^911^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^908^^^^^888^911^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   double[] lhs double[] rhs [VARIABLES] double[]  lhs  rhs  int  comparison  i  lhs  rhs  superCompareTo  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^932^^^^^928^951^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^943^^^^^928^951^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^944^^^^^928^951^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs < lhs.length.length )  ? -1 : +1;^944^^^^^928^951^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( lhs < rhs.length )  ? -1 : +1;^944^^^^^928^951^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( lhs.length < rhs )  ? -1 : +1;^944^^^^^928^951^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length.length < lhs )  ? -1 : +1;^944^^^^^928^951^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( lhs.length < rhs.length.length )  ? -1 : +1;^944^^^^^928^951^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison && lhs.length == 0; i++ )  {^947^^^^^928^951^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^948^^^^^928^951^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^948^^^^^928^951^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   float[] lhs float[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  float[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs == lhs )  {^972^^^^^968^991^if  ( lhs == rhs )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs.length != lhs.length )  {^983^^^^^968^991^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( lhs.length != rhs.length.length )  {^983^^^^^968^991^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^if  ( rhs.length.length != lhs )  {^983^^^^^968^991^if  ( lhs.length != rhs.length )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length < lhs.length )  ? -1 : +1;^984^^^^^968^991^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( lhs.length < rhs.length.length )  ? -1 : +1;^984^^^^^968^991^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs < lhs.length.length )  ? -1 : +1;^984^^^^^968^991^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^comparison =  ( rhs.length.length < lhs )  ? -1 : +1;^984^^^^^968^991^comparison =  ( lhs.length < rhs.length )  ? -1 : +1;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( lhs.lengthnt i = 0; i < i && comparison == 0; i++ )  {^987^^^^^968^991^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( lhsnt i = 0; i < i.length && comparison == 0; i++ )  {^987^^^^^968^991^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^for  ( int i = 0; i < comparison && lhs.length == 0; i++ )  {^987^^^^^968^991^for  ( int i = 0; i < lhs.length && comparison == 0; i++ )  {^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( rhs[i], lhs[i] ) ;^988^^^^^968^991^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
[buglab_swap_variables]^append ( lhs[i][i] ) ;^988^^^^^968^991^append ( lhs[i], rhs[i] ) ;^[CLASS] CompareToBuilder  [METHOD] append [RETURN_TYPE] CompareToBuilder   boolean[] lhs boolean[] rhs [VARIABLES] int  comparison  i  lhs  rhs  superCompareTo  boolean[]  lhs  rhs  boolean  
