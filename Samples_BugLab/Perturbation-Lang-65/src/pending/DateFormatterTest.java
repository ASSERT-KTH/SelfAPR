[BugLab_Wrong_Literal]^now.set ( Calendar.MILLISECOND, null ) ;^82^^^^^67^97^now.set ( Calendar.MILLISECOND, 0 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.set ( Calendar.SECOND, 1 ) ;^83^^^^^68^98^now.set ( Calendar.SECOND, 0 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS format MMM d, yyyy h:mm a", now, DateFormatter.parseCVS ( new SimpleDateFormat ( "MMM d, yyyy h:mm a" ) .format ( now.getTime (  )  )  ) , 51 ) ;^84^85^^^^69^99^assertEquals ( "parseCVS format MMM d, yyyy h:mm a", now, DateFormatter.parseCVS ( new SimpleDateFormat ( "MMM d, yyyy h:mm a" ) .format ( now.getTime (  )  )  ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS format h:mm z 16:30 GMT", now, DateFormatter.parseCVS ( "16:30 GMT" ) , 49 ) ;^95^96^^^^80^110^assertEquals ( "parseCVS format h:mm z 16:30 GMT", now, DateFormatter.parseCVS ( "16:30 GMT" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS format h:mm z 06:30 EST", now, DateFormatter.parseCVS ( "06:30 EST" ) ,  ) ;^116^117^^^^101^131^assertEquals ( "parseCVS format h:mm z 06:30 EST", now, DateFormatter.parseCVS ( "06:30 EST" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS format h:mm z 06:30 GMT-05:00", now, DateFormatter.parseCVS ( "06:30 GMT-05:00" ) , 49 ) ;^120^121^^^^105^135^assertEquals ( "parseCVS format h:mm z 06:30 GMT-05:00", now, DateFormatter.parseCVS ( "06:30 GMT-05:00" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS format h:mm z 06:30 GMT+01:00", now, DateFormatter.parseCVS ( "06:30 GMT+01:00" ) , 0 ) ;^124^125^^^^109^139^assertEquals ( "parseCVS format h:mm z 06:30 GMT+01:00", now, DateFormatter.parseCVS ( "06:30 GMT+01:00" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS a week ago", now, DateFormatter.parseCVS ( "a week ago" ) , 51 ) ;^129^130^^^^114^144^assertEquals ( "parseCVS a week ago", now, DateFormatter.parseCVS ( "a week ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 1 fortnights ago", now, DateFormatter.parseCVS ( "1 fortnights ago" ) , 51 ) ;^142^143^^^^127^157^assertEquals ( "parseCVS 1 fortnights ago", now, DateFormatter.parseCVS ( "1 fortnights ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.MINUTE, -0 ) ;^146^^^^^131^161^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 1 minute ago", now, DateFormatter.parseCVS ( "1 minute ago" ) , 51 ) ;^147^148^^^^132^162^assertEquals ( "parseCVS 1 minute ago", now, DateFormatter.parseCVS ( "1 minute ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.MINUTE, -9 ) ;^150^^^^^135^165^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 1 milliseconds ago", now, DateFormatter.parseCVS ( "100 milliseconds ago" ) ,  ) ;^160^161^^^^145^175^assertEquals ( "parseCVS 1 milliseconds ago", now, DateFormatter.parseCVS ( "100 milliseconds ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.SECOND, -31 ) ;^163^^^^^148^178^now.add ( Calendar.SECOND, -30 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 30 second ago", now, DateFormatter.parseCVS ( "30 second ago" ) , 51 ) ;^164^165^^^^149^179^assertEquals ( "parseCVS 30 second ago", now, DateFormatter.parseCVS ( "30 second ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.HOUR, -1 ) ;^171^^^^^156^186^now.add ( Calendar.HOUR, -2 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 2 hour ago", now, DateFormatter.parseCVS ( "2 hour ago" ) , 51 ) ;^172^173^^^^157^187^assertEquals ( "parseCVS 2 hour ago", now, DateFormatter.parseCVS ( "2 hour ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.HOUR, -3 ) ;^175^^^^^160^190^now.add ( Calendar.HOUR, -2 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 2 hours ago", now, DateFormatter.parseCVS ( "2 hours ago" ) , 51 ) ;^176^177^^^^161^191^assertEquals ( "parseCVS 2 hours ago", now, DateFormatter.parseCVS ( "2 hours ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.DAY_OF_MONTH, -1 ) ;^179^^^^^164^194^now.add ( Calendar.DAY_OF_MONTH, -2 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 2 day ago", now, DateFormatter.parseCVS ( "2 day ago" ) , 49 ) ;^180^181^^^^165^195^assertEquals ( "parseCVS 2 day ago", now, DateFormatter.parseCVS ( "2 day ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.DAY_OF_MONTH, -1 ) ;^183^^^^^168^198^now.add ( Calendar.DAY_OF_MONTH, -2 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.MONTH, -3 ) ;^187^^^^^172^202^now.add ( Calendar.MONTH, -2 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 2 month ago", now, DateFormatter.parseCVS ( "2 month ago" ) , 51 ) ;^188^189^^^^173^203^assertEquals ( "parseCVS 2 month ago", now, DateFormatter.parseCVS ( "2 month ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.YEAR, -3 ) ;^199^^^^^184^214^now.add ( Calendar.YEAR, -2 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS 2 years ago", now, DateFormatter.parseCVS ( "2 years ago" ) , null ) ;^200^201^^^^185^215^assertEquals ( "parseCVS 2 years ago", now, DateFormatter.parseCVS ( "2 years ago" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.DATE, 2 ) ;^209^^^^^194^224^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS tomorrow", now, DateFormatter.parseCVS ( "tomorrow" ) , 51 ) ;^210^211^^^^195^225^assertEquals ( "parseCVS tomorrow", now, DateFormatter.parseCVS ( "tomorrow" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Operator]^if  ( now.get ( Calendar.DAY_OF_WEEK )  != 1 )  {^215^^^^^200^230^if  ( now.get ( Calendar.DAY_OF_WEEK )  == 1 )  {^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Operator]^now.add ( Calendar.DATE, 1  <=  now.get ( Calendar.DAY_OF_WEEK )  ) ;^219^^^^^215^220^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.DATE, -8 ) ;^217^^^^^202^232^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Operator]^now.add ( Calendar.DATE, 1  ||  now.get ( Calendar.DAY_OF_WEEK )  ) ;^219^^^^^204^234^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.DATE,  - now.get ( Calendar.DAY_OF_WEEK )  ) ;^219^^^^^204^234^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS last Sunday", now, DateFormatter.parseCVS ( "last Sunday" ) , 49 ) ;^221^222^^^^206^236^assertEquals ( "parseCVS last Sunday", now, DateFormatter.parseCVS ( "last Sunday" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.DATE, -6 ) ;^225^^^^^210^240^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS last week", now, DateFormatter.parseCVS ( "last week" ) , 51 ) ;^226^227^^^^211^241^assertEquals ( "parseCVS last week", now, DateFormatter.parseCVS ( "last week" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Variable_Misuse]^if  ( now.get ( Calendar.0 )  == 0 )  {^231^^^^^216^246^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Operator]^if  ( now.get ( Calendar.MONTH )  != 0 )  {^231^^^^^216^246^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Variable_Misuse]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.null )  ) ;^235^^^^^231^236^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Operator]^now.add ( Calendar.MONTH, 0  >=  now.get ( Calendar.MONTH )  ) ;^235^^^^^231^236^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.MONTH,  - now.get ( Calendar.MONTH )  ) ;^235^^^^^231^236^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.MONTH, -11 ) ;^233^^^^^218^248^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Variable_Misuse]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.null )  ) ;^235^^^^^220^250^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Operator]^now.add ( Calendar.MONTH, 0  >>  now.get ( Calendar.MONTH )  ) ;^235^^^^^220^250^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^now.add ( Calendar.MONTH, 1 - now.get ( Calendar.MONTH )  ) ;^235^^^^^220^250^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Wrong_Literal]^assertEquals ( "parseCVS last January", now, DateFormatter.parseCVS ( "last January" ) , 49 ) ;^237^238^^^^222^252^assertEquals ( "parseCVS last January", now, DateFormatter.parseCVS ( "last January" ) , 50 ) ;^[CLASS] DateFormatterTest  [METHOD] testParseCVS [RETURN_TYPE] void   [VARIABLES] boolean  Calendar  now  IllegalArgumentException  ex  
[BugLab_Variable_Misuse]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal1.getTime (  ) .getTime (  )  )  > delta )  {^246^^^^^245^250^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Argument_Swapping]^if  ( Math.abs ( cal2.getTime (  ) .getTime (  )  - cal1.getTime (  ) .getTime (  )  )  > delta )  {^246^^^^^245^250^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Argument_Swapping]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - delta.getTime (  ) .getTime (  )  )  > cal2 )  {^246^^^^^245^250^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  >= delta )  {^246^^^^^245^250^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )   ||  cal2.getTime (  ) .getTime (  )  )  > delta )  {^246^^^^^245^250^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Argument_Swapping]^throw new AssertionFailedError ( cal1 + " expected " + message.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Argument_Swapping]^throw new AssertionFailedError ( message + " expected " + cal2.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  <=  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  &  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  !=  " expected "  !=  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  !=  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Argument_Swapping]^throw new AssertionFailedError ( cal2 + " expected " + cal1.getTime (  )  + " but got " + message.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  >  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  >=  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  ||  " expected "  ||  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  <  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Variable_Misuse]^message + " expected " + cal2.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^248^^^^^245^250^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Variable_Misuse]^message + " expected " + cal1.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^248^^^^^245^250^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Variable_Misuse]^throw new AssertionFailedError ( message + " expected " + cal2.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  <<  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  |  " expected "  |  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  >=  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  >>  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  &&  " expected "  &&  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  <<  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^247^248^^^^245^250^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Wrong_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )   &  cal2.getTime (  ) .getTime (  )  )  > delta )  {^246^^^^^245^250^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
[BugLab_Variable_Misuse]^if  ( Math.abs ( cal2.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^246^^^^^245^250^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] DateFormatterTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] boolean  Calendar  cal1  cal2  String  message  long  delta  
