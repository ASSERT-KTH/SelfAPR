[BugLab_Variable_Misuse]^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^87^88^89^^^72^102^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "round hour-1 failed", date1.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( parser, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.this )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "round hour-2 failed", date2.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( parser, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "round minute-1 failed", date1.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( parser, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "round minute-2 failed", date2.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( parser, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "round second-1 failed", date1.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( parser, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.null )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "round second-2 failed", date2.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( parser, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date2, Calendar.2 )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, Calendar.3 )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^132^133^134^^^117^147^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^135^136^137^^^120^150^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, Calendar.null )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "trunc hour-1 failed", date1.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( parser, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "trunc minute-1 failed", date1.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( parser, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "trunc minute-2 failed", date2.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( parser, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "trunc second-1 failed", date1.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( parser, Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Variable_Misuse]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Argument_Swapping]^assertEquals ( "trunc second-2 failed", date2.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( parser, Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[BugLab_Wrong_Literal]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 49 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 51 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 51 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^now.add ( Calendar.DATE, 0 ) ;^193^^^^^178^208^now.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Operator]^if  ( now.get ( Calendar.DATE )  != 1 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^if  ( now.get ( Calendar.DATE )  == null )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Operator]^now.add ( Calendar.DATE, 1  >>  now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^now.add ( Calendar.DATE, 2 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^now.add ( Calendar.DATE, -8 ) ;^201^^^^^186^216^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Operator]^now.add ( Calendar.DATE, 1  ^  now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Operator]^if  ( now.get ( Calendar.MONTH )  != 0 )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Operator]^now.add ( Calendar.MONTH, 0  !=  now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^now.add ( Calendar.MONTH, -null ) ;^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^now.add ( Calendar.MONTH, -11 ) ;^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Operator]^now.add ( Calendar.MONTH, 0  >=  now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Wrong_Literal]^now.add ( Calendar.MONTH, 1 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[BugLab_Variable_Misuse]^Calendar today = CalendarUtils.trunc ( sunday, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Calendar today = CalendarUtils.trunc ( today, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Calendar sunday = CalendarUtils.trunc ( today, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^sunday.add ( Calendar.DATE, 1 - today.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Operator]^sunday.add ( Calendar.DATE, 1  &  sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^sunday.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Calendar monday = CalendarUtils.trunc ( today, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^if  ( today.get ( Calendar.DATE )  == 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Operator]^if  ( monday.get ( Calendar.DATE )  < 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.null )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Operator]^monday.add ( Calendar.DATE, 2  >  monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Literal]^monday.add ( Calendar.DATE, 1 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^monday.add ( Calendar.DATE, 2 - today.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Literal]^monday.add ( Calendar.DATE, -5 ) ;^236^^^^^228^251^monday.add ( Calendar.DATE, -6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Operator]^monday.add ( Calendar.DATE, 2  |  monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Literal]^monday.add ( Calendar.DATE, 3 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Calendar centered = CalendarUtils.trunc ( today, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Calendar centered = CalendarUtils.trunc ( sunday, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Wrong_Literal]^centered.add ( Calendar.DATE, -null ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Iterator it = CalendarUtils.getCalendarIterator ( sunday, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Iterator it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^assertWeekIterator ( it, today ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Argument_Swapping]^assertWeekIterator ( sunday, it ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^it = CalendarUtils.getCalendarIterator ( sunday, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^assertWeekIterator ( it, today ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Argument_Swapping]^assertWeekIterator ( monday, it ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Argument_Swapping]^assertWeekIterator ( today, it ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^assertWeekIterator ( it, today ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Argument_Swapping]^assertWeekIterator ( centered, it ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[BugLab_Variable_Misuse]^Iterator it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[BugLab_Variable_Misuse]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[BugLab_Variable_Misuse]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[BugLab_Variable_Misuse]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[BugLab_Variable_Misuse]^Calendar end =  ( Calendar )  end.clone (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[BugLab_Argument_Swapping]^assertWeekIterator ( end, start, it ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[BugLab_Argument_Swapping]^assertWeekIterator ( it, end, start ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[BugLab_Variable_Misuse]^calStart.setTime ( end ) ;^294^^^^^292^299^calStart.setTime ( start ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[BugLab_Variable_Misuse]^calEnd.setTime ( start ) ;^296^^^^^292^299^calEnd.setTime ( end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[BugLab_Variable_Misuse]^assertWeekIterator ( it, calStart, calStart ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[BugLab_Argument_Swapping]^assertWeekIterator ( calStart, it, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[BugLab_Argument_Swapping]^assertWeekIterator ( it, calEnd, calStart ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[BugLab_Variable_Misuse]^assertEquals ( "", last, cal, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^assertEquals ( "", start, last, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Argument_Swapping]^assertEquals ( "", cal, start, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Literal]^assertEquals ( "", start, cal, -1 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^last = start;^315^^^^^306^327^last = cal;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^assertEquals ( "", start, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.count ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Literal]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , -1 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Literal]^last.add ( Calendar.DATE, 2 ) ;^320^^^^^306^327^last.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^assertEquals ( "", start, cal, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^assertEquals ( "", last, start, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Argument_Swapping]^assertEquals ( "", cal, last, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Literal]^assertEquals ( "", last, cal, count ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Literal]^last.add ( Calendar.DATE, count ) ;^320^^^^^306^327^last.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Literal]^assertEquals ( "", last, cal, 1 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^if  ( count % 7 == 0 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^if  ( count  &&  7 != 0 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Literal]^if  ( count % 8 != 0 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( "There were "  <<  count  <<  " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( "There were "   instanceof   count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( "There were "  ||  count  ||  " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( "There were "  <=  count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( "There were "  ^  count  ^  " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( "There were "  ==  count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( "There were "  >>  count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^assertEquals ( "", start, cal, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Variable_Misuse]^assertEquals ( "", end, start, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Argument_Swapping]^assertEquals ( "", cal, end, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[BugLab_Argument_Swapping]^if  ( Math.abs ( cal2.getTime (  ) .getTime (  )  - cal1.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  >= delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )   &  cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Argument_Swapping]^throw new AssertionFailedError ( cal1 + " expected " + message.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Argument_Swapping]^throw new AssertionFailedError ( message + " expected " + cal2.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (   instanceof   )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  ||  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  <<  " expected "  <<  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  >  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Variable_Misuse]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  <  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  &  " expected "  &  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Variable_Misuse]^message + " expected " + cal2.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Variable_Misuse]^message + " expected " + cal1.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Argument_Swapping]^throw new AssertionFailedError ( cal2 + " expected " + cal1.getTime (  )  + " but got " + message.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  >=  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  <=  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  !=  " expected "  !=  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  |  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  !=  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  ^  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  >  " expected "  >  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^throw new AssertionFailedError ( message  ==  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Wrong_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )   !=  cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Variable_Misuse]^if  ( Math.abs ( cal2.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[BugLab_Variable_Misuse]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal1.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
