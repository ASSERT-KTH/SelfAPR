[BugLab_Wrong_Operator]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )   &&  20 ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )   ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )   <=  20 ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^escapeJsonString ( escapedString, plainText ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^int pos = len;^79^^^^^64^94^int pos = 0;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( !isControlCharacter ( len )  && !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^if  ( !isControlCharacter ( codePoint )  || !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( posnt charCount, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( int charCount, i = 0; i < pos; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^for  ( int pos, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( int charCount, i = 0; i <= len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ^  ( int charCount, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^for  ( int charCount, i -= 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^for  ( int charCount, i = -1; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^if  ( !isControlCharacter ( pos )  && !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^charCount = Character.charCount ( pos ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^pos = pos + charCount;^91^^^^^76^106^pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^pos = charCount + i;^91^^^^^76^106^pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int codePoint = Character.codePointAt ( plainText, pos ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^int codePoint = Character.codePointAt ( i, plainText ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^int codePoint = Character.codePointAt ( plainText, len ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^out.append ( plainText, len, i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^out.append ( i, pos, plainText ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^out.append ( plainText, i, pos ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( pos, out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( out, codePoint ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^for  ( int charCount, i = 1; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^charCount = Character.charCount ( len ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^out.append ( plainText, pos, len ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^out.append ( plainText, len, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^out.append ( plainText, pos, pos ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^out.append ( len, pos, plainText ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^out.append ( pos, plainText, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^out.append ( plainText, len, pos ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return c.contains ( JS_ESCAPE_CHARS ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return escapeHtmlCharacters.contains ( c ) ||  ( JS_ESCAPE_CHARS && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return JS_ESCAPE_CHARS.contains ( c ) ||  ( HTML_ESCAPE_CHARS && escapeHtmlCharacters.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return JS_ESCAPE_CHARS.contains ( c ) &&  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters || HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^||  ( escapeHtmlCharacters && c.contains ( HTML_ESCAPE_CHARS )  ) ;^129^^^^^125^132^||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return JS_ESCAPE_CHARS.contains ( HTML_ESCAPE_CHARS ) ||  ( escapeHtmlCharacters && c.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Argument_Swapping]^return HTML_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && JS_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Wrong_Literal]^return true;^131^^^^^125^132^return false;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return codePoint < 0x20 && codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return codePoint > 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return codePoint < 0x20 || codePoint != 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return codePoint < 0x20 || codePoint <= 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f || codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint < 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[BugLab_Wrong_Operator]^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint < 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( HEX_CHARS[0], out ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( out[0], surrogates ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Literal]^appendHexJavaScriptRepresentation ( surrogates[], out ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Argument_Swapping]^appendHexJavaScriptRepresentation ( out[1], surrogates ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Literal]^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Variable_Misuse]^appendHexJavaScriptRepresentation ( HEX_CHARS[1], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Literal]^appendHexJavaScriptRepresentation ( surrogates[2], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Variable_Misuse]^out.append ( "\\u" ) .append ( surrogates[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Argument_Swapping]^out.append ( "\\u" ) .append ( codePoint[ ( HEX_CHARS >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   |  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  !=  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   !=  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  >  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  !=  4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   ==  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 13 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> codePoint )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   <<  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  &  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )    instanceof   0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  <  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  <<  4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> codePoint )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  &&  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   <=  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  >=  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   ||  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[BugLab_Wrong_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  >>  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
