[buglab_swap_variables]^escapeJsonString ( escapedString, plainText ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[buglab_swap_variables]^escapeJsonString (  escapedString ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[buglab_swap_variables]^escapeJsonString ( plainText ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[buglab_swap_variables]^for  ( int charCount = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^for  ( int len, i = 0; i < charCount; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^for  ( int  i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^pos = charCount + i;^91^^^^^76^106^pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^int codePoint = Character.codePointAt ( i, plainText ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^int codePoint = Character.codePointAt (  i ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^int codePoint = Character.codePointAt ( plainText ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( i, pos, plainText ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append (  pos, i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( plainText, i, pos ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( plainText,  i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( plainText, pos ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^appendHexJavaScriptRepresentation ( out, codePoint ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^appendHexJavaScriptRepresentation (  out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^appendHexJavaScriptRepresentation ( codePoint ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( pos, plainText, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append (  pos, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( plainText,  len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( plainText, len, pos ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^out.append ( plainText, pos ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[buglab_swap_variables]^if  ( !Character.isSupplementaryCodePoint ( codepointodepoint )  )  {^126^^^^^125^132^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  {^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[buglab_swap_variables]^return c.contains ( JS_ESCAPE_CHARS ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[buglab_swap_variables]^return HTML_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && JS_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[buglab_swap_variables]^return escapeHtmlCharacters.contains ( c ) ||  ( JS_ESCAPE_CHARS && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[buglab_swap_variables]^||  ( escapeHtmlCharacters && c.contains ( HTML_ESCAPE_CHARS )  ) ;^129^^^^^125^132^||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[buglab_swap_variables]^return JS_ESCAPE_CHARS.contains ( HTML_ESCAPE_CHARS ) ||  ( escapeHtmlCharacters && c.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[buglab_swap_variables]^appendHexJavaScriptRepresentation ( out[0], surrogates ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[buglab_swap_variables]^appendHexJavaScriptRepresentation ( surrogates[0] ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[buglab_swap_variables]^appendHexJavaScriptRepresentation ( out[1], surrogates ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[buglab_swap_variables]^appendHexJavaScriptRepresentation ( surrogates[1] ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[buglab_swap_variables]^out.append ( "\\u" ) .append ( codePoint[ ( HEX_CHARS >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
