[buglab_swap_variables]^return String.format ( "preserveType: %b, preserveType: %s, obj: %s", type, type, obj ) ;^50^^^^^49^51^return String.format ( "preserveType: %b, type: %s, obj: %s", preserveType, type, obj ) ;^[CLASS] ObjectTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Type  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return String.format ( "preserveType: %b, type: %s, obj: %s",  type, obj ) ;^50^^^^^49^51^return String.format ( "preserveType: %b, type: %s, obj: %s", preserveType, type, obj ) ;^[CLASS] ObjectTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Type  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return String.format ( "preserveType: %b, obj: %s, type: %s", preserveType, type, obj ) ;^50^^^^^49^51^return String.format ( "preserveType: %b, type: %s, obj: %s", preserveType, type, obj ) ;^[CLASS] ObjectTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Type  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return String.format ( "preserveType: %b, type: %s, obj: %s", preserveType,  obj ) ;^50^^^^^49^51^return String.format ( "preserveType: %b, type: %s, obj: %s", preserveType, type, obj ) ;^[CLASS] ObjectTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Type  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return String.format ( "preserveType: %b, type: %s, preserveType: %s", obj, type, obj ) ;^50^^^^^49^51^return String.format ( "preserveType: %b, type: %s, obj: %s", preserveType, type, obj ) ;^[CLASS] ObjectTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Type  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return String.format ( "preserveType: %b, type: %s: %s", preserveType, type, obj ) ;^50^^^^^49^51^return String.format ( "preserveType: %b, type: %s, obj: %s", preserveType, type, obj ) ;^[CLASS] ObjectTypePair  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Type  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return new Pair<HANDLER, ObjectTypePair> ( moreSpecificType, handler ) ;^61^^^^^53^67^return new Pair<HANDLER, ObjectTypePair> ( handler, moreSpecificType ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^return new Pair<HANDLER, ObjectTypePair> (  moreSpecificType ) ;^61^^^^^53^67^return new Pair<HANDLER, ObjectTypePair> ( handler, moreSpecificType ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^return new Pair<HANDLER, ObjectTypePair> ( handler ) ;^61^^^^^53^67^return new Pair<HANDLER, ObjectTypePair> ( handler, moreSpecificType ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^handler = moreSpecificType.getHandlerFor ( handlers.type ) ;^59^^^^^53^67^handler = handlers.getHandlerFor ( moreSpecificType.type ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^handler = handlers.getHandlerFor ( moreSpecificType ) ;^59^^^^^53^67^handler = handlers.getHandlerFor ( moreSpecificType.type ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^handler = moreSpecificType.type.getHandlerFor ( handlers ) ;^59^^^^^53^67^handler = handlers.getHandlerFor ( moreSpecificType.type ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^handler = handlers.getHandlerFor ( moreSpecificType.type.type ) ;^59^^^^^53^67^handler = handlers.getHandlerFor ( moreSpecificType.type ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^handler = type.getHandlerFor ( handlers ) ;^65^^^^^53^67^handler = handlers.getHandlerFor ( type ) ;^[CLASS] ObjectTypePair  [METHOD] getMatchingHandler [RETURN_TYPE] <HANDLER>   ParameterizedTypeHandlerMap<HANDLER> handlers [VARIABLES] Type  type  Object  obj  boolean  preserveType  ParameterizedTypeHandlerMap  handlers  HANDLER  handler  ObjectTypePair  moreSpecificType  
[buglab_swap_variables]^if  ( obj || preserveType == null )  {^70^^^^^69^78^if  ( preserveType || obj == null )  {^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^Type actualType = getActualTypeIfMoreSpecific ( obj, type.getClass (  )  ) ;^73^^^^^69^78^Type actualType = getActualTypeIfMoreSpecific ( type, obj.getClass (  )  ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^Type actualType = getActualTypeIfMoreSpecific (  obj.getClass (  )  ) ;^73^^^^^69^78^Type actualType = getActualTypeIfMoreSpecific ( type, obj.getClass (  )  ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^Type actualType = getActualTypeIfMoreSpecific ( type.getClass (  )  ) ;^73^^^^^69^78^Type actualType = getActualTypeIfMoreSpecific ( type, obj.getClass (  )  ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^if  ( type == actualType )  {^74^^^^^69^78^if  ( actualType == type )  {^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return new ObjectTypePair ( obj, preserveType, actualType ) ;^77^^^^^69^78^return new ObjectTypePair ( obj, actualType, preserveType ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return new ObjectTypePair ( obj,  preserveType ) ;^77^^^^^69^78^return new ObjectTypePair ( obj, actualType, preserveType ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return new ObjectTypePair ( actualType, obj, preserveType ) ;^77^^^^^69^78^return new ObjectTypePair ( obj, actualType, preserveType ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return new ObjectTypePair (  actualType, preserveType ) ;^77^^^^^69^78^return new ObjectTypePair ( obj, actualType, preserveType ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return new ObjectTypePair ( preserveType, actualType, obj ) ;^77^^^^^69^78^return new ObjectTypePair ( obj, actualType, preserveType ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^return new ObjectTypePair ( obj, actualType ) ;^77^^^^^69^78^return new ObjectTypePair ( obj, actualType, preserveType ) ;^[CLASS] ObjectTypePair  [METHOD] toMoreSpecificType [RETURN_TYPE] ObjectTypePair   [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  
[buglab_swap_variables]^if  ( actualClass.isAssignableFrom ( typeAsClass )  )  {^87^^^^^84^95^if  ( typeAsClass.isAssignableFrom ( actualClass )  )  {^[CLASS] ObjectTypePair  [METHOD] getActualTypeIfMoreSpecific [RETURN_TYPE] Type   Type type Class<?> actualClass [VARIABLES] Type  actualType  type  Object  obj  Class  actualClass  typeAsClass  boolean  preserveType  
[buglab_swap_variables]^} else if  ( other != this.obj.obj )  {^120^^^^^105^131^} else if  ( this.obj != other.obj )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^} else if  ( other.obj != this.obj )  {^120^^^^^105^131^} else if  ( this.obj != other.obj )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^if  ( other.obj.obj != null )  {^117^^^^^105^131^if  ( other.obj != null )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^if  ( other != null )  {^117^^^^^105^131^if  ( other.obj != null )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^} else if  ( this.obj != other )  {^120^^^^^105^131^} else if  ( this.obj != other.obj )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^} else if  ( !type.equals ( other )  )  {^127^^^^^105^131^} else if  ( !type.equals ( other.type )  )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^if  ( other.type.type != null )  {^124^^^^^105^131^if  ( other.type != null )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^if  ( other != null )  {^124^^^^^105^131^if  ( other.type != null )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^} else if  ( !type.equals ( other.type.type )  )  {^127^^^^^105^131^} else if  ( !type.equals ( other.type )  )  {^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^return preserveType == other.preserveType.preserveType;^130^^^^^105^131^return preserveType == other.preserveType;^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
[buglab_swap_variables]^return other.preserveType == preserveType;^130^^^^^105^131^return preserveType == other.preserveType;^[CLASS] ObjectTypePair  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] Type  actualType  type  Object  obj  boolean  preserveType  ObjectTypePair  other  
