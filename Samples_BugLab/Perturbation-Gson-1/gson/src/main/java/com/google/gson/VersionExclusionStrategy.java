[buglab_swap_variables]^return !isValidVersion ( f.getAnnotation ( Since.class ) .getAnnotation ( Until.class )  ) ;^37^^^^^36^38^return !isValidVersion ( f.getAnnotation ( Since.class ) , f.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipField [RETURN_TYPE] boolean   FieldAttributes f [VARIABLES] double  version  FieldAttributes  f  boolean  
[buglab_swap_variables]^return !isValidVersion ( clazz.getAnnotation ( Since.class ) .getAnnotation ( Until.class )  ) ;^41^^^^^40^42^return !isValidVersion ( clazz.getAnnotation ( Since.class ) , clazz.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipClass [RETURN_TYPE] boolean   Class<?> clazz [VARIABLES] double  version  Class  clazz  boolean  
[buglab_swap_variables]^return  ( isValidSince ( until )  && isValidUntil ( since )  ) ;^45^^^^^44^46^return  ( isValidSince ( since )  && isValidUntil ( until )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidVersion [RETURN_TYPE] boolean   Since since Until until [VARIABLES] Since  since  boolean  double  version  Until  until  
[buglab_swap_variables]^if  ( version > annotationVersion )  {^51^^^^^48^56^if  ( annotationVersion > version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[buglab_swap_variables]^if  ( version <= annotationVersion )  {^61^^^^^58^66^if  ( annotationVersion <= version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
