[BugLab_Argument_Swapping]^if  ( objTypeInfo.shouldSkipClass ( exclusionStrategy.getRawClass (  )  )  )  {^103^^^^^88^118^if  ( exclusionStrategy.shouldSkipClass ( objTypeInfo.getRawClass (  )  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler ( node ) ;^106^^^^^91^121^boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler ( objTypePair ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^boolean visitedWithCustomHandler = objTypePair.visitUsingCustomHandler ( visitor ) ;^106^^^^^91^121^boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler ( objTypePair ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^if  ( objectToVisit != null )  {^110^^^^^95^125^if  ( objectToVisit == null )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^} else if  ( objTypeInfo.getActualType (  )  == Object.class || isPrimitiveOrString ( objectToVisit )  )  {^118^119^^^^103^133^} else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^} else if  ( objTypeInfo.getActualType (  )  >= Object.class && isPrimitiveOrString ( objectToVisit )  )  {^118^119^^^^103^133^} else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^navigateClassFields ( obj, curr, visitor ) ;^131^^^^^118^134^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^navigateClassFields ( objectToVisit, null, visitor ) ;^131^^^^^118^134^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( curr, objectToVisit, visitor ) ;^131^^^^^118^134^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( objectToVisit, visitor, curr ) ;^131^^^^^118^134^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( visitor, curr, objectToVisit ) ;^131^^^^^118^134^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> this = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.topLevelClass ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^for  ( Class<?> topLevelClass = curr; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^for  ( Class<?> curr = topLevelClass; curr != null || !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^for  ( Class<?> curr = topLevelClass; curr == null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^ObjectTypePair currObjTypePair = node.toMoreSpecificType (  ) ;^126^^^^^118^134^ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType (  ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^visitor.startVisitingObject ( obj ) ;^125^^^^^118^134^visitor.startVisitingObject ( objectToVisit ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^visitor.visitPrimitive ( obj ) ;^122^^^^^118^134^visitor.visitPrimitive ( objectToVisit ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^navigateClassFields ( obj, curr, visitor ) ;^131^^^^^116^146^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( curr, objectToVisit, visitor ) ;^131^^^^^116^146^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( visitor, curr, objectToVisit ) ;^131^^^^^116^146^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> 2 = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^for  ( Class<?> topLevelClass = curr; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^for  ( Class<?> curr = topLevelClass; curr != null || !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^for  ( Class<?> curr = topLevelClass; curr == null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( visitor, curr, objectToVisit ) ;^131^^^^^128^133^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( objectToVisit, visitor, curr ) ;^131^^^^^128^133^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^navigateClassFields ( obj, curr, visitor ) ;^131^^^^^128^133^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( curr, objectToVisit, visitor ) ;^131^^^^^128^133^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^ObjectTypePair currObjTypePair = node.toMoreSpecificType (  ) ;^126^^^^^111^141^ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType (  ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^&& isPrimitiveOrString ( obj )  )  {^119^^^^^104^134^&& isPrimitiveOrString ( objectToVisit )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^visitor.visitPrimitive ( obj ) ;^122^^^^^107^137^visitor.visitPrimitive ( objectToVisit ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^visitor.startVisitingObject ( obj ) ;^125^^^^^110^140^visitor.startVisitingObject ( objectToVisit ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.topLevelClass ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^} else if  ( objTypeInfo.getActualType (  )  <= Object.class && isPrimitiveOrString ( objectToVisit )  )  {^118^119^^^^103^133^} else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> 0 = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^navigateClassFields ( objectToVisit, this, visitor ) ;^131^^^^^118^134^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^navigateClassFields ( objectToVisit, visitor, curr ) ;^131^^^^^116^146^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^} else if  ( objTypeInfo.getActualType (  )  != Object.class && isPrimitiveOrString ( objectToVisit )  )  {^118^119^^^^103^133^} else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^navigateClassFields ( objectToVisit, 1, visitor ) ;^131^^^^^118^134^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> curr = null; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> this = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^Object obj = node.getObject (  ) ;^108^^^^^93^123^Object obj = objTypePair.getObject (  ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Argument_Swapping]^Object visitorectToVisit =  ( obj == null )  ? obj.getTarget (  )  : obj;^109^^^^^94^124^Object objectToVisit =  ( obj == null )  ? visitor.getTarget (  )  : obj;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^Object objectToVisit =  ( obj != null )  ? visitor.getTarget (  )  : obj;^109^^^^^94^124^Object objectToVisit =  ( obj == null )  ? visitor.getTarget (  )  : obj;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^objTypePair.setObject ( obj ) ;^113^^^^^98^128^objTypePair.setObject ( objectToVisit ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^visitor.start ( node ) ;^114^^^^^99^129^visitor.start ( objTypePair ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^if  ( obj == null )  {^110^^^^^95^125^if  ( objectToVisit == null )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^navigateClassFields ( objectToVisit, null, visitor ) ;^131^^^^^116^146^navigateClassFields ( objectToVisit, curr, visitor ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> curr = null; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> 3 = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Wrong_Operator]^} else if  ( objTypeInfo.getActualType (  )  < Object.class && isPrimitiveOrString ( objectToVisit )  )  {^118^119^^^^103^133^} else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> 1 = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^113^143^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^for  ( Class<?> 3 = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^visitor.end ( node ) ;^136^^^^^121^151^visitor.end ( objTypePair ) ;^[CLASS] ObjectNavigator  [METHOD] accept [RETURN_TYPE] void   Visitor visitor [VARIABLES] boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  objectToVisit  Class  curr  topLevelClass  ExclusionStrategy  exclusionStrategy  TypeInfo  objTypeInfo  
[BugLab_Variable_Misuse]^return realClazz == Object.realClazz || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^143^144^^^^141^145^return realClazz == Object.class || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^[CLASS] ObjectNavigator  [METHOD] isPrimitiveOrString [RETURN_TYPE] boolean   Object objectToVisit [VARIABLES] Object  objectToVisit  Class  realClazz  ExclusionStrategy  exclusionStrategy  boolean  ObjectTypePair  currObjTypePair  node  objTypePair  
[BugLab_Wrong_Operator]^return realClazz == Object.class && realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^143^144^^^^141^145^return realClazz == Object.class || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^[CLASS] ObjectNavigator  [METHOD] isPrimitiveOrString [RETURN_TYPE] boolean   Object objectToVisit [VARIABLES] Object  objectToVisit  Class  realClazz  ExclusionStrategy  exclusionStrategy  boolean  ObjectTypePair  currObjTypePair  node  objTypePair  
[BugLab_Wrong_Operator]^return realClazz != Object.class || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^143^144^^^^141^145^return realClazz == Object.class || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^[CLASS] ObjectNavigator  [METHOD] isPrimitiveOrString [RETURN_TYPE] boolean   Object objectToVisit [VARIABLES] Object  objectToVisit  Class  realClazz  ExclusionStrategy  exclusionStrategy  boolean  ObjectTypePair  currObjTypePair  node  objTypePair  
[BugLab_Variable_Misuse]^|| Primitives.unwrap ( this ) .isPrimitive (  ) ;^144^^^^^141^145^|| Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^[CLASS] ObjectNavigator  [METHOD] isPrimitiveOrString [RETURN_TYPE] boolean   Object objectToVisit [VARIABLES] Object  objectToVisit  Class  realClazz  ExclusionStrategy  exclusionStrategy  boolean  ObjectTypePair  currObjTypePair  node  objTypePair  
[BugLab_Wrong_Literal]^AccessibleObject.setAccessible ( fields, false ) ;^149^^^^^147^168^AccessibleObject.setAccessible ( fields, true ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^if  ( fieldAttributes.shouldSkipField ( exclusionStrategy ) || exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  {^152^153^^^^147^168^if  ( exclusionStrategy.shouldSkipField ( fieldAttributes ) || exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  {^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Wrong_Operator]^if  ( exclusionStrategy.shouldSkipField ( fieldAttributes ) && exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  {^152^153^^^^147^168^if  ( exclusionStrategy.shouldSkipField ( fieldAttributes ) || exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  {^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitObjectField ( obj, declaredTypeOfField, fieldAttributes ) ;^164^^^^^147^168^visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitObjectField ( declaredTypeOfField, fieldAttributes, obj ) ;^164^^^^^147^168^visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitObjectField ( fieldAttributes, obj, declaredTypeOfField ) ;^164^^^^^147^168^visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitArrayField ( declaredTypeOfField, fieldAttributes, obj ) ;^162^^^^^147^168^visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitArrayField ( obj, declaredTypeOfField, fieldAttributes ) ;^162^^^^^147^168^visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitArrayField ( fieldAttributes, obj, declaredTypeOfField ) ;^162^^^^^147^168^visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^FieldAttributes clazzieldAttributes = new FieldAttributes ( f, f ) ;^151^^^^^147^168^FieldAttributes fieldAttributes = new FieldAttributes ( clazz, f ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^boolean visitedWithCustomHandler = declaredTypeOfField.visitFieldUsingCustomHandler ( fieldAttributes, visitor, obj ) ;^158^159^^^^147^168^boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler ( declaredTypeOfField, fieldAttributes, obj ) ;^158^159^^^^147^168^boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler ( fieldAttributes, obj, declaredTypeOfField ) ;^158^159^^^^147^168^boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^|| fieldAttributes.shouldSkipClass ( exclusionStrategy.getDeclaredClass (  )  )  )  {^153^^^^^147^168^|| exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  {^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitFieldUsingCustomHandler ( declaredTypeOfField, fieldAttributes, obj ) ;^159^^^^^147^168^visitor.visitFieldUsingCustomHandler ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
[BugLab_Argument_Swapping]^visitor.visitFieldUsingCustomHandler ( fieldAttributes, obj, declaredTypeOfField ) ;^159^^^^^147^168^visitor.visitFieldUsingCustomHandler ( fieldAttributes, declaredTypeOfField, obj ) ;^[CLASS] ObjectNavigator  [METHOD] navigateClassFields [RETURN_TYPE] void   Object obj Class<?> clazz Visitor visitor [VARIABLES] Field  f  Type  declaredTypeOfField  boolean  visitedWithCustomHandler  Visitor  visitor  ObjectTypePair  currObjTypePair  node  objTypePair  Object  obj  Class  clazz  ExclusionStrategy  exclusionStrategy  TypeInfo  fieldTypeInfo  Field[]  fields  FieldAttributes  fieldAttributes  
