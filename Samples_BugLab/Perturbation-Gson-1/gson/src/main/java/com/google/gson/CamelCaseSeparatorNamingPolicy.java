[BugLab_Argument_Swapping]^if  ( Character.isUpperCase ( translation )  && character.length (  )  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Wrong_Operator]^if  ( Character.isUpperCase ( character )  || translation.length (  )  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Wrong_Operator]^if  ( Character.isUpperCase ( character )  && translation.length (  )  == 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Wrong_Literal]^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 1 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Variable_Misuse]^translation.append ( target ) ;^66^^^^^60^72^translation.append ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < separatorString.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= target.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < target.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Wrong_Operator]^if  ( Character.isUpperCase ( character )  && translation.length (  )  > 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Variable_Misuse]^char character = separatorString.charAt ( i ) ;^64^^^^^60^72^char character = target.charAt ( i ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Argument_Swapping]^char character = i.charAt ( target ) ;^64^^^^^60^72^char character = target.charAt ( i ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < target.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
