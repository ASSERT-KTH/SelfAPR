[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = {  long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, double.class, short.class, float.class, long.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class,  short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class,  float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { float.class, long.class, short.class, int.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class,  double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, boolean.class, byte.class, double.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class,  byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class,  boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, boolean.class, float.class, double.class, byte.class, short.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class,  char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, char.class, boolean.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class,  Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^private static final Class<?>[] PRIMITIVE_TYPES = { int. long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^32^33^34^^^32^34^private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class, Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };^[CLASS] JsonPrimitive   [VARIABLES] 
[buglab_swap_variables]^if  ( INTEGER_MAX.compareTo ( big )  < 0 )  {^291^^^^^288^299^if  ( big.compareTo ( INTEGER_MAX )  < 0 )  {^[CLASS] JsonPrimitive  [METHOD] getAsObject [RETURN_TYPE] Object   [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  primitive  value  Class[]  PRIMITIVE_TYPES  boolean  
[buglab_swap_variables]^} else if  ( LONG_MAX.compareTo ( big )  < 0 )  {^293^^^^^288^299^} else if  ( big.compareTo ( LONG_MAX )  < 0 )  {^[CLASS] JsonPrimitive  [METHOD] getAsObject [RETURN_TYPE] Object   [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  primitive  value  Class[]  PRIMITIVE_TYPES  boolean  
[buglab_swap_variables]^sb.append ( value.escapeJsonString ( escaper.toString (  )  )  ) ;^305^^^^^302^310^sb.append ( escaper.escapeJsonString ( value.toString (  )  )  ) ;^[CLASS] JsonPrimitive  [METHOD] toString [RETURN_TYPE] void   Appendable sb Escaper escaper [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  primitive  value  Class[]  PRIMITIVE_TYPES  boolean  Escaper  escaper  Appendable  sb  
[buglab_swap_variables]^if  ( classOfPrimitive.isAssignableFrom ( standardPrimitive )  )  {^319^^^^^312^324^if  ( standardPrimitive.isAssignableFrom ( classOfPrimitive )  )  {^[CLASS] JsonPrimitive  [METHOD] isPrimitiveOrString [RETURN_TYPE] boolean   Object target [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  primitive  target  value  Class  classOfPrimitive  standardPrimitive  Class[]  PRIMITIVE_TYPES  boolean  
[buglab_swap_variables]^return other.value.value == null;^353^^^^^344^362^return other.value == null;^[CLASS] JsonPrimitive  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  obj  primitive  target  value  Class[]  PRIMITIVE_TYPES  boolean  JsonPrimitive  other  
[buglab_swap_variables]^return other == null;^353^^^^^344^362^return other.value == null;^[CLASS] JsonPrimitive  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  obj  primitive  target  value  Class[]  PRIMITIVE_TYPES  boolean  JsonPrimitive  other  
[buglab_swap_variables]^return other.equals ( value.value ) ;^361^^^^^344^362^return value.equals ( other.value ) ;^[CLASS] JsonPrimitive  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  obj  primitive  target  value  Class[]  PRIMITIVE_TYPES  boolean  JsonPrimitive  other  
[buglab_swap_variables]^return other.value.equals ( value ) ;^361^^^^^344^362^return value.equals ( other.value ) ;^[CLASS] JsonPrimitive  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  obj  primitive  target  value  Class[]  PRIMITIVE_TYPES  boolean  JsonPrimitive  other  
[buglab_swap_variables]^return value.equals ( other.value.value ) ;^361^^^^^344^362^return value.equals ( other.value ) ;^[CLASS] JsonPrimitive  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  obj  primitive  target  value  Class[]  PRIMITIVE_TYPES  boolean  JsonPrimitive  other  
[buglab_swap_variables]^if  ( primitive.value.value instanceof Number )  {^369^^^^^368^375^if  ( primitive.value instanceof Number )  {^[CLASS] JsonPrimitive  [METHOD] isIntegral [RETURN_TYPE] boolean   JsonPrimitive primitive [VARIABLES] BigInteger  INTEGER_MAX  LONG_MAX  big  Object  obj  primitive  target  value  Class[]  PRIMITIVE_TYPES  boolean  Number  number  JsonPrimitive  primitive  
