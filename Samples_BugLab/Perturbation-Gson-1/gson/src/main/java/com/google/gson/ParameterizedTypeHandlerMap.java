[buglab_swap_variables]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( value, typeOfT ) ;^44^^^^^43^46^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[buglab_swap_variables]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> (  value ) ;^44^^^^^43^46^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[buglab_swap_variables]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT ) ;^44^^^^^43^46^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[buglab_swap_variables]^+ index.get ( typeHierarchyList ) .first + ". Gson does not allow this." ) ;^61^^^^^48^66^+ typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[buglab_swap_variables]^typeHierarchyList.add ( 0 ) ;^65^^^^^48^66^typeHierarchyList.add ( 0, pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[buglab_swap_variables]^Pair<Class<?>, T> entry = i.get ( typeHierarchyList ) ;^70^^^^^68^76^Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[buglab_swap_variables]^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}" ) ;^83^^^^^78^86^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^logger.log ( Level. "Overriding the existing type handler for {0}", typeOfT ) ;^83^^^^^78^86^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^map.put ( value, typeOfT ) ;^85^^^^^78^86^map.put ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^map.put (  value ) ;^85^^^^^78^86^map.put ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^map.put ( typeOfT ) ;^85^^^^^78^86^map.put ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^for  ( Map.Entry<Type, T> entry : other.map.map.entrySet (  )  )  {^92^^^^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^for  ( Map.Entry<Type, T> entry : other.entrySet (  )  )  {^92^^^^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^Pair<Class<?>, T> entry = i.typeHierarchyList.get ( other ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^Pair<Class<?>, T> entry = other.get ( i ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^Pair<Class<?>, T> entry = other.typeHierarchyList.typeHierarchyList.get ( i ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^Pair<Class<?>, T> entry = i.get ( other.typeHierarchyList ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^for  ( int i = other.typeHierarchyList.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^for  ( int i = other.size (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[buglab_swap_variables]^register ( value, typeOfT ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^register (  value ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^register ( typeOfT ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[buglab_swap_variables]^T handler = type.get ( map ) ;^122^^^^^121^134^T handler = map.get ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[buglab_swap_variables]^if  ( type != rawClass )  {^125^^^^^121^134^if  ( rawClass != type )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[buglab_swap_variables]^return type.containsKey ( map ) ;^146^^^^^145^147^return map.containsKey ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] hasSpecificHandlerFor [RETURN_TYPE] boolean   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  modifiable  Logger  logger  Map  map  
[buglab_swap_variables]^if  ( type.equals ( i.get ( typeHierarchyList ) .first )  )  {^151^^^^^149^156^if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[buglab_swap_variables]^copy.register ( entry.getKey (  ) .getValue (  )  ) ;^161^^^^^158^167^copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
