[BugLab_Wrong_Literal]^protected final transient LRUMap<ClassKey,QName> _rootNames = new LRUMap<ClassKey,QName> ( 39, 200 ) ;^28^^^^^23^33^protected final transient LRUMap<ClassKey,QName> _rootNames = new LRUMap<ClassKey,QName> ( 40, 200 ) ;^[CLASS] XmlRootNameLookup   [VARIABLES] 
[BugLab_Wrong_Operator]^if  ( _rootNames != null )  {^34^^^^^32^38^if  ( _rootNames == null )  {^[CLASS] XmlRootNameLookup  [METHOD] readResolve [RETURN_TYPE] Object   [VARIABLES] LRUMap  _rootNames  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^return findRootName ( config.getRawClass (  ) , rootType ) ;^41^^^^^40^42^return findRootName ( rootType.getRawClass (  ) , config ) ;^[CLASS] XmlRootNameLookup  [METHOD] findRootName [RETURN_TYPE] QName   JavaType rootType MapperConfig<?> config [VARIABLES] MapperConfig  config  JavaType  rootType  boolean  LRUMap  _rootNames  long  serialVersionUID  
[BugLab_Variable_Misuse]^ClassKey key = new ClassKey ( null ) ;^46^^^^^44^59^ClassKey key = new ClassKey ( rootType ) ;^[CLASS] XmlRootNameLookup  [METHOD] findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] boolean  LRUMap  _rootNames  QName  name  ClassKey  key  MapperConfig  config  Class  rootType  long  serialVersionUID  
[BugLab_Argument_Swapping]^name = key.get ( _rootNames ) ;^49^^^^^44^59^name = _rootNames.get ( key ) ;^[CLASS] XmlRootNameLookup  [METHOD] findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] boolean  LRUMap  _rootNames  QName  name  ClassKey  key  MapperConfig  config  Class  rootType  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( name == null )  {^51^^^^^44^59^if  ( name != null )  {^[CLASS] XmlRootNameLookup  [METHOD] findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] boolean  LRUMap  _rootNames  QName  name  ClassKey  key  MapperConfig  config  Class  rootType  long  serialVersionUID  
[BugLab_Argument_Swapping]^name = _findRootName ( config, rootType ) ;^54^^^^^44^59^name = _findRootName ( rootType, config ) ;^[CLASS] XmlRootNameLookup  [METHOD] findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] boolean  LRUMap  _rootNames  QName  name  ClassKey  key  MapperConfig  config  Class  rootType  long  serialVersionUID  
[BugLab_Argument_Swapping]^_rootNames.put ( name, key ) ;^56^^^^^44^59^_rootNames.put ( key, name ) ;^[CLASS] XmlRootNameLookup  [METHOD] findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] boolean  LRUMap  _rootNames  QName  name  ClassKey  key  MapperConfig  config  Class  rootType  long  serialVersionUID  
[BugLab_Argument_Swapping]^BeanDescription beanDesc = rootType.introspectClassAnnotations ( config ) ;^65^^^^^64^91^BeanDescription beanDesc = config.introspectClassAnnotations ( rootType ) ;^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Argument_Swapping]^PropertyName root = ac.findRootName ( intr ) ;^71^^^^^64^91^PropertyName root = intr.findRootName ( ac ) ;^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( root == null )  {^72^^^^^64^91^if  ( root != null )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( ns == null || localName.length (  )  == 0 )  {^77^^^^^64^91^if  ( localName == null || localName.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( localName == null && localName.length (  )  == 0 )  {^77^^^^^64^91^if  ( localName == null || localName.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( localName != null || localName.length (  )  == 0 )  {^77^^^^^64^91^if  ( localName == null || localName.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( localName == null || localName.length (  )  != 0 )  {^77^^^^^64^91^if  ( localName == null || localName.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Variable_Misuse]^return new QName ( "", ns ) ;^81^^^^^64^91^return new QName ( "", localName ) ;^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( localName == null || ns.length (  )  == 0 )  {^84^^^^^64^91^if  ( ns == null || ns.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( ns == null && ns.length (  )  == 0 )  {^84^^^^^64^91^if  ( ns == null || ns.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( ns != null || ns.length (  )  == 0 )  {^84^^^^^64^91^if  ( ns == null || ns.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( ns == null || ns.length (  )  != 0 )  {^84^^^^^64^91^if  ( ns == null || ns.length (  )  == 0 )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Argument_Swapping]^ns = findNamespace ( ac, intr ) ;^85^^^^^64^91^ns = findNamespace ( intr, ac ) ;^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( localName == null )  {^87^^^^^64^91^if  ( ns == null )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( ns != null )  {^87^^^^^64^91^if  ( ns == null )  {^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Argument_Swapping]^return new QName ( localName, ns ) ;^90^^^^^64^91^return new QName ( ns, localName ) ;^[CLASS] XmlRootNameLookup  [METHOD] _findRootName [RETURN_TYPE] QName   Class<?> rootType MapperConfig<?> config [VARIABLES] PropertyName  root  boolean  AnnotatedClass  ac  LRUMap  _rootNames  BeanDescription  beanDesc  AnnotationIntrospector  intr  MapperConfig  config  Class  rootType  String  localName  ns  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( ai instanceof XmlAnnotationIntrospector )  {^96^^^^^93^104^if  ( intr instanceof XmlAnnotationIntrospector )  {^[CLASS] XmlRootNameLookup  [METHOD] findNamespace [RETURN_TYPE] String   AnnotationIntrospector ai AnnotatedClass ann [VARIABLES] AnnotationIntrospector  ai  intr  String  ns  boolean  AnnotatedClass  ann  LRUMap  _rootNames  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( intr  <<  XmlAnnotationIntrospector )  {^96^^^^^93^104^if  ( intr instanceof XmlAnnotationIntrospector )  {^[CLASS] XmlRootNameLookup  [METHOD] findNamespace [RETURN_TYPE] String   AnnotationIntrospector ai AnnotatedClass ann [VARIABLES] AnnotationIntrospector  ai  intr  String  ns  boolean  AnnotatedClass  ann  LRUMap  _rootNames  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( ns == null )  {^98^^^^^93^104^if  ( ns != null )  {^[CLASS] XmlRootNameLookup  [METHOD] findNamespace [RETURN_TYPE] String   AnnotationIntrospector ai AnnotatedClass ann [VARIABLES] AnnotationIntrospector  ai  intr  String  ns  boolean  AnnotatedClass  ann  LRUMap  _rootNames  long  serialVersionUID  
[BugLab_Variable_Misuse]^for  ( AnnotationIntrospector intr : intr.allIntrospectors (  )  )  {^95^^^^^93^104^for  ( AnnotationIntrospector intr : ai.allIntrospectors (  )  )  {^[CLASS] XmlRootNameLookup  [METHOD] findNamespace [RETURN_TYPE] String   AnnotationIntrospector ai AnnotatedClass ann [VARIABLES] AnnotationIntrospector  ai  intr  String  ns  boolean  AnnotatedClass  ann  LRUMap  _rootNames  long  serialVersionUID  
