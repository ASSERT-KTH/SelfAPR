[BugLab_Argument_Swapping]^super ( arg2, arg1 ) ;^30^^^^^29^31^super ( arg1, arg2 ) ;^[CLASS] CoreOperationEqual  [METHOD] <init> [RETURN_TYPE] Expression)   Expression arg1 Expression arg2 [VARIABLES] boolean  Expression  arg1  arg2  
[BugLab_Argument_Swapping]^return equal ( args, context[0], args[1] )  ? Boolean.TRUE : Boolean.FALSE;^34^^^^^33^35^return equal ( context, args[0], args[1] )  ? Boolean.TRUE : Boolean.FALSE;^[CLASS] CoreOperationEqual  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] boolean  EvalContext  context  
[BugLab_Wrong_Literal]^return equal ( context, args[0], args[3] )  ? Boolean.TRUE : Boolean.FALSE;^34^^^^^33^35^return equal ( context, args[0], args[1] )  ? Boolean.TRUE : Boolean.FALSE;^[CLASS] CoreOperationEqual  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] boolean  EvalContext  context  
[BugLab_Wrong_Literal]^return 1;^38^^^^^37^39^return 2;^[CLASS] CoreOperationEqual  [METHOD] getPrecedence [RETURN_TYPE] int   [VARIABLES] boolean  
[BugLab_Wrong_Literal]^return false;^42^^^^^41^43^return true;^[CLASS] CoreOperationEqual  [METHOD] isSymmetric [RETURN_TYPE] boolean   [VARIABLES] boolean  
