[buglab_swap_variables]^return new NodeSetContext ( new RootContext (  null ) , ( NodeSet )  constant ) ;^91^92^93^^^89^107^return new NodeSetContext ( new RootContext ( jxpathContext, null ) , ( NodeSet )  constant ) ;^[CLASS] RootContext  [METHOD] getConstantContext [RETURN_TYPE] EvalContext   Object constant [VARIABLES] Object  UNKNOWN_VALUE  constant  NodePointer  pointer  boolean  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return new InitialContext ( new RootContext ( pointer, jxpathContext )  ) ;^106^^^^^89^107^return new InitialContext ( new RootContext ( jxpathContext, pointer )  ) ;^[CLASS] RootContext  [METHOD] getConstantContext [RETURN_TYPE] EvalContext   Object constant [VARIABLES] Object  UNKNOWN_VALUE  constant  NodePointer  pointer  boolean  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return new InitialContext ( new RootContext ( jxpathContext )  ) ;^106^^^^^89^107^return new InitialContext ( new RootContext ( jxpathContext, pointer )  ) ;^[CLASS] RootContext  [METHOD] getConstantContext [RETURN_TYPE] EvalContext   Object constant [VARIABLES] Object  UNKNOWN_VALUE  constant  NodePointer  pointer  boolean  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return new InitialContext ( new RootContext (  pointer )  ) ;^106^^^^^89^107^return new InitialContext ( new RootContext ( jxpathContext, pointer )  ) ;^[CLASS] RootContext  [METHOD] getConstantContext [RETURN_TYPE] EvalContext   Object constant [VARIABLES] Object  UNKNOWN_VALUE  constant  NodePointer  pointer  boolean  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return new InitialContext ( new RootContext ( variableName, jxpathContext.getVariablePointer ( jxpathContext )  )  ) ;^110^111^112^113^^109^114^return new InitialContext ( new RootContext ( jxpathContext, jxpathContext.getVariablePointer ( variableName )  )  ) ;^[CLASS] RootContext  [METHOD] getVariableContext [RETURN_TYPE] EvalContext   QName variableName [VARIABLES] boolean  QName  variableName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return new InitialContext ( new RootContext (  jxpathContext.getVariablePointer ( variableName )  )  ) ;^110^111^112^113^^109^114^return new InitialContext ( new RootContext ( jxpathContext, jxpathContext.getVariablePointer ( variableName )  )  ) ;^[CLASS] RootContext  [METHOD] getVariableContext [RETURN_TYPE] EvalContext   QName variableName [VARIABLES] boolean  QName  variableName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^new RootContext ( variableName, jxpathContext.getVariablePointer ( jxpathContext )  )  ) ;^111^112^113^^^109^114^new RootContext ( jxpathContext, jxpathContext.getVariablePointer ( variableName )  )  ) ;^[CLASS] RootContext  [METHOD] getVariableContext [RETURN_TYPE] EvalContext   QName variableName [VARIABLES] boolean  QName  variableName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^new RootContext (  jxpathContext.getVariablePointer ( variableName )  )  ) ;^111^112^113^^^109^114^new RootContext ( jxpathContext, jxpathContext.getVariablePointer ( variableName )  )  ) ;^[CLASS] RootContext  [METHOD] getVariableContext [RETURN_TYPE] EvalContext   QName variableName [VARIABLES] boolean  QName  variableName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return functionName.getFunction ( jxpathContext, parameters ) ;^117^^^^^116^118^return jxpathContext.getFunction ( functionName, parameters ) ;^[CLASS] RootContext  [METHOD] getFunction [RETURN_TYPE] Function   QName functionName Object[] parameters [VARIABLES] boolean  QName  functionName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return jxpathContext.getFunction (  parameters ) ;^117^^^^^116^118^return jxpathContext.getFunction ( functionName, parameters ) ;^[CLASS] RootContext  [METHOD] getFunction [RETURN_TYPE] Function   QName functionName Object[] parameters [VARIABLES] boolean  QName  functionName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return jxpathContext.getFunction ( parameters, functionName ) ;^117^^^^^116^118^return jxpathContext.getFunction ( functionName, parameters ) ;^[CLASS] RootContext  [METHOD] getFunction [RETURN_TYPE] Function   QName functionName Object[] parameters [VARIABLES] boolean  QName  functionName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return jxpathContext.getFunction ( functionName ) ;^117^^^^^116^118^return jxpathContext.getFunction ( functionName, parameters ) ;^[CLASS] RootContext  [METHOD] getFunction [RETURN_TYPE] Function   QName functionName Object[] parameters [VARIABLES] boolean  QName  functionName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^return parameters.getFunction ( functionName, jxpathContext ) ;^117^^^^^116^118^return jxpathContext.getFunction ( functionName, parameters ) ;^[CLASS] RootContext  [METHOD] getFunction [RETURN_TYPE] Function   QName functionName Object[] parameters [VARIABLES] boolean  QName  functionName  Object  UNKNOWN_VALUE  constant  NodePointer  pointer  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^if  ( id == null || registers >= MAX_REGISTER || id == -1 )  {^121^^^^^120^125^if  ( registers == null || id >= MAX_REGISTER || id == -1 )  {^[CLASS] RootContext  [METHOD] getRegisteredValue [RETURN_TYPE] Object   int id [VARIABLES] Object  UNKNOWN_VALUE  constant  NodePointer  pointer  boolean  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  id  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^if  ( MAX_REGISTER == null || id >= registers || id == -1 )  {^121^^^^^120^125^if  ( registers == null || id >= MAX_REGISTER || id == -1 )  {^[CLASS] RootContext  [METHOD] getRegisteredValue [RETURN_TYPE] Object   int id [VARIABLES] Object  UNKNOWN_VALUE  constant  NodePointer  pointer  boolean  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  id  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^if  ( registers == null || MAX_REGISTER >= id || id == -1 )  {^121^^^^^120^125^if  ( registers == null || id >= MAX_REGISTER || id == -1 )  {^[CLASS] RootContext  [METHOD] getRegisteredValue [RETURN_TYPE] Object   int id [VARIABLES] Object  UNKNOWN_VALUE  constant  NodePointer  pointer  boolean  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  id  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^for  ( MAX_REGISTERnt i = 0; i < i; i++ )  {^130^^^^^127^140^for  ( int i = 0; i < MAX_REGISTER; i++ )  {^[CLASS] RootContext  [METHOD] setRegisteredValue [RETURN_TYPE] int   Object value [VARIABLES] Object  UNKNOWN_VALUE  constant  value  NodePointer  pointer  boolean  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  i  id  position  JXPathContextReferenceImpl  jxpathContext  
[buglab_swap_variables]^if  ( MAX_REGISTER >= availableRegister )  {^134^^^^^127^140^if  ( availableRegister >= MAX_REGISTER )  {^[CLASS] RootContext  [METHOD] setRegisteredValue [RETURN_TYPE] int   Object value [VARIABLES] Object  UNKNOWN_VALUE  constant  value  NodePointer  pointer  boolean  Object[]  parameters  registers  int  MAX_REGISTER  availableRegister  i  id  position  JXPathContextReferenceImpl  jxpathContext  
