[BugLab_Argument_Swapping]^return new QName ( name, prefix ) ;^39^^^^^38^40^return new QName ( prefix, name ) ;^[CLASS] TreeCompiler  [METHOD] qname [RETURN_TYPE] Object   String prefix String name [VARIABLES] QName  QNAME_NAME  String  name  prefix  boolean  
[BugLab_Argument_Swapping]^return new CoreFunction ( args, toExpressionArray ( code )  ) ;^112^^^^^111^113^return new CoreFunction ( code, toExpressionArray ( args )  ) ;^[CLASS] TreeCompiler  [METHOD] function [RETURN_TYPE] Object   int code Object[] args [VARIABLES] boolean  QName  QNAME_NAME  int  code  Object[]  args  
[BugLab_Argument_Swapping]^return new LocationPath ( steps, toStepArray ( absolute )  ) ;^135^^^^^134^136^return new LocationPath ( absolute, toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] locationPath [RETURN_TYPE] Object   boolean absolute Object[] steps [VARIABLES] QName  QNAME_NAME  Object[]  steps  boolean  absolute  
[BugLab_Variable_Misuse]^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( steps ) , toStepArray ( steps )  ) ;^143^144^145^146^^138^147^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[BugLab_Variable_Misuse]^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( predicates )  ) ;^143^144^145^146^^138^147^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[BugLab_Argument_Swapping]^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( steps ) , toStepArray ( predicates )  ) ;^143^144^145^146^^138^147^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[BugLab_Variable_Misuse]^toExpressionArray ( steps ) , toStepArray ( steps )  ) ;^145^146^^^^138^147^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[BugLab_Variable_Misuse]^toStepArray ( predicates )  ) ;^146^^^^^138^147^toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[BugLab_Argument_Swapping]^return new Step ( predicates, ( NodeTest )  nodeTest, toExpressionArray ( axis )  ) ;^162^163^164^165^^161^166^return new Step ( axis, ( NodeTest )  nodeTest, toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[BugLab_Wrong_Operator]^if  ( array == null )  {^170^^^^^168^177^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[BugLab_Wrong_Operator]^if  ( array == null )  {^181^^^^^179^188^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[BugLab_Wrong_Operator]^if  ( ! ( arg  >=  LocationPath )  )  {^191^^^^^190^210^if  ( ! ( arg instanceof LocationPath )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^return true;^192^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Operator]^if  ( steps.length == 1 )  {^196^^^^^190^210^if  ( steps.length != 1 )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^if  ( steps.length != 0 )  {^196^^^^^190^210^if  ( steps.length != 1 )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^return true;^197^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^return true;^200^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^if  ( steps[-1].getAxis (  )  != Compiler.AXIS_ATTRIBUTE )  {^199^^^^^190^210^if  ( steps[0].getAxis (  )  != Compiler.AXIS_ATTRIBUTE )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^NodeTest test = steps[-1].getNodeTest (  ) ;^202^^^^^190^210^NodeTest test = steps[0].getNodeTest (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Operator]^if  ( ! ( test  ||  NodeNameTest )  )  {^203^^^^^190^210^if  ( ! ( test instanceof NodeNameTest )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^return true;^204^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^return true;^207^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[BugLab_Wrong_Literal]^return false;^209^^^^^190^210^return true;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
