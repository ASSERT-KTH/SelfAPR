[buglab_swap_variables]^if  ( args == 1 )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[buglab_swap_variables]^for  ( argsnt i = 0; i < i.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[buglab_swap_variables]^for  ( int i = 0; i < args; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[buglab_swap_variables]^for  ( int i = 0; i < args.length.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[buglab_swap_variables]^buffer.append ( parenthesize ( args[i] == 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[buglab_swap_variables]^buffer.append ( parenthesize ( i[i], args == 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[buglab_swap_variables]^if  ( thePrecedence < myPrecedence )  {^83^^^^^74^101^if  ( myPrecedence < thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[buglab_swap_variables]^else if  ( thePrecedence == myPrecedence )  {^86^^^^^74^101^else if  ( myPrecedence == thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
