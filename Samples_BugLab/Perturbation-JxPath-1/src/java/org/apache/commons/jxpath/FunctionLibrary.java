[BugLab_Wrong_Operator]^if  ( byNamespace != null )  {^59^^^^^58^63^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[BugLab_Wrong_Operator]^if  ( byNamespace != null )  {^74^^^^^73^99^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^Object candidates = namespace.get ( byNamespace ) ;^77^^^^^73^99^Object candidates = byNamespace.get ( namespace ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^Object candidates = byNamespace.get ( name ) ;^77^^^^^73^99^Object candidates = byNamespace.get ( namespace ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^if  ( candidates countnstanceof Functions )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Operator]^if  ( candidates  |  Functions )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Operator]^if  ( candidates  ||  Functions )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  &  List )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Operator]^if  ( function == null )  {^93^^^^^73^99^if  ( function != null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^for  ( countnt i = 0; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^for  ( countnt i = 0; i < i; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^Function function = (  ( Functions )  allFunctions.get ( i )  ) .getFunction ( namespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^Function function = (  ( Functions )  list.get ( count )  ) .getFunction ( namespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( name, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespacespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^Function function = (  ( Functions )  namespace.get ( i )  ) .getFunction ( list, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^Function function = (  ( Functions )  i.get ( list )  ) .getFunction ( namespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( name, namespace,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^(  ( Functions )  allFunctions.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^(  ( Functions )  list.get ( count )  ) .getFunction ( namespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^(  ( Functions )  list.get ( i )  ) .getFunction ( namespacespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  namespace.get ( i )  ) .getFunction ( list, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  list.get ( namespace )  ) .getFunction ( i, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  list.get ( i )  ) .getFunction ( name, namespace, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  list.get ( i )  ) .getFunction ( parametersspace, name, name ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  i.get ( list )  ) .getFunction ( namespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^int count = allFunctions.size (  ) ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^Function function = (  ( Functions )  list.get ( name )  ) .getFunction ( ispace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  name.get ( i )  ) .getFunction ( listspace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  list.get ( parameters )  ) .getFunction ( namespace, name, i ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^Function function = (  ( Functions )  name.get ( i )  ) .getFunction ( listspace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  list.get ( i )  ) .getFunction ( parameters, name, namespace ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  list.get ( name )  ) .getFunction ( ispace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^return  (  ( Functions )  candidates ) .getFunction ( name, name, parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^return  (  ( Functions )  candidates ) .getFunction ( name, namespace, parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^return  (  ( Functions )  candidates ) .getFunction ( namespacespace, name, parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^return  (  ( Functions )  candidates ) .getFunction ( parametersspace, name, name ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^else candidatesf  ( i instanceof List )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  >=  List )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^Function function = (  ( Functions )  list.get ( namespace )  ) .getFunction ( i, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^(  ( Functions )  list.get ( i )  ) .getFunction ( name, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^(  ( Functions )  parameters.get ( i )  ) .getFunction ( namespace, name, list ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Wrong_Literal]^for  ( int i = count; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Argument_Swapping]^return  (  ( Functions )  candidates ) .getFunction ( parameters, name, namespace ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[BugLab_Variable_Misuse]^int count = lst.size (  ) ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^if  ( candidates != null )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  >=  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Variable_Misuse]^byNamespace.put ( ns, list ) ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Argument_Swapping]^byNamespace.put ( lst, ns ) ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Argument_Swapping]^byNamespace.put ( funcs, ns ) ;^111^^^^^101^124^byNamespace.put ( ns, funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  ||  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Variable_Misuse]^for  ( countnt i = 0; i < count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Argument_Swapping]^for  ( countnt i = 0; i < i; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Literal]^for  ( int i = count; i < count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  ^  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  <<  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Argument_Swapping]^for  ( Iterator namespaces = it.iterator (  ) ; it.hasNext (  ) ; )  {^107^^^^^101^124^for  ( Iterator it = namespaces.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  <  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  |  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Argument_Swapping]^Object candidates = ns.get ( byNamespace ) ;^109^^^^^101^124^Object candidates = byNamespace.get ( ns ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Variable_Misuse]^Functions funcs =  ( Functions )  allFunctions.get ( count ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Argument_Swapping]^Functions funcs =  ( Functions )  i.get ( allFunctions ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Wrong_Operator]^else if  ( candidates  &&  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[BugLab_Variable_Misuse]^Functions funcs =  ( Functions )  lst.get ( i ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
