[BugLab_Wrong_Literal]^actual = false;^47^^^^^43^48^actual = true;^[CLASS] VariablePointer 1  [METHOD] <init> [RETURN_TYPE] QName)   Variables variables QName name [VARIABLES] Variables  variables  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Literal]^actual = true;^53^^^^^50^54^actual = false;^[CLASS] VariablePointer 1  [METHOD] <init> [RETURN_TYPE] QName)   QName name [VARIABLES] Variables  variables  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Literal]^return false;^57^^^^^56^58^return true;^[CLASS] VariablePointer 1  [METHOD] isContainer [RETURN_TYPE] boolean   [VARIABLES] Variables  variables  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^return name.getVariable ( variables.toString (  )  ) ;^68^^^^^64^69^return variables.getVariable ( name.toString (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] getBaseValue [RETURN_TYPE] Object   [VARIABLES] Variables  variables  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^return value == null && JXPathIntrospector.getBeanInfo ( value.getClass (  )  ) .isAtomic (  ) ;^73^74^^^^71^75^return value == null || JXPathIntrospector.getBeanInfo ( value.getClass (  )  ) .isAtomic (  ) ;^[CLASS] VariablePointer 1  [METHOD] isLeaf [RETURN_TYPE] boolean   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^return value != null || JXPathIntrospector.getBeanInfo ( value.getClass (  )  ) .isAtomic (  ) ;^73^74^^^^71^75^return value == null || JXPathIntrospector.getBeanInfo ( value.getClass (  )  ) .isAtomic (  ) ;^[CLASS] VariablePointer 1  [METHOD] isLeaf [RETURN_TYPE] boolean   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^return value != null || ValueUtils.isCollection ( value ) ;^79^^^^^77^80^return value != null && ValueUtils.isCollection ( value ) ;^[CLASS] VariablePointer 1  [METHOD] isCollection [RETURN_TYPE] boolean   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^return value == null && ValueUtils.isCollection ( value ) ;^79^^^^^77^80^return value != null && ValueUtils.isCollection ( value ) ;^[CLASS] VariablePointer 1  [METHOD] isCollection [RETURN_TYPE] boolean   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^if  ( WHOLE_COLLECTION != index )  {^84^^^^^82^90^if  ( index != WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] getImmediateNode [RETURN_TYPE] Object   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index <= WHOLE_COLLECTION )  {^84^^^^^82^90^if  ( index != WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] getImmediateNode [RETURN_TYPE] Object   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^return ValueUtils.getValue ( index, value ) ;^85^^^^^82^90^return ValueUtils.getValue ( value, index ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateNode [RETURN_TYPE] Object   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^if  ( WHOLE_COLLECTION != index )  {^97^^^^^92^104^if  ( index != WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index >= WHOLE_COLLECTION )  {^97^^^^^92^104^if  ( index != WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Variable_Misuse]^variables.declareVariable ( name.toString (  ) , collection ) ;^102^^^^^92^104^variables.declareVariable ( name.toString (  ) , value ) ;^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^variables.declareVariable ( value.toString (  ) , name ) ;^102^^^^^92^104^variables.declareVariable ( name.toString (  ) , value ) ;^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^ValueUtils.setValue ( index, collection, value ) ;^99^^^^^92^104^ValueUtils.setValue ( collection, index, value ) ;^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^ValueUtils.setValue ( value, index, collection ) ;^99^^^^^92^104^ValueUtils.setValue ( collection, index, value ) ;^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Variable_Misuse]^ValueUtils.setValue ( value, index, value ) ;^99^^^^^92^104^ValueUtils.setValue ( collection, index, value ) ;^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^ValueUtils.setValue ( collection, value, index ) ;^99^^^^^92^104^ValueUtils.setValue ( collection, index, value ) ;^[CLASS] VariablePointer 1  [METHOD] setValue [RETURN_TYPE] void   Object value [VARIABLES] Variables  variables  Object  collection  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Argument_Swapping]^if  ( valuePointerPointer == null )  {^116^^^^^115^133^if  ( valuePointer == null )  {^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( valuePointer != null )  {^116^^^^^115^133^if  ( valuePointer == null )  {^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  >=  name ) ;^126^127^^^^115^133^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  &&  name ) ;^126^127^^^^115^133^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "   instanceof   name ) ;^126^127^^^^115^133^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  &  name ) ;^126^127^^^^115^133^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  ^  name ) ;^126^127^^^^115^133^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  !=  name ) ;^126^127^^^^115^133^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateValuePointer [RETURN_TYPE] NodePointer   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  ==  name ) ;^126^127^^^^125^128^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateNode [RETURN_TYPE] Object   [VARIABLES] Variables  variables  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  |  name ) ;^126^127^^^^125^128^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] VariablePointer 1  [METHOD] getImmediateNode [RETURN_TYPE] Object   [VARIABLES] Variables  variables  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( value != null )  {^138^^^^^135^144^if  ( value == null )  {^[CLASS] VariablePointer 1  [METHOD] getLength [RETURN_TYPE] int   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Literal]^return 0;^139^^^^^135^144^return 1;^[CLASS] VariablePointer 1  [METHOD] getLength [RETURN_TYPE] int   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Literal]^return 2;^139^^^^^135^144^return 1;^[CLASS] VariablePointer 1  [METHOD] getLength [RETURN_TYPE] int   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Wrong_Literal]^return ;^139^^^^^135^144^return 1;^[CLASS] VariablePointer 1  [METHOD] getLength [RETURN_TYPE] int   [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  valuePointer  QName  name  
[BugLab_Variable_Misuse]^return valuePointer;^153^^^^^146^154^return ptr;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context Object value [VARIABLES] Variables  variables  Object  value  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  
[BugLab_Argument_Swapping]^if  ( !factory.declareVariable ( name, context.toString (  )  )  )  {^159^^^^^156^168^if  ( !factory.declareVariable ( context, name.toString (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  >  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  &&  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '"  >  name + "' for path: " + asPath (  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  !=  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '"  >>  name + "' for path: " + asPath (  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  ^  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  >>  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '"  &  name + "' for path: " + asPath (  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  <<  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  ==  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '"  >=  name + "' for path: " + asPath (  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  &  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  <  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  ||  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '"  ^  name + "' for path: " + asPath (  )  ) ;^160^161^162^^^156^168^throw new JXPathAbstractFactoryException ( "Factory cannot define variable '" + name + "' for path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createPath [RETURN_TYPE] NodePointer   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  NodePointer  ptr  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Argument_Swapping]^Object collection = createCollection ( index, context ) ;^175^^^^^170^194^Object collection = createCollection ( context, index ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^if  ( !isActual (  )  &&  ( index != 0 && index != WHOLE_COLLECTION )  )  {^176^^^^^170^194^if  ( !isActual (  )  ||  ( index != 0 && index != WHOLE_COLLECTION )  )  {^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^if  ( !isActual (  )  ||  ( index != 0 || index != WHOLE_COLLECTION )  )  {^176^^^^^170^194^if  ( !isActual (  )  ||  ( index != 0 && index != WHOLE_COLLECTION )  )  {^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^if  ( !isActual (  )  ||  ( index == 0 && index != WHOLE_COLLECTION )  )  {^176^^^^^170^194^if  ( !isActual (  )  ||  ( index != 0 && index != WHOLE_COLLECTION )  )  {^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^if  ( !isActual (  )  ||  ( index != 0 && index == WHOLE_COLLECTION )  )  {^176^^^^^170^194^if  ( !isActual (  )  ||  ( index != 0 && index != WHOLE_COLLECTION )  )  {^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Literal]^if  ( !isActual (  )  ||  ( index != index && index != WHOLE_COLLECTION )  )  {^176^^^^^170^194^if  ( !isActual (  )  ||  ( index != 0 && index != WHOLE_COLLECTION )  )  {^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Variable_Misuse]^if  ( !actual )  {^185^^^^^170^194^if  ( !success )  {^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory could not create object path: "  >=  asPath (  )  ) ;^186^187^^^^170^194^throw new JXPathAbstractFactoryException ( "Factory could not create object path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Variable_Misuse]^return valuePointer;^191^^^^^170^194^return cln;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory could not create object path: "  ||  asPath (  )  ) ;^186^187^^^^170^194^throw new JXPathAbstractFactoryException ( "Factory could not create object path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Argument_Swapping]^boolean success = context.createObject ( factory, this,^178^179^180^181^^170^194^boolean success = factory.createObject ( context, this,^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory could not create object path: "  <<  asPath (  )  ) ;^186^187^^^^170^194^throw new JXPathAbstractFactoryException ( "Factory could not create object path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory could not create object path: "  &&  asPath (  )  ) ;^186^187^^^^170^194^throw new JXPathAbstractFactoryException ( "Factory could not create object path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory could not create object path: "  ==  asPath (  )  ) ;^186^187^^^^170^194^throw new JXPathAbstractFactoryException ( "Factory could not create object path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Argument_Swapping]^factory.createObject ( collection, this, context,^179^180^181^182^^170^194^factory.createObject ( context, this, collection,^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cln  ptr  valuePointer  int  index  AbstractFactory  factory  
[BugLab_Argument_Swapping]^Object collection = createCollection ( index, context ) ;^202^^^^^196^207^Object collection = createCollection ( context, index ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index Object value [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  value  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Argument_Swapping]^ValueUtils.setValue ( index, collection, value ) ;^203^^^^^196^207^ValueUtils.setValue ( collection, index, value ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index Object value [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  value  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Argument_Swapping]^ValueUtils.setValue ( collection, value, index ) ;^203^^^^^196^207^ValueUtils.setValue ( collection, index, value ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index Object value [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  value  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Argument_Swapping]^ValueUtils.setValue ( value, index, collection ) ;^203^^^^^196^207^ValueUtils.setValue ( collection, index, value ) ;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index Object value [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  value  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Variable_Misuse]^return valuePointer;^206^^^^^196^207^return cl;^[CLASS] VariablePointer 1  [METHOD] createChild [RETURN_TYPE] NodePointer   JXPathContext context QName name int index Object value [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  value  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^if  ( collection != null )  {^213^^^^^209^235^if  ( collection == null )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '"  ||  name + "' for path: "^214^215^216^217^^209^235^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '" + name + "' for path: "^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '"  <=  name + "' for path: "^214^215^216^217^^209^235^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '" + name + "' for path: "^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '"  &&  name + "' for path: "^214^215^216^217^^209^235^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '" + name + "' for path: "^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '"  !=  name + "' for path: "^214^215^216^217^^209^235^throw new JXPathAbstractFactoryException ( "Factory did not assign a collection to variable '" + name + "' for path: "^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Argument_Swapping]^if  ( WHOLE_COLLECTION == index )  {^221^^^^^209^235^if  ( index == WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^if  ( index != WHOLE_COLLECTION )  {^221^^^^^209^235^if  ( index == WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^else if  ( index <= 0 )  {^224^^^^^209^235^else if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Literal]^else if  ( index < index )  {^224^^^^^209^235^else if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "   instanceof   asPath (  )  ) ;^225^226^^^^209^235^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  <=  asPath (  )  ) ;^225^226^^^^209^235^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  &&  asPath (  )  ) ;^225^226^^^^209^235^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^else if  ( index == 0 )  {^224^^^^^209^235^else if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Literal]^else if  ( index < -1 )  {^224^^^^^209^235^else if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  ||  asPath (  )  ) ;^225^226^^^^209^235^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  ==  asPath (  )  ) ;^225^226^^^^209^235^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  |  asPath (  )  ) ;^225^226^^^^209^235^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^if  ( index > getLength (  )  )  {^229^^^^^209^235^if  ( index >= getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Argument_Swapping]^collection = ValueUtils.expandCollection ( index, collection + 1 ) ;^230^^^^^209^235^collection = ValueUtils.expandCollection ( collection, index + 1 ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^collection = ValueUtils.expandCollection ( collection, index  <=  1 ) ;^230^^^^^209^235^collection = ValueUtils.expandCollection ( collection, index + 1 ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Literal]^collection = ValueUtils.expandCollection ( collection, index  ) ;^230^^^^^209^235^collection = ValueUtils.expandCollection ( collection, index + 1 ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^collection = ValueUtils.expandCollection ( collection, index  ||  1 ) ;^230^^^^^209^235^collection = ValueUtils.expandCollection ( collection, index + 1 ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Argument_Swapping]^variables.declareVariable ( collection.toString (  ) , name ) ;^231^^^^^209^235^variables.declareVariable ( name.toString (  ) , collection ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Operator]^collection = ValueUtils.expandCollection ( collection, index  !=  1 ) ;^230^^^^^209^235^collection = ValueUtils.expandCollection ( collection, index + 1 ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Wrong_Literal]^collection = ValueUtils.expandCollection ( collection, index +  ) ;^230^^^^^209^235^collection = ValueUtils.expandCollection ( collection, index + 1 ) ;^[CLASS] VariablePointer 1  [METHOD] createCollection [RETURN_TYPE] Object   JXPathContext context int index [VARIABLES] Variables  variables  boolean  actual  success  JXPathContext  context  QName  name  Object  collection  NodePointer  cl  cln  ptr  valuePointer  int  index  
[BugLab_Variable_Misuse]^if  ( success )  {^238^^^^^237^255^if  ( actual )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^if  ( WHOLE_COLLECTION == index )  {^239^^^^^237^255^if  ( index == WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index != WHOLE_COLLECTION )  {^239^^^^^237^255^if  ( index == WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^if  ( 1 < 0 )  {^243^^^^^237^255^if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index <= 0 )  {^243^^^^^237^255^if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  ^  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  <=  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^if  ( collection != null && 2 < getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( collection != null || index < getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( collection == null && index < getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( collection != null && index <= getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^collection = ValueUtils.remove ( index, collection ) ;^250^^^^^237^255^collection = ValueUtils.remove ( collection, index ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^variables.declareVariable ( collection.toString (  ) , name ) ;^251^^^^^237^255^variables.declareVariable ( name.toString (  ) , collection ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  >  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "   instanceof   asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  ==  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^if  ( collection != null && null < getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^if  ( index != null && collection < getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  !=  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^collection = ValueUtils.remove ( collection, this ) ;^250^^^^^237^255^collection = ValueUtils.remove ( collection, index ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^if  ( index == null )  {^239^^^^^237^255^if  ( index == WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index >= WHOLE_COLLECTION )  {^239^^^^^237^255^if  ( index == WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  <<  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^if  ( collection != null && 1 < getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( collection != null && index > getLength (  )  )  {^249^^^^^237^255^if  ( collection != null && index < getLength (  )  )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  &  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  ||  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index > 0 )  {^243^^^^^237^255^if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Literal]^if  ( index < 1 )  {^243^^^^^237^255^if  ( index < 0 )  {^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  |  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathInvalidAccessException ( "Index is less than 1: "  <  asPath (  )  ) ;^244^245^^^^237^255^throw new JXPathInvalidAccessException ( "Index is less than 1: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Variables  variables  Object  collection  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^while  ( context != null )  {^260^^^^^257^269^while  ( varCtx != null )  {^[CLASS] VariablePointer 1  [METHOD] findVariables [RETURN_TYPE] void   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  JXPathContext  context  varCtx  QName  name  
[BugLab_Wrong_Operator]^while  ( varCtx == null )  {^260^^^^^257^269^while  ( varCtx != null )  {^[CLASS] VariablePointer 1  [METHOD] findVariables [RETURN_TYPE] void   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  JXPathContext  context  varCtx  QName  name  
[BugLab_Argument_Swapping]^if  ( name.isDeclaredVariable ( variables.toString (  )  )  )  {^262^^^^^257^269^if  ( variables.isDeclaredVariable ( name.toString (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] findVariables [RETURN_TYPE] void   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  JXPathContext  context  varCtx  QName  name  
[BugLab_Wrong_Literal]^actual = false;^263^^^^^257^269^actual = true;^[CLASS] VariablePointer 1  [METHOD] findVariables [RETURN_TYPE] void   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  JXPathContext  context  varCtx  QName  name  
[BugLab_Variable_Misuse]^variables = context.getVariables (  ) ;^261^^^^^257^269^variables = varCtx.getVariables (  ) ;^[CLASS] VariablePointer 1  [METHOD] findVariables [RETURN_TYPE] void   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  JXPathContext  context  varCtx  QName  name  
[BugLab_Variable_Misuse]^varCtx = context.getParentContext (  ) ;^266^^^^^257^269^varCtx = varCtx.getParentContext (  ) ;^[CLASS] VariablePointer 1  [METHOD] findVariables [RETURN_TYPE] void   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  JXPathContext  context  varCtx  QName  name  
[BugLab_Variable_Misuse]^return  ( success ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^272^273^274^^^271^275^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^[CLASS] VariablePointer 1  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^return  ( name ? System.identityHashCode ( variables )  : 0 ) + actual.hashCode (  ) + index;^272^273^274^^^271^275^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^[CLASS] VariablePointer 1  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^return  ( actual ? System.identityHashCode ( index )  : 0 ) + name.hashCode (  ) + variables;^272^273^274^^^271^275^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^[CLASS] VariablePointer 1  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + index.hashCode (  ) + name;^272^273^274^^^271^275^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^[CLASS] VariablePointer 1  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^return  <=  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^272^273^274^^^271^275^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^[CLASS] VariablePointer 1  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^return  |  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^272^273^274^^^271^275^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^[CLASS] VariablePointer 1  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Literal]^return  ( actual ? System.identityHashCode ( variables )  : -1 ) + name.hashCode (  ) + index;^272^273^274^^^271^275^return  ( actual ? System.identityHashCode ( variables )  : 0 ) + name.hashCode (  ) + index;^[CLASS] VariablePointer 1  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Variables  variables  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( object >= this )  {^278^^^^^277^290^if  ( object == this )  {^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Wrong_Literal]^return false;^279^^^^^277^290^return true;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Wrong_Operator]^if  ( ! ( object  <=  VariablePointer )  )  {^282^^^^^277^290^if  ( ! ( object instanceof VariablePointer )  )  {^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Wrong_Literal]^return true;^283^^^^^277^290^return false;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Wrong_Operator]^return variables == other.variables || name.equals ( other.name ) && index == other.index;^287^288^289^^^277^290^return variables == other.variables && name.equals ( other.name ) && index == other.index;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Wrong_Operator]^return variables >= other.variables && name.equals ( other.name ) && index == other.index;^287^288^289^^^277^290^return variables == other.variables && name.equals ( other.name ) && index == other.index;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Wrong_Operator]^return variables <= other.variables && name.equals ( other.name ) && index == other.index;^287^288^289^^^277^290^return variables == other.variables && name.equals ( other.name ) && index == other.index;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Argument_Swapping]^&& other.equals ( name.name ) && index == other.index;^288^289^^^^277^290^&& name.equals ( other.name ) && index == other.index;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Argument_Swapping]^&& other.name.equals ( name ) && index == other.index;^288^289^^^^277^290^&& name.equals ( other.name ) && index == other.index;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Argument_Swapping]^&& name.equals ( other ) && index == other.name.index;^288^289^^^^277^290^&& name.equals ( other.name ) && index == other.index;^[CLASS] VariablePointer 1  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] Variables  variables  Object  object  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  VariablePointer  other  
[BugLab_Variable_Misuse]^else if  ( index != 4 &&  ( getNode (  )  == null || isCollection (  )  )  )  {^301^302^303^^^292^307^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  == null || isCollection (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^else if  ( WHOLE_COLLECTION != index &&  ( getNode (  )  == null || isCollection (  )  )  )  {^301^302^303^^^292^307^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  == null || isCollection (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^else if  ( index != WHOLE_COLLECTION ||  ( getNode (  )  == null || isCollection (  )  )  )  {^301^302^303^^^292^307^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  == null || isCollection (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^else if  ( index == WHOLE_COLLECTION &&  ( getNode (  )  == null || isCollection (  )  )  )  {^301^302^303^^^292^307^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  == null || isCollection (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  == null && isCollection (  )  )  )  {^301^302^303^^^292^307^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  == null || isCollection (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  != null || isCollection (  )  )  )  {^301^302^303^^^292^307^else if  ( index != WHOLE_COLLECTION &&  ( getNode (  )  == null || isCollection (  )  )  )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  >  1 ) .append ( ']' ) ;^304^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Literal]^buffer.append ( '[' ) .append ( index  ) .append ( ']' ) ;^304^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  <=  1 ) .append ( ']' ) ;^304^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  >=  1 ) .append ( ']' ) ;^304^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  ^  1 ) .append ( ']' ) ;^304^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Argument_Swapping]^if  ( WHOLE_COLLECTION != index )  {^297^^^^^292^307^if  ( index != WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index >= WHOLE_COLLECTION )  {^297^^^^^292^307^if  ( index != WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  &  1 ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Literal]^buffer.append ( '[' ) .append ( index  ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index   instanceof   1 ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  !=  1 ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Literal]^buffer.append ( '[' ) .append ( index +  ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  <=  1 ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^if  ( index == WHOLE_COLLECTION )  {^297^^^^^292^307^if  ( index != WHOLE_COLLECTION )  {^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  &&  1 ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  ^  1 ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  ||  1 ) .append ( ']' ) ;^304^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  <<  1 ) .append ( ']' ) ;^298^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Wrong_Operator]^buffer.append ( '[' ) .append ( index  !=  1 ) .append ( ']' ) ;^304^^^^^292^307^buffer.append ( '[' ) .append ( index + 1 ) .append ( ']' ) ;^[CLASS] VariablePointer 1  [METHOD] asPath [RETURN_TYPE] String   [VARIABLES] Variables  variables  StringBuffer  buffer  boolean  actual  success  NodePointer  cl  cln  ptr  valuePointer  QName  name  
[BugLab_Variable_Misuse]^return getValuePointer (  ) .childIterator ( test, success, startWith ) ;^314^^^^^309^315^return getValuePointer (  ) .childIterator ( test, reverse, startWith ) ;^[CLASS] VariablePointer 1  [METHOD] childIterator [RETURN_TYPE] NodeIterator   NodeTest test boolean reverse NodePointer startWith [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  QName  name  NodeTest  test  
[BugLab_Variable_Misuse]^return getValuePointer (  ) .childIterator ( test, reverse, valuePointer ) ;^314^^^^^309^315^return getValuePointer (  ) .childIterator ( test, reverse, startWith ) ;^[CLASS] VariablePointer 1  [METHOD] childIterator [RETURN_TYPE] NodeIterator   NodeTest test boolean reverse NodePointer startWith [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  QName  name  NodeTest  test  
[BugLab_Argument_Swapping]^return getValuePointer (  ) .childIterator ( reverse, test, startWith ) ;^314^^^^^309^315^return getValuePointer (  ) .childIterator ( test, reverse, startWith ) ;^[CLASS] VariablePointer 1  [METHOD] childIterator [RETURN_TYPE] NodeIterator   NodeTest test boolean reverse NodePointer startWith [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  QName  name  NodeTest  test  
[BugLab_Argument_Swapping]^return getValuePointer (  ) .childIterator ( startWith, reverse, test ) ;^314^^^^^309^315^return getValuePointer (  ) .childIterator ( test, reverse, startWith ) ;^[CLASS] VariablePointer 1  [METHOD] childIterator [RETURN_TYPE] NodeIterator   NodeTest test boolean reverse NodePointer startWith [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  QName  name  NodeTest  test  
[BugLab_Argument_Swapping]^return getValuePointer (  ) .childIterator ( test, startWith, reverse ) ;^314^^^^^309^315^return getValuePointer (  ) .childIterator ( test, reverse, startWith ) ;^[CLASS] VariablePointer 1  [METHOD] childIterator [RETURN_TYPE] NodeIterator   NodeTest test boolean reverse NodePointer startWith [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  QName  name  NodeTest  test  
[BugLab_Wrong_Operator]^if  ( factory != null )  {^335^^^^^333^341^if  ( factory == null )  {^[CLASS] VariablePointer 1  [METHOD] getAbstractFactory [RETURN_TYPE] AbstractFactory   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: "  ==  asPath (  )  ) ;^336^337^338^^^333^341^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] getAbstractFactory [RETURN_TYPE] AbstractFactory   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: "  <<  asPath (  )  ) ;^336^337^338^^^333^341^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] getAbstractFactory [RETURN_TYPE] AbstractFactory   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: "  <=  asPath (  )  ) ;^336^337^338^^^333^341^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] getAbstractFactory [RETURN_TYPE] AbstractFactory   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: "  &  asPath (  )  ) ;^336^337^338^^^333^341^throw new JXPathException ( "Factory is not set on the JXPathContext - cannot create path: " + asPath (  )  ) ;^[CLASS] VariablePointer 1  [METHOD] getAbstractFactory [RETURN_TYPE] AbstractFactory   JXPathContext context [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  ptr  startWith  valuePointer  JXPathContext  context  QName  name  AbstractFactory  factory  
[BugLab_Variable_Misuse]^return valuePointer.getIndex (  )  - pointer2.getIndex (  ) ;^347^^^^^343^348^return pointer1.getIndex (  )  - pointer2.getIndex (  ) ;^[CLASS] VariablePointer 1  [METHOD] compareChildNodePointers [RETURN_TYPE] int   NodePointer pointer1 NodePointer pointer2 [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  pointer1  pointer2  ptr  startWith  valuePointer  QName  name  
[BugLab_Variable_Misuse]^return pointer1.getIndex (  )  - valuePointer.getIndex (  ) ;^347^^^^^343^348^return pointer1.getIndex (  )  - pointer2.getIndex (  ) ;^[CLASS] VariablePointer 1  [METHOD] compareChildNodePointers [RETURN_TYPE] int   NodePointer pointer1 NodePointer pointer2 [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  pointer1  pointer2  ptr  startWith  valuePointer  QName  name  
[BugLab_Argument_Swapping]^return pointer2.getIndex (  )  - pointer1.getIndex (  ) ;^347^^^^^343^348^return pointer1.getIndex (  )  - pointer2.getIndex (  ) ;^[CLASS] VariablePointer 1  [METHOD] compareChildNodePointers [RETURN_TYPE] int   NodePointer pointer1 NodePointer pointer2 [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  pointer1  pointer2  ptr  startWith  valuePointer  QName  name  
[BugLab_Wrong_Operator]^return pointer1.getIndex (  )   ||  pointer2.getIndex (  ) ;^347^^^^^343^348^return pointer1.getIndex (  )  - pointer2.getIndex (  ) ;^[CLASS] VariablePointer 1  [METHOD] compareChildNodePointers [RETURN_TYPE] int   NodePointer pointer1 NodePointer pointer2 [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  pointer1  pointer2  ptr  startWith  valuePointer  QName  name  
[BugLab_Variable_Misuse]^return startWith.getIndex (  )  - pointer2.getIndex (  ) ;^347^^^^^343^348^return pointer1.getIndex (  )  - pointer2.getIndex (  ) ;^[CLASS] VariablePointer 1  [METHOD] compareChildNodePointers [RETURN_TYPE] int   NodePointer pointer1 NodePointer pointer2 [VARIABLES] Variables  variables  boolean  actual  reverse  success  NodePointer  cl  cln  pointer1  pointer2  ptr  startWith  valuePointer  QName  name  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  ||  name ) ;^126^127^^^^125^128^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] 1  [METHOD] getImmediateNode [RETURN_TYPE] Object   [VARIABLES] boolean  
[BugLab_Wrong_Operator]^throw new JXPathException ( "Undefined variable: "  ==  name ) ;^126^127^^^^125^128^throw new JXPathException ( "Undefined variable: " + name ) ;^[CLASS] 1  [METHOD] getImmediateNode [RETURN_TYPE] Object   [VARIABLES] boolean  
