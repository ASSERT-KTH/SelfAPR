[BugLab_Wrong_Literal]^return false;^51^^^^^50^52^return true;^[CLASS] ExtensionFunction  [METHOD] computeContextDependent [RETURN_TYPE] boolean   [VARIABLES] QName  functionName  boolean  
[BugLab_Wrong_Operator]^if  ( args == null )  {^59^^^^^54^69^if  ( args != null )  {^[CLASS] ExtensionFunction  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  QName  functionName  Expression[]  args  int  i  
[BugLab_Wrong_Operator]^if  ( i >= 0 )  {^61^^^^^54^69^if  ( i > 0 )  {^[CLASS] ExtensionFunction  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  QName  functionName  Expression[]  args  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= args.length; i++ )  {^60^^^^^54^69^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  QName  functionName  Expression[]  args  int  i  
[BugLab_Wrong_Operator]^if  ( i < 0 )  {^61^^^^^54^69^if  ( i > 0 )  {^[CLASS] ExtensionFunction  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  QName  functionName  Expression[]  args  int  i  
[BugLab_Wrong_Literal]^if  ( i > i )  {^61^^^^^54^69^if  ( i > 0 )  {^[CLASS] ExtensionFunction  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  QName  functionName  Expression[]  args  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < args.length; i++ )  {^60^^^^^54^69^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  QName  functionName  Expression[]  args  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == args.length; i++ )  {^60^^^^^54^69^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  QName  functionName  Expression[]  args  int  i  
[BugLab_Wrong_Operator]^if  ( args == null )  {^77^^^^^75^92^if  ( args != null )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^for  ( args.lengthnt i = 0; i < i; i++ )  {^79^^^^^75^92^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < args; i++ )  {^79^^^^^75^92^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < args.length.length; i++ )  {^79^^^^^75^92^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > args.length; i++ )  {^79^^^^^75^92^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^parameters[i] = convert ( context[i].compute ( args )  ) ;^80^^^^^75^92^parameters[i] = convert ( args[i].compute ( context )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Variable_Misuse]^parameters[i] = convert ( null[i].compute ( context )  ) ;^80^^^^^75^92^parameters[i] = convert ( args[i].compute ( context )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Variable_Misuse]^parameters[i] = convert ( this[i].compute ( context )  ) ;^80^^^^^75^92^parameters[i] = convert ( args[i].compute ( context )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^for  ( argsnt i = 0; i < i.length; i++ )  {^79^^^^^75^92^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= args.length; i++ )  {^79^^^^^75^92^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < args.length; i++ )  {^79^^^^^75^92^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Variable_Misuse]^parameters[i] = convert ( 1[i].compute ( context )  ) ;^80^^^^^75^92^parameters[i] = convert ( args[i].compute ( context )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^Function function = parameters.getRootContext (  ) .getFunction ( functionName, context ) ;^84^85^^^^75^92^Function function = context.getRootContext (  ) .getFunction ( functionName, parameters ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^Function function = functionName.getRootContext (  ) .getFunction ( context, parameters ) ;^84^85^^^^75^92^Function function = context.getRootContext (  ) .getFunction ( functionName, parameters ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^context.getRootContext (  ) .getFunction ( parameters, functionName ) ;^85^^^^^75^92^context.getRootContext (  ) .getFunction ( functionName, parameters ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^if  ( function != null )  {^86^^^^^75^92^if  ( function == null )  {^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^throw new JXPathFunctionNotFoundException ( "No such function: " + parameters + Arrays.asList ( functionName )  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ==  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^throw new JXPathFunctionNotFoundException ( "No such function: "  |  functionName + Arrays.asList ( parameters )  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  <=  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^throw new JXPathFunctionNotFoundException ( "No such function: "  <=  functionName + Arrays.asList ( parameters )  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  |  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  <<  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^throw new JXPathFunctionNotFoundException ( "No such function: "  ||  functionName + Arrays.asList ( parameters )  ) ;^87^88^^^^75^92^throw new JXPathFunctionNotFoundException ( "No such function: " + functionName + Arrays.asList ( parameters )  ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^return parameters.invoke ( context, function ) ;^91^^^^^75^92^return function.invoke ( context, parameters ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Argument_Swapping]^return function.invoke ( parameters, context ) ;^91^^^^^75^92^return function.invoke ( context, parameters ) ;^[CLASS] ExtensionFunction  [METHOD] computeValue [RETURN_TYPE] Object   EvalContext context [VARIABLES] EvalContext  context  Function  function  boolean  QName  functionName  Object[]  parameters  int  i  
[BugLab_Wrong_Operator]^if  ( object  ==  EvalContext )  {^95^^^^^94^99^if  ( object instanceof EvalContext )  {^[CLASS] ExtensionFunction  [METHOD] convert [RETURN_TYPE] Object   Object object [VARIABLES] QName  functionName  Object  object  boolean  
