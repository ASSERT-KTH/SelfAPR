[BugLab_Variable_Misuse]^int len = DIGITS.length;^57^^^^^55^75^int len = data.length;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^int len = j;^57^^^^^55^75^int len = data.length;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Argument_Swapping]^int len = data.length.length;^57^^^^^55^75^int len = data.length;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Argument_Swapping]^int len = data;^57^^^^^55^75^int len = data.length;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^if  (  ( j & 0x01 )  != 0 )  {^59^^^^^55^75^if  (  ( len & 0x01 )  != 0 )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^if  (  ( len & 0x01 )  == 0 )  {^59^^^^^55^75^if  (  ( len & 0x01 )  != 0 )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^if  (  ( len  ^  0x01 )  != 0 )  {^59^^^^^55^75^if  (  ( len & 0x01 )  != 0 )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^if  (  ( len & lenxlen1 )  != len )  {^59^^^^^55^75^if  (  ( len & 0x01 )  != 0 )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^byte[] out = new byte[j >> 1];^63^^^^^55^75^byte[] out = new byte[len >> 1];^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^byte[] out = new byte[len  &  1];^63^^^^^55^75^byte[] out = new byte[len >> 1];^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^byte[] out = new byte[len >> 2];^63^^^^^55^75^byte[] out = new byte[len >> 1];^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^for  ( int i = 0, j = 0; j < j; i++ )  {^66^^^^^55^75^for  ( int i = 0, j = 0; j < len; i++ )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^for  ( lennt i = 0, j = 0; j < len; i++ )  {^66^^^^^55^75^for  ( int i = 0, j = 0; j < len; i++ )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Argument_Swapping]^for  ( int i = 0, len = 0; j < j; i++ )  {^66^^^^^55^75^for  ( int i = 0, j = 0; j < len; i++ )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^for  ( int i = 0, j = 0; j == len; i++ )  {^66^^^^^55^75^for  ( int i = 0, j = 0; j < len; i++ )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^for  ( int i = f, j = f; j < len; i++ )  {^66^^^^^55^75^for  ( int i = 0, j = 0; j < len; i++ )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^for  ( int i = len, j = len; j < len; i++ )  {^66^^^^^55^75^for  ( int i = 0, j = 0; j < len; i++ )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^f = len | toDigit ( data[j], j ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^f = f | toDigit ( DIGITS[j], j ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Argument_Swapping]^f = j | toDigit ( data[j], f ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Argument_Swapping]^f = f | toDigit ( j[j], data ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^f   instanceof   = f | toDigit ( data[j], j ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^out[i] =  ( byte )   ( len & 0xFF ) ;^71^^^^^55^75^out[i] =  ( byte )   ( f & 0xFF ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^out[i] =  ( byte )   ( f  ||  0xFF ) ;^71^^^^^55^75^out[i] =  ( byte )   ( f & 0xFF ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^int f = toDigit ( DIGITS[j], j )  << 4;^67^^^^^55^75^int f = toDigit ( data[j], j )  << 4;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Argument_Swapping]^int f = toDigit ( j[j], data )  << 4;^67^^^^^55^75^int f = toDigit ( data[j], j )  << 4;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^int f = toDigit ( data[j], j )   >=  4;^67^^^^^55^75^int f = toDigit ( data[j], j )  << 4;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^int f = toDigit ( data[j], j )  << f;^67^^^^^55^75^int f = toDigit ( data[j], j )  << 4;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^int f = toDigit ( data[j], len )  << 4;^67^^^^^55^75^int f = toDigit ( data[j], j )  << 4;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^f = f | toDigit ( data[j], len ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Argument_Swapping]^f = data | toDigit ( f[j], j ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^f  >  = f | toDigit ( data[j], j ) ;^69^^^^^55^75^f = f | toDigit ( data[j], j ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^out[i] =  ( byte )   ( f  ==  0xFF ) ;^71^^^^^55^75^out[i] =  ( byte )   ( f & 0xFF ) ;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^for  ( int i = j, j = j; j < len; i++ )  {^66^^^^^55^75^for  ( int i = 0, j = 0; j < len; i++ )  {^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^int f = toDigit ( data[j], j )   <  4;^67^^^^^55^75^int f = toDigit ( data[j], j )  << 4;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^int f = toDigit ( data[j], j )  << len;^67^^^^^55^75^int f = toDigit ( data[j], j )  << 4;^[CLASS] Hex  [METHOD] decodeHex [RETURN_TYPE] byte[]   char[] data [VARIABLES] byte[]  out  boolean  int  f  i  j  len  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^int digit = Character.digit ( ch, index ) ;^86^^^^^85^91^int digit = Character.digit ( ch, 16 ) ;^[CLASS] Hex  [METHOD] toDigit [RETURN_TYPE] int   char ch int index [VARIABLES] char  ch  boolean  int  digit  index  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^int digit = Character.digit ( ch, digit ) ;^86^^^^^85^91^int digit = Character.digit ( ch, 16 ) ;^[CLASS] Hex  [METHOD] toDigit [RETURN_TYPE] int   char ch int index [VARIABLES] char  ch  boolean  int  digit  index  char[]  DIGITS  data  
[BugLab_Wrong_Operator]^if  ( digit != -1 )  {^87^^^^^85^91^if  ( digit == -1 )  {^[CLASS] Hex  [METHOD] toDigit [RETURN_TYPE] int   char ch int index [VARIABLES] char  ch  boolean  int  digit  index  char[]  DIGITS  data  
[BugLab_Wrong_Literal]^if  ( digit == - )  {^87^^^^^85^91^if  ( digit == -1 )  {^[CLASS] Hex  [METHOD] toDigit [RETURN_TYPE] int   char ch int index [VARIABLES] char  ch  boolean  int  digit  index  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^return index;^90^^^^^85^91^return digit;^[CLASS] Hex  [METHOD] toDigit [RETURN_TYPE] int   char ch int index [VARIABLES] char  ch  boolean  int  digit  index  char[]  DIGITS  data  
[BugLab_Variable_Misuse]^int l = j;^104^^^^^102^115^int l = data.length;^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Argument_Swapping]^int l = data.length.length;^104^^^^^102^115^int l = data.length;^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Argument_Swapping]^int l = data;^104^^^^^102^115^int l = data.length;^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Variable_Misuse]^char[] out = new char[j << 1];^106^^^^^102^115^char[] out = new char[l << 1];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^char[] out = new char[l   instanceof   1];^106^^^^^102^115^char[] out = new char[l << 1];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Literal]^char[] out = new char[l << i];^106^^^^^102^115^char[] out = new char[l << 1];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Variable_Misuse]^for  ( lnt i = 0, j = 0; i < l; i++ )  {^109^^^^^102^115^for  ( int i = 0, j = 0; i < l; i++ )  {^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Variable_Misuse]^for  ( int i = 0, j = 0; i < j; i++ )  {^109^^^^^102^115^for  ( int i = 0, j = 0; i < l; i++ )  {^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^for  ( int i = 0, j = 0; i > l; i++ )  {^109^^^^^102^115^for  ( int i = 0, j = 0; i < l; i++ )  {^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Literal]^for  ( int i = , j = ; i < l; i++ )  {^109^^^^^102^115^for  ( int i = 0, j = 0; i < l; i++ )  {^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Literal]^for  ( int i = 1, j = 1; i < l; i++ )  {^109^^^^^102^115^for  ( int i = 0, j = 0; i < l; i++ )  {^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Variable_Misuse]^out[j++] = data[ ( 0xF0 & data[i] )  >>> 4 ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^out[j++] = DIGITS[ ( 0xF0 & data[i] )   >  4 ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^out[j++] = DIGITS[ ( 0xF0  !=  data[i] )  >>> 4 ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Literal]^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> j ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Variable_Misuse]^out[j++] = data[ 0x0F & data[i] ];^111^^^^^102^115^out[j++] = DIGITS[ 0x0F & data[i] ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^out[j++] = DIGITS[ 0x0F  >>  data[i] ];^111^^^^^102^115^out[j++] = DIGITS[ 0x0F & data[i] ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Argument_Swapping]^out[j++] = data[ ( 0xF0 & DIGITS[i] )  >>> 4 ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^out[j++] = DIGITS[ ( 0xF0 & data[i] )   ==  4 ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^out[j++] = DIGITS[ ( 0xF0  ==  data[i] )  >>> 4 ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Literal]^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> l ];^110^^^^^102^115^out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Argument_Swapping]^out[j++] = data[ 0x0F & DIGITS[i] ];^111^^^^^102^115^out[j++] = DIGITS[ 0x0F & data[i] ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^out[j++] = DIGITS[ 0x0F  <<  data[i] ];^111^^^^^102^115^out[j++] = DIGITS[ 0x0F & data[i] ];^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Literal]^for  ( int i = j, j = j; i < l; i++ )  {^109^^^^^102^115^for  ( int i = 0, j = 0; i < l; i++ )  {^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Literal]^for  ( int i = l, j = l; i < l; i++ )  {^109^^^^^102^115^for  ( int i = 0, j = 0; i < l; i++ )  {^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Variable_Misuse]^return data;^114^^^^^102^115^return out;^[CLASS] Hex  [METHOD] encodeHex [RETURN_TYPE] char[]   byte[] data [VARIABLES] byte[]  data  boolean  int  i  j  l  char[]  DIGITS  data  out  
[BugLab_Wrong_Operator]^char[] charArray = object  &&  String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object;^151^^^^^149^156^char[] charArray = object instanceof String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object;^[CLASS] Hex  [METHOD] decode [RETURN_TYPE] Object   Object object [VARIABLES] Object  object  boolean  char[]  DIGITS  charArray  data  out  ClassCastException  e  
[BugLab_Variable_Misuse]^return decodeHex ( out ) ;^152^^^^^149^156^return decodeHex ( charArray ) ;^[CLASS] Hex  [METHOD] decode [RETURN_TYPE] Object   Object object [VARIABLES] Object  object  boolean  char[]  DIGITS  charArray  data  out  ClassCastException  e  
[BugLab_Wrong_Operator]^char[] charArray = object  <=  String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object;^151^^^^^149^156^char[] charArray = object instanceof String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object;^[CLASS] Hex  [METHOD] decode [RETURN_TYPE] Object   Object object [VARIABLES] Object  object  boolean  char[]  DIGITS  charArray  data  out  ClassCastException  e  
[BugLab_Wrong_Operator]^byte[] byteArray = object  ||  String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object;^185^^^^^183^190^byte[] byteArray = object instanceof String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object;^[CLASS] Hex  [METHOD] encode [RETURN_TYPE] Object   Object object [VARIABLES] byte[]  byteArray  Object  object  boolean  char[]  DIGITS  charArray  data  out  ClassCastException  e  
[BugLab_Wrong_Operator]^byte[] byteArray = object  !=  String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object;^185^^^^^183^190^byte[] byteArray = object instanceof String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object;^[CLASS] Hex  [METHOD] encode [RETURN_TYPE] Object   Object object [VARIABLES] byte[]  byteArray  Object  object  boolean  char[]  DIGITS  charArray  data  out  ClassCastException  e  
