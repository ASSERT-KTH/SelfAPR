[buglab_swap_variables]^if  ( Character.isLetter ( i.charAt ( str )  )  )  {^48^^^^^40^56^if  ( Character.isLetter ( str.charAt ( i )  )  )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[buglab_swap_variables]^chars[count++] = i.charAt ( str ) ;^49^^^^^40^56^chars[count++] = str.charAt ( i ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[buglab_swap_variables]^for  ( lennt i = 0; i < i; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[buglab_swap_variables]^if  ( len == count )  {^52^^^^^40^56^if  ( count == len )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[buglab_swap_variables]^return new String (  0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[buglab_swap_variables]^return new String ( chars, 0 ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[buglab_swap_variables]^return new String ( count, 0, chars ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[buglab_swap_variables]^return differenceEncoded ( s2.encode ( s1 ) , encoder.encode ( encoder )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[buglab_swap_variables]^return differenceEncoded ( encoder.encode ( s1 ) .encode ( s2 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[buglab_swap_variables]^return differenceEncoded ( encoder.encode ( s2 ) , encoder.encode ( s1 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[buglab_swap_variables]^return differenceEncoded ( s1.encode ( encoder ) , encoder.encode ( s2 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[buglab_swap_variables]^if  ( es2 == null || es1 == null )  {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[buglab_swap_variables]^int lengthToMatch = Math.min ( es2.length (  ) , es1.length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[buglab_swap_variables]^int lengthToMatch = Math.min ( es1.length (  ) .length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[buglab_swap_variables]^if  ( es2.charAt ( i )  == es1.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[buglab_swap_variables]^if  ( i.charAt ( es1 )  == es2.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[buglab_swap_variables]^for  ( lengthToMatchnt i = 0; i < i; i++ )  {^115^^^^^108^121^for  ( int i = 0; i < lengthToMatch; i++ )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[buglab_swap_variables]^if  ( es1.charAt ( es2 )  == i.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
