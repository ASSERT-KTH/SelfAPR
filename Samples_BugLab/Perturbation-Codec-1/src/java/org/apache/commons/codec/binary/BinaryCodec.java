[buglab_swap_variables]^private static final int[] BITS = { BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_2, BIT_1, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0,  BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1,  BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_3, BIT_2, BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2,  BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_4, BIT_3, BIT_2, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3,  BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_5, BIT_3, BIT_4, BIT_2, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4,  BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_6, BIT_5, BIT_4, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5,  BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_7, BIT_4, BIT_5, BIT_6, BIT_3};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[buglab_swap_variables]^for  ( int jj = 0, ii = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0 = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, ascii.length = jj - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^if  ( bits[jj - ascii] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = ascii.length.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = ascii - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0 = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^if  ( bits[jj - ascii] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int BITS = 0; bits < bits.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = ascii.length.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = ascii - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, l_ascii = jj.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int l_ascii.length = 0, jj = ii - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = raw.length - 1; ii < l_ascii.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0 = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, raw.length = l_ascii.length - 1; ii < jj; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = l_ascii.length.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = l_ascii - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[buglab_swap_variables]^if  ( raw.length == null || raw == 0 )  {^253^^^^^252^272^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = l_ascii.length.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[buglab_swap_variables]^for  ( int jj = 0, ii = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[buglab_swap_variables]^for  ( int raw = 0, jj = l_ascii.length - 1; ii < ii.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[buglab_swap_variables]^for  ( int ii = 0 = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[buglab_swap_variables]^for  ( int ii = 0, l_ascii.length = jj - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[buglab_swap_variables]^if  (  ( BITS[ii] & raw[bits] )  == 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[buglab_swap_variables]^for  ( int ii = 0, jj = l_ascii - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
