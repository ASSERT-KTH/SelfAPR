[BugLab_Wrong_Literal]^private static final char[] EMPTY_CHAR_ARRAY = new char[];^41^^^^^36^46^private static final char[] EMPTY_CHAR_ARRAY = new char[0];^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Wrong_Literal]^private static final int BIT_2 = 0x03;^53^^^^^48^58^private static final int BIT_2 = 0x04;^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Wrong_Literal]^private static final int BIT_3 = 0x09;^56^^^^^51^61^private static final int BIT_3 = 0x08;^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Argument_Swapping]^private static final int[] BITS = {BIT_0, BIT_3, BIT_2, BIT_1, BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Argument_Swapping]^private static final int[] BITS = {BIT_0, BIT_1, BIT_6, BIT_3, BIT_4, BIT_5, BIT_2, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Argument_Swapping]^private static final int[] BITS = {BIT_0, BIT_1, BIT_3, BIT_2, BIT_4, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Argument_Swapping]^private static final int[] BITS = {BIT_0, BIT_1, BIT_4, BIT_3, BIT_2, BIT_5, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Argument_Swapping]^private static final int[] BITS = {BIT_0, BIT_5, BIT_2, BIT_3, BIT_4, BIT_1, BIT_6, BIT_7};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Argument_Swapping]^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_7, BIT_6};^70^^^^^65^75^private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};^[CLASS] BinaryCodec   [VARIABLES] 
[BugLab_Variable_Misuse]^return toAsciiBytes ( EMPTY_BYTE_ARRAY ) ;^81^^^^^80^82^return toAsciiBytes ( raw ) ;^[CLASS] BinaryCodec  [METHOD] encode [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Wrong_Operator]^if  ( ! ( raw  &&  byte[] )  )  {^95^^^^^94^99^if  ( ! ( raw instanceof byte[] )  )  {^[CLASS] BinaryCodec  [METHOD] encode [RETURN_TYPE] Object   Object raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  raw  int[]  BITS  Object  raw  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Wrong_Operator]^if  ( ascii != null )  {^112^^^^^111^125^if  ( ascii == null )  {^[CLASS] BinaryCodec  [METHOD] decode [RETURN_TYPE] Object   Object ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  raw  int[]  BITS  Object  ascii  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Wrong_Operator]^if  ( ascii  <<  byte[] )  {^115^^^^^111^125^if  ( ascii instanceof byte[] )  {^[CLASS] BinaryCodec  [METHOD] decode [RETURN_TYPE] Object   Object ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  raw  int[]  BITS  Object  ascii  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Wrong_Operator]^if  ( ascii  &  char[] )  {^118^^^^^111^125^if  ( ascii instanceof char[] )  {^[CLASS] BinaryCodec  [METHOD] decode [RETURN_TYPE] Object   Object ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  raw  int[]  BITS  Object  ascii  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Wrong_Operator]^if  ( ascii  &&  String )  {^121^^^^^111^125^if  ( ascii instanceof String )  {^[CLASS] BinaryCodec  [METHOD] decode [RETURN_TYPE] Object   Object ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  raw  int[]  BITS  Object  ascii  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Variable_Misuse]^return fromAscii ( raw ) ;^136^^^^^135^137^return fromAscii ( ascii ) ;^[CLASS] BinaryCodec  [METHOD] decode [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Wrong_Operator]^if  ( ascii != null )  {^148^^^^^147^152^if  ( ascii == null )  {^[CLASS] BinaryCodec  [METHOD] toByteArray [RETURN_TYPE] byte[]   String ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  raw  int[]  BITS  String  ascii  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Variable_Misuse]^return raw;^149^^^^^147^152^return EMPTY_BYTE_ARRAY;^[CLASS] BinaryCodec  [METHOD] toByteArray [RETURN_TYPE] byte[]   String ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  raw  int[]  BITS  String  ascii  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  char[]  EMPTY_CHAR_ARRAY  
[BugLab_Variable_Misuse]^if  ( EMPTY_CHAR_ARRAY == null || ascii.length == 0 )  {^167^^^^^166^184^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii == null || BIT_5 == 0 )  {^167^^^^^166^184^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^if  ( ascii.length == null || ascii == 0 )  {^167^^^^^166^184^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii == null && ascii.length == 0 )  {^167^^^^^166^184^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii != null || ascii.length == 0 )  {^167^^^^^166^184^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii == null || ascii.length != 0 )  {^167^^^^^166^184^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^if  ( ascii == null || ascii.length == BIT_0 )  {^167^^^^^166^184^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^return raw;^168^^^^^166^184^return EMPTY_BYTE_ARRAY;^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^byte[] l_raw = new byte[jj >> 3];^171^^^^^166^184^byte[] l_raw = new byte[ascii.length >> 3];^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^byte[] l_raw = new byte[ascii.length  !=  3];^171^^^^^166^184^byte[] l_raw = new byte[ascii.length >> 3];^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^byte[] l_raw = new byte[ascii.length >> BIT_0];^171^^^^^166^184^byte[] l_raw = new byte[ascii.length >> 3];^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( EMPTY_CHAR_ARRAY[jj - bits] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[bits - bits] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[jj - BIT_5] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj - bits] <= '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj  >=  bits] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = EMPTY_CHAR_ARRAY.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int BIT_6 = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, BIT_6 = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = BIT_6 - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ascii.length - 1; ii < BIT_7; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ascii.bits - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = l_raw.length - 1; ii < ascii.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ascii.length = 0, jj = ii - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, l_raw = ascii.length - 1; ii < jj.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, ascii.length = jj - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length  |  1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length - 1; ii <= l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length   instanceof   1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj += 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = -1, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = ascii.length ; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= BIT_1 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = BIT_7, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[BIT_5 - bits] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj - bits] != '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int BIT_7 = 0; bits < BITS.length; ++bits )  {^177^^^^^166^184^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int bits = 0; bits == BITS.length; ++bits )  {^177^^^^^166^184^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = 1; bits < BITS.length; ++bits )  {^177^^^^^166^184^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj  >  bits] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_0; bits < BITS.length; ++bits )  {^177^^^^^166^184^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int bits = 0; bits > BITS.length; ++bits )  {^177^^^^^166^184^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = jj; bits < BITS.length; ++bits )  {^177^^^^^166^184^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[BIT_6 - bits] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj  ||  bits] == '1' )  {^178^^^^^166^184^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= BIT_6 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = BIT_1, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = ascii.length.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = ascii - 1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length  <=  1; ii < l_raw.length; ii++, jj -= 8 )  {^176^^^^^166^184^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_5; bits < BITS.length; ++bits )  {^177^^^^^166^184^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^return raw;^183^^^^^166^184^return l_raw;^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   char[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( raw == null || ascii.length == 0 )  {^194^^^^^193^211^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii == null || BIT_6 == 0 )  {^194^^^^^193^211^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii == null && ascii.length == 0 )  {^194^^^^^193^211^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii != null || ascii.length == 0 )  {^194^^^^^193^211^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii == null || ascii.length != 0 )  {^194^^^^^193^211^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^if  ( ascii == null || ascii.length == 1 )  {^194^^^^^193^211^if  ( ascii == null || ascii.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^return raw;^195^^^^^193^211^return EMPTY_BYTE_ARRAY;^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^byte[] l_raw = new byte[ii >> 3];^198^^^^^193^211^byte[] l_raw = new byte[ascii.length >> 3];^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^byte[] l_raw = new byte[ascii.length  >=  3];^198^^^^^193^211^byte[] l_raw = new byte[ascii.length >> 3];^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^byte[] l_raw = new byte[ascii.length >> BIT_2];^198^^^^^193^211^byte[] l_raw = new byte[ascii.length >> 3];^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( raw[jj - bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[BIT_6 - bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[jj - BIT_5] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj - bits] >= '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj  &  bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = raw.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int jj = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, BIT_6 = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ascii.length - 1; ii < jj; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ascii.BIT_5 - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = l_raw.length.length - 1; ii < ascii; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = l_raw.length - 1; ii < ascii.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, l_raw.length = ascii.length - 1; ii < jj; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length  |  1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length - 1; ii <= l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length  <<  1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj += 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = bits, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = ascii.length - BIT_6; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = BIT_5, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[bits - bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[jj - BIT_7] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj - bits] != '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj  !=  bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int BIT_6 = 0; bits < BITS.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int bits = 0; bits <= BITS.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_7; bits < BITS.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj  <=  bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = -1; bits < BITS.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int jj = 0; bits < BITS.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int BITS = 0; bits < bits.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_5; bits < BITS.length; ++bits )  {^204^^^^^193^211^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[BIT_7 - bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( ascii[jj - BIT_6] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( ascii[jj  >>  bits] == '1' )  {^205^^^^^193^211^if  ( ascii[jj - bits] == '1' )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj = 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 1, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = BIT_5 - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = ascii.length.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = ascii - 1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = ascii.length  !=  1; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = ascii.length ; ii < l_raw.length; ii++, jj -= 8 )  {^203^^^^^193^211^for  ( int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^return raw;^210^^^^^193^211^return l_raw;^[CLASS] BinaryCodec  [METHOD] fromAscii [RETURN_TYPE] byte[]   byte[] ascii [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( l_raw == null || raw.length == 0 )  {^223^^^^^222^242^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( raw == null || ii == 0 )  {^223^^^^^222^242^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( raw == null && raw.length == 0 )  {^223^^^^^222^242^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( raw != null || raw.length == 0 )  {^223^^^^^222^242^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  ( raw == null || raw.length != 0 )  {^223^^^^^222^242^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^if  ( raw == null || raw.length == BIT_7 )  {^223^^^^^222^242^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^return raw;^224^^^^^222^242^return EMPTY_BYTE_ARRAY;^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^return l_raw;^224^^^^^222^242^return EMPTY_BYTE_ARRAY;^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^byte[] l_ascii = new byte[raw.length  ||  3];^227^^^^^222^242^byte[] l_ascii = new byte[raw.length << 3];^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^byte[] l_ascii = new byte[raw.length << ii];^227^^^^^222^242^byte[] l_ascii = new byte[raw.length << 3];^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  (  ( l_raw[ii] & BITS[bits] )  == 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii] & BITS[bits] )  != 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  ^  BITS[bits] )  == 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[ii - bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_6] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  &&  bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[BIT_6 - bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_7] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  <<  bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = l_raw.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int jj = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, BIT_6 = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = BIT_7 - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < BIT_6; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = l_ascii.jj - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = raw.length - 1; ii < l_ascii.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int jj = 0, ii = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int raw = 0, jj = l_ascii.length - 1; ii < ii.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, l_ascii.length = jj - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, raw.length = l_ascii.length - 1; ii < jj; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length  &&  1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length - 1; ii <= raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length  |  1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length  >  1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj = 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = l_ascii.length - BIT_3; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= BIT_5 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = , jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = BIT_5, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii] & BITS[bits] )  <= 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  >=  BITS[bits] )  == 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^if  (  ( raw[ii] & BITS[bits] )  == BIT_1 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  &  bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_6] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int BITS = 0; bits < bits.length; ++bits )  {^233^^^^^222^242^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^for  ( int bits = 0; bits <= BITS.length; ++bits )  {^233^^^^^222^242^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = -1; bits < BITS.length; ++bits )  {^233^^^^^222^242^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_1; bits < BITS.length; ++bits )  {^233^^^^^222^242^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^if  (  ( BITS[ii] & raw[bits] )  == 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  !=  BITS[bits] )  == 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_7] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  ^  bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[bits - bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_5] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  |  bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[BIT_5 - bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  >>  bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - jj] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  >>  bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[ii - bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[bits - bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_7; bits < BITS.length; ++bits )  {^233^^^^^222^242^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  <<  BITS[bits] )  == 0 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^if  (  ( raw[ii] & BITS[bits] )  == BIT_4 )  {^234^^^^^222^242^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[BIT_5 - bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  <<  bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  <=  bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - ii] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  >=  bits] = '0';^235^^^^^222^242^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_5] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  |  bits] = '1';^237^^^^^222^242^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = BIT_0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ii - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = l_ascii.length.length - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = l_ascii - 1; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = l_ascii.length - BIT_5; ii < raw.length; ii++, jj -= 8 )  {^232^^^^^222^242^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^return raw;^241^^^^^222^242^return l_ascii;^[CLASS] BinaryCodec  [METHOD] toAsciiBytes [RETURN_TYPE] byte[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  
[BugLab_Variable_Misuse]^if  ( l_raw == null || raw.length == 0 )  {^253^^^^^252^272^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  ( raw == null && raw.length == 0 )  {^253^^^^^252^272^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  ( raw != null || raw.length == 0 )  {^253^^^^^252^272^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  ( raw == null || raw.length != 0 )  {^253^^^^^252^272^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^if  ( raw == null || raw.length == BIT_2 )  {^253^^^^^252^272^if  ( raw == null || raw.length == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^return l_ascii;^254^^^^^252^272^return EMPTY_CHAR_ARRAY;^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^char[] l_ascii = new char[BIT_6 << 3];^257^^^^^252^272^char[] l_ascii = new char[raw.length << 3];^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^char[] l_ascii = new char[raw.length  >>  3];^257^^^^^252^272^char[] l_ascii = new char[raw.length << 3];^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^char[] l_ascii = new char[raw.length << ];^257^^^^^252^272^char[] l_ascii = new char[raw.length << 3];^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^if  (  ( l_raw[ii] & BITS[bits] )  == 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Argument_Swapping]^if  (  ( BITS[ii] & raw[bits] )  == 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii] & BITS[bits] )  >= 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  <=  BITS[bits] )  == 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[BIT_5 - bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_5] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  <  bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[ii - bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_6] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  >>  bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int bits = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < l_raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, BIT_6 = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = BIT_6 - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < BIT_5; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int ii = 0, jj = l_ascii.jj - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = raw.length - 1; ii < l_ascii.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Argument_Swapping]^for  ( int raw.length = 0, jj = l_ascii.length - 1; ii < ii; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length   instanceof   1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length - 1; ii <= raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length  |  1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length  <<  1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj = 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int ii = BIT_6, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = l_ascii.length - BIT_7; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int ii = ii, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  <  BITS[bits] )  == 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^if  (  ( raw[ii] & BITS[bits] )  == -1 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[ii - bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - ii] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  >  bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[BIT_6 - bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_5] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  &  bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int BIT_5 = 0; bits < BITS.length; ++bits )  {^263^^^^^252^272^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^for  ( int bits = 0; bits <= BITS.length; ++bits )  {^263^^^^^252^272^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_2; bits < BITS.length; ++bits )  {^263^^^^^252^272^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii] & BITS[bits] )  != 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  >  BITS[bits] )  == 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^if  (  ( raw[ii] & BITS[bits] )  == bits )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_6] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  >=  bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[jj - BIT_7] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  ^  bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  &  bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj   instanceof   bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  <=  bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_6; bits < BITS.length; ++bits )  {^263^^^^^252^272^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^for  ( int BIT_6 = 0; bits < BITS.length; ++bits )  {^263^^^^^252^272^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int bits = BIT_5; bits < BITS.length; ++bits )  {^263^^^^^252^272^for  ( int bits = 0; bits < BITS.length; ++bits )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^if  (  ( raw[ii]  >=  BITS[bits] )  == 0 )  {^264^^^^^252^272^if  (  ( raw[ii] & BITS[bits] )  == 0 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  !=  bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^l_ascii[BIT_5 - bits] = '0';^265^^^^^252^272^l_ascii[jj - bits] = '0';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^l_ascii[jj  >=  bits] = '1';^267^^^^^252^272^l_ascii[jj - bits] = '1';^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Operator]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj += 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 9 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = l_ascii.length.length - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Argument_Swapping]^for  ( int ii = 0, jj = l_ascii - 1; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Wrong_Literal]^for  ( int ii = 0, jj = l_ascii.length ; ii < raw.length; ii++, jj -= 8 )  {^262^^^^^252^272^for  ( int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8 )  {^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^return ascii;^271^^^^^252^272^return l_ascii;^[CLASS] BinaryCodec  [METHOD] toAsciiChars [RETURN_TYPE] char[]   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
[BugLab_Variable_Misuse]^return new String ( toAsciiChars ( l_raw )  ) ;^283^^^^^282^284^return new String ( toAsciiChars ( raw )  ) ;^[CLASS] BinaryCodec  [METHOD] toAsciiString [RETURN_TYPE] String   byte[] raw [VARIABLES] byte[]  EMPTY_BYTE_ARRAY  ascii  l_ascii  l_raw  raw  int[]  BITS  boolean  int  BIT_0  BIT_1  BIT_2  BIT_3  BIT_4  BIT_5  BIT_6  BIT_7  bits  ii  jj  char[]  EMPTY_CHAR_ARRAY  ascii  l_ascii  
