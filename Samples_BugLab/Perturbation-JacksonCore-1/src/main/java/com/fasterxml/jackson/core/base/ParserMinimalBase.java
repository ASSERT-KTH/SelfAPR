[BugLab_Variable_Misuse]^super ( INT_RCURLY ) ;^80^^^^^79^81^super ( features ) ;^[CLASS] ParserMinimalBase  [METHOD] <init> [RETURN_TYPE] ParserMinimalBase(int)   int features [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Variable_Misuse]^return _lastClearedToken;^112^^^^^111^113^return _currToken;^[CLASS] ParserMinimalBase  [METHOD] getCurrentToken [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Variable_Misuse]^return _lastClearedToken != null;^117^^^^^116^118^return _currToken != null;^[CLASS] ParserMinimalBase  [METHOD] hasCurrentToken [RETURN_TYPE] boolean   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Wrong_Operator]^return _currToken == null;^117^^^^^116^118^return _currToken != null;^[CLASS] ParserMinimalBase  [METHOD] hasCurrentToken [RETURN_TYPE] boolean   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Variable_Misuse]^if  ( _lastClearedToken == JsonToken.FIELD_NAME )  {^129^^^^^121^133^if  ( t == JsonToken.FIELD_NAME )  {^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Argument_Swapping]^if  ( JsonToken.FIELD_NAME == t )  {^129^^^^^121^133^if  ( t == JsonToken.FIELD_NAME )  {^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Wrong_Operator]^if  ( t != JsonToken.FIELD_NAME )  {^129^^^^^121^133^if  ( t == JsonToken.FIELD_NAME )  {^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Variable_Misuse]^return _lastClearedToken;^132^^^^^121^133^return t;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[BugLab_Variable_Misuse]^if  ( t != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Argument_Swapping]^if  ( JsonToken.START_ARRAY != JsonToken.START_OBJECT && _currToken != _currToken )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Argument_Swapping]^if  ( _currToken != JsonToken.START_ARRAY && _currToken != JsonToken.START_OBJECT )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Operator]^if  ( _currToken != JsonToken.START_OBJECT || _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Operator]^if  ( _currToken == JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Operator]^if  ( _currToken != JsonToken.START_OBJECT && _currToken == JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Variable_Misuse]^while  ( _lastClearedTokenrue )  {^148^^^^^133^163^while  ( true )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Literal]^while  ( false )  {^148^^^^^133^163^while  ( true )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Variable_Misuse]^if  ( _lastClearedToken == null )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Operator]^if  ( t != null )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Operator]^if  ( --open != 0 )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Operator]^if  ( --open >= 0 )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Literal]^if  ( --open ==  )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Variable_Misuse]^if  ( t != null )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Wrong_Operator]^if  ( _currToken == null )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Variable_Misuse]^_lastClearedToken = t;^207^^^^^205^210^_lastClearedToken = _currToken;^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Variable_Misuse]^return t;^214^^^^^213^215^return _lastClearedToken;^[CLASS] ParserMinimalBase  [METHOD] getLastClearedToken [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[BugLab_Variable_Misuse]^if  ( t != null )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Operator]^if  ( _currToken == null )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Operator]^if  ( value  >>  Boolean )  {^273^^^^^260^289^if  ( value instanceof Boolean )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Literal]^if  ( "false".equals ( str )  )  {^279^^^^^260^289^if  ( "true".equals ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Literal]^return false;^280^^^^^260^289^return true;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Literal]^return true;^283^^^^^260^289^return false;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Operator]^return getIntValue (  )  >= 0;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Literal]^return false;^266^^^^^260^289^return true;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Literal]^return true;^269^^^^^260^289^return false;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Operator]^if  ( value  >=  Boolean )  {^273^^^^^260^289^if  ( value instanceof Boolean )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Operator]^return getIntValue (  )  == 0;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Wrong_Literal]^return getIntValue (  )  != INT_r;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[BugLab_Variable_Misuse]^if  ( t != null )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( _currToken == null )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return INT_BACKSLASH;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( value  |  Number )  {^314^^^^^294^321^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return 2;^301^^^^^294^321^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return open;^304^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return INT_LBRACKET;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Variable_Misuse]^return NumberInput.parseAsInt ( str, INT_TAB ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Argument_Swapping]^return NumberInput.parseAsInt ( defaultValue, str ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return 1;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( value  >>  Number )  {^314^^^^^294^321^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return 0;^301^^^^^294^321^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return INT_COMMA;^304^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Literal]^return INT_t;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Variable_Misuse]^return NumberInput.parseAsInt ( str, INT_SLASH ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Variable_Misuse]^return NumberInput.parseAsInt ( str, INT_b ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Variable_Misuse]^return INT_SPACE;^320^^^^^294^321^return defaultValue;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Variable_Misuse]^if  ( t != null )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Wrong_Operator]^if  ( _currToken == null )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Wrong_Operator]^if  ( value  !=  Number )  {^345^^^^^325^353^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Wrong_Literal]^return INT_BACKSLASH;^332^^^^^325^353^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Wrong_Literal]^return open;^335^^^^^325^353^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Argument_Swapping]^return NumberInput.parseAsLong ( defaultValue, str ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Wrong_Operator]^if  ( value  <<  Number )  {^345^^^^^325^353^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Wrong_Literal]^return INT_QUOTE;^332^^^^^325^353^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[BugLab_Variable_Misuse]^if  ( t != null )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Operator]^if  ( _currToken == null )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Literal]^return INT_COMMA;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Operator]^if  ( value  >  Number )  {^378^^^^^358^385^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Literal]^return 2;^365^^^^^358^385^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Literal]^return INT_CR;^368^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Argument_Swapping]^return NumberInput.parseAsDouble ( defaultValue, str ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Literal]^return 1;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Operator]^if  ( value  <=  Number )  {^378^^^^^358^385^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Literal]^return INT_COMMA;^365^^^^^358^385^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Wrong_Literal]^return INT_r;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[BugLab_Variable_Misuse]^if  ( t != JsonToken.VALUE_STRING )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( _currToken >= JsonToken.VALUE_STRING )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Variable_Misuse]^if  ( t == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( _currToken == null && _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( _currToken != null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( _currToken == null || _currToken != JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Argument_Swapping]^if  ( JsonToken.VALUE_NULL == null || _currToken == _currToken || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[BugLab_Argument_Swapping]^b64variant.decode ( builder, str ) ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[BugLab_Wrong_Operator]^if  ( ch > INT_SPACE )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Argument_Swapping]^} else if  ( ch.usesPaddingChar ( b64variant )  )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^} else if  ( !Character.isDefined ( ch )  && Character.isISOControl ( ch )  )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  ||  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  <=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character  &&  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  >>  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  >=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  |  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Variable_Misuse]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( INT_n+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  &&  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  ^  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  ||  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  !=  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+INT_TAB ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  &  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character  >  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Variable_Misuse]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( INT_SLASH+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  <  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  >=  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  <<  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  >  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  >>  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+features ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character  >>  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Variable_Misuse]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( INT_SPACE+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Argument_Swapping]^base = "Illegal white space bindexaracter  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( ch+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal white space character  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal white space character  >=  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal white space character  <=  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal white space character   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  <<  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  ==  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character  <<  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  ^  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Variable_Misuse]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( INT_TAB+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character   instanceof   ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  &  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Unexpected padding character  ==  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  &&  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal white space character  ||  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal white space character  |  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal white space character  &  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Literal]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+INT_QUOTE ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Variable_Misuse]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( INT_b+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+2 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character  ^  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = "Illegal character '"+ch+"'  >  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( msg == null )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Argument_Swapping]^base = msg + ": " + base;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = base  >  ": " + msg;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Wrong_Operator]^base = base  ^  ": " + msg;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Variable_Misuse]^throw _constructError ( msg ) ;^443^^^^^426^444^throw _constructError ( base ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[BugLab_Variable_Misuse]^String msg = "Unexpected INT_TABaracter  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[BugLab_Wrong_Operator]^String msg = "Unexpected character  &&  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[BugLab_Wrong_Operator]^String msg = "Unexpected character  >>  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[BugLab_Variable_Misuse]^String msg = "Unexpected INT_SPACEaracter  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[BugLab_Variable_Misuse]^if  ( msg != null )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[BugLab_Wrong_Operator]^if  ( comment == null )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[BugLab_Variable_Misuse]^_reportError ( comment ) ;^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[BugLab_Variable_Misuse]^_reportInvalidEOF ( " in "+t ) ;^491^^^^^488^492^_reportInvalidEOF ( " in "+_currToken ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[BugLab_Wrong_Operator]^String msg = "Illegal character  &&  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^String msg = "Illegal character   instanceof   ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Variable_Misuse]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || INT_f >= INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Variable_Misuse]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_TAB )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  && i >= INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i == INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^String msg = "Illegal unquoted character  ^  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^String msg = "Illegal unquoted character  ==  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^String msg = "Illegal unquoted character   instanceof   ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Variable_Misuse]^_reportError ( ctxtDesc ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^String msg = "Illegal unquoted character  >  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^if  ( ch == '\'' || isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^if  ( ch != '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  >=  ) ;^539^^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Variable_Misuse]^if  ( INT_t > 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Argument_Swapping]^if  ( c > 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Argument_Swapping]^if  ( chh > 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^if  ( ch >= 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Literal]^if  ( ch > INT_COLON )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Variable_Misuse]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( i ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Argument_Swapping]^return "'"+c+"'  ( chode "+ch+" / 0x"+Integer.toHexString ( c ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  >=  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  &  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  ^  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  ==  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'   instanceof   ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Variable_Misuse]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( INT_SPACE ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  ||  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  >  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  &&  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  &  ( code "+ch+" ) ";^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  <=  ( code "+ch+" ) ";^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Wrong_Operator]^return "'"+c+"'  >  ( code "+ch+" ) ";^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Argument_Swapping]^throw _constructError ( t, msg ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[BugLab_Argument_Swapping]^return new JsonParseException ( t, getCurrentLocation (  ) , msg ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
