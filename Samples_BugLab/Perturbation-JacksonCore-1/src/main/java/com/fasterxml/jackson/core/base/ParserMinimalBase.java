[buglab_swap_variables]^if  ( JsonToken.FIELD_NAME == t )  {^129^^^^^121^133^if  ( t == JsonToken.FIELD_NAME )  {^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[buglab_swap_variables]^if  ( JsonToken.START_ARRAY != JsonToken.START_OBJECT && _currToken != _currToken )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[buglab_swap_variables]^if  ( _currToken != JsonToken.START_ARRAY && _currToken != JsonToken.START_OBJECT )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[buglab_swap_variables]^return NumberInput.parseAsInt ( defaultValue, str ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[buglab_swap_variables]^return NumberInput.parseAsInt (  defaultValue ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[buglab_swap_variables]^return NumberInput.parseAsInt ( str ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[buglab_swap_variables]^return NumberInput.parseAsLong ( defaultValue, str ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[buglab_swap_variables]^return NumberInput.parseAsLong (  defaultValue ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[buglab_swap_variables]^return NumberInput.parseAsLong ( str ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[buglab_swap_variables]^return NumberInput.parseAsDouble ( defaultValue, str ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[buglab_swap_variables]^return NumberInput.parseAsDouble (  defaultValue ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[buglab_swap_variables]^return NumberInput.parseAsDouble ( str ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[buglab_swap_variables]^if  ( JsonToken.VALUE_NULL == null || _currToken == _currToken || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[buglab_swap_variables]^b64variant.decode ( builder, str ) ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[buglab_swap_variables]^b64variant.decode (  builder ) ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[buglab_swap_variables]^b64variant.decode ( str ) ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[buglab_swap_variables]^if  ( INT_SPACE <= ch )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[buglab_swap_variables]^} else if  ( ch.usesPaddingChar ( b64variant )  )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[buglab_swap_variables]^base = "Illegal white space bindexaracter  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( ch+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[buglab_swap_variables]^base = msg + ": " + base;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[buglab_swap_variables]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || INT_SPACE >= i )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^if  ( c > 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^if  ( chh > 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^return "'"+c+"'  ( chode "+ch+" / 0x"+Integer.toHexString ( c ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^throw _constructError ( t, msg ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^throw _constructError (  t ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^throw _constructError ( msg ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^return new JsonParseException ( t, getCurrentLocation (  ) , msg ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^return new JsonParseException (  getCurrentLocation (  ) , t ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[buglab_swap_variables]^return new JsonParseException ( msg, getCurrentLocation (  )  ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
