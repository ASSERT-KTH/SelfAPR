[BugLab_Variable_Misuse]^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.null ) .substring ( 1 ) ;^18^^^^^13^23^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^[CLASS] NumberInput   [VARIABLES] 
[BugLab_Wrong_Literal]^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring (  ) ;^18^^^^^13^23^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^[CLASS] NumberInput   [VARIABLES] 
[BugLab_Wrong_Operator]^int num = digitChars[offset]  |  '0';^30^^^^^29^58^int num = digitChars[offset] - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^len += num;^31^^^^^29^58^len += offset;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset > len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++num < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset > len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset == len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &&  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <<  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if   instanceof   ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &&  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++len < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset == len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset > len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  |  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < num )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++num < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  |  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &&  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++num < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if   instanceof   ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset > len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  |  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < num )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  !=  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <<  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++num < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset == len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < num )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset > len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++num < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset > len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++len < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < num )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &&  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <<  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++len < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &&  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset <= len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if   instanceof   ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  !=  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++len < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <<  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  |  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset == len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &&  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >>  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < num )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++num < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >>  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < offset )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset > len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <<  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  !=  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset == len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >>  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num *  )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num *  )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  |  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < num )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++num < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  !=  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >>  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++len < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ||  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >=  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset == len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if   instanceof   ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <<  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  &&  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++offset < num )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  |  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if   instanceof   ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ==  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( ++offset == len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if   instanceof   ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  !=  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( ++len < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >>  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  !=  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ^  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >>  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  >  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  <=  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if   instanceof   ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^return offset;^57^^^^^29^58^return num;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^char c = NASTY_SMALL_DOUBLE.charAt ( 0 ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^char c = str.charAt (  ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^int length = NASTY_SMALL_DOUBLE.length (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^boolean negative =  ( c != '-' ) ;^72^^^^^57^87^boolean negative =  ( c == '-' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^int offset = length;^73^^^^^58^88^int offset = 1;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( offset > 9 )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( length >= 9 )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^83^^^^^76^85^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( offset == 1 || length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( length == 1 && length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( length > 1 || length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( length == 1 || length < 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^if  ( length == offset || length > offset0 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^if  ( length == 1 || length > 11 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^78^^^^^63^93^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^c = NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^80^^^^^65^95^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( length != 1 || length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( length == 1 || length == 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^if  ( length == num || length > num0 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^if  ( length == 1 || length > 9 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( offset > 9 )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( length >= 9 )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^if  ( length > num )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^83^^^^^68^98^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' && c < '0' )  {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c < '9' || c < '0' )  {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' || c > '0' )  {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^87^^^^^72^102^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^int num = c  <  '0';^89^^^^^74^104^int num = c - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( num < length )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( offset < offset )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Argument_Swapping]^if  ( length < offset )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset > length )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset <= length )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset == length )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' && c < '0' )  {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c >= '9' || c < '0' )  {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' || c <= '0' )  {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^93^^^^^78^108^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( length < length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( offset < offset )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Argument_Swapping]^if  ( length < offset )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset <= length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset == length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' && c < '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c >= '9' || c < '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' || c <= '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^99^^^^^84^114^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( length < length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( offset < offset )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset <= length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' && c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c >= '9' || c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' || c <= '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^107^^^^^92^122^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^c = NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^105^^^^^90^120^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Argument_Swapping]^num =  ( c * 10 )  +  ( num - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =   instanceof   ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  >>  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^c = NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Argument_Swapping]^num =  ( c * 10 )  +  ( num - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  <=  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  |  '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  &  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  ||  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^if  ( num < length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Argument_Swapping]^if  ( length < offset )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  >=  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c == '9' || c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^c = NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^91^^^^^76^106^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Argument_Swapping]^num =  ( c * 10 )  +  ( num - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  ==  '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * length )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^num =  ( offset * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ^  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  >>  '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * offset )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ==  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  <  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset > length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' || c > '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( offset > length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' || c > '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  >=  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num / 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  <  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num - 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  <=  '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * 9 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  |  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c < '9' || c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  &&  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  ^  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^if  ( c > '9' || c == '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  &&  ( num * 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num + 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  &  '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * 11 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ==  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  !=  '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Literal]^num =  ( num * num )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Wrong_Operator]^num =  ( num * 10 )  +  ( c  &&  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^return negative ? -num : offset;^114^^^^^99^129^return negative ? -num : num;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Argument_Swapping]^return num ? -num : negative;^114^^^^^99^129^return negative ? -num : num;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[BugLab_Variable_Misuse]^int offset1 = len-9;^120^^^^^117^123^int len1 = len-9;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^int len1 = len-len1;^120^^^^^117^123^int len1 = len-9;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^long val = parseInt ( digitChars, len1, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^long val = parseInt ( len1, offset, digitChars )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^long val = parseInt ( digitChars, len1, offset )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^long val = parseInt ( digitChars, offset, L_BILLION )  * len1;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^long / val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^long val = parseInt ( digitChars, len, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^long val = parseInt ( digitChars, offset, offset )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^long val = parseInt ( offset, digitChars, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^return L_BILLION +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^return val +  ( long )  parseInt ( digitChars, len+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^return offset +  ( long )  parseInt ( digitChars, val+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^return val +  <  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^return val +  &  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^return val +  ( long )  parseInt ( digitChars, offset+len1, offset ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^return val +  ( long )  parseInt ( offset, digitChars+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^return val +  <=  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^int length = NASTY_SMALL_DOUBLE.length (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[BugLab_Wrong_Operator]^if  ( length < 9 )  {^131^^^^^125^136^if  ( length <= 9 )  {^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[BugLab_Variable_Misuse]^return  ( long )  parseInt ( NASTY_SMALL_DOUBLE ) ;^132^^^^^125^136^return  ( long )  parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[BugLab_Variable_Misuse]^return Long.parseLong ( NASTY_SMALL_DOUBLE ) ;^135^^^^^125^136^return Long.parseLong ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[BugLab_Variable_Misuse]^String cmpStr = negative ? str : MAX_LONG_STR;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : str;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^String cmpStr = MAX_LONG_STR ? MIN_LONG_STR_NO_SIGN : negative;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^String cmpStr = negative ? MAX_LONG_STR : MIN_LONG_STR_NO_SIGN;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^int cmpLen = str.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^if  ( cmpLen < len )  return true;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( len <= cmpLen )  return true;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^if  ( len < cmpLen )  return false;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( offset > cmpLen )  return false;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( len > offset )  return false;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^if  ( cmpLen > len )  return false;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( len == cmpLen )  return false;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^if  ( len > cmpLen )  return true;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( len != 0 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^if  ( diff == 0 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^if  ( diff != i )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^return  ( offset < 0 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^return  ( diff <= 0 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^for  ( offsetnt i = 0; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^for  ( cmpLennt i = 0; i < i; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^for  >=  ( int i = 0; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^for  ( int i = i; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^if  ( offset != 0 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^if  ( diff != offset )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^if  ( diff != cmpLen )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^return  ( len < 0 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^return  ( diff < diff ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^return  ( diff < 1 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^int diff = digitChars[offset+i] - cmpStr.charAt ( offset ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^int diff = digitChars[offset+i] - str.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^int diff = i[offset+i] - cmpStr.charAt ( digitChars ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^int diff = digitChars[offset+i] - i.charAt ( cmpStr ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Argument_Swapping]^int diff = cmpStr[offset+i] - digitChars.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^int diff = digitChars[offset+i]  &  cmpStr.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^return  ( diff > 0 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^for  ( int i = diff; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Operator]^int diff = digitChars[offset+i]  <  cmpStr.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Wrong_Literal]^return false;^161^^^^^147^162^return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[BugLab_Variable_Misuse]^String cmpStr = negative ? str : MAX_LONG_STR;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : str;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^String cmpStr = MAX_LONG_STR ? MIN_LONG_STR_NO_SIGN : negative;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^String cmpStr = negative ? MAX_LONG_STR : MIN_LONG_STR_NO_SIGN;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^int cmpLen = numberStr.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^int cmpLen = str.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^int actualLen = str.length (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^if  ( i < cmpLen )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^if  ( actualLen < i )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^if  ( cmpLen < actualLen )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^if  ( actualLen == cmpLen )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^if  ( actualLen < cmpLen )  return false;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^if  ( i > cmpLen )  return false;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^if  ( actualLen > i )  return false;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^if  ( cmpLen > actualLen )  return false;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^if  ( actualLen >= cmpLen )  return false;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^if  ( actualLen > cmpLen )  return true;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^if  ( i != 0 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^if  ( diff == 0 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^if  ( diff != cmpLen )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^return  ( i < 0 ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^return  ( diff == 0 ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^for  ( diffnt i = 0; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < diff; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^for  ( cmpLennt i = 0; i < i; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^for  ( int i = actualLen; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^if  ( diff != 1 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^return  ( diff <= 0 ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^return  ( diff < diff ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^int diff = str.charAt ( i )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^int diff = numberStr.charAt ( cmpLen )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^int diff = numberStr.charAt ( i )  - str.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^int diff = i.charAt ( numberStr )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^int diff = numberStr.charAt ( cmpStr )  - i.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Argument_Swapping]^int diff = cmpStr.charAt ( i )  - numberStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^int diff = numberStr.charAt ( i )   >=  cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^int diff = numberStr.charAt ( diff )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Operator]^int diff = numberStr.charAt ( i )   ||  cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Wrong_Literal]^return false;^186^^^^^171^187^return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[BugLab_Variable_Misuse]^if  ( numberStr == null )  {^191^^^^^176^206^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( input != null )  {^191^^^^^176^206^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return len;^192^^^^^177^207^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^input = numberStr.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^input = str.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^int len = str.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^if  ( i == 0 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( len != 0 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^if  ( len == -1 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return len;^197^^^^^182^212^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^int i = defaultValue;^200^^^^^185^215^int i = 0;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^if  ( len < len )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^if  ( i < i )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Argument_Swapping]^if  ( len < i )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( i > len )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( c >= '+' )  {^203^^^^^188^218^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^} else if  ( c != '-' )  {^206^^^^^191^221^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^input = numberStr.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^input = input.substring ( len ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^len = cmpStr.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^} else if  ( c <= '-' )  {^206^^^^^191^221^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^input = cmpStr.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^len = str.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^char c = cmpStr.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^char c = input.charAt ( 1 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^char c = str.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^char c = input.charAt ( len ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^input = str.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^len = numberStr.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( c != '+' )  {^203^^^^^188^218^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( c <= '+' )  {^203^^^^^188^218^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^} else if  ( c > '-' )  {^206^^^^^191^221^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^char c = input.charAt (  ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^char c = input.charAt ( i ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Literal]^input = input.substring ( defaultValue ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( c > '9' && c < '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( c >= '9' || c < '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^if  ( c > '9' || c <= '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return  ( int )  parseDouble ( str ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return  ( int )  parseDouble ( cmpStr ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return len;^217^^^^^202^232^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^for  ( ; len < len; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^for  ( ; i < i; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Argument_Swapping]^for  ( ; len < i; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Wrong_Operator]^for  ( ; i <= len; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return  ( int )  parseDouble ( numberStr ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^char c = cmpStr.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^char c = lennput.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Argument_Swapping]^char c = i.charAt ( input ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Argument_Swapping]^char c = inputnput.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^char c = str.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return Integer.parseInt ( numberStr ) ;^222^^^^^207^237^return Integer.parseInt ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^return Integer.parseInt ( str ) ;^222^^^^^207^237^return Integer.parseInt ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[BugLab_Variable_Misuse]^if  ( numberStr == null )  {^229^^^^^214^244^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( input != null )  {^229^^^^^214^244^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return val;^230^^^^^215^245^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^input = str.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^int len = numberStr.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^if  ( i == 0 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( len >= 0 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return val;^235^^^^^220^250^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^if  ( len < len )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^if  ( i < i )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Argument_Swapping]^if  ( len < i )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( i <= len )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( c >= '+' )  {^241^^^^^226^256^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( c != '+' )  {^241^^^^^226^256^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^} else if  ( c <= '-' )  {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^input = cmpStr.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Literal]^input = input.substring ( len ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^len = numberStr.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^input = str.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^len = str.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^} else if  ( c != '-' )  {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Literal]^input = input.substring (  ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^len = cmpStr.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^char c = numberStr.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Literal]^char c = input.charAt ( -1 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^char c = str.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^input = numberStr.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Literal]^input = input.substring ( i ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( c <= '+' )  {^241^^^^^226^256^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^} else if  ( c < '-' )  {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Literal]^input = input.substring ( 0 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Literal]^char c = input.charAt ( len ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( c > '9' && c < '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( c == '9' || c < '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( c > '9' || c <= '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return  ( long )  parseDouble ( cmpStr ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return  ( long )  parseDouble ( str ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return val;^255^^^^^240^270^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^for  ( ; len < len; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^for  ( ; i < i; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^for  ( ; i == len; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^for  ( ; i <= len; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Wrong_Operator]^if  ( c >= '9' || c < '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return  ( long )  parseDouble ( numberStr ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^char c = cmpStr.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^char c = lennput.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Argument_Swapping]^char c = i.charAt ( input ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Argument_Swapping]^char c = inputnput.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^char c = str.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return Long.parseLong ( numberStr ) ;^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return Long.parseLong ( cmpStr ) ;^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return Long.parseLong ( str ) ;^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^return val;^262^^^^^247^277^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[BugLab_Variable_Misuse]^if  ( str == null )  {^267^^^^^265^279^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[BugLab_Wrong_Operator]^if  ( input != null )  {^267^^^^^265^279^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[BugLab_Variable_Misuse]^input = str.trim (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[BugLab_Variable_Misuse]^int len = cmpStr.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[BugLab_Wrong_Operator]^if  ( len <= 0 )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[BugLab_Wrong_Literal]^if  ( len == len )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[BugLab_Variable_Misuse]^return parseDouble ( str ) ;^276^^^^^265^279^return parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[BugLab_Variable_Misuse]^if  ( NASTY_SMALL_DOUBLE.equals ( numberStr )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[BugLab_Variable_Misuse]^if  ( str.equals ( numStr )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[BugLab_Argument_Swapping]^if  ( numStr.equals ( NASTY_SMALL_DOUBLE )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[BugLab_Variable_Misuse]^return Double.parseDouble ( numberStr ) ;^290^^^^^281^291^return Double.parseDouble ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[BugLab_Variable_Misuse]^return Double.parseDouble ( str ) ;^290^^^^^281^291^return Double.parseDouble ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[BugLab_Variable_Misuse]^return new BigDecimal ( numberStr ) ;^296^^^^^293^300^return new BigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[BugLab_Variable_Misuse]^return new BigDecimal ( str ) ;^296^^^^^293^300^return new BigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[BugLab_Variable_Misuse]^throw _badBigDecimal ( str ) ;^298^^^^^293^300^throw _badBigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[BugLab_Variable_Misuse]^throw _badBigDecimal ( numberStr ) ;^298^^^^^293^300^throw _badBigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[BugLab_Argument_Swapping]^return parseBigDecimal ( buffer.length, 0, buffer ) ;^303^^^^^302^304^return parseBigDecimal ( buffer, 0, buffer.length ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  char[]  buffer  
[BugLab_Argument_Swapping]^return new BigDecimal ( offset, buffer, len ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Argument_Swapping]^return new BigDecimal ( buffer, len, offset ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Argument_Swapping]^return new BigDecimal ( len, offset, buffer ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Variable_Misuse]^return new BigDecimal ( buffer, len, len ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Variable_Misuse]^return new BigDecimal ( buffer, offset, offset ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Variable_Misuse]^throw _badBigDecimal ( new String ( buffer, len, len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Argument_Swapping]^throw _badBigDecimal ( new String ( offset, buffer, len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Argument_Swapping]^throw _badBigDecimal ( new String ( buffer, len, offset )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[BugLab_Argument_Swapping]^throw _badBigDecimal ( new String ( len, offset, buffer )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
