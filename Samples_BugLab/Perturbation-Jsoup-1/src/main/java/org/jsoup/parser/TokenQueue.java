[BugLab_Argument_Swapping]^for  ( int i = chars.length.length - 1; i >= 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Argument_Swapping]^for  ( chars.lengthnt i = i - 1; i >= 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Wrong_Operator]^for  ( int i = chars.length  >>  1; i >= 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Wrong_Operator]^for  ( int i = chars.length - 1; i == 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Wrong_Literal]^for  ( int i = chars.length - i; i >= 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Wrong_Literal]^for  ( int i = chars.length - 1; i >= i; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Argument_Swapping]^for  ( int i = chars - 1; i >= 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Wrong_Operator]^for  ( int i = chars.length  ==  1; i >= 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Wrong_Literal]^for  ( int i = chars.length ; i >= 0; i-- )  {^60^^^^^58^63^for  ( int i = chars.length - 1; i >= 0; i-- )  {^[CLASS] TokenQueue  [METHOD] addFirst [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  char[]  chars  
[BugLab_Variable_Misuse]^if  ( i > queue.size (  )  ) return false;^72^73^^^^70^83^if  ( len > queue.size (  )  ) return false;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Argument_Swapping]^if  ( queue > len.size (  )  ) return false;^72^73^^^^70^83^if  ( len > queue.size (  )  ) return false;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Operator]^if  ( len == queue.size (  )  ) return false;^72^73^^^^70^83^if  ( len > queue.size (  )  ) return false;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^if  ( len > queue.size (  )  ) return true;^72^73^^^^70^83^if  ( len > queue.size (  )  ) return false;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^return true;^73^^^^^70^83^return false;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Variable_Misuse]^List<Character> chars = queue.subList ( 0, i ) ;^74^^^^^70^83^List<Character> chars = queue.subList ( 0, len ) ;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Argument_Swapping]^List<Character> chars = len.subList ( 0, queue ) ;^74^^^^^70^83^List<Character> chars = queue.subList ( 0, len ) ;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^List<Character> chars = queue.subList ( len, len ) ;^74^^^^^70^83^List<Character> chars = queue.subList ( 0, len ) ;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^if  ( !found.equals ( check )  ) return true;^79^80^^^^70^83^if  ( !found.equals ( check )  ) return false;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^return true;^80^^^^^70^83^return false;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Variable_Misuse]^for  ( lennt i = 0; i < len; i++ )  {^76^^^^^70^83^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Argument_Swapping]^for  ( lennt i = 0; i < i; i++ )  {^76^^^^^70^83^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= len; i++ )  {^76^^^^^70^83^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < len; i++ )  {^76^^^^^70^83^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Variable_Misuse]^Character found = Character.toLowerCase ( chars.get ( len )  ) ;^77^^^^^70^83^Character found = Character.toLowerCase ( chars.get ( i )  ) ;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Argument_Swapping]^Character found = Character.toLowerCase ( i.get ( chars )  ) ;^77^^^^^70^83^Character found = Character.toLowerCase ( chars.get ( i )  ) ;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Variable_Misuse]^Character found = Character.toLowerCase ( 0.get ( i )  ) ;^77^^^^^70^83^Character found = Character.toLowerCase ( chars.get ( i )  ) ;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^return false;^82^^^^^70^83^return true;^[CLASS] TokenQueue  [METHOD] matches [RETURN_TYPE] boolean   String seq [VARIABLES] boolean  Character  check  found  List  chars  String  seq  LinkedList  queue  int  i  len  char[]  seqChars  
[BugLab_Wrong_Literal]^if  ( matches ( s )  ) return false;^92^93^^^^90^96^if  ( matches ( s )  ) return true;^[CLASS] TokenQueue  [METHOD] matchesAny [RETURN_TYPE] boolean    seq [VARIABLES] String[]  seq  String  s  boolean  LinkedList  queue  
[BugLab_Wrong_Literal]^return false;^93^^^^^90^96^return true;^[CLASS] TokenQueue  [METHOD] matchesAny [RETURN_TYPE] boolean    seq [VARIABLES] String[]  seq  String  s  boolean  LinkedList  queue  
[BugLab_Wrong_Literal]^return true;^95^^^^^90^96^return false;^[CLASS] TokenQueue  [METHOD] matchesAny [RETURN_TYPE] boolean    seq [VARIABLES] String[]  seq  String  s  boolean  LinkedList  queue  
[BugLab_Wrong_Literal]^return true;^109^^^^^104^111^return false;^[CLASS] TokenQueue  [METHOD] matchChomp [RETURN_TYPE] boolean   String seq [VARIABLES] LinkedList  queue  String  seq  boolean  
[BugLab_Wrong_Literal]^return false;^107^^^^^104^111^return true;^[CLASS] TokenQueue  [METHOD] matchChomp [RETURN_TYPE] boolean   String seq [VARIABLES] LinkedList  queue  String  seq  boolean  
[BugLab_Wrong_Operator]^return !queue.isEmpty (  )  || Character.isWhitespace ( queue.peek (  )  ) ;^118^^^^^117^119^return !queue.isEmpty (  )  && Character.isWhitespace ( queue.peek (  )  ) ;^[CLASS] TokenQueue  [METHOD] matchesWhitespace [RETURN_TYPE] boolean   [VARIABLES] LinkedList  queue  boolean  
[BugLab_Wrong_Operator]^return !queue.isEmpty (  )  || Character.isLetterOrDigit ( queue.peek (  )  ) ;^126^^^^^125^127^return !queue.isEmpty (  )  && Character.isLetterOrDigit ( queue.peek (  )  ) ;^[CLASS] TokenQueue  [METHOD] matchesWord [RETURN_TYPE] boolean   [VARIABLES] LinkedList  queue  boolean  
[BugLab_Variable_Misuse]^if  ( i > queue.size (  )  ) throw new IllegalStateException  (" ")  ;^148^149^^^^144^153^if  ( len > queue.size (  )  ) throw new IllegalStateException  (" ")  ;^[CLASS] TokenQueue  [METHOD] consume [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  len  
[BugLab_Argument_Swapping]^if  ( queue > len.size (  )  ) throw new IllegalStateException  (" ")  ;^148^149^^^^144^153^if  ( len > queue.size (  )  ) throw new IllegalStateException  (" ")  ;^[CLASS] TokenQueue  [METHOD] consume [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  len  
[BugLab_Wrong_Operator]^if  ( len < queue.size (  )  ) throw new IllegalStateException  (" ")  ;^148^149^^^^144^153^if  ( len > queue.size (  )  ) throw new IllegalStateException  (" ")  ;^[CLASS] TokenQueue  [METHOD] consume [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  len  
[BugLab_Variable_Misuse]^for  ( lennt i = 0; i < len; i++ )  {^150^^^^^144^153^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] consume [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  len  
[BugLab_Argument_Swapping]^for  ( lennt i = 0; i < i; i++ )  {^150^^^^^144^153^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] consume [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  len  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= len; i++ )  {^150^^^^^144^153^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] consume [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  len  
[BugLab_Wrong_Literal]^for  ( int i = ; i < len; i++ )  {^150^^^^^144^153^for  ( int i = 0; i < len; i++ )  {^[CLASS] TokenQueue  [METHOD] consume [RETURN_TYPE] void   String seq [VARIABLES] String  seq  boolean  LinkedList  queue  int  i  len  
[BugLab_Wrong_Operator]^while  ( !queue.isEmpty (  )  || !matchesAny ( seq )  ) accum.append ( consume (  )  ) ;^171^172^^^^169^175^while  ( !queue.isEmpty (  )  && !matchesAny ( seq )  ) accum.append ( consume (  )  ) ;^[CLASS] TokenQueue  [METHOD] consumeToAny [RETURN_TYPE] String    seq [VARIABLES] String[]  seq  boolean  StringBuilder  accum  LinkedList  queue  
[BugLab_Variable_Misuse]^String data = consumeTo ( data ) ;^186^^^^^185^189^String data = consumeTo ( seq ) ;^[CLASS] TokenQueue  [METHOD] chompTo [RETURN_TYPE] String   String seq [VARIABLES] LinkedList  queue  String  data  seq  boolean  
[BugLab_Variable_Misuse]^matchChomp ( data ) ;^187^^^^^185^189^matchChomp ( seq ) ;^[CLASS] TokenQueue  [METHOD] chompTo [RETURN_TYPE] String   String seq [VARIABLES] LinkedList  queue  String  data  seq  boolean  
[BugLab_Wrong_Literal]^boolean seen = true;^195^^^^^194^201^boolean seen = false;^[CLASS] TokenQueue  [METHOD] consumeWhitespace [RETURN_TYPE] boolean   [VARIABLES] LinkedList  queue  boolean  seen  
[BugLab_Wrong_Operator]^while  ( !queue.isEmpty (  )  || Character.isWhitespace ( queue.peek (  )  )  )  {^196^^^^^194^201^while  ( !queue.isEmpty (  )  && Character.isWhitespace ( queue.peek (  )  )  )  {^[CLASS] TokenQueue  [METHOD] consumeWhitespace [RETURN_TYPE] boolean   [VARIABLES] LinkedList  queue  boolean  seen  
[BugLab_Wrong_Literal]^seen = false;^198^^^^^194^201^seen = true;^[CLASS] TokenQueue  [METHOD] consumeWhitespace [RETURN_TYPE] boolean   [VARIABLES] LinkedList  queue  boolean  seen  
[BugLab_Wrong_Operator]^while  ( !queue.isEmpty (  )  || Character.isLetterOrDigit ( queue.peek (  )  )  )  {^209^^^^^207^213^while  ( !queue.isEmpty (  )  && Character.isLetterOrDigit ( queue.peek (  )  )  )  {^[CLASS] TokenQueue  [METHOD] consumeWord [RETURN_TYPE] String   [VARIABLES] StringBuilder  wordAccum  LinkedList  queue  boolean  
[BugLab_Variable_Misuse]^while  ( !queue.isEmpty (  )  && Character.isLetterOrDigit ( null.peek (  )  )  )  {^209^^^^^207^213^while  ( !queue.isEmpty (  )  && Character.isLetterOrDigit ( queue.peek (  )  )  )  {^[CLASS] TokenQueue  [METHOD] consumeWord [RETURN_TYPE] String   [VARIABLES] StringBuilder  wordAccum  LinkedList  queue  boolean  
[BugLab_Wrong_Operator]^while  ( !queue.isEmpty (  )  ||  ( Character.isLetterOrDigit ( c )  || c.equals ( '-' )  || c.equals ( '_' )  )  )  {^223^^^^^220^228^while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( c )  || c.equals ( '-' )  || c.equals ( '_' )  )  )  {^[CLASS] TokenQueue  [METHOD] consumeCssIdentifier [RETURN_TYPE] String   [VARIABLES] boolean  StringBuilder  accum  Character  c  LinkedList  queue  
[BugLab_Wrong_Operator]^while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( c )  && c.equals ( '-' )  || c.equals ( '_' )  )  )  {^223^^^^^220^228^while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( c )  || c.equals ( '-' )  || c.equals ( '_' )  )  )  {^[CLASS] TokenQueue  [METHOD] consumeCssIdentifier [RETURN_TYPE] String   [VARIABLES] boolean  StringBuilder  accum  Character  c  LinkedList  queue  
[BugLab_Variable_Misuse]^accum.append ( null.removeFirst (  )  ) ;^224^^^^^220^228^accum.append ( queue.removeFirst (  )  ) ;^[CLASS] TokenQueue  [METHOD] consumeCssIdentifier [RETURN_TYPE] String   [VARIABLES] boolean  StringBuilder  accum  Character  c  LinkedList  queue  
[BugLab_Wrong_Operator]^while  ( !queue.isEmpty (  )  ||  ( Character.isLetterOrDigit ( queue.peek (  )  )  || matchesAny ( "-", "_", ":" )  )  )  {^236^^^^^234^240^while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( queue.peek (  )  )  || matchesAny ( "-", "_", ":" )  )  )  {^[CLASS] TokenQueue  [METHOD] consumeAttributeKey [RETURN_TYPE] String   [VARIABLES] StringBuilder  accum  LinkedList  queue  boolean  
[BugLab_Wrong_Operator]^while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( queue.peek (  )  )  && matchesAny ( "-", "_", ":" )  )  )  {^236^^^^^234^240^while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( queue.peek (  )  )  || matchesAny ( "-", "_", ":" )  )  )  {^[CLASS] TokenQueue  [METHOD] consumeAttributeKey [RETURN_TYPE] String   [VARIABLES] StringBuilder  accum  LinkedList  queue  boolean  
[BugLab_Variable_Misuse]^accum.append ( 0.removeFirst (  )  ) ;^237^^^^^234^240^accum.append ( queue.removeFirst (  )  ) ;^[CLASS] TokenQueue  [METHOD] consumeAttributeKey [RETURN_TYPE] String   [VARIABLES] StringBuilder  accum  LinkedList  queue  boolean  
