[BugLab_Argument_Swapping]^Validate.isTrue ( args.length.length == 1, "usage: supply url to fetch" ) ;^17^^^^^16^45^Validate.isTrue ( args.length == 1, "usage: supply url to fetch" ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Argument_Swapping]^Validate.isTrue ( args == 1, "usage: supply url to fetch" ) ;^17^^^^^16^45^Validate.isTrue ( args.length == 1, "usage: supply url to fetch" ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Wrong_Operator]^Validate.isTrue ( args.length != 1, "usage: supply url to fetch" ) ;^17^^^^^16^45^Validate.isTrue ( args.length == 1, "usage: supply url to fetch" ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Wrong_Literal]^URL url = new URL ( args[-1] ) ;^18^^^^^16^45^URL url = new URL ( args[0] ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Wrong_Operator]^Document / doc = Jsoup.parse ( url, 3*1000 ) ;^21^^^^^16^45^Document doc = Jsoup.parse ( url, 3*1000 ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Wrong_Literal]^Document doc = Jsoup.parse ( url, 4*1000 ) ;^21^^^^^16^45^Document doc = Jsoup.parse ( url, 3*1000 ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^print ( "\nMedia:  ( %d ) ", links.size (  )  ) ;^26^^^^^16^45^print ( "\nMedia:  ( %d ) ", media.size (  )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^if  ( link.tagName (  ) .equals ( "img" )  ) print ( " * %s: <%s> %sx%s  ( %s ) ", src.tagName (  ) , src.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 20 )  ) ;^28^29^30^31^^16^45^if  ( src.tagName (  ) .equals ( "img" )  ) print ( " * %s: <%s> %sx%s  ( %s ) ", src.tagName (  ) , src.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 20 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Wrong_Literal]^if  ( src.tagName (  ) .equals ( "img" )  ) print ( " * %s: <%s> %sx%s  ( %s ) ", src.tagName (  ) , src.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 19 )  ) ;^28^29^30^31^^16^45^if  ( src.tagName (  ) .equals ( "img" )  ) print ( " * %s: <%s> %sx%s  ( %s ) ", src.tagName (  ) , src.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 20 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^print ( " * %s: <%s>", link.tagName (  ) , src.attr ( "abs:src" )  ) ;^33^^^^^16^45^print ( " * %s: <%s>", src.tagName (  ) , src.attr ( "abs:src" )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^print ( " * %s: <%s> %sx%s  ( %s ) ", link.tagName (  ) , src.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 20 )  ) ;^29^30^31^^^16^45^print ( " * %s: <%s> %sx%s  ( %s ) ", src.tagName (  ) , src.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 20 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^src.tagName (  ) , link.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 20 )  ) ;^30^31^^^^16^45^src.tagName (  ) , src.attr ( "abs:src" ) , src.attr ( "width" ) , src.attr ( "height" ) , trim ( src.attr ( "alt" ) , 20 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^trim ( link.attr ( "alt" ) , 20 )  ) ;^31^^^^^16^45^trim ( src.attr ( "alt" ) , 20 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Wrong_Literal]^trim ( src.attr ( "alt" ) , 19 )  ) ;^31^^^^^16^45^trim ( src.attr ( "alt" ) , 20 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^print ( "\nImports:  ( %d ) ", media.size (  )  ) ;^36^^^^^16^45^print ( "\nImports:  ( %d ) ", imports.size (  )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^print ( " * %s <%s>  ( %s ) ", src.tagName (  ) ,link.attr ( "abs:href" ) , link.attr ( "rel" )  ) ;^38^^^^^16^45^print ( " * %s <%s>  ( %s ) ", link.tagName (  ) ,link.attr ( "abs:href" ) , link.attr ( "rel" )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^print ( "\nLinks:  ( %d ) ", media.size (  )  ) ;^41^^^^^16^45^print ( "\nLinks:  ( %d ) ", links.size (  )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Variable_Misuse]^print ( " * a: <%s>   ( %s ) ", src.attr ( "abs:href" ) , trim ( link.text (  ) , 35 )  ) ;^43^^^^^16^45^print ( " * a: <%s>   ( %s ) ", link.attr ( "abs:href" ) , trim ( link.text (  ) , 35 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Wrong_Literal]^print ( " * a: <%s>   ( %s ) ", link.attr ( "abs:href" ) , trim ( link.text (  ) , 34 )  ) ;^43^^^^^16^45^print ( " * a: <%s>   ( %s ) ", link.attr ( "abs:href" ) , trim ( link.text (  ) , 35 )  ) ;^[CLASS] ListLinks  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] boolean  Element  link  src  String[]  args  Document  doc  Elements  imports  links  media  URL  url  
[BugLab_Argument_Swapping]^System.out.println ( String.format ( args, msg )  ) ;^48^^^^^47^49^System.out.println ( String.format ( msg, args )  ) ;^[CLASS] ListLinks  [METHOD] print [RETURN_TYPE] void   String msg  args [VARIABLES] boolean  String  msg  Object[]  args  
[BugLab_Argument_Swapping]^if  ( width.length (  )  > s ) return s.substring ( 0, width-1 )  + ".";^52^53^^^^51^56^if  ( s.length (  )  > width ) return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Operator]^if  ( s.length (  )  >= width ) return s.substring ( 0, width-1 )  + ".";^52^53^^^^51^56^if  ( s.length (  )  > width ) return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Operator]^if  <  ( s.length (  )  > width ) return s.substring ( 0, width-1 )  + ".";^52^53^^^^51^56^if  ( s.length (  )  > width ) return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Literal]^if  ( s.length (  )  > width ) return s.substring ( -1, width-1 )  + ".";^52^53^^^^51^56^if  ( s.length (  )  > width ) return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Literal]^if  ( s.length (  )  > width ) return s.substring ( 0, width-width )  + ".";^52^53^^^^51^56^if  ( s.length (  )  > width ) return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Argument_Swapping]^return width.substring ( 0, s-1 )  + ".";^53^^^^^51^56^return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Operator]^return s.substring ( 0, width-1 )  !=  + ".";^53^^^^^51^56^return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Literal]^return s.substring ( width, width-1 )  + ".";^53^^^^^51^56^return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Literal]^return s.substring ( 0, width-width )  + ".";^53^^^^^51^56^return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Literal]^return s.substring ( 0, width-0 )  + ".";^53^^^^^51^56^return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Operator]^return s.substring ( 0, width-1 )  >>  + ".";^53^^^^^51^56^return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
[BugLab_Wrong_Literal]^return s.substring ( 1, width-1 )  + ".";^53^^^^^51^56^return s.substring ( 0, width-1 )  + ".";^[CLASS] ListLinks  [METHOD] trim [RETURN_TYPE] String   String s int width [VARIABLES] boolean  String  s  int  width  
