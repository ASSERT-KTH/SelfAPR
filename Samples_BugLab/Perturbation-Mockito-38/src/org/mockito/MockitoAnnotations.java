[BugLab_Wrong_Operator]^if  ( testClass != null )  {^81^^^^^80^90^if  ( testClass == null )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[BugLab_Variable_Misuse]^while  ( clazz != Object.clazz )  {^86^^^^^80^90^while  ( clazz != Object.class )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[BugLab_Wrong_Operator]^while  ( clazz == Object.class )  {^86^^^^^80^90^while  ( clazz != Object.class )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[BugLab_Argument_Swapping]^scan ( clazz, testClass ) ;^87^^^^^80^90^scan ( testClass, clazz ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[BugLab_Variable_Misuse]^clazz = 1.getSuperclass (  ) ;^88^^^^^80^90^clazz = clazz.getSuperclass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[BugLab_Wrong_Operator]^if  ( mock == null )  {^98^^^^^92^111^if  ( mock != null )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[BugLab_Argument_Swapping]^field.set ( mock, testClass ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[BugLab_Wrong_Literal]^field.setAccessible ( false ) ;^100^^^^^92^111^field.setAccessible ( true ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[BugLab_Variable_Misuse]^field.set ( mock, mock ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[BugLab_Variable_Misuse]^field.set ( testClass, testClass ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[BugLab_Argument_Swapping]^Object mock = field.createMockFor ( annotation, annotationEngine ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[BugLab_Argument_Swapping]^Object mock = fieldEngine.createMockFor ( annotation, annotation ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
