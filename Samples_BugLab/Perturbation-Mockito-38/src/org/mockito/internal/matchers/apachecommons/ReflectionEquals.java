[buglab_swap_variables]^return EqualsBuilder.reflectionEquals ( wanted, excludeFields, actual ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[buglab_swap_variables]^return EqualsBuilder.reflectionEquals ( wanted,  excludeFields ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[buglab_swap_variables]^return EqualsBuilder.reflectionEquals ( actual, wanted, excludeFields ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[buglab_swap_variables]^return EqualsBuilder.reflectionEquals (  actual, excludeFields ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[buglab_swap_variables]^return EqualsBuilder.reflectionEquals ( excludeFields, actual, wanted ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[buglab_swap_variables]^return EqualsBuilder.reflectionEquals ( wanted, actual ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
