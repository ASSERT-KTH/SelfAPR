[BugLab_Argument_Swapping]^return EqualsBuilder.reflectionEquals ( actual, wanted, excludeFields ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[BugLab_Argument_Swapping]^return EqualsBuilder.reflectionEquals ( excludeFields, actual, wanted ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[BugLab_Argument_Swapping]^return EqualsBuilder.reflectionEquals ( wanted, excludeFields, actual ) ;^20^^^^^19^21^return EqualsBuilder.reflectionEquals ( wanted, actual, excludeFields ) ;^[CLASS] ReflectionEquals  [METHOD] matches [RETURN_TYPE] boolean   Object actual [VARIABLES] Object  actual  wanted  String[]  excludeFields  boolean  
[BugLab_Variable_Misuse]^description.appendText ( "refEq ( " + actual + " ) " ) ;^24^^^^^23^25^description.appendText ( "refEq ( " + wanted + " ) " ) ;^[CLASS] ReflectionEquals  [METHOD] describeTo [RETURN_TYPE] void   Description description [VARIABLES] Object  actual  wanted  String[]  excludeFields  Description  description  boolean  
[BugLab_Wrong_Operator]^description.appendText ( "refEq ( "  ==  wanted + " ) " ) ;^24^^^^^23^25^description.appendText ( "refEq ( " + wanted + " ) " ) ;^[CLASS] ReflectionEquals  [METHOD] describeTo [RETURN_TYPE] void   Description description [VARIABLES] Object  actual  wanted  String[]  excludeFields  Description  description  boolean  
