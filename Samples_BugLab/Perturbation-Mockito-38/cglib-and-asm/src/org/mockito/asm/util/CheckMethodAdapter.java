[BugLab_Wrong_Literal]^checkDesc ( desc, true ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( desc.visitAnnotation ( mv, visible )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( mv.visitAnnotation ( visible, desc )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( visible.visitAnnotation ( desc, mv )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[BugLab_Variable_Misuse]^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, startCode )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[BugLab_Wrong_Literal]^return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , true ) ;^327^^^^^325^328^return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Variable_Misuse]^return new CheckAnnotationAdapter ( this.visitAnnotationDefault (  ) , false ) ;^327^^^^^325^328^return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Literal]^checkDesc ( desc, true ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Variable_Misuse]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, startCode )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( visible, desc, parameter )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( desc, parameter, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( visible.visitParameterAnnotation ( parameter, desc, mv )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( desc.visitParameterAnnotation ( parameter, mv, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, visible, desc )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Argument_Swapping]^return new CheckAnnotationAdapter ( parameter.visitParameterAnnotation ( mv, desc, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[BugLab_Wrong_Operator]^if  ( attr != null )  {^344^^^^^342^348^if  ( attr == null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[BugLab_Wrong_Literal]^startCode = false;^351^^^^^350^353^startCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Literal]^mLocal = nStack;^372^^^^^357^387^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^mStack = i;^373^^^^^358^388^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^mLocal = nLocal;^377^^^^^362^392^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^mStack = type;^378^^^^^363^393^mStack = 1;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^mLocal = i;^383^^^^^368^398^mLocal = 3;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^mStack = 1;^384^^^^^369^399^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nStack > mLocal )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nLocal > nStack )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^if  ( mLocal > nLocal )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nLocal >= mLocal )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Invalid nStack=" + nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame nStack " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Invalid type=" + nLocal + " for frame nLocal " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  ==  nLocal  ==  " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  &  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  <=  nLocal  <=  " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  &&  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  >  nLocal  >  " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  ^  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  >=  nLocal  >=  " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  !=  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nLocal > mStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nStack > nStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^if  ( mStack > nStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nStack >= mStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Invalid nLocal=" + nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame nLocal " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Invalid type=" + nStack + " for frame nStack " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  >=  nStack  >=  " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  <  nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  ||  nStack  ||  " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="   instanceof   nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  <  nStack  <  " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  >=  nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  &&  nStack  &&  " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  >  nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nStack != Opcodes.F_CHOP )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( type == Opcodes.F_CHOP )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( type > 0 &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nLocal > 0 &&  ( stack == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nLocal > 0 &&  ( local == null || nLocal < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^if  ( local.length > 0 &&  ( local == null || nLocal < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^if  ( local > 0 &&  ( nLocal == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nLocal > 0 ||  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nLocal == 0 &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nLocal > 0 &&  ( local == null && local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nLocal > 0 &&  ( local != null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nLocal > 0 &&  ( local == null || local.length <= nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^if  ( nLocal > mStack &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^for  ( nStacknt i = 0; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^for  ( nLocalnt i = 0; i < i; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^for  ( int i = type; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^checkFrameValue ( stack[i] ) ;^405^^^^^390^420^checkFrameValue ( local[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^for  ( int i = i; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nLocal > 0 &&  ( local == null || nStack < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^if  ( nLocal > 0 &&  ( local.length == null || local < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nLocal >= 0 &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^for  ( typent i = 0; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < type; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^for  ( int i = nStack; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( type > 0 &&  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nStack > 0 &&  ( local == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^if  ( nStack > 0 &&  ( stack == null || nLocal < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^if  ( stack.length > 0 &&  ( stack == null || nStack < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^if  ( nStack > 0 &&  ( stack.length == null || stack < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nStack > 0 ||  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nStack >= 0 &&  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nStack > 0 &&  ( stack == null && stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nStack > 0 &&  ( stack != null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^if  ( nStack > 0 &&  ( stack == null || stack.length <= nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^if  ( nStack > nStack &&  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^for  ( typent i = 0; i < nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < type; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^for  ( nStacknt i = 0; i < i; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^checkFrameValue ( local[i] ) ;^412^^^^^397^427^checkFrameValue ( stack[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^mv.visitFrame ( nStack, nLocal, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^mv.visitFrame ( type, type, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^mv.visitFrame ( type, nLocal, stack, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^mv.visitFrame ( type, nLocal, local, nLocal, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^mv.visitFrame ( nStack, nLocal, local, type, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^mv.visitFrame ( nLocal, type, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^mv.visitFrame ( local, nLocal, type, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^mv.visitFrame ( type, nStack, local, nLocal, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^checkOpcode ( opcode, opcode ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[BugLab_Wrong_Literal]^checkOpcode ( opcode, 2 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Variable_Misuse]^if  ( opcode < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Wrong_Operator]^if  ( operand < Opcodes.T_BOOLEAN && operand > Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Wrong_Operator]^if  ( operand <= Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Wrong_Operator]^if  ( operand < Opcodes.T_BOOLEAN || operand >= Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException  (" ")  : " + opcode ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  |  (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  >=  (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  &&  (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException   instanceof   (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Variable_Misuse]^checkSignedByte ( opcode, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Variable_Misuse]^checkSignedShort ( opcode, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( opcode, opcode ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Argument_Swapping]^mv.visitIntInsn ( operand, opcode ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[BugLab_Variable_Misuse]^checkOpcode ( var, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[BugLab_Wrong_Literal]^checkOpcode ( opcode, 3 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[BugLab_Variable_Misuse]^checkUnsignedShort ( opcode, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[BugLab_Variable_Misuse]^mv.visitVarInsn ( var, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[BugLab_Argument_Swapping]^mv.visitVarInsn ( var, opcode ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[BugLab_Wrong_Literal]^checkOpcode ( opcode, opcode ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^if  ( type == Opcodes.NEW && opcode.charAt ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Wrong_Operator]^if  ( opcode == Opcodes.NEW || type.charAt ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Wrong_Operator]^if  ( opcode != Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Wrong_Operator]^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  <= '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Wrong_Literal]^if  ( opcode == Opcodes.NEW && type.charAt ( opcode )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: "  >>  type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: "  &  type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitTypeInsn ( type, opcode ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[BugLab_Wrong_Literal]^checkOpcode ( opcode, 5 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^checkInternalName ( name, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^checkDesc ( owner, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Wrong_Literal]^checkDesc ( desc, true ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^mv.visitFieldInsn ( opcode, name, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^mv.visitFieldInsn ( opcode, owner, desc, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^mv.visitFieldInsn ( opcode, owner, name, owner ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitFieldInsn ( owner, opcode, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitFieldInsn ( opcode, name, owner, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitFieldInsn ( opcode, desc, name, owner ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^checkMethodIdentifier ( owner, "name" ) ;^490^^^^^481^494^checkMethodIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^checkInternalName ( name, "owner" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^checkMethodDesc ( owner ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^mv.visitMethodInsn ( opcode, desc, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^mv.visitMethodInsn ( opcode, owner, owner, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Variable_Misuse]^mv.visitMethodInsn ( opcode, owner, name, owner ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitMethodInsn ( name, owner, opcode, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitMethodInsn ( opcode, name, owner, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitMethodInsn ( opcode, desc, name, owner ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[BugLab_Wrong_Literal]^checkOpcode ( opcode, 7 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[BugLab_Wrong_Literal]^checkLabel ( label, true, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[BugLab_Argument_Swapping]^mv.visitJumpInsn ( label, opcode ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[BugLab_Wrong_Literal]^checkLabel ( label, true, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Argument_Swapping]^if  ( labelss.get ( label )  != null )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Argument_Swapping]^if  ( label.get ( labels )  != null )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( labels.get ( label )  == null )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Argument_Swapping]^labels.put ( labels, new Integer ( label.size (  )  )  ) ;^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( ! ( cst  &  Type )  )  {^518^^^^^515^522^if  ( ! ( cst instanceof Type )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Variable_Misuse]^checkUnsignedShort ( increment, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[BugLab_Variable_Misuse]^checkSignedShort ( var, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[BugLab_Argument_Swapping]^mv.visitIincInsn ( increment, var ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[BugLab_Variable_Misuse]^if  ( i < min )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Argument_Swapping]^if  ( min < max )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^if  ( max <= min )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Max = " + i + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to i = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Max = " + min + " must be greater than or equal to max = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  <=  max  <=  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  <  max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  >=  max  >=  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  >>  max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  >  max  >  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  |  max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  ^  max  ^  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Max = "  >  max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Literal]^checkLabel ( dflt, true, "default label" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^if  ( labels == null && labels.length != max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^if  ( labels != null || labels.length != max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^if  ( labels == null || labels.length == max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^if  ( labels == null || labels.length != max - min  <<  1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^if  ( labels == null || labels.length != max  &&  min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Literal]^if  ( labels == null || labels.length != max - min  )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^for  <  ( int i = 0; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Variable_Misuse]^checkLabel ( labels[i], false, "label at minndex " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Argument_Swapping]^checkLabel ( i[i], false, "label at labelsndex " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^checkLabel ( labels[i], false, "label at index "   instanceof   i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Literal]^checkLabel ( labels[i], true, "label at index " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Literal]^for  ( int i = ; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Operator]^checkLabel ( labels[i], false, "label at index "  ^  i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( i, max, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( min, i, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( max, min, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( min, dflt, max, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( labels, max, dflt, min ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[BugLab_Wrong_Literal]^checkLabel ( dflt, true, "default label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( keys == null && labels == null || keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( keys != null || labels == null || keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( keys == null || labels != null || keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( keys == null || labels == null || keys.length == labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^for   instanceof   ( int i = 0; i < labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Argument_Swapping]^checkLabel ( i[i], false, "label at labelsndex " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^checkLabel ( labels[i], false, "label at index "  &&  i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Literal]^checkLabel ( labels[i], true, "label at index " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Operator]^checkLabel ( labels[i], false, "label at index "  ||  i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( keys, dflt, labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( labels, keys, dflt ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[BugLab_Wrong_Literal]^checkDesc ( desc, true ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( 0 )  >= '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Literal]^if  ( desc.charAt (  )  != '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  ==  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  <=  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  &  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  |  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Literal]^if  ( desc.charAt ( -1 )  != '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^if  ( dims <= 1 )  {^579^^^^^571^588^if  ( dims < 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Literal]^if  ( dims <  )  {^579^^^^^571^588^if  ( dims < 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  ^  (" ")  : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  &&  (" ")  : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException   instanceof   (" ")  : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Argument_Swapping]^if  ( desc > dims.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^if  ( dims >= desc.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^if  ( dims > desc.lastIndexOf ( '[' )   ==  1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^if  >=  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Literal]^if  ( dims > desc.lastIndexOf ( '[' )   )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  ==  (" ")  : " + dims ) ;^584^585^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  !=  (" ")  : " + dims ) ;^584^585^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException  <<  (" ")  : " + dims ) ;^584^585^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[BugLab_Wrong_Operator]^if  ( type == null )  {^598^^^^^590^602^if  ( type != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[BugLab_Variable_Misuse]^mv.visitTryCatchBlock ( end, end, handler, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[BugLab_Variable_Misuse]^mv.visitTryCatchBlock ( start, handler, handler, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[BugLab_Variable_Misuse]^mv.visitTryCatchBlock ( start, end, start, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[BugLab_Argument_Swapping]^mv.visitTryCatchBlock ( handler, end, start, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[BugLab_Argument_Swapping]^mv.visitTryCatchBlock ( start, handler, end, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[BugLab_Argument_Swapping]^mv.visitTryCatchBlock ( start, end, type, handler ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[BugLab_Variable_Misuse]^checkIdentifier ( signature, "name" ) ;^614^^^^^604^625^checkIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^checkDesc ( signature, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Wrong_Literal]^checkDesc ( desc, true ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^checkLabel ( end, true, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Wrong_Literal]^checkLabel ( start, false, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^checkLabel ( start, true, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Wrong_Literal]^checkLabel ( end, false, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^checkUnsignedShort ( s, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^int s =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Argument_Swapping]^int s =  (  ( Integer )  start.get ( labels )  ) .intValue (  ) ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^int e =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Argument_Swapping]^int e =  (  ( Integer )  end.get ( labels )  ) .intValue (  ) ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^if  ( index < s )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^if  ( e < index )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Argument_Swapping]^if  ( s < e )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Wrong_Operator]^if  ( e > s )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^mv.visitLocalVariable ( signature, desc, signature, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^mv.visitLocalVariable ( name, name, signature, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^mv.visitLocalVariable ( name, desc, name, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Variable_Misuse]^mv.visitLocalVariable ( name, desc, signature, start, end, s ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Argument_Swapping]^mv.visitLocalVariable ( desc, name, signature, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Argument_Swapping]^mv.visitLocalVariable ( signature, desc, name, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Argument_Swapping]^mv.visitLocalVariable ( name, desc, signature, end, start, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Argument_Swapping]^mv.visitLocalVariable ( name, desc, signature, start, index, end ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[BugLab_Wrong_Literal]^checkLabel ( start, false, "start label" ) ;^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[BugLab_Argument_Swapping]^mv.visitLineNumber ( start, line ) ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[BugLab_Wrong_Literal]^endCode = false;^638^^^^^635^642^endCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[BugLab_Variable_Misuse]^checkUnsignedShort ( maxLocals, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[BugLab_Variable_Misuse]^checkUnsignedShort ( maxStack, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[BugLab_Argument_Swapping]^mv.visitMaxs ( maxLocals, maxStack ) ;^641^^^^^635^642^mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[BugLab_Wrong_Literal]^endMethod = false;^646^^^^^644^648^endMethod = true;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Variable_Misuse]^if  ( !visible )  {^656^^^^^655^659^if  ( !startCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Variable_Misuse]^if  ( visible )  {^665^^^^^664^668^if  ( endCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Variable_Misuse]^if  ( visible )  {^674^^^^^673^677^if  ( endMethod )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( value == Opcodes.TOP && value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( value != Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( value <= Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( value < Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( value  <=  String )  {^692^^^^^684^700^if  ( value instanceof String )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( ! ( value  ^  Label )  )  {^696^^^^^684^700^if  ( ! ( value instanceof Label )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "  >>  value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "  ^  value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "  &&  value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "   instanceof   value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Variable_Misuse]^if  ( type < 0 || opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Argument_Swapping]^if  ( type < 0 || opcode > 199 || TYPE[opcode] != opcode )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Argument_Swapping]^if  ( TYPE < 0 || opcode > 199 || opcode[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Wrong_Operator]^if  ( opcode < 0 && opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Wrong_Operator]^if  ( opcode == 0 || opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Wrong_Operator]^if  ( opcode < 0 || opcode >= 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Wrong_Operator]^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] <= type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Wrong_Literal]^if  ( opcode < opcode || opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Wrong_Literal]^if  ( opcode < 0 || opcode > opcode || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[BugLab_Wrong_Operator]^if  ( value < Byte.MIN_VALUE && value > Byte.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value <= Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value < Byte.MIN_VALUE || value >= Byte.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( value + "  ( must be a signed byte ) : " + msg ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  &&  "  ( must be a signed byte ) : "  &&  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  !=  "  ( must be a signed byte ) : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  <<  "  ( must be a signed byte ) : "  <<  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  >=  "  ( must be a signed byte ) : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  >>  "  ( must be a signed byte ) : "  >>  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  ||  "  ( must be a signed byte ) : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  ==  "  ( must be a signed byte ) : "  ==  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value < Short.MIN_VALUE && value > Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value <= Short.MIN_VALUE || value > Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value < Short.MIN_VALUE || value >= Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( value + "  ( must be a signed short ) : " + msg ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  <<  "  ( must be a signed short ) : "  <<  value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  <=  "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  ||  "  ( must be a signed short ) : "  ||  value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  >>  "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  ==  "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  |  "  ( must be a signed short ) : "  |  value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  >=  "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value < 0 && value > 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value > 0 || value > 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( value < 0 || value >= 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Literal]^if  ( value < value || value > 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Literal]^if  ( value < 0 || value > value )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( value + "  ( must be an unsigned short ) : " + msg ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  <  "  ( must be an unsigned short ) : "  <  value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  !=  "  ( must be an unsigned short ) : " + value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  &  "  ( must be an unsigned short ) : "  &  value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  ^  "  ( must be an unsigned short ) : " + value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  &&  "  ( must be an unsigned short ) : "  &&  value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( msg  <<  "  ( must be an unsigned short ) : " + value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[BugLab_Wrong_Operator]^if  ( ! ( cst instanceof Integer )  || ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( ! ( cst  <<  Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst  ^  Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst  ||  Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst  >=  Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Wrong_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst  >>  String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[BugLab_Argument_Swapping]^checkIdentifier ( msg, 0, -1, name ) ;^775^^^^^774^776^checkIdentifier ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Variable_Misuse]^if  ( name == null ||  ( max == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^if  ( name == null ||  ( end == -1 ? name.length (  )  <= max : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^if  ( start == null ||  ( end == -1 ? name.length (  )  <= name : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^if  ( name == null ||  ( start == -1 ? name.length (  )  <= end : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^if  ( name == null &&  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^if  ( name != null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^if  ( name == null ||  ( end != -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^if  ( name == null ||  ( end == -1 ? name.length (  )  < start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end > start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Literal]^if  ( name == null ||  ( end == -end ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg  <<  "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^if  ( msg == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^if  ( !Character.isJavaIdentifierStart ( msg.charAt ( start )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( max )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^if  ( !Character.isJavaIdentifierStart ( start.charAt ( name )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a valid Java identifier ) : " + msg ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "   instanceof   ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg  ==  "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  &&  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg  >>  "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  !=  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <=  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg  &&  "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^int max = start == -1 ? name.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^int max = end == -1 ? msg.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^int max = name == -1 ? end.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^int max = end < -1 ? name.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Literal]^int max = end == -0 ? name.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a valid Java identifier ) : " + msg ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >>  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg  ==  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ||  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg  <=  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^for  ( int i = max + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^for  ( startnt i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^for  ( int i = start + 1; i < start; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^for  ( int i = max + 1; i < start; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^for  ^  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^for  ( int i = start + 1; i <= max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^for   instanceof   ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^for  >=  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^for  >>  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Literal]^for  ( int i = start + end; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^if  ( !Character.isJavaIdentifierPart ( msg.charAt ( i )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Variable_Misuse]^if  ( !Character.isJavaIdentifierPart ( name.charAt ( start )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Argument_Swapping]^if  ( !Character.isJavaIdentifierPart ( i.charAt ( name )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  &&  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg  ^  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >=  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "   instanceof   ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg  >  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  !=  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg  <<  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^for  !=  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Literal]^for  ( int i = start + i; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[BugLab_Wrong_Operator]^if  ( name == null && name.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( name != null || name.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( name == null || name.length (  )  != 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Literal]^if  ( name == null || name.length (  )  == i )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg  ^  "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg  >>  "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg  <<  "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg   instanceof   "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Variable_Misuse]^if  ( msg == null || name.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Variable_Misuse]^if  ( "<init>".equals ( msg )  || "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( "<init>".equals ( name )  && "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + msg ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >>  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg  ^  "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  |  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg  <=  "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  !=  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg  ||  "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg  <<  "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Literal]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( i )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Variable_Misuse]^if  ( !Character.isJavaIdentifierStart ( msg.charAt ( 0 )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Argument_Swapping]^if  ( !Character.isJavaIdentifierPart ( i.charAt ( name )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + msg ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <=  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg  &  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <<  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg  |  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 1; i < msg.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Argument_Swapping]^for  ( nament i = 1; i < i.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 1; i <= name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^for  >  ( int i = 1; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^for  ^  ( int i = 1; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^for  !=  ( int i = 1; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  |  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg   instanceof   "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >>  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg  <=  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Variable_Misuse]^if  ( !Character.isJavaIdentifierPart ( msg.charAt ( i )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ==  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg  >  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[BugLab_Wrong_Operator]^if  ( name == null && name.length (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^if  ( name != null || name.length (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^if  ( name == null || name.length (  )  != 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg  |  "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg  &  "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Operator]^if  ( name.charAt ( 0 )  < '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Literal]^if  ( name.charAt ( 1 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Literal]^if  ( name.charAt (  )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Argument_Swapping]^checkInternalName ( msg, 0, -1, name ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Literal]^checkInternalName ( name, -1, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Literal]^checkInternalName ( name, 0, -2, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Variable_Misuse]^checkDesc ( msg, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Wrong_Literal]^checkDesc ( name, true ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Variable_Misuse]^if  ( msg.charAt ( 0 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[BugLab_Variable_Misuse]^int max = start == -1 ? name.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^int max = end == -1 ? msg.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^int max = name == -1 ? end.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^int max = end != -1 ? name.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^int max = end == -end ? name.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^if  ( start == -1 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^if  ( max == -1 || slash > slash )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( slash == -1 && slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( slash != -1 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( slash == -1 || slash >= max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^slash = start;^884^^^^^871^895^slash = max;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( slash < -1 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^if  ( slash == -start || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^slash = msg.indexOf ( '/', begin + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^slash = name.indexOf ( '/', start + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^slash = begin.indexOf ( '/', name + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^slash = name.indexOf ( '/', begin  <=  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^slash = name.indexOf ( '/', begin  ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^slash = slash;^884^^^^^871^895^slash = max;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^begin = slash ;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^int begin = slash;^879^^^^^871^895^int begin = start;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^slash = name.indexOf ( '/', slash + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^slash = name.indexOf ( '/', begin  !=  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^checkIdentifier ( msg, begin, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^checkIdentifier ( name, start, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^checkIdentifier ( name, begin, start, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^checkIdentifier ( slash, begin, name, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^checkIdentifier ( begin, name, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^checkIdentifier ( name, slash, begin, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^slash = name.indexOf ( '/', begin  |  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^slash = name.indexOf ( '/', begin + start ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^begin = max + 1;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a fully qualified class msg in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ==  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg  >=  "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <<  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg  &  "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^slash = name.indexOf ( '/', begin  &&  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^int end = checkDesc ( desc, 0, visible ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[BugLab_Argument_Swapping]^int end = checkDesc ( canBeVoid, 0, desc ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[BugLab_Wrong_Literal]^int end = checkDesc ( desc, end, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[BugLab_Variable_Misuse]^int end = checkDesc ( desc, 0, startCode ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[BugLab_Argument_Swapping]^if  ( desc != end.length (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[BugLab_Wrong_Operator]^if  ( end == desc.length (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[BugLab_Argument_Swapping]^if  ( start == null || desc >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( desc == null && start >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( desc != null || start >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( desc == null || start > desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^while  ( desc < index.length (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^while  ( index < desc.length (  )  || desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^while  ( index <= desc.length (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^while  ( index < desc.length (  )  && desc.charAt ( index )  != '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^if  ( visible )  {^929^^^^^914^944^if  ( canBeVoid )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >=  desc ) ;^932^933^^^^929^934^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^return index + 1;^930^^^^^915^945^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^return start ;^930^^^^^915^945^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^if  ( desc < index.length (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( index <= desc.length (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >  desc ) ;^952^953^^^^949^954^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  |  desc ) ;^952^953^^^^949^954^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^return checkDesc ( desc, start, false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^return checkDesc ( index, desc, false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^return checkDesc ( desc, index, true ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( index == -1 && index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( index >= -1 || index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( index == -1 || index - start <= 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( index == -1 || index  <<  start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^if  ( index == -start || index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^if  ( index == -1 || index - start < index )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  &&  desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^checkInternalName ( index, start + 1, desc, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^checkInternalName ( desc, index + 1, start, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^checkInternalName ( desc, start , index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^index = index + 1;^945^^^^^930^960^index = start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^index = start ;^945^^^^^930^960^index = start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^index = desc.indexOf ( ';', index ) ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^index = start.indexOf ( ';', desc ) ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^return index + 1;^943^^^^^928^958^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^return start + start;^943^^^^^928^958^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^return start + 1;^967^^^^^952^982^return index + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^return index + index;^967^^^^^952^982^return index + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <=  desc ) ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  |  desc ) ;^952^953^^^^937^967^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >  desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  ||  desc ) ;^964^965^^^^949^979^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <<  desc ) ;^969^970^^^^954^984^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  ||  desc ) ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  &&  desc ) ;^952^953^^^^937^967^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "   instanceof   desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <=  desc ) ;^964^965^^^^949^979^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  ||  desc ) ;^969^970^^^^954^984^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^switch  ( desc.charAt ( index )  )  {^927^^^^^912^942^switch  ( desc.charAt ( start )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^switch  ( start.charAt ( desc )  )  {^927^^^^^912^942^switch  ( desc.charAt ( start )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^while  ( start < desc.length (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Variable_Misuse]^checkInternalName ( desc, index + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Argument_Swapping]^checkInternalName ( start, desc + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Literal]^checkInternalName ( desc, start + index, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[BugLab_Wrong_Operator]^if  ( desc == null && desc.length (  )  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc != null || desc.length (  )  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc == null || desc.length (  )  != 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Literal]^if  ( desc == null || desc.length (  )  == start )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( 0 )  != ' ( ' && desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( 0 )  == ' ( ' || desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  <= 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Literal]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < start )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Literal]^if  ( desc.charAt ( start )  != ' ( ' || desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Argument_Swapping]^if  ( start.charAt ( desc )  != ' ) ' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( start )  == ' ) ' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( start )  <= ' ) ' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Argument_Swapping]^if  ( start.charAt ( desc )  == 'V' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( start )  != 'V' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  &&  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >>  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Argument_Swapping]^start = checkDesc ( start, desc, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Literal]^start = checkDesc ( desc, start, true ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <=  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <<  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Argument_Swapping]^} while  ( desc < start.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( desc.charAt ( start )  <= 'V' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  ||  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >=  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Argument_Swapping]^start = checkDesc ( start, desc + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Literal]^start = checkDesc ( desc, start + start, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Literal]^start = checkDesc ( desc, start + 1, false ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Literal]^start = checkDesc ( desc, start , true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Argument_Swapping]^if  ( desc != start.length (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( start >= desc.length (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, 0 )  <= '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^if  ( getChar ( signature, pos )  == '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkFormalTypeParameters ( pos, signature ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkClassTypeSignature ( pos, signature ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( getChar ( pos, signature )  == 'L' )  {^1016^^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( getChar ( signature, pos )  >= 'L' )  {^1016^^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkClassTypeSignature ( pos, signature ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( signature != pos.length (  )  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( pos >= signature.length (  )  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( pos + ": error at index " + signature ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <=  ": error at index "  <=  pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  &  ": error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <<  ": error at index "  <<  pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  !=  ": error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  ^  ": error at index "  ^  pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >=  ": error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <  ": error at index "  <  pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >  ": error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^int pos = pos;^1035^^^^^1020^1050^int pos = 0;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, 0 )  != '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^if  ( getChar ( signature, pos )  == '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkFormalTypeParameters ( pos, signature ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkChar ( ' ( ', pos, signature ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( pos, signature )  )  != -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  >= -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -pos )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeSignature ( pos, signature ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkChar ( ' ) ', pos, signature ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( getChar ( pos, signature )  == 'V' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, pos )  != 'V' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeSignature ( pos, signature ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeSignature ( pos, signature ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( getChar ( pos, signature )  == '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( getChar ( signature, pos )  != '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( getChar ( pos, signature )  == 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, pos )  > 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeVariableSignature ( pos, signature ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkClassTypeSignature ( pos, signature ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeVariableSignature ( pos, signature ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, pos )  <= 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( signature != pos.length (  )  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( pos == signature.length (  )  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( pos + ": error at index " + signature ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  !=  ": error at index "  !=  pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >>  ": error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature   instanceof   ": error at index "   instanceof   pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  !=  ": error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <  ": error at index "  <  pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature   instanceof   ": error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  &&  ": error at index "  &&  pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >=  ": error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^int pos = checkFieldTypeSignature ( signature, pos ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( signature != pos.length (  )  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( pos == signature.length (  )  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( pos + ": error at index " + signature ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  ||  ": error at index "  ||  pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  ||  ": error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  ==  ": error at index "  ==  pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <=  ": error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  ^  ": error at index "  ^  pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >>  ": error at index "  >>  pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature   instanceof   ": error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkChar ( '<', pos, signature ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkFormalTypeParameter ( pos, signature ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( getChar ( pos, signature )  != '>' )  {^1090^^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( getChar ( signature, pos )  == '>' )  {^1090^^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkFormalTypeParameter ( pos, signature ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return pos + pos;^1093^^^^^1083^1094^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkIdentifier ( pos, signature ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkChar ( ':', pos, signature ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( "L[T".indexOf ( getChar ( pos, signature )  )  != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  <= -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkFieldTypeSignature ( pos, signature ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( getChar ( pos, signature )  == ':' )  {^1113^^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( getChar ( signature, pos )  != ':' )  {^1113^^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkFieldTypeSignature ( pos, signature + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkFieldTypeSignature ( signature, pos  &  1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^pos = checkFieldTypeSignature ( signature, pos + pos ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^pos = checkFieldTypeSignature ( signature, pos  ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkFieldTypeSignature ( signature, pos  >=  1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkFieldTypeSignature ( signature, pos   instanceof   1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return checkClassTypeSignature ( pos, signature ) ;^1136^^^^^1126^1142^return checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return checkTypeSignature ( pos, signature + 1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^return checkTypeSignature ( signature, pos  ==  1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return checkTypeSignature ( signature, pos  ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return checkTypeVariableSignature ( pos, signature ) ;^1140^^^^^1126^1142^return checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^switch  ( getChar ( pos, signature )  )  {^1134^^^^^1126^1142^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^return checkTypeSignature ( signature, pos  <=  1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkChar ( 'L', pos, signature ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkIdentifier ( pos, signature ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( getChar ( pos, signature )  == '/' )  {^1159^^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( getChar ( signature, pos )  > '/' )  {^1159^^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkIdentifier ( pos, signature + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos  <  1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^pos = checkIdentifier ( signature, pos  ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos   instanceof   1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos  ||  1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^pos = checkIdentifier ( signature, pos + pos ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos  ^  1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( getChar ( pos, signature )  == '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, pos )  < '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeArguments ( pos, signature ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( getChar ( pos, signature )  == '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( getChar ( signature, pos )  != '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( getChar ( pos, signature )  == '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, pos )  < '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeArguments ( pos, signature ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkIdentifier ( pos, signature + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos  !=  1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^pos = checkIdentifier ( signature, pos + pos ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos  ^  1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^pos = checkIdentifier ( signature, pos  ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, pos )  <= '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos  <  1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^pos = checkIdentifier ( signature, pos  <=  1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return checkChar ( ';', pos, signature ) ;^1171^^^^^1151^1172^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkChar ( '<', pos, signature ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeArgument ( pos, signature ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( getChar ( pos, signature )  != '>' )  {^1187^^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^while  ( getChar ( signature, pos )  == '>' )  {^1187^^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkTypeArgument ( pos, signature ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return pos + pos;^1190^^^^^1181^1191^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^char c = getChar ( pos, signature ) ;^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( c >= '*' )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( c != '*' )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^} else if  ( c == '+' && c == '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^} else if  ( c != '+' || c == '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^} else if  ( c == '+' || c >= '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return pos + ;^1206^^^^^1200^1211^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^} else if  ( c == '+' || c < '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return pos + pos;^1206^^^^^1200^1211^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return checkFieldTypeSignature ( pos, signature ) ;^1210^^^^^1200^1211^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkChar ( 'T', pos, signature ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^pos = checkIdentifier ( pos, signature ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return checkChar ( ';', pos, signature ) ;^1229^^^^^1220^1230^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return pos ;^1252^^^^^1239^1256^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return checkFieldTypeSignature ( pos, signature ) ;^1254^^^^^1239^1256^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^switch  ( getChar ( pos, signature )  )  {^1243^^^^^1239^1256^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( !Character.isJavaIdentifierStart ( getChar ( pos, signature )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( pos + ": identifier expected at index " + signature ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <  ": identifier expected at index "  <  pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >>  ": identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  ||  ": identifier expected at index "  ||  pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  ==  ": identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature   instanceof   ": identifier expected at index "   instanceof   pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <=  ": identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >>  ": identifier expected at index "  >>  pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >=  ": identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^while  ( Character.isJavaIdentifierPart ( getChar ( pos, signature )  )  )  {^1271^^^^^1265^1275^while  ( Character.isJavaIdentifierPart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( getChar ( c, pos )  == signature )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( getChar ( signature, c )  == pos )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( getChar ( signature, pos )  >= c )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return pos + pos;^1287^^^^^1284^1291^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Literal]^return pos ;^1287^^^^^1284^1291^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^if  ( getChar ( pos, signature )  == c )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( c + ": '" + signature + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( signature + ": '" + pos + "' expected at index " + c ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  &&  ": '"  &&  c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  >>  ": '" + c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^throw new IllegalArgumentException ( pos + ": '" + c + "' expected at index " + signature ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <=  ": '"  <=  c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( signature  <  ": '" + c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Argument_Swapping]^return signature < pos.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^return pos <= signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[BugLab_Wrong_Operator]^if  ( label != null )  {^1319^^^^^1314^1327^if  ( label == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg  <<  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg  >  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg  <=  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Variable_Misuse]^if  ( startCode && labels.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Argument_Swapping]^if  ( label && checkVisiteds.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Argument_Swapping]^if  ( checkVisited && labelss.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Argument_Swapping]^if  ( checkVisited && label.get ( labels )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^if  ( checkVisited || labels.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^if  ( checkVisited && labels.get ( label )  != null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg  >=  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg  &  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg  &&  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg  ==  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
