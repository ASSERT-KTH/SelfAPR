[BugLab_Wrong_Literal]^ASMifierAnnotationVisitor av = new ASMifierAnnotationVisitor ( 1 ) ;^62^^^^^58^66^ASMifierAnnotationVisitor av = new ASMifierAnnotationVisitor ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] ASMifierAnnotationVisitor  av  boolean  
[BugLab_Variable_Misuse]^text.add ( 1.toString (  )  ) ;^80^^^^^68^85^text.add ( buf.toString (  )  ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] ASMifierAnnotationVisitor  av  boolean  visible  String  desc  int  parameter  
[BugLab_Wrong_Literal]^ASMifierAnnotationVisitor av = new ASMifierAnnotationVisitor ( parameter ) ;^81^^^^^68^85^ASMifierAnnotationVisitor av = new ASMifierAnnotationVisitor ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] ASMifierAnnotationVisitor  av  boolean  visible  String  desc  int  parameter  
[BugLab_Wrong_Operator]^if  ( type != Opcodes.F_NEW )  {^104^^^^^89^119^if  ( type == Opcodes.F_NEW )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^declareFrameTypes ( type, local ) ;^102^^^^^87^117^declareFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^declareFrameTypes ( nLocal, stack ) ;^102^^^^^87^117^declareFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^declareFrameTypes ( local, nLocal ) ;^102^^^^^87^117^declareFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^declareFrameTypes ( type, stack ) ;^103^^^^^88^118^declareFrameTypes ( nStack, stack ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^declareFrameTypes ( nStack, local ) ;^103^^^^^88^118^declareFrameTypes ( nStack, stack ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^declareFrameTypes ( stack, nStack ) ;^103^^^^^88^118^declareFrameTypes ( nStack, stack ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^buf.append ( type ) .append ( ", new Object[] {" ) ;^109^^^^^94^124^buf.append ( nLocal ) .append ( ", new Object[] {" ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^appendFrameTypes ( type, local ) ;^110^^^^^95^125^appendFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^appendFrameTypes ( nLocal, stack ) ;^110^^^^^95^125^appendFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^appendFrameTypes ( local, nLocal ) ;^110^^^^^95^125^appendFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^buf.append ( "}, " ) .append ( type ) .append ( ", new Object[] {" ) ;^111^^^^^96^126^buf.append ( "}, " ) .append ( nStack ) .append ( ", new Object[] {" ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^appendFrameTypes ( type, stack ) ;^112^^^^^97^127^appendFrameTypes ( nStack, stack ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^appendFrameTypes ( stack, nStack ) ;^112^^^^^97^127^appendFrameTypes ( nStack, stack ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^declareFrameTypes ( type, local ) ;^116^^^^^101^131^declareFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^declareFrameTypes ( nLocal, stack ) ;^116^^^^^101^131^declareFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^declareFrameTypes ( local, nLocal ) ;^116^^^^^101^131^declareFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitFrame ( Opcodes.F_APPEND," ) .append ( type ) .append ( ", new Object[] {" ) ;^117^118^119^^^102^132^buf.append ( "mv.visitFrame ( Opcodes.F_APPEND," ) .append ( nLocal ) .append ( ", new Object[] {" ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^appendFrameTypes ( type, local ) ;^120^^^^^105^135^appendFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^appendFrameTypes ( nLocal, stack ) ;^120^^^^^105^135^appendFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^appendFrameTypes ( local, nLocal ) ;^120^^^^^105^135^appendFrameTypes ( nLocal, local ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitFrame ( Opcodes.F_CHOP," ) .append ( type ) .append ( ", null, 0, null" ) ;^124^125^126^^^109^139^buf.append ( "mv.visitFrame ( Opcodes.F_CHOP," ) .append ( nLocal ) .append ( ", null, 0, null" ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^declareFrameTypes ( 1, local ) ;^132^^^^^117^147^declareFrameTypes ( 1, stack ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^appendFrameTypes ( 1, local ) ;^134^^^^^119^149^appendFrameTypes ( 1, stack ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^buf.setLength ( opcode ) ;^149^^^^^148^158^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] boolean  int  opcode  operand  
[BugLab_Wrong_Operator]^buf.append ( "mv.visitIntInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( opcode >= Opcodes.NEWARRAY^150^151^152^153^^148^158^buf.append ( "mv.visitIntInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( opcode == Opcodes.NEWARRAY^[CLASS] ASMifierMethodVisitor  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] boolean  int  opcode  operand  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitIntInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( operand == Opcodes.NEWARRAY^150^151^152^153^^148^158^buf.append ( "mv.visitIntInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( opcode == Opcodes.NEWARRAY^[CLASS] ASMifierMethodVisitor  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] boolean  int  opcode  operand  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitIntInsn ( " ) .append ( null[opcode] ) .append ( ", " ) .append ( opcode == Opcodes.NEWARRAY^150^151^152^153^^148^158^buf.append ( "mv.visitIntInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( opcode == Opcodes.NEWARRAY^[CLASS] ASMifierMethodVisitor  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] boolean  int  opcode  operand  
[BugLab_Argument_Swapping]^buf.append ( "mv.visitIntInsn ( " ) .append ( opcode[opcode] ) .append ( ", " ) .append ( OPCODES == Opcodes.NEWARRAY^150^151^152^153^^148^158^buf.append ( "mv.visitIntInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( opcode == Opcodes.NEWARRAY^[CLASS] ASMifierMethodVisitor  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] boolean  int  opcode  operand  
[BugLab_Wrong_Literal]^buf.setLength ( var ) ;^161^^^^^160^168^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] boolean  int  opcode  var  
[BugLab_Argument_Swapping]^buf.append ( "mv.visitVarInsn ( " ) .append ( var[opcode] ) .append ( ", " ) .append ( OPCODES )^162^163^164^165^^160^168^buf.append ( "mv.visitVarInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( var )^[CLASS] ASMifierMethodVisitor  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] boolean  int  opcode  var  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitVarInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( opcode )^162^163^164^165^^160^168^buf.append ( "mv.visitVarInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( var )^[CLASS] ASMifierMethodVisitor  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] boolean  int  opcode  var  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitVarInsn ( " ) .append ( this[opcode] ) .append ( ", " ) .append ( var )^162^163^164^165^^160^168^buf.append ( "mv.visitVarInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) .append ( var )^[CLASS] ASMifierMethodVisitor  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] boolean  int  opcode  var  
[BugLab_Wrong_Literal]^buf.setLength ( -1 ) ;^171^^^^^170^176^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] boolean  String  type  int  opcode  
[BugLab_Wrong_Literal]^buf.setLength ( opcode ) ;^184^^^^^178^193^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitFieldInsn ( " ) .append ( 0[opcode] ) .append ( ", " ) ;^185^^^^^178^193^buf.append ( "mv.visitFieldInsn ( " ) .append ( OPCODES[opcode] ) .append ( ", " ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Variable_Misuse]^appendConstant ( name ) ;^186^^^^^178^193^appendConstant ( owner ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Variable_Misuse]^appendConstant ( owner ) ;^188^^^^^178^193^appendConstant ( name ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Variable_Misuse]^appendConstant ( owner ) ;^190^^^^^178^193^appendConstant ( desc ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Variable_Misuse]^appendConstant ( name ) ;^203^^^^^195^210^appendConstant ( owner ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Variable_Misuse]^appendConstant ( owner ) ;^205^^^^^195^210^appendConstant ( name ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Variable_Misuse]^appendConstant ( owner ) ;^207^^^^^195^210^appendConstant ( desc ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] boolean  String  desc  name  owner  int  opcode  
[BugLab_Wrong_Literal]^buf.setLength ( increment ) ;^239^^^^^238^246^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] boolean  int  increment  var  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitIincInsn ( " ) .append ( var ) .append ( ", " ) .append ( var )^240^241^242^243^^238^246^buf.append ( "mv.visitIincInsn ( " ) .append ( var ) .append ( ", " ) .append ( increment )^[CLASS] ASMifierMethodVisitor  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] boolean  int  increment  var  
[BugLab_Argument_Swapping]^buf.append ( "mv.visitIincInsn ( " ) .append ( increment ) .append ( ", " ) .append ( var )^240^241^242^243^^238^246^buf.append ( "mv.visitIincInsn ( " ) .append ( var ) .append ( ", " ) .append ( increment )^[CLASS] ASMifierMethodVisitor  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] boolean  int  increment  var  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitIincInsn ( " ) .append ( increment ) .append ( ", " ) .append ( increment )^240^241^242^243^^238^246^buf.append ( "mv.visitIincInsn ( " ) .append ( var ) .append ( ", " ) .append ( increment )^[CLASS] ASMifierMethodVisitor  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] boolean  int  increment  var  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^255^^^^^248^273^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( i ) .append ( ", " ) .append ( max )^260^261^262^263^^248^273^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( min ) .append ( ", " ) .append ( max )^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Argument_Swapping]^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( max ) .append ( ", " ) .append ( min )^260^261^262^263^^248^273^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( min ) .append ( ", " ) .append ( max )^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( min ) .append ( ", " ) .append ( i )^260^261^262^263^^248^273^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( min ) .append ( ", " ) .append ( max )^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( max ) .append ( ", " ) .append ( max )^260^261^262^263^^248^273^buf.append ( "mv.visitTableSwitchInsn ( " ) .append ( min ) .append ( ", " ) .append ( max )^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^267^^^^^248^273^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Wrong_Literal]^for  ( int i = min; i < labels.length; ++i )  {^267^^^^^248^273^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < labels.length; ++i )  {^267^^^^^248^273^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Variable_Misuse]^buf.append ( min == 0 ? " " : ", " ) ;^268^^^^^248^273^buf.append ( i == 0 ? " " : ", " ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Wrong_Operator]^buf.append ( i < 0 ? " " : ", " ) ;^268^^^^^248^273^buf.append ( i == 0 ? " " : ", " ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Wrong_Operator]^buf.append ( i != 0 ? " " : ", " ) ;^268^^^^^248^273^buf.append ( i == 0 ? " " : ", " ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Wrong_Literal]^buf.append ( i == 1 ? " " : ", " ) ;^268^^^^^248^273^buf.append ( i == 0 ? " " : ", " ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int  i  max  min  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^281^^^^^275^299^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < labels.length; ++i )  {^281^^^^^275^299^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Argument_Swapping]^for  ( keys.lengthnt i = 0; i < i; ++i )  {^289^^^^^275^299^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < keys.length.length; ++i )  {^289^^^^^275^299^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= keys.length; ++i )  {^289^^^^^275^299^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < keys.length; ++i )  {^289^^^^^275^299^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Argument_Swapping]^buf.append ( keys == 0 ? " " : ", " ) .append ( i[i] ) ;^290^^^^^275^299^buf.append ( i == 0 ? " " : ", " ) .append ( keys[i] ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Operator]^buf.append ( i != 0 ? " " : ", " ) .append ( keys[i] ) ;^290^^^^^275^299^buf.append ( i == 0 ? " " : ", " ) .append ( keys[i] ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^buf.append ( i == i ? " " : ", " ) .append ( keys[i] ) ;^290^^^^^275^299^buf.append ( i == 0 ? " " : ", " ) .append ( keys[i] ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Operator]^buf.append ( i <= 0 ? " " : ", " ) .append ( keys[i] ) ;^290^^^^^275^299^buf.append ( i == 0 ? " " : ", " ) .append ( keys[i] ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Operator]^buf.append ( i > 0 ? " " : ", " ) .append ( keys[i] ) ;^290^^^^^275^299^buf.append ( i == 0 ? " " : ", " ) .append ( keys[i] ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^293^^^^^275^299^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < labels.length; ++i )  {^293^^^^^275^299^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < labels.length; ++i )  {^293^^^^^275^299^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Operator]^buf.append ( i != 0 ? " " : ", " ) ;^294^^^^^275^299^buf.append ( i == 0 ? " " : ", " ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < labels.length; ++i )  {^293^^^^^275^299^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^buf.append ( i == i ? " " : ", " ) ;^294^^^^^275^299^buf.append ( i == 0 ? " " : ", " ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label[]  labels  boolean  Label  dflt  int[]  keys  int  i  
[BugLab_Wrong_Literal]^buf.setLength ( 1 ) ;^315^^^^^309^329^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] boolean  Label  end  handler  start  String  type  
[BugLab_Variable_Misuse]^declareLabel ( handler ) ;^316^^^^^309^329^declareLabel ( start ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] boolean  Label  end  handler  start  String  type  
[BugLab_Variable_Misuse]^declareLabel ( start ) ;^317^^^^^309^329^declareLabel ( end ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] boolean  Label  end  handler  start  String  type  
[BugLab_Variable_Misuse]^declareLabel ( start ) ;^318^^^^^309^329^declareLabel ( handler ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] boolean  Label  end  handler  start  String  type  
[BugLab_Variable_Misuse]^appendLabel ( handler ) ;^320^^^^^309^329^appendLabel ( start ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] boolean  Label  end  handler  start  String  type  
[BugLab_Variable_Misuse]^appendLabel ( start ) ;^322^^^^^309^329^appendLabel ( end ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] boolean  Label  end  handler  start  String  type  
[BugLab_Variable_Misuse]^appendLabel ( start ) ;^324^^^^^309^329^appendLabel ( handler ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] boolean  Label  end  handler  start  String  type  
[BugLab_Wrong_Literal]^buf.setLength ( -1 ) ;^339^^^^^331^352^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] boolean  Label  end  start  String  desc  name  signature  int  index  
[BugLab_Variable_Misuse]^appendConstant ( signature ) ;^341^^^^^331^352^appendConstant ( name ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] boolean  Label  end  start  String  desc  name  signature  int  index  
[BugLab_Variable_Misuse]^appendConstant ( signature ) ;^343^^^^^331^352^appendConstant ( desc ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] boolean  Label  end  start  String  desc  name  signature  int  index  
[BugLab_Variable_Misuse]^appendConstant ( name ) ;^345^^^^^331^352^appendConstant ( signature ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] boolean  Label  end  start  String  desc  name  signature  int  index  
[BugLab_Variable_Misuse]^appendLabel ( end ) ;^347^^^^^331^352^appendLabel ( start ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] boolean  Label  end  start  String  desc  name  signature  int  index  
[BugLab_Variable_Misuse]^appendLabel ( start ) ;^349^^^^^331^352^appendLabel ( end ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] boolean  Label  end  start  String  desc  name  signature  int  index  
[BugLab_Variable_Misuse]^text.add ( this.toString (  )  ) ;^351^^^^^331^352^text.add ( buf.toString (  )  ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] boolean  Label  end  start  String  desc  name  signature  int  index  
[BugLab_Wrong_Literal]^buf.setLength ( line ) ;^355^^^^^354^360^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] boolean  Label  start  int  line  
[BugLab_Wrong_Literal]^buf.setLength ( maxStack ) ;^363^^^^^362^370^buf.setLength ( 0 ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] boolean  int  maxLocals  maxStack  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitMaxs ( " ) .append ( maxLocals ) .append ( ", " ) .append ( maxLocals )^364^365^366^367^^362^370^buf.append ( "mv.visitMaxs ( " ) .append ( maxStack ) .append ( ", " ) .append ( maxLocals )^[CLASS] ASMifierMethodVisitor  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] boolean  int  maxLocals  maxStack  
[BugLab_Variable_Misuse]^buf.append ( "mv.visitMaxs ( " ) .append ( maxStack ) .append ( ", " ) .append ( maxStack )^364^365^366^367^^362^370^buf.append ( "mv.visitMaxs ( " ) .append ( maxStack ) .append ( ", " ) .append ( maxLocals )^[CLASS] ASMifierMethodVisitor  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] boolean  int  maxLocals  maxStack  
[BugLab_Argument_Swapping]^buf.append ( "mv.visitMaxs ( " ) .append ( maxLocals ) .append ( ", " ) .append ( maxStack )^364^365^366^367^^362^370^buf.append ( "mv.visitMaxs ( " ) .append ( maxStack ) .append ( ", " ) .append ( maxLocals )^[CLASS] ASMifierMethodVisitor  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] boolean  int  maxLocals  maxStack  
[BugLab_Variable_Misuse]^if  ( o[i] nnstanceof Label )  {^374^^^^^372^378^if  ( o[i] instanceof Label )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Argument_Swapping]^if  ( i[i] onstanceof Label )  {^374^^^^^372^378^if  ( o[i] instanceof Label )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^if  ( o[i]  |  Label )  {^374^^^^^372^378^if  ( o[i] instanceof Label )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Variable_Misuse]^for  ( nnt i = 0; i < n; ++i )  {^373^^^^^372^378^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Argument_Swapping]^for  ( nnt i = 0; i < i; ++i )  {^373^^^^^372^378^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == n; ++i )  {^373^^^^^372^378^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^if  ( o[i]  !=  Label )  {^374^^^^^372^378^if  ( o[i] instanceof Label )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Variable_Misuse]^if  ( n > 0 )  {^382^^^^^367^397^if  ( i > 0 )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^if  ( i >= 0 )  {^382^^^^^367^397^if  ( i > 0 )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Variable_Misuse]^if  ( o[i] nnstanceof String )  {^385^^^^^370^400^if  ( o[i] instanceof String )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Argument_Swapping]^if  ( i[i] onstanceof String )  {^385^^^^^370^400^if  ( o[i] instanceof String )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^if  ( o[i]  <<  String )  {^385^^^^^370^400^if  ( o[i] instanceof String )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^if  ( o[i]  ||  String )  {^385^^^^^370^400^if  ( o[i] instanceof String )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Variable_Misuse]^} else nf  ( o[i] instanceof Integer )  {^387^^^^^372^402^} else if  ( o[i] instanceof Integer )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^} else if  ( o[i]  |  Integer )  {^387^^^^^372^402^} else if  ( o[i] instanceof Integer )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^} else if  ( o[i]  <=  Integer )  {^387^^^^^372^402^} else if  ( o[i] instanceof Integer )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Variable_Misuse]^for  ( nnt i = 0; i < n; ++i )  {^381^^^^^366^396^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Argument_Swapping]^for  ( nnt i = 0; i < i; ++i )  {^381^^^^^366^396^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= n; ++i )  {^381^^^^^366^396^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Literal]^for  ( int i = n; i < n; ++i )  {^381^^^^^366^396^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < n; ++i )  {^381^^^^^366^396^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^if  ( o[i]  <=  String )  {^385^^^^^370^400^if  ( o[i] instanceof String )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Argument_Swapping]^} else of  ( i[i] instanceof Integer )  {^387^^^^^372^402^} else if  ( o[i] instanceof Integer )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^} else if  ( o[i]  >=  Integer )  {^387^^^^^372^402^} else if  ( o[i] instanceof Integer )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Operator]^} else if  ( o[i]  >  Integer )  {^387^^^^^372^402^} else if  ( o[i] instanceof Integer )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < n; ++i )  {^381^^^^^366^396^for  ( int i = 0; i < n; ++i )  {^[CLASS] ASMifierMethodVisitor  [METHOD] appendFrameTypes [RETURN_TYPE] void   final int n Object[] o [VARIABLES] boolean  int  i  n  Object[]  o  
[BugLab_Argument_Swapping]^String name =  ( String )  labelNamesabelNames.get ( l ) ;^425^^^^^424^431^String name =  ( String )  labelNames.get ( l ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] declareLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  String  name  
[BugLab_Argument_Swapping]^String name =  ( String )  l.get ( labelNames ) ;^425^^^^^424^431^String name =  ( String )  labelNames.get ( l ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] declareLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  String  name  
[BugLab_Wrong_Operator]^if  ( name != null )  {^426^^^^^424^431^if  ( name == null )  {^[CLASS] ASMifierMethodVisitor  [METHOD] declareLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  String  name  
[BugLab_Wrong_Operator]^name = "l" + labelNames.size (  &&  ) ;^427^^^^^424^431^name = "l" + labelNames.size (  ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] declareLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  String  name  
[BugLab_Argument_Swapping]^labelNames.put ( name, l ) ;^428^^^^^424^431^labelNames.put ( l, name ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] declareLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  String  name  
[BugLab_Wrong_Operator]^name = "l" + labelNames.size (  |  ) ;^427^^^^^424^431^name = "l" + labelNames.size (  ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] declareLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  String  name  
[BugLab_Argument_Swapping]^buf.append (  ( String )  labelNamesabelNames.get ( l )  ) ;^441^^^^^440^442^buf.append (  ( String )  labelNames.get ( l )  ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] appendLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  
[BugLab_Argument_Swapping]^buf.append (  ( String )  l.get ( labelNames )  ) ;^441^^^^^440^442^buf.append (  ( String )  labelNames.get ( l )  ) ;^[CLASS] ASMifierMethodVisitor  [METHOD] appendLabel [RETURN_TYPE] void   Label l [VARIABLES] boolean  Label  l  
