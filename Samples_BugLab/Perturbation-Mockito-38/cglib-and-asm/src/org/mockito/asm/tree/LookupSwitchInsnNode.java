[BugLab_Variable_Misuse]^this.keys = new ArrayList ( keys == null ? 0 : i ) ;^79^^^^^72^89^this.keys = new ArrayList ( keys == null ? 0 : keys.length ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Argument_Swapping]^this.keys = new ArrayList ( keys.length == null ? 0 : keys ) ;^79^^^^^72^89^this.keys = new ArrayList ( keys == null ? 0 : keys.length ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Operator]^this.keys = new ArrayList ( keys != null ? 0 : keys.length ) ;^79^^^^^72^89^this.keys = new ArrayList ( keys == null ? 0 : keys.length ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Literal]^this.keys = new ArrayList ( keys == null ? -1 : keys.length ) ;^79^^^^^72^89^this.keys = new ArrayList ( keys == null ? 0 : keys.length ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Operator]^this.labels = new ArrayList ( labels != null ? 0 : labels.length ) ;^80^^^^^72^89^this.labels = new ArrayList ( labels == null ? 0 : labels.length ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Literal]^this.labels = new ArrayList ( labels == null ? -1 : labels.length ) ;^80^^^^^72^89^this.labels = new ArrayList ( labels == null ? 0 : labels.length ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Operator]^if  ( keys == null )  {^81^^^^^72^89^if  ( keys != null )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Argument_Swapping]^for  ( keysnt i = 0; i < i.length; ++i )  {^82^^^^^72^89^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Argument_Swapping]^for  ( keys.lengthnt i = 0; i < i; ++i )  {^82^^^^^72^89^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= keys.length; ++i )  {^82^^^^^72^89^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < keys.length; ++i )  {^82^^^^^72^89^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < keys.length.length; ++i )  {^82^^^^^72^89^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == keys.length; ++i )  {^82^^^^^72^89^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < keys.length; ++i )  {^82^^^^^72^89^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Wrong_Operator]^if  ( labels == null )  {^86^^^^^72^89^if  ( labels != null )  {^[CLASS] LookupSwitchInsnNode  [METHOD] <init> [RETURN_TYPE] LabelNode[])   LabelNode dflt final int[] keys LabelNode[] labels [VARIABLES] LabelNode  dflt  LabelNode[]  labels  List  keys  labels  int[]  keys  boolean  int  i  
[BugLab_Argument_Swapping]^for  ( keys.lengthnt i = 0; i < i; ++i )  {^97^^^^^95^105^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= keys.length; ++i )  {^97^^^^^95^105^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Wrong_Literal]^for  ( int i = i; i < keys.length; ++i )  {^97^^^^^95^105^for  ( int i = 0; i < keys.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Variable_Misuse]^keys[i] =  (  ( Integer )  labels.get ( i )  ) .intValue (  ) ;^98^^^^^95^105^keys[i] =  (  ( Integer )  this.keys.get ( i )  ) .intValue (  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Argument_Swapping]^keys[i] =  (  ( Integer )  i.get ( this.keys )  ) .intValue (  ) ;^98^^^^^95^105^keys[i] =  (  ( Integer )  this.keys.get ( i )  ) .intValue (  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^101^^^^^95^105^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < labels.length; ++i )  {^101^^^^^95^105^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Variable_Misuse]^labels[i] =  (  ( LabelNode )  labels.get ( i )  ) .getLabel (  ) ;^102^^^^^95^105^labels[i] =  (  ( LabelNode )  this.labels.get ( i )  ) .getLabel (  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Argument_Swapping]^labels[i] =  (  ( LabelNode )  i.get ( this.labels )  ) .getLabel (  ) ;^102^^^^^95^105^labels[i] =  (  ( LabelNode )  this.labels.get ( i )  ) .getLabel (  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Wrong_Literal]^for  ( int i = i; i < labels.length; ++i )  {^101^^^^^95^105^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( keys.getLabel (  ) , dflt, labels ) ;^104^^^^^95^105^mv.visitLookupSwitchInsn ( dflt.getLabel (  ) , keys, labels ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( dflt.getLabel (  ) , labels, keys ) ;^104^^^^^95^105^mv.visitLookupSwitchInsn ( dflt.getLabel (  ) , keys, labels ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] LabelNode  dflt  Label[]  labels  boolean  List  keys  labels  int[]  keys  int  i  MethodVisitor  mv  
[BugLab_Variable_Misuse]^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( keys, labels )  ) ;^108^109^^^^107^112^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( this.labels, labels )  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] LabelNode  dflt  List  keys  labels  LookupSwitchInsnNode  clone  boolean  Map  labels  
[BugLab_Argument_Swapping]^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, this.labels ) , null, clone ( labels, labels )  ) ;^108^109^^^^107^112^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( this.labels, labels )  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] LabelNode  dflt  List  keys  labels  LookupSwitchInsnNode  clone  boolean  Map  labels  
[BugLab_Argument_Swapping]^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( labels, dflt ) , null, clone ( this.labels, labels )  ) ;^108^109^^^^107^112^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( this.labels, labels )  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] LabelNode  dflt  List  keys  labels  LookupSwitchInsnNode  clone  boolean  Map  labels  
[BugLab_Variable_Misuse]^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( labels, labels )  ) ;^108^109^^^^107^112^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( this.labels, labels )  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] LabelNode  dflt  List  keys  labels  LookupSwitchInsnNode  clone  boolean  Map  labels  
[BugLab_Argument_Swapping]^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( this.labels, labels ) , null, clone ( dflt, labels )  ) ;^108^109^^^^107^112^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( this.labels, labels )  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] LabelNode  dflt  List  keys  labels  LookupSwitchInsnNode  clone  boolean  Map  labels  
[BugLab_Variable_Misuse]^labels ) , null, clone ( keys, labels )  ) ;^109^^^^^107^112^labels ) , null, clone ( this.labels, labels )  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] LabelNode  dflt  List  keys  labels  LookupSwitchInsnNode  clone  boolean  Map  labels  
[BugLab_Argument_Swapping]^labels ) , null, clone ( labels, this.labels )  ) ;^109^^^^^107^112^labels ) , null, clone ( this.labels, labels )  ) ;^[CLASS] LookupSwitchInsnNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] LabelNode  dflt  List  keys  labels  LookupSwitchInsnNode  clone  boolean  Map  labels  
