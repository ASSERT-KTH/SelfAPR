[BugLab_Wrong_Literal]^super ( -type ) ;^109^^^^^108^129^super ( -1 ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.type = nStack;^110^^^^^108^129^this.type = type;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.local = asList ( type, local ) ;^114^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.local = asList ( nLocal, stack ) ;^114^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^this.local = asList ( local, nLocal ) ;^114^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.stack = asList ( type, stack ) ;^115^^^^^108^129^this.stack = asList ( nStack, stack ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.stack = asList ( nStack, local ) ;^115^^^^^108^129^this.stack = asList ( nStack, stack ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^this.stack = asList ( stack, nStack ) ;^115^^^^^108^129^this.stack = asList ( nStack, stack ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.local = asList ( type, local ) ;^118^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^this.local = asList ( local, nLocal ) ;^118^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.local = asList ( type, local ) ;^121^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.local = asList ( nLocal, stack ) ;^121^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Argument_Swapping]^this.local = asList ( local, nLocal ) ;^121^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.stack = asList ( 1, local ) ;^126^^^^^108^129^this.stack = asList ( 1, stack ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^this.stack = asList ( 2, stack ) ;^126^^^^^108^129^this.stack = asList ( 1, stack ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^this.local = asList ( nLocal, stack ) ;^118^^^^^108^129^this.local = asList ( nLocal, local ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Wrong_Literal]^this.stack = asList ( type, stack ) ;^126^^^^^108^129^this.stack = asList ( 1, stack ) ;^[CLASS] FrameNode  [METHOD] <init> [RETURN_TYPE] Object[])   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  Object[]  local  stack  
[BugLab_Variable_Misuse]^mv.visitFrame ( nStack, local.size (  ) , asArray ( local ) , stack.size (  ) ,^144^145^146^147^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , stack.size (  ) ,^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , local.size (  ) ,^144^145^146^147^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , stack.size (  ) ,^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Argument_Swapping]^mv.visitFrame ( local, type.size (  ) , asArray ( local ) , stack.size (  ) ,^144^145^146^147^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , stack.size (  ) ,^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^local.size (  ) , asArray ( stack ) , stack.size (  ) , asArray ( stack )  ) ;^145^146^147^148^^140^163^local.size (  ) , asArray ( local ) , stack.size (  ) , asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^asArray ( stack ) , stack.size (  ) , asArray ( stack )  ) ;^146^147^148^^^140^163^asArray ( local ) , stack.size (  ) , asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^stack.size (  ) , asArray ( local )  ) ;^147^148^^^^140^163^stack.size (  ) , asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^asArray ( local )  ) ;^148^^^^^140^163^asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( nStack, local.size (  ) , asArray ( local ) , 0, null ) ;^151^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( type, stack.size (  ) , asArray ( local ) , 0, null ) ;^151^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Argument_Swapping]^mv.visitFrame ( local, type.size (  ) , asArray ( local ) , 0, null ) ;^151^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Wrong_Literal]^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , , null ) ;^151^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( nStack, local.size (  ) , asArray ( local ) , 0, null ) ;^154^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( type, stack.size (  ) , asArray ( local ) , 0, null ) ;^154^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Argument_Swapping]^mv.visitFrame ( local, type.size (  ) , asArray ( local ) , 0, null ) ;^154^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Wrong_Literal]^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , , null ) ;^154^^^^^140^163^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( nStack, 0, null, 0, null ) ;^157^^^^^140^163^mv.visitFrame ( type, 0, null, 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Wrong_Literal]^mv.visitFrame ( type, nLocal, null, nLocal, null ) ;^157^^^^^140^163^mv.visitFrame ( type, 0, null, 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Wrong_Literal]^mv.visitFrame ( type, -1, null, -1, null ) ;^157^^^^^140^163^mv.visitFrame ( type, 0, null, 0, null ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( nStack, 0, null, 1, asArray ( stack )  ) ;^160^^^^^140^163^mv.visitFrame ( type, 0, null, 1, asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^mv.visitFrame ( type, 0, null, 1, asArray ( local )  ) ;^160^^^^^140^163^mv.visitFrame ( type, 0, null, 1, asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Argument_Swapping]^mv.visitFrame ( stack, 0, null, 1, asArray ( type )  ) ;^160^^^^^140^163^mv.visitFrame ( type, 0, null, 1, asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Wrong_Literal]^mv.visitFrame ( type, type, null, 1, asArray ( stack )  ) ;^160^^^^^140^163^mv.visitFrame ( type, 0, null, 1, asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Wrong_Literal]^mv.visitFrame ( type, 0, null, nLocal, asArray ( stack )  ) ;^160^^^^^140^163^mv.visitFrame ( type, 0, null, 1, asArray ( stack )  ) ;^[CLASS] FrameNode  [METHOD] accept [RETURN_TYPE] void   MethodVisitor mv [VARIABLES] List  local  stack  boolean  int  nLocal  nStack  type  MethodVisitor  mv  
[BugLab_Variable_Misuse]^if  ( socal != null )  {^168^^^^^165^189^if  ( local != null )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^if  ( stack != null )  {^168^^^^^165^189^if  ( local != null )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( local == null )  {^168^^^^^165^189^if  ( local != null )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^if  ( s instanceof LabelNode )  {^172^^^^^165^189^if  ( l instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( l  !=  LabelNode )  {^172^^^^^165^189^if  ( l instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^l = sabels.get ( l ) ;^173^^^^^165^189^l = labels.get ( l ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Argument_Swapping]^l = l.get ( labels ) ;^173^^^^^165^189^l = labels.get ( l ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Argument_Swapping]^l = labelsabels.get ( l ) ;^173^^^^^165^189^l = labels.get ( l ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^for  ( typent i = 0; i < local.size (  ) ; ++i )  {^170^^^^^165^189^for  ( int i = 0; i < local.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < socal.size (  ) ; ++i )  {^170^^^^^165^189^for  ( int i = 0; i < local.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= local.size (  ) ; ++i )  {^170^^^^^165^189^for  ( int i = 0; i < local.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( l  >=  LabelNode )  {^172^^^^^165^189^if  ( l instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^Object l = stack.get ( i ) ;^171^^^^^165^189^Object l = local.get ( i ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Argument_Swapping]^Object l = i.get ( local ) ;^171^^^^^165^189^Object l = local.get ( i ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^Object l = local.get ( type ) ;^171^^^^^165^189^Object l = local.get ( i ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^clone.local.add ( s ) ;^175^^^^^165^189^clone.local.add ( l ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < local.size (  ) ; ++i )  {^170^^^^^165^189^for  ( int i = 0; i < local.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^170^^^^^165^189^for  ( int i = 0; i < local.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( l  <=  LabelNode )  {^172^^^^^165^189^if  ( l instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^if  ( ltack != null )  {^178^^^^^165^189^if  ( stack != null )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^if  ( local != null )  {^178^^^^^165^189^if  ( stack != null )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( stack == null )  {^178^^^^^165^189^if  ( stack != null )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^if  ( l instanceof LabelNode )  {^182^^^^^165^189^if  ( s instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( s  |  LabelNode )  {^182^^^^^165^189^if  ( s instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^s = labels.get ( l ) ;^183^^^^^165^189^s = labels.get ( s ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Argument_Swapping]^s = s.get ( labels ) ;^183^^^^^165^189^s = labels.get ( s ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^for  ( typent i = 0; i < stack.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < ltack.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < local.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Argument_Swapping]^for  ( stacknt i = 0; i < i.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > stack.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Literal]^for  ( int i = type; i < stack.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^Object s = stack.get ( type ) ;^181^^^^^165^189^Object s = stack.get ( i ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^Object s = local.get ( i ) ;^181^^^^^165^189^Object s = stack.get ( i ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Argument_Swapping]^Object s = i.get ( stack ) ;^181^^^^^165^189^Object s = stack.get ( i ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^clone.stack.add ( l ) ;^185^^^^^165^189^clone.stack.add ( s ) ;^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < stack.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( s  ==  LabelNode )  {^182^^^^^165^189^if  ( s instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == stack.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < stack.size (  ) ; ++i )  {^180^^^^^165^189^for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Wrong_Operator]^if  ( s  &&  LabelNode )  {^182^^^^^165^189^if  ( s instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] clone [RETURN_TYPE] AbstractInsnNode   Map labels [VARIABLES] List  local  stack  FrameNode  clone  Object  l  s  boolean  Map  labels  int  i  nLocal  nStack  type  
[BugLab_Variable_Misuse]^return Arrays.asList ( o ) .subList ( 0, type ) ;^194^^^^^193^195^return Arrays.asList ( o ) .subList ( 0, n ) ;^[CLASS] FrameNode  [METHOD] asList [RETURN_TYPE] List   final int n Object[] o [VARIABLES] List  local  stack  boolean  int  i  n  nLocal  nStack  type  Object[]  o  
[BugLab_Argument_Swapping]^return Arrays.asList ( n ) .subList ( 0, o ) ;^194^^^^^193^195^return Arrays.asList ( o ) .subList ( 0, n ) ;^[CLASS] FrameNode  [METHOD] asList [RETURN_TYPE] List   final int n Object[] o [VARIABLES] List  local  stack  boolean  int  i  n  nLocal  nStack  type  Object[]  o  
[BugLab_Wrong_Operator]^if  ( o  >  LabelNode )  {^201^^^^^197^207^if  ( o instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Variable_Misuse]^for  ( typent i = 0; i < objs.length; ++i )  {^199^^^^^197^207^for  ( int i = 0; i < objs.length; ++i )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < nStack; ++i )  {^199^^^^^197^207^for  ( int i = 0; i < objs.length; ++i )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Argument_Swapping]^for  ( objs.lengthnt i = 0; i < i; ++i )  {^199^^^^^197^207^for  ( int i = 0; i < objs.length; ++i )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= objs.length; ++i )  {^199^^^^^197^207^for  ( int i = 0; i < objs.length; ++i )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Wrong_Literal]^for  ( int i = nStack; i < objs.length; ++i )  {^199^^^^^197^207^for  ( int i = 0; i < objs.length; ++i )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Wrong_Operator]^if  ( o  >=  LabelNode )  {^201^^^^^197^207^if  ( o instanceof LabelNode )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Variable_Misuse]^Object o = l.get ( type ) ;^200^^^^^197^207^Object o = l.get ( i ) ;^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Argument_Swapping]^Object o = i.get ( l ) ;^200^^^^^197^207^Object o = l.get ( i ) ;^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Variable_Misuse]^Object o = stack.get ( i ) ;^200^^^^^197^207^Object o = l.get ( i ) ;^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
[BugLab_Wrong_Literal]^for  ( int i = nLocal; i < objs.length; ++i )  {^199^^^^^197^207^for  ( int i = 0; i < objs.length; ++i )  {^[CLASS] FrameNode  [METHOD] asArray [RETURN_TYPE] Object[]   List l [VARIABLES] List  l  local  stack  Object  o  boolean  int  i  n  nLocal  nStack  type  Object[]  objs  
