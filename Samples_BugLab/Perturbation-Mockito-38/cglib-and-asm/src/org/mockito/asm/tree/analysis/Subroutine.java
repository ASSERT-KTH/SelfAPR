[buglab_swap_variables]^System.arraycopy ( access, 0, access.length.access, 0, result ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^System.arraycopy ( access, 0.access, 0, access.length ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^System.arraycopy ( result.access, 0, access, 0, access.length ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^System.arraycopy (  0, result.access, 0, access.length ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^System.arraycopy ( access, 0, access.length, 0, result.access ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^System.arraycopy ( access, 0,  0, access.length ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^System.arraycopy ( access.length, 0, result.access, 0, access ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^System.arraycopy ( access, 0, result.access, 0 ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[buglab_swap_variables]^if  ( subroutine.access.access[i] && !access[i] )  {^77^^^^^74^92^if  ( subroutine.access[i] && !access[i] )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^for  ( accessnt i = 0; i < i.length; ++i )  {^76^^^^^74^92^for  ( int i = 0; i < access.length; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^for  ( access.lengthnt i = 0; i < i; ++i )  {^76^^^^^74^92^for  ( int i = 0; i < access.length; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^for  ( int i = 0; i < subroutine.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^Object caller = i.callers.get ( subroutine ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^Object caller = subroutine.get ( i ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^Object caller = subroutine.callers.callers.get ( i ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^Object caller = i.get ( subroutine.callers ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^for  ( int i = 0; i < subroutine.callers.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[buglab_swap_variables]^for  ( subroutinent i = 0; i < i.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
