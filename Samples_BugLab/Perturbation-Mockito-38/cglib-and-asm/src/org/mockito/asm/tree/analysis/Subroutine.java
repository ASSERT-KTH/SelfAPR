[BugLab_Variable_Misuse]^System.arraycopy ( access, 0, access, 0, access.length ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[BugLab_Argument_Swapping]^System.arraycopy ( access, 0, access.length.access, 0, result ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[BugLab_Argument_Swapping]^System.arraycopy ( result.access, 0, access, 0, access.length ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[BugLab_Wrong_Literal]^System.arraycopy ( access, 1, result.access, 1, access.length ) ;^69^^^^^65^72^System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[CLASS] Subroutine  [METHOD] copy [RETURN_TYPE] Subroutine   [VARIABLES] LabelNode  start  List  callers  boolean[]  access  boolean  Subroutine  result  
[BugLab_Wrong_Literal]^boolean changes = true;^75^^^^^74^92^boolean changes = false;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Operator]^if  ( subroutine.access[i] || !access[i] )  {^77^^^^^74^92^if  ( subroutine.access[i] && !access[i] )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Literal]^access[i] = false;^78^^^^^74^92^access[i] = true;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Literal]^changes = false;^79^^^^^74^92^changes = true;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < access.length.length; ++i )  {^76^^^^^74^92^for  ( int i = 0; i < access.length; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= access.length; ++i )  {^76^^^^^74^92^for  ( int i = 0; i < access.length; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < access.length; ++i )  {^76^^^^^74^92^for  ( int i = 0; i < access.length; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Variable_Misuse]^if  ( access[i] && !access[i] )  {^77^^^^^74^92^if  ( subroutine.access[i] && !access[i] )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < access.length; ++i )  {^76^^^^^74^92^for  ( int i = 0; i < access.length; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Variable_Misuse]^if  ( start == start )  {^82^^^^^74^92^if  ( subroutine.start == start )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^if  ( subroutine.start.start == start )  {^82^^^^^74^92^if  ( subroutine.start == start )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^if  ( start == subroutine.start )  {^82^^^^^74^92^if  ( subroutine.start == start )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Operator]^if  ( subroutine.start != start )  {^82^^^^^74^92^if  ( subroutine.start == start )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Literal]^changes = false;^87^^^^^74^92^changes = true;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^for  ( subroutinent i = 0; i < i.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < subroutine.callers.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < subroutine.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > subroutine.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < subroutine.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Variable_Misuse]^Object caller = callers.get ( i ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^Object caller = subroutine.callers.callers.get ( i ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^Object caller = i.callers.get ( subroutine ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^Object caller = i.get ( subroutine.callers ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < subroutine.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Argument_Swapping]^Object caller = subroutine.get ( i ) ;^84^^^^^74^92^Object caller = subroutine.callers.get ( i ) ;^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == subroutine.callers.size (  ) ; ++i )  {^83^^^^^74^92^for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[CLASS] Subroutine  [METHOD] merge [RETURN_TYPE] boolean   Subroutine subroutine [VARIABLES] LabelNode  start  boolean  changes  Subroutine  subroutine  List  callers  Object  caller  boolean[]  access  int  i  
