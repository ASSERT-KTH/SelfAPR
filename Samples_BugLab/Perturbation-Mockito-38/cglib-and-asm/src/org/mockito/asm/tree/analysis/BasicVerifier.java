[BugLab_Variable_Misuse]^if  ( ! (  ( BasicValue )  expected ) .isReference (  )  )  {^70^^^^^55^85^if  ( ! (  ( BasicValue )  value ) .isReference (  )  )  {^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, "an object reference", expected ) ;^71^72^73^^^56^86^throw new AnalyzerException ( null, "an object reference", value ) ;^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( ! (  ( BasicValue )  expected ) .isReference (  ) && value != BasicValue.RETURNADDRESS_VALUE ) {^77^78^79^^^62^92^if  ( ! (  ( BasicValue )  value ) .isReference (  ) && value != BasicValue.RETURNADDRESS_VALUE ) {^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^if  ( ! (  ( BasicValue )  value ) .isReference (  ) || value != BasicValue.RETURNADDRESS_VALUE ) {^77^78^79^^^62^92^if  ( ! (  ( BasicValue )  value ) .isReference (  ) && value != BasicValue.RETURNADDRESS_VALUE ) {^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^if  ( ! (  ( BasicValue )  value ) .isReference (  ) && value >= BasicValue.RETURNADDRESS_VALUE ) {^77^78^79^^^62^92^if  ( ! (  ( BasicValue )  value ) .isReference (  ) && value != BasicValue.RETURNADDRESS_VALUE ) {^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, "an object reference or a return address", expected ) ;^80^81^82^^^77^83^throw new AnalyzerException ( null, "an object reference or a return address", value ) ;^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^return expected;^75^^^^^60^90^return value;^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^return expected;^84^^^^^69^99^return value;^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^return expected;^86^^^^^71^101^return value;^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, "an object reference or a return address", expected ) ;^80^81^82^^^65^95^throw new AnalyzerException ( null, "an object reference or a return address", value ) ;^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^if  ( expected != value )  {^90^^^^^75^105^if  ( value != expected )  {^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^if  ( value <= expected )  {^90^^^^^75^105^if  ( value != expected )  {^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^return expected;^93^^^^^78^108^return value;^[CLASS] BasicVerifier  [METHOD] copyOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( ! (  ( BasicValue )  expected ) .isReference (  )  )  {^147^^^^^132^162^if  ( ! (  ( BasicValue )  value ) .isReference (  )  )  {^[CLASS] BasicVerifier  [METHOD] unaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, "an object reference", expected ) ;^148^149^150^^^133^163^throw new AnalyzerException ( null, "an object reference", value ) ;^[CLASS] BasicVerifier  [METHOD] unaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( !isArrayValue ( expected )  )  {^154^^^^^139^169^if  ( !isArrayValue ( value )  )  {^[CLASS] BasicVerifier  [METHOD] unaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, "an array reference", expected ) ;^155^156^157^^^140^170^throw new AnalyzerException ( null, "an array reference", value ) ;^[CLASS] BasicVerifier  [METHOD] unaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, "an object reference", expected ) ;^168^169^170^^^153^183^throw new AnalyzerException ( null, "an object reference", value ) ;^[CLASS] BasicVerifier  [METHOD] unaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^if  ( !isSubTypeOf ( expected, value )  )  {^179^^^^^164^194^if  ( !isSubTypeOf ( value, expected )  )  {^[CLASS] BasicVerifier  [METHOD] unaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value [VARIABLES] boolean  Value  expected  value  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( isSubTypeOf ( value2, newValue ( Type.getType ( "[Z" )  )  )  )  {^198^^^^^183^213^if  ( isSubTypeOf ( value1, newValue ( Type.getType ( "[Z" )  )  )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( !isSubTypeOf ( value2, expected1 )  )  {^300^^^^^285^315^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( !isSubTypeOf ( value1, value1 )  )  {^300^^^^^285^315^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^} else if  ( !isSubTypeOf ( value1, expected2 )  )  {^302^^^^^287^317^} else if  ( !isSubTypeOf ( value2, expected2 )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^} else if  ( !isSubTypeOf ( value2, value1 )  )  {^302^^^^^287^317^} else if  ( !isSubTypeOf ( value2, expected2 )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^} else if  ( !isSubTypeOf ( expected2, value2 )  )  {^302^^^^^287^317^} else if  ( !isSubTypeOf ( value2, expected2 )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( !isSubTypeOf ( value1, value2 )  )  {^300^^^^^285^315^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^if  ( !isSubTypeOf ( expected1, value1 )  )  {^300^^^^^285^315^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^if  ( insn.getOpcode (  )  < AALOAD )  {^305^^^^^290^320^if  ( insn.getOpcode (  )  == AALOAD )  {^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^return getElementValue ( value2 ) ;^306^^^^^291^321^return getElementValue ( value1 ) ;^[CLASS] BasicVerifier  [METHOD] binaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 [VARIABLES] boolean  Value  expected1  expected2  value1  value2  FieldInsnNode  fin  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( isSubTypeOf ( value3, newValue ( Type.getType ( "[Z" )  )  )  )  {^326^^^^^311^341^if  ( isSubTypeOf ( value1, newValue ( Type.getType ( "[Z" )  )  )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^expected1 = value3;^354^^^^^339^369^expected1 = value1;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( !isSubTypeOf ( value3, expected1 )  )  {^360^^^^^345^375^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( !isSubTypeOf ( value1, value2 )  )  {^360^^^^^345^375^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^} else if  ( value1 != BasicValue.INT_VALUE )  {^363^^^^^348^378^} else if  ( value2 != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^} else if  ( BasicValue.INT_VALUE != value2 )  {^363^^^^^348^378^} else if  ( value2 != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^} else if  ( value2 == BasicValue.INT_VALUE )  {^363^^^^^348^378^} else if  ( value2 != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^} else if  ( !isSubTypeOf ( value2, expected3 )  )  {^367^^^^^352^382^} else if  ( !isSubTypeOf ( value3, expected3 )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^} else if  ( !isSubTypeOf ( expected3, value3 )  )  {^367^^^^^352^382^} else if  ( !isSubTypeOf ( value3, expected3 )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^} else if  ( !isSubTypeOf ( value3, value2 )  )  {^367^^^^^352^382^} else if  ( !isSubTypeOf ( value3, expected3 )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Second argument", value2, BasicValue.INT_VALUE ) ;^364^365^366^^^349^379^throw new AnalyzerException ( "Second argument", BasicValue.INT_VALUE, value2 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Second argument", BasicValue.INT_VALUE, value3 ) ;^364^365^366^^^349^379^throw new AnalyzerException ( "Second argument", BasicValue.INT_VALUE, value2 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "First argument", "a " + value3 + " array reference", value1 ) ;^361^362^^^^346^376^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value1 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value3 ) ;^361^362^^^^346^376^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value1 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "First argument", "a " + value1 + " array reference", expected1 ) ;^361^362^^^^346^376^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value1 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^throw new AnalyzerException ( "First argument", "a "  <=  expected1 + " array reference", value1 ) ;^361^362^^^^346^376^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value1 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^throw new AnalyzerException ( "First argument", "a "  <<  expected1 + " array reference", value1 ) ;^361^362^^^^346^376^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value1 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^} else if  ( value3 != BasicValue.INT_VALUE )  {^363^^^^^348^378^} else if  ( value2 != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^throw new AnalyzerException ( "First argument", "a "  &&  expected1 + " array reference", value1 ) ;^361^362^^^^346^376^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value1 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^throw new AnalyzerException ( "First argument", "a "  !=  expected1 + " array reference", value1 ) ;^361^362^^^^346^376^throw new AnalyzerException ( "First argument", "a " + expected1 + " array reference", value1 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Second argument", BasicValue.INT_VALUE, value1 ) ;^364^365^366^^^349^379^throw new AnalyzerException ( "Second argument", BasicValue.INT_VALUE, value2 ) ;^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Variable_Misuse]^if  ( !isSubTypeOf ( value1, value3 )  )  {^360^^^^^345^375^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Argument_Swapping]^if  ( !isSubTypeOf ( expected1, value1 )  )  {^360^^^^^345^375^if  ( !isSubTypeOf ( value1, expected1 )  )  {^[CLASS] BasicVerifier  [METHOD] ternaryOperation [RETURN_TYPE] Value   AbstractInsnNode insn Value value1 Value value2 Value value3 [VARIABLES] boolean  Value  expected1  expected3  value1  value2  value3  AbstractInsnNode  insn  
[BugLab_Wrong_Operator]^while  ( i == values.size (  )  )  {^397^^^^^382^412^while  ( i < values.size (  )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^if  ( !isSubTypeOf ( expected, encountered )  )  {^400^^^^^385^415^if  ( !isSubTypeOf ( encountered, expected )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Argument " + opcode, expected, encountered ) ;^401^402^403^^^386^416^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Argument " + j, encountered, encountered ) ;^401^402^403^^^386^416^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Argument " + encountered, expected, j ) ;^401^402^403^^^386^416^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Argument " + expected, j, encountered ) ;^401^402^403^^^386^416^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Argument " + j, encountered, expected ) ;^401^402^403^^^386^416^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Argument " + j, expected, expected ) ;^401^402^403^^^386^416^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Operator]^if  ( opcode != MULTIANEWARRAY )  {^377^^^^^362^392^if  ( opcode == MULTIANEWARRAY )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^while  ( opcode < values.size (  )  )  {^397^^^^^377^406^while  ( i < values.size (  )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^while  ( values < i.size (  )  )  {^397^^^^^377^406^while  ( i < values.size (  )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Operator]^while  ( i == values.size (  )  )  {^397^^^^^377^406^while  ( i < values.size (  )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^if  ( !isSubTypeOf ( expected, encountered )  )  {^400^^^^^377^406^if  ( !isSubTypeOf ( encountered, expected )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Argument " + opcode, expected, encountered ) ;^401^402^403^^^377^406^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Argument " + encountered, expected, j ) ;^401^402^403^^^377^406^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Argument " + j, encountered, expected ) ;^401^402^403^^^377^406^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Argument " + j, expected, expected ) ;^401^402^403^^^377^406^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Argument " + expected, j, encountered ) ;^401^402^403^^^377^406^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Operator]^if  ( opcode == INVOKESTATIC )  {^388^^^^^377^406^if  ( opcode != INVOKESTATIC )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^if  ( !isSubTypeOf (  ( Value )  owner.get ( i++ ) , newValue ( values )  )  )  {^390^^^^^377^406^if  ( !isSubTypeOf (  ( Value )  values.get ( i++ ) , newValue ( owner )  )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Method values", newValue ( owner ) , ( Value )  owner.get ( 0 )  ) ;^391^392^393^^^377^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 1 )  ) ;^391^392^393^^^377^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^( Value )  values.get ( 1 )  ) ;^393^^^^^377^406^( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get (  )  ) ;^391^392^393^^^377^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( i )  ) ;^391^392^393^^^377^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^( Value )  values.get (  )  ) ;^393^^^^^377^406^( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( -1 )  ) ;^391^392^393^^^377^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^( Value )  values.get ( i )  ) ;^393^^^^^377^406^( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( "Argument " + j, encountered, encountered ) ;^401^402^403^^^377^406^throw new AnalyzerException ( "Argument " + j, expected, encountered ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( opcode )  ) ;^391^392^393^^^377^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^int i = opcode;^386^^^^^377^406^int i = 0;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^int j = -1;^387^^^^^377^406^int j = 0;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( j )  ) ;^391^392^393^^^377^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^if  ( values.get ( opcode )  != BasicValue.INT_VALUE )  {^379^^^^^364^394^if  ( values.get ( i )  != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^if  ( i.get ( values )  != BasicValue.INT_VALUE )  {^379^^^^^364^394^if  ( values.get ( i )  != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^if  ( values.get ( BasicValue.INT_VALUE )  != i )  {^379^^^^^364^394^if  ( values.get ( i )  != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Operator]^if  ( values.get ( i )  == BasicValue.INT_VALUE )  {^379^^^^^364^394^if  ( values.get ( i )  != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( null, values, ( Value )  BasicValue.INT_VALUE.get ( i )  ) ;^380^381^382^^^365^395^throw new AnalyzerException ( null, BasicValue.INT_VALUE, ( Value )  values.get ( i )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( null, BasicValue.INT_VALUE, ( Value )  i.get ( values )  ) ;^380^381^382^^^365^395^throw new AnalyzerException ( null, BasicValue.INT_VALUE, ( Value )  values.get ( i )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( null, i, ( Value )  values.get ( BasicValue.INT_VALUE )  ) ;^380^381^382^^^365^395^throw new AnalyzerException ( null, BasicValue.INT_VALUE, ( Value )  values.get ( i )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, BasicValue.INT_VALUE, ( Value )  values.get ( opcode )  ) ;^380^381^382^^^365^395^throw new AnalyzerException ( null, BasicValue.INT_VALUE, ( Value )  values.get ( i )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^( Value )  i.get ( values )  ) ;^382^^^^^367^397^( Value )  values.get ( i )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^for  ( opcodent i = 0; i < values.size (  ) ; ++i )  {^378^^^^^363^393^for  ( int i = 0; i < values.size (  ) ; ++i )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^for  ( valuesnt i = 0; i < i.size (  ) ; ++i )  {^378^^^^^363^393^for  ( int i = 0; i < values.size (  ) ; ++i )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= values.size (  ) ; ++i )  {^378^^^^^363^393^for  ( int i = 0; i < values.size (  ) ; ++i )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^for  ( int i = opcode; i < values.size (  ) ; ++i )  {^378^^^^^363^393^for  ( int i = 0; i < values.size (  ) ; ++i )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^if  ( BasicValue.INT_VALUE.get ( i )  != values )  {^379^^^^^364^394^if  ( values.get ( i )  != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^( Value )  values.get ( opcode )  ) ;^382^^^^^367^397^( Value )  values.get ( i )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < values.size (  ) ; ++i )  {^378^^^^^363^393^for  ( int i = 0; i < values.size (  ) ; ++i )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^if  ( values.get ( i )  != null )  {^379^^^^^364^394^if  ( values.get ( i )  != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Operator]^if  ( values.get ( i )  <= BasicValue.INT_VALUE )  {^379^^^^^364^394^if  ( values.get ( i )  != BasicValue.INT_VALUE )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^throw new AnalyzerException ( null, null, ( Value )  values.get ( i )  ) ;^380^381^382^^^365^395^throw new AnalyzerException ( null, BasicValue.INT_VALUE, ( Value )  values.get ( i )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Operator]^if  ( opcode <= INVOKESTATIC )  {^388^^^^^373^403^if  ( opcode != INVOKESTATIC )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^if  ( !isSubTypeOf (  ( Value )  owner.get ( i++ ) , newValue ( values )  )  )  {^390^^^^^375^405^if  ( !isSubTypeOf (  ( Value )  values.get ( i++ ) , newValue ( owner )  )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Argument_Swapping]^throw new AnalyzerException ( "Method values", newValue ( owner ) , ( Value )  owner.get ( 0 )  ) ;^391^392^393^^^376^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( opcode )  ) ;^391^392^393^^^376^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^( Value )  values.get ( i )  ) ;^393^^^^^378^408^( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( j )  ) ;^391^392^393^^^376^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^( Value )  values.get ( 1 )  ) ;^393^^^^^378^408^( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^if  ( !isSubTypeOf ( encountered, encountered )  )  {^400^^^^^385^415^if  ( !isSubTypeOf ( encountered, expected )  )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^for  ( int i = i; i < values.size (  ) ; ++i )  {^378^^^^^363^393^for  ( int i = 0; i < values.size (  ) ; ++i )  {^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^int j = 1;^387^^^^^372^402^int j = 0;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( i )  ) ;^391^392^393^^^376^406^throw new AnalyzerException ( "Method owner", newValue ( owner ) , ( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Wrong_Literal]^( Value )  values.get ( j )  ) ;^393^^^^^378^408^( Value )  values.get ( 0 )  ) ;^[CLASS] BasicVerifier  [METHOD] naryOperation [RETURN_TYPE] Value   AbstractInsnNode insn List values [VARIABLES] Type  owner  boolean  Type[]  args  Value  encountered  expected  List  values  AbstractInsnNode  insn  int  i  j  opcode  
[BugLab_Variable_Misuse]^return 2;^417^^^^^414^418^return BasicValue.REFERENCE_VALUE;^[CLASS] BasicVerifier  [METHOD] getElementValue [RETURN_TYPE] Value   Value objectArrayValue [VARIABLES] boolean  Value  objectArrayValue  
[BugLab_Argument_Swapping]^return expected == value;^421^^^^^420^422^return value == expected;^[CLASS] BasicVerifier  [METHOD] isSubTypeOf [RETURN_TYPE] boolean   Value value Value expected [VARIABLES] boolean  Value  expected  value  
[BugLab_Wrong_Operator]^return value != expected;^421^^^^^420^422^return value == expected;^[CLASS] BasicVerifier  [METHOD] isSubTypeOf [RETURN_TYPE] boolean   Value value Value expected [VARIABLES] boolean  Value  expected  value  
