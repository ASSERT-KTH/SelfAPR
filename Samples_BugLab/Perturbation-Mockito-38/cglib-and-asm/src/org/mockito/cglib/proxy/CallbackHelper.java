[BugLab_Variable_Misuse]^Enhancer.getMethods ( superclass, interfaces, callbacks ) ;^35^^^^^32^55^Enhancer.getMethods ( superclass, interfaces, methods ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^Enhancer.getMethods ( methods, interfaces, superclass ) ;^35^^^^^32^55^Enhancer.getMethods ( superclass, interfaces, methods ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^Enhancer.getMethods ( interfaces, superclass, methods ) ;^35^^^^^32^55^Enhancer.getMethods ( superclass, interfaces, methods ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( callback != null ) throw new IllegalStateException  (" ")  ;^40^41^^^^32^55^if  ( callback == null ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^if  ( ! ( callback ||  ( isCallback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^43^44^^^^32^55^if  ( ! ( isCallback ||  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( ! ( isCallback &&  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^43^44^^^^32^55^if  ( ! ( isCallback ||  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( ! ( isCallback ||  ( callback  !=  Class )  )  ) throw new IllegalStateException  (" ")  ;^43^44^^^^32^55^if  ( ! ( isCallback ||  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^if  ( size > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^if  ( i > 0 &&  (  ( methods.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^if  ( callbacks > 0 &&  (  ( i.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^if  ( isCallback > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ i )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i > 0 ||  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i >= 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )   !=  Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i > 0 &&  (  ( callbacks.get ( i  &  1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^if  ( i > size &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^if  ( i > 0 &&  (  ( callbacks.get ( i - size )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( index != null )  {^48^^^^^32^55^if  ( index == null )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^index = new Integer ( methods.size (  )  ) ;^49^^^^^32^55^index = new Integer ( callbacks.size (  )  ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^indexes.put ( index, callback ) ;^50^^^^^32^55^indexes.put ( callback, index ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^for  ( int i = 0, size = callbacks.size (  ) ; i < size; i++ )  {^37^^^^^32^55^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^for  ( sizent i = 0, size = methods.size (  ) ; i < size; i++ )  {^37^^^^^32^55^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^for  ( sizent i = 0, i = methods.size (  ) ; i < size; i++ )  {^37^^^^^32^55^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^for  ( int i = 0, size = methods.size (  ) ; i <= size; i++ )  {^37^^^^^32^55^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^for  ( int i = 1, size = methods.size (  ) ; i < size; i++ )  {^37^^^^^32^55^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^for  ( int i = i, size = methods.size (  ) ; i < size; i++ )  {^37^^^^^32^55^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( ! ( isCallback ||  ( callback  <  Class )  )  ) throw new IllegalStateException  (" ")  ;^43^44^^^^32^55^if  ( ! ( isCallback ||  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^if  ( i > 0 &&  (  ( isCallback.get ( i - 1 )  instanceof Callback )  ^ callbacks )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i < 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )   >>  Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i > 0 &&  (  ( callbacks.get ( i  !=  1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^if  ( i > -1 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^if  ( i > 0 &&  (  ( callbacks.get ( i  )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^Method method =  ( Method ) callbacks.get ( i ) ;^38^^^^^32^55^Method method =  ( Method ) methods.get ( i ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^Method method =  ( Method ) methods.get ( size ) ;^38^^^^^32^55^Method method =  ( Method ) methods.get ( i ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^Method method =  ( Method ) i.get ( methods ) ;^38^^^^^32^55^Method method =  ( Method ) methods.get ( i ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^boolean isCallback = callback  !=  Callback;^42^^^^^32^55^boolean isCallback = callback instanceof Callback;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Variable_Misuse]^Integer index =  ( Integer ) methodMap.get ( callback ) ;^47^^^^^32^55^Integer index =  ( Integer ) indexes.get ( callback ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^Integer index =  ( Integer ) callback.get ( indexes ) ;^47^^^^^32^55^Integer index =  ( Integer ) indexes.get ( callback ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i > 0 &&  (  ( callbacks.get ( i  ||  1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^if  ( i > 0 &&  (  ( callbacks.get ( i - i )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Argument_Swapping]^methodMap.put ( index, method ) ;^52^^^^^32^55^methodMap.put ( method, index ) ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Literal]^for  ( int i = size, size = methods.size (  ) ; i < size; i++ )  {^37^^^^^32^55^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^boolean isCallback = callback  >>  Callback;^42^^^^^32^55^boolean isCallback = callback instanceof Callback;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( i > 0 &&  (  ( callbacks.get ( i  <  1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[CLASS] CallbackHelper  [METHOD] <init> [RETURN_TYPE] Class[])   Class superclass Class[] interfaces [VARIABLES] Integer  index  Class[]  interfaces  boolean  isCallback  List  callbacks  methods  Class  superclass  Object  callback  Method  method  Map  indexes  methodMap  int  i  size  
[BugLab_Wrong_Operator]^if  ( callbacks.size (  )  != 0 ) return new Callback[0];^61^62^^^^59^68^if  ( callbacks.size (  )  == 0 ) return new Callback[0];^[CLASS] CallbackHelper  [METHOD] getCallbacks [RETURN_TYPE] Callback[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Literal]^if  ( callbacks.size (  )  == 1 ) return new Callback[1];^61^62^^^^59^68^if  ( callbacks.size (  )  == 0 ) return new Callback[0];^[CLASS] CallbackHelper  [METHOD] getCallbacks [RETURN_TYPE] Callback[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Literal]^return new Callback[1];^62^^^^^59^68^return new Callback[0];^[CLASS] CallbackHelper  [METHOD] getCallbacks [RETURN_TYPE] Callback[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Variable_Misuse]^if  ( methods.size (  )  == 0 ) return new Callback[0];^61^62^^^^59^68^if  ( callbacks.size (  )  == 0 ) return new Callback[0];^[CLASS] CallbackHelper  [METHOD] getCallbacks [RETURN_TYPE] Callback[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Operator]^if  ( callbacks.get ( 0 )   <<  Callback )  {^63^^^^^59^68^if  ( callbacks.get ( 0 )  instanceof Callback )  {^[CLASS] CallbackHelper  [METHOD] getCallbacks [RETURN_TYPE] Callback[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Variable_Misuse]^return  ( Callback[] ) methods.toArray ( new Callback[callbacks.size (  ) ] ) ;^64^^^^^59^68^return  ( Callback[] ) callbacks.toArray ( new Callback[callbacks.size (  ) ] ) ;^[CLASS] CallbackHelper  [METHOD] getCallbacks [RETURN_TYPE] Callback[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Variable_Misuse]^if  ( methods.size (  )  == 0 ) return new Class[0];^72^73^^^^70^79^if  ( callbacks.size (  )  == 0 ) return new Class[0];^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Operator]^if  ( callbacks.size (  )  != 0 ) return new Class[0];^72^73^^^^70^79^if  ( callbacks.size (  )  == 0 ) return new Class[0];^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Literal]^if  ( callbacks.size (  )  == -1 ) return new Class[-1];^72^73^^^^70^79^if  ( callbacks.size (  )  == 0 ) return new Class[0];^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Literal]^return new Class[1];^73^^^^^70^79^return new Class[0];^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Literal]^return new Class[];^73^^^^^70^79^return new Class[0];^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Variable_Misuse]^if  ( methods.get ( 0 )  instanceof Callback )  {^74^^^^^70^79^if  ( callbacks.get ( 0 )  instanceof Callback )  {^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Operator]^if  ( callbacks.get ( 0 )   &  Callback )  {^74^^^^^70^79^if  ( callbacks.get ( 0 )  instanceof Callback )  {^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Literal]^if  ( callbacks.get ( this )  instanceof Callback )  {^74^^^^^70^79^if  ( callbacks.get ( 0 )  instanceof Callback )  {^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Variable_Misuse]^return  ( Class[] ) methods.toArray ( new Class[callbacks.size (  ) ] ) ;^77^^^^^70^79^return  ( Class[] ) callbacks.toArray ( new Class[callbacks.size (  ) ] ) ;^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Literal]^if  ( callbacks.get (  )  instanceof Callback )  {^74^^^^^70^79^if  ( callbacks.get ( 0 )  instanceof Callback )  {^[CLASS] CallbackHelper  [METHOD] getCallbackTypes [RETURN_TYPE] Class[]   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Argument_Swapping]^return  (  ( Integer ) methodMapMap.get ( method )  ) .intValue (  ) ;^83^^^^^81^84^return  (  ( Integer ) methodMap.get ( method )  ) .intValue (  ) ;^[CLASS] CallbackHelper  [METHOD] accept [RETURN_TYPE] int   Method method [VARIABLES] List  callbacks  methods  Method  method  boolean  Map  indexes  methodMap  
[BugLab_Argument_Swapping]^return  (  ( Integer ) method.get ( methodMap )  ) .intValue (  ) ;^83^^^^^81^84^return  (  ( Integer ) methodMap.get ( method )  ) .intValue (  ) ;^[CLASS] CallbackHelper  [METHOD] accept [RETURN_TYPE] int   Method method [VARIABLES] List  callbacks  methods  Method  method  boolean  Map  indexes  methodMap  
[BugLab_Variable_Misuse]^return  (  ( Integer ) indexes.get ( method )  ) .intValue (  ) ;^83^^^^^81^84^return  (  ( Integer ) methodMap.get ( method )  ) .intValue (  ) ;^[CLASS] CallbackHelper  [METHOD] accept [RETURN_TYPE] int   Method method [VARIABLES] List  callbacks  methods  Method  method  boolean  Map  indexes  methodMap  
[BugLab_Variable_Misuse]^return indexes.hashCode (  ) ;^88^^^^^86^89^return methodMap.hashCode (  ) ;^[CLASS] CallbackHelper  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Map  indexes  methodMap  List  callbacks  methods  boolean  
[BugLab_Wrong_Operator]^if  ( o != null ) return false;^93^94^^^^91^98^if  ( o == null ) return false;^[CLASS] CallbackHelper  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] List  callbacks  methods  Object  o  boolean  Map  indexes  methodMap  
[BugLab_Wrong_Literal]^if  ( o == null ) return true;^93^94^^^^91^98^if  ( o == null ) return false;^[CLASS] CallbackHelper  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] List  callbacks  methods  Object  o  boolean  Map  indexes  methodMap  
[BugLab_Wrong_Literal]^return true;^94^^^^^91^98^return false;^[CLASS] CallbackHelper  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] List  callbacks  methods  Object  o  boolean  Map  indexes  methodMap  
[BugLab_Wrong_Operator]^if  ( ! ( o  &&  CallbackHelper )  ) return false;^95^96^^^^91^98^if  ( ! ( o instanceof CallbackHelper )  ) return false;^[CLASS] CallbackHelper  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] List  callbacks  methods  Object  o  boolean  Map  indexes  methodMap  
[BugLab_Wrong_Literal]^if  ( ! ( o instanceof CallbackHelper )  ) return true;^95^96^^^^91^98^if  ( ! ( o instanceof CallbackHelper )  ) return false;^[CLASS] CallbackHelper  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] List  callbacks  methods  Object  o  boolean  Map  indexes  methodMap  
[BugLab_Wrong_Literal]^return true;^96^^^^^91^98^return false;^[CLASS] CallbackHelper  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] List  callbacks  methods  Object  o  boolean  Map  indexes  methodMap  
[BugLab_Variable_Misuse]^return indexes.equals (  (  ( CallbackHelper ) o ) .methodMap ) ;^97^^^^^91^98^return methodMap.equals (  (  ( CallbackHelper ) o ) .methodMap ) ;^[CLASS] CallbackHelper  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] List  callbacks  methods  Object  o  boolean  Map  indexes  methodMap  
