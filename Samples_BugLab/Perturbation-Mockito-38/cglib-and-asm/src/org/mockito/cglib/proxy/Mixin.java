[buglab_swap_variables]^if  ( !map.containsKey ( ifaceface )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^map.put (  new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^for  ( delegatesnt i = 0; i < i.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^map.put ( i, new Integer ( iface )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^map.put ( ifaceface, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^for  ( Iterator collectt = i.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^ReflectUtils.addAllInterfaces ( collect, delegate ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^ReflectUtils.addAllInterfaces (  collect ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^ReflectUtils.addAllInterfaces ( delegate ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^for  ( Iterator collect = it.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^if  ( !map.containsKey ( i )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^for  ( Iterator map = it.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^230^^^^^213^236^for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^route[index] =  (  ( Integer ) key.get ( map )  ) .intValue (  ) ;^233^^^^^213^236^route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[buglab_swap_variables]^if  ( delegates == null && classes == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^classes = r.classes.classes;^140^^^^^125^155^classes = r.classes;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^classes = r;^140^^^^^125^155^classes = r.classes;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^route = r.route.route;^141^^^^^126^156^route = r.route;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^route = r;^141^^^^^126^156^route = r.route;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( classes.length != temp.length.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( temp.length != classes.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( classes.length.length != temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( temp.length.length != classes )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^for  ( classesnt i = 0; i < i.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( temp != classes.length.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( temp.length != classes.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( classes != temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( classes.length.length != temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^for  ( classesnt i = 0; i < i.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( classes.length != temp.length.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( temp != classes.length.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^if  ( classes.length != temp )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( route.newInstance ( style, ReflectUtils.getNames (  classes  ) , KEY_FACTORY )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( style.newInstance ( KEY_FACTORY, ReflectUtils.getNames (  classes  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance (  ReflectUtils.getNames (  classes  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( classes, ReflectUtils.getNames (  style  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  )  )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[buglab_swap_variables]^new MixinEmitter ( classes, getClassName (  ) , v, route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinEmitter (  getClassName (  ) , classes, route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinEmitter ( v, getClassName (  ) ,  route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinEmitter ( route, getClassName (  ) , classes, v ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinEmitter ( v, getClassName (  ) , classes ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinBeanEmitter ( classes, getClassName (  ) , v ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinBeanEmitter (  getClassName (  ) , classes ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinBeanEmitter ( v, getClassName (  )  ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinEverythingEmitter ( classes, getClassName (  ) , v ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinEverythingEmitter (  getClassName (  ) , classes ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^new MixinEverythingEmitter ( v, getClassName (  )  ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^return  (  ( Mixin ) ReflectUtils.newInstance ( delegates )  ) .newInstance ( type ) ;^183^^^^^182^184^return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Class  type  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[buglab_swap_variables]^Route route =  ( Route ) key.get ( ROUTE_CACHE ) ;^201^^^^^199^206^Route route =  ( Route ) ROUTE_CACHE.get ( key ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[buglab_swap_variables]^ROUTE_CACHE.put (  route = new Route ( delegates )  ) ;^203^^^^^199^206^ROUTE_CACHE.put ( key, route = new Route ( delegates )  ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[buglab_swap_variables]^ROUTE_CACHE.put ( delegates, route = new Route ( key )  ) ;^203^^^^^199^206^ROUTE_CACHE.put ( key, route = new Route ( delegates )  ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[buglab_swap_variables]^if  ( delegates == null && classes == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^classes = r.classes.classes;^140^^^^^125^155^classes = r.classes;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^classes = r;^140^^^^^125^155^classes = r.classes;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^route = r.route.route;^141^^^^^126^156^route = r.route;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^route = r;^141^^^^^126^156^route = r.route;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( temp.length != classes.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( classes != temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( classes.length.length != temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( classes.length != temp )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( temp.length.length != classes )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^for  ( classesnt i = 0; i < i.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( temp.length != classes.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( classes.length != temp )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^if  ( temp != classes.length.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( route.newInstance ( style, ReflectUtils.getNames (  classes  ) , KEY_FACTORY )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( route, ReflectUtils.getNames (  classes  ) , style )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance (  ReflectUtils.getNames (  classes  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( classes, ReflectUtils.getNames (  style  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  route  ) , classes )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  )  )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[buglab_swap_variables]^new MixinEmitter ( route, getClassName (  ) , classes, v ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinEmitter (  getClassName (  ) , classes, route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinEmitter ( classes, getClassName (  ) , v, route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinEmitter ( v, getClassName (  ) ,  route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinEmitter ( v, getClassName (  ) , classes ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinBeanEmitter ( classes, getClassName (  ) , v ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinBeanEmitter (  getClassName (  ) , classes ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinBeanEmitter ( v, getClassName (  )  ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinEverythingEmitter ( classes, getClassName (  ) , v ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinEverythingEmitter (  getClassName (  ) , classes ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^new MixinEverythingEmitter ( v, getClassName (  )  ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^return  (  ( Mixin ) ReflectUtils.newInstance ( delegates )  ) .newInstance ( type ) ;^183^^^^^182^184^return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( delegates ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Class  type  Source  SOURCE  Object[]  delegates  int  i  style  
[buglab_swap_variables]^if  ( !map.containsKey ( i )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^map.put ( i, new Integer ( iface )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^map.put (  new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^map.put ( ifaceface, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^for  ( int i = 0; i < delegate.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^for  ( int i = 0; i < delegates.lengths.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^for  ( delegates.lengthnt i = 0; i < i; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^if  ( !map.containsKey ( ifaceface )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^for  ( Iterator collectt = i.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^for  ( Iterator collect = it.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^ReflectUtils.addAllInterfaces ( collect, delegate ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^ReflectUtils.addAllInterfaces (  collect ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^ReflectUtils.addAllInterfaces ( delegate ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^for  ( Iterator itt = collect.iterator (  ) ; i.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[buglab_swap_variables]^route[index] =  (  ( Integer ) key.get ( map )  ) .intValue (  ) ;^233^^^^^213^236^route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
