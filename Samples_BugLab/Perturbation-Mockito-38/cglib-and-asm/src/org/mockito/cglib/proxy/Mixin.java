[BugLab_Wrong_Literal]^public static final int STYLE_INTERFACES = -1;^40^^^^^35^45^public static final int STYLE_INTERFACES = 0;^[CLASS] Mixin Generator Route   [VARIABLES] 
[BugLab_Wrong_Literal]^public static final int STYLE_BEANS = 4;^41^^^^^36^46^public static final int STYLE_BEANS = 1;^[CLASS] Mixin Generator Route   [VARIABLES] 
[BugLab_Wrong_Literal]^public static final int STYLE_EVERYTHING = 1;^42^^^^^37^47^public static final int STYLE_EVERYTHING = 2;^[CLASS] Mixin Generator Route   [VARIABLES] 
[BugLab_Variable_Misuse]^if  ( !map.containsKey ( key )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^if  ( !map.containsKey ( styleface )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^if  ( !map.containsKey ( i )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^map.put ( styleface, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^map.put ( key, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^map.put ( i, new Integer ( iface )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^map.put ( ifaceface, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^for  ( indexnt i = 0; i < delegates.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < keys.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < index; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^for  ( delegates.lengthnt i = 0; i < i; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= delegates.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Wrong_Literal]^for  ( int i = STYLE_BEANS; i < delegates.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^if  ( !map.containsKey ( indexface )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^if  ( !map.containsKey ( ifaceface )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^for  ( Iterator indext = collect.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^for  ( Iterator collect = it.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^for  ( Iterator itt = collect.iterator (  ) ; i.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^ReflectUtils.addAllInterfaces ( key, collect ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^ReflectUtils.addAllInterfaces ( collect, delegate ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^for  ( Iterator i = collect.iterator (  ) ; itt.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Wrong_Literal]^int index = -1;^229^^^^^213^236^int index = 0;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^for  ( Iterator it = ROUTE_CACHE.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^230^^^^^213^236^for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^for  ( Iterator map = it.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^230^^^^^213^236^for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^classes[index] = iface;^232^^^^^213^236^classes[index] = key;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^route[index] =  (  ( Integer ) ROUTE_CACHE.get ( key )  ) .intValue (  ) ;^233^^^^^213^236^route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^route[index] =  (  ( Integer ) map.get ( iface )  ) .intValue (  ) ;^233^^^^^213^236^route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Argument_Swapping]^route[index] =  (  ( Integer ) key.get ( map )  ) .intValue (  ) ;^233^^^^^213^236^route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[CLASS] Mixin Generator Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  MixinKey  KEY_FACTORY  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  
[BugLab_Variable_Misuse]^gen.setClasses ( classes ) ;^70^^^^^68^73^gen.setClasses ( interfaces ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   Class[] interfaces Object[] delegates [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  delegates  Generator  gen  
[BugLab_Variable_Misuse]^return createBean ( null, delegates ) ;^78^^^^^76^80^return createBean ( null, beans ) ;^[CLASS] Mixin Generator Route  [METHOD] createBean [RETURN_TYPE] Mixin   Object[] beans [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^gen.setDelegates ( delegates ) ;^90^^^^^87^93^gen.setDelegates ( beans ) ;^[CLASS] Mixin Generator Route  [METHOD] createBean [RETURN_TYPE] Mixin   ClassLoader loader Object[] beans [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  ClassLoader  loader  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Generator  gen  
[BugLab_Variable_Misuse]^return interfaces[0].getClassLoader (  ) ;^109^^^^^108^110^return classes[0].getClassLoader (  ) ;^[CLASS] Mixin Generator Route  [METHOD] getDefaultClassLoader [RETURN_TYPE] ClassLoader   [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Wrong_Literal]^return classes[STYLE_INTERFACES].getClassLoader (  ) ;^109^^^^^108^110^return classes[0].getClassLoader (  ) ;^[CLASS] Mixin Generator Route  [METHOD] getDefaultClassLoader [RETURN_TYPE] ClassLoader   [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^this.style = index;^117^^^^^112^122^this.style = style;^[CLASS] Mixin Generator Route  [METHOD] setStyle [RETURN_TYPE] void   int style [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^this.classes = interfaces;^125^^^^^124^126^this.classes = classes;^[CLASS] Mixin Generator Route  [METHOD] setClasses [RETURN_TYPE] void   Class[] classes [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^this.delegates = beans;^129^^^^^128^130^this.delegates = delegates;^[CLASS] Mixin Generator Route  [METHOD] setDelegates [RETURN_TYPE] void   Object[] delegates [VARIABLES] Class[]  classes  interfaces  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^if  ( temp == null && delegates == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( classes == null && beans == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( delegates == null && classes == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( classes == null || delegates == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( classes != null && delegates == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( classes == null && delegates != null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( temp == null )  {^138^^^^^123^153^if  ( classes == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( classes != null )  {^138^^^^^123^153^if  ( classes == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^classes = temp;^140^^^^^125^155^classes = r.classes;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^classes = r.classes.classes;^140^^^^^125^155^classes = r.classes;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^classes = r;^140^^^^^125^155^classes = r.classes;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^route = r.route.route;^141^^^^^126^156^route = r.route;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^route = r;^141^^^^^126^156^route = r.route;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^Route r = route ( beans ) ;^139^^^^^124^154^Route r = route ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( interfaces == null )  {^147^^^^^132^162^if  ( classes == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( classes != null )  {^147^^^^^132^162^if  ( classes == null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( beans != null )  {^150^^^^^147^161^if  ( delegates != null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( delegates == null )  {^150^^^^^147^161^if  ( delegates != null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( classes.length != interfaces.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( temp.length != temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( classes.length != style )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( temp.length != classes.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( temp != classes.length.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( classes.length == temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( !classes[i].isAssignableFrom ( interfaces[i] )  )  {^156^^^^^147^161^if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^for  ( stylent i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < temp.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  ||  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  &&  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  !=  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  <<  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  &  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^Class[] temp = ReflectUtils.getClasses ( beans ) ;^151^^^^^147^161^Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = index; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( i != temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( interfaces.length != temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( classes.length != temp.length.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( classes.length != temp )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < style; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < classes.length.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = style; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^classes = ReflectUtils.getClasses ( beans ) ;^148^^^^^133^163^classes = ReflectUtils.getClasses ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( delegates == null )  {^150^^^^^135^165^if  ( delegates != null )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( classes.length != interfaces.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( index != temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( temp.length != temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( classes.length != style )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( classes.length != temp.length.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( temp.length != classes.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^if  ( classes.length != temp )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^if  ( classes.length == temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( !classes[i].isAssignableFrom ( interfaces[i] )  )  {^156^^^^^141^171^if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^for  ( stylent i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < index; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < temp.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < classes; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  >=  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  ||  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  <<  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  >  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^Class[] temp = ReflectUtils.getClasses ( beans ) ;^151^^^^^136^166^Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^if  ( style != temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < style; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  &  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Operator]^for  &&  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = i; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^route = route;^141^^^^^126^156^route = r.route;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^setNamePrefix ( temp[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^163^^^^^148^178^setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( index, ReflectUtils.getNames (  classes  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  temp  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^return  ( Mixin ) super.create ( classes.newInstance ( style, ReflectUtils.getNames (  KEY_FACTORY  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^return  ( Mixin ) super.create ( style.newInstance ( KEY_FACTORY, ReflectUtils.getNames (  classes  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( classes, ReflectUtils.getNames (  style  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Argument_Swapping]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( route, ReflectUtils.getNames (  classes  ) , style )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Mixin Generator Route  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  r  
[BugLab_Variable_Misuse]^new MixinEmitter ( v, getClassName (  ) , temp, route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Argument_Swapping]^new MixinEmitter ( route, getClassName (  ) , classes, v ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Argument_Swapping]^new MixinEmitter ( v, getClassName (  ) , route, classes ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^new MixinBeanEmitter ( v, getClassName (  ) , temp ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Argument_Swapping]^new MixinBeanEmitter ( classes, getClassName (  ) , v ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^new MixinEverythingEmitter ( v, getClassName (  ) , temp ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Argument_Swapping]^new MixinEverythingEmitter ( classes, getClassName (  ) , v ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Mixin Generator Route  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  ClassVisitor  v  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( beans ) ;^183^^^^^182^184^return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Class  type  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Argument_Swapping]^return  (  ( Mixin ) ReflectUtils.newInstance ( delegates )  ) .newInstance ( type ) ;^183^^^^^182^184^return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Class  type  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^return  (  ( Mixin ) instance ) .newInstance ( beans ) ;^187^^^^^186^188^return  (  ( Mixin ) instance ) .newInstance ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] nextInstance [RETURN_TYPE] Object   Object instance [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  instance  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^return  ( Class[] ) route ( beans ) .classes.clone (  ) ;^192^^^^^191^193^return  ( Class[] ) route ( delegates ) .classes.clone (  ) ;^[CLASS] Mixin Generator Route  [METHOD] getClasses [RETURN_TYPE] Class[]   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  
[BugLab_Variable_Misuse]^Object key = ClassesKey.create ( beans ) ;^200^^^^^199^206^Object key = ClassesKey.create ( delegates ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[BugLab_Argument_Swapping]^Route route =  ( Route ) key.get ( ROUTE_CACHE ) ;^201^^^^^199^206^Route route =  ( Route ) ROUTE_CACHE.get ( key ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[BugLab_Variable_Misuse]^Route route =  ( Route ) map.get ( key ) ;^201^^^^^199^206^Route route =  ( Route ) ROUTE_CACHE.get ( key ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[BugLab_Wrong_Operator]^if  ( route != null )  {^202^^^^^199^206^if  ( route == null )  {^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[BugLab_Variable_Misuse]^ROUTE_CACHE.put ( key, route = new Route ( beans )  ) ;^203^^^^^199^206^ROUTE_CACHE.put ( key, route = new Route ( delegates )  ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[BugLab_Argument_Swapping]^ROUTE_CACHE.put ( delegates, route = new Route ( key )  ) ;^203^^^^^199^206^ROUTE_CACHE.put ( key, route = new Route ( delegates )  ) ;^[CLASS] Mixin Generator Route  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[BugLab_Variable_Misuse]^private int style = style;^100^^^^^95^105^private int style = STYLE_INTERFACES;^[CLASS] Generator  [METHOD] route [RETURN_TYPE] Mixin$Route   Object[] delegates [VARIABLES] Class[]  classes  interfaces  temp  boolean  MixinKey  KEY_FACTORY  int[]  route  Object  key  Map  ROUTE_CACHE  map  int  STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  Source  SOURCE  Object[]  beans  delegates  Route  route  
[BugLab_Wrong_Literal]^return classes[style].getClassLoader (  ) ;^109^^^^^108^110^return classes[0].getClassLoader (  ) ;^[CLASS] Generator  [METHOD] getDefaultClassLoader [RETURN_TYPE] ClassLoader   [VARIABLES] int[]  route  Class[]  classes  boolean  Source  SOURCE  Object[]  delegates  int  style  
[BugLab_Variable_Misuse]^if  ( temp == null && delegates == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^if  ( delegates == null && classes == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes == null || delegates == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes != null && delegates == null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes == null && delegates != null )  {^133^^^^^118^148^if  ( classes == null && delegates == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^if  ( temp == null )  {^138^^^^^123^153^if  ( classes == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes != null )  {^138^^^^^123^153^if  ( classes == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^classes = temp;^140^^^^^125^155^classes = r.classes;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^classes = r.classes.classes;^140^^^^^125^155^classes = r.classes;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^classes = r;^140^^^^^125^155^classes = r.classes;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^route = route;^141^^^^^126^156^route = r.route;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^route = r.route.route;^141^^^^^126^156^route = r.route;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^route = r;^141^^^^^126^156^route = r.route;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes != null )  {^147^^^^^132^162^if  ( classes == null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( delegates == null )  {^150^^^^^147^161^if  ( delegates != null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^if  ( style != temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^if  ( classes.length != style )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^if  ( classes.length != temp.length.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^if  ( temp != classes.length.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^if  ( temp.length != classes.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes.length == temp.length )  {^152^^^^^147^161^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^if  ( !classes[i].isAssignableFrom ( classes[i] )  )  {^156^^^^^147^161^if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^for  ( stylent i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < style; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < temp.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < classes; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ==  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ^  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  |  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  &  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ||  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = i; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^for  ( classesnt i = 0; i < i.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for   instanceof   ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  !=  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  >>  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  >  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  &&  ( int i = 0; i < classes.length; i++ )  {^155^^^^^147^161^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( delegates == null )  {^150^^^^^135^165^if  ( delegates != null )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^if  ( style != temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^if  ( classes.length != style )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^if  ( temp.length != classes.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes.length >= temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^for  ( stylent i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < style; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < temp.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ==  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  <<  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  |  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  >=  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for   instanceof   ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^if  ( !classes[i].isAssignableFrom ( classes[i] )  )  {^156^^^^^141^171^if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = style; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^if  ( temp != classes.length.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^if  ( classes.length == temp.length )  {^152^^^^^137^167^if  ( classes.length != temp.length )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^for  ( classes.lengthnt i = 0; i < i; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < classes.length.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  &&  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  >>  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ||  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  !=  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Operator]^for  ^  ( int i = 0; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Wrong_Literal]^for  ( int i = i; i < classes.length; i++ )  {^155^^^^^140^170^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^setNamePrefix ( temp[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^163^^^^^148^178^setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( i, ReflectUtils.getNames (  classes  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  temp  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^return  ( Mixin ) super.create ( route.newInstance ( style, ReflectUtils.getNames (  classes  ) , KEY_FACTORY )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^return  ( Mixin ) super.create ( style.newInstance ( KEY_FACTORY, ReflectUtils.getNames (  classes  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Argument_Swapping]^return  ( Mixin ) super.create ( classes.newInstance ( style, ReflectUtils.getNames (  KEY_FACTORY  ) , route )  ) ;^165^^^^^150^180^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] Mixin   [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Source  SOURCE  Object[]  delegates  int  i  style  Route  r  
[BugLab_Variable_Misuse]^new MixinEmitter ( v, getClassName (  ) , temp, route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Argument_Swapping]^new MixinEmitter ( classes, getClassName (  ) , v, route ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Argument_Swapping]^new MixinEmitter ( v, getClassName (  ) , route, classes ) ;^171^^^^^168^180^new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Variable_Misuse]^new MixinBeanEmitter ( v, getClassName (  ) , temp ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Argument_Swapping]^new MixinBeanEmitter ( classes, getClassName (  ) , v ) ;^174^^^^^168^180^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Variable_Misuse]^new MixinEverythingEmitter ( v, getClassName (  ) , temp ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Argument_Swapping]^new MixinEverythingEmitter ( classes, getClassName (  ) , v ) ;^177^^^^^168^180^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  classes  temp  boolean  int[]  route  ClassVisitor  v  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Argument_Swapping]^return  (  ( Mixin ) ReflectUtils.newInstance ( delegates )  ) .newInstance ( type ) ;^183^^^^^182^184^return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( delegates ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Class[]  classes  temp  boolean  int[]  route  Class  type  Source  SOURCE  Object[]  delegates  int  i  style  
[BugLab_Variable_Misuse]^if  ( !map.containsKey ( key )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^if  ( !map.containsKey ( indexface )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^if  ( !map.containsKey ( i )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^map.put ( indexface, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^map.put ( key, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^map.put ( ifaceface, new Integer ( i )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^for  ( indexnt i = 0; i < delegates.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < keys.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < index; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^for  ( delegates.lengthnt i = 0; i < i; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^for  ( delegatesnt i = 0; i < i.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= delegates.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < delegates.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^if  ( !map.containsKey ( ifaceface )  )  {^222^^^^^213^236^if  ( !map.containsKey ( iface )  )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^map.put ( i, new Integer ( iface )  ) ;^223^^^^^213^236^map.put ( iface, new Integer ( i )  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^for  ( Iterator indext = collect.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^for  ( Iterator collectt = i.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^ReflectUtils.addAllInterfaces ( key, collect ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^ReflectUtils.addAllInterfaces ( collect, delegate ) ;^219^^^^^213^236^ReflectUtils.addAllInterfaces ( delegate, collect ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Wrong_Literal]^for  ( int i = index; i < delegates.length; i++ )  {^216^^^^^213^236^for  ( int i = 0; i < delegates.length; i++ )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Wrong_Literal]^int index = index;^229^^^^^213^236^int index = 0;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^for  ( Iterator map = it.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^230^^^^^213^236^for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^classes[index] = iface;^232^^^^^213^236^classes[index] = key;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Variable_Misuse]^route[index] =  (  ( Integer ) map.get ( iface )  ) .intValue (  ) ;^233^^^^^213^236^route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
[BugLab_Argument_Swapping]^route[index] =  (  ( Integer ) key.get ( map )  ) .intValue (  ) ;^233^^^^^213^236^route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[CLASS] Route  [METHOD] <init> [RETURN_TYPE] Object[])   Object[] delegates [VARIABLES] Class[]  classes  boolean  ArrayList  collect  Iterator  it  int[]  route  Class  delegate  iface  key  Map  map  Object[]  delegates  int  i  index  
