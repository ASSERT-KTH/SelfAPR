[BugLab_Argument_Swapping]^signatures.put ( exceptions, sig ) ;^53^^^^^52^54^signatures.put ( sig, exceptions ) ;^[CLASS] InterfaceMaker  [METHOD] add [RETURN_TYPE] void   Signature sig Type[] exceptions [VARIABLES] Type[]  exceptions  boolean  Map  signatures  Source  SOURCE  Signature  sig  
[BugLab_Argument_Swapping]^for  ( methodsnt i = 0; i < i.length; i++ )  {^74^^^^^72^80^for  ( int i = 0; i < methods.length; i++ )  {^[CLASS] InterfaceMaker  [METHOD] add [RETURN_TYPE] void   Class clazz [VARIABLES] boolean  Class  clazz  Method  m  Method[]  methods  Map  signatures  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < methods.length.length; i++ )  {^74^^^^^72^80^for  ( int i = 0; i < methods.length; i++ )  {^[CLASS] InterfaceMaker  [METHOD] add [RETURN_TYPE] void   Class clazz [VARIABLES] boolean  Class  clazz  Method  m  Method[]  methods  Map  signatures  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < methods.lengthethods.length; i++ )  {^74^^^^^72^80^for  ( int i = 0; i < methods.length; i++ )  {^[CLASS] InterfaceMaker  [METHOD] add [RETURN_TYPE] void   Class clazz [VARIABLES] boolean  Class  clazz  Method  m  Method[]  methods  Map  signatures  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < methods; i++ )  {^74^^^^^72^80^for  ( int i = 0; i < methods.length; i++ )  {^[CLASS] InterfaceMaker  [METHOD] add [RETURN_TYPE] void   Class clazz [VARIABLES] boolean  Class  clazz  Method  m  Method[]  methods  Map  signatures  Source  SOURCE  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= methods.length; i++ )  {^74^^^^^72^80^for  ( int i = 0; i < methods.length; i++ )  {^[CLASS] InterfaceMaker  [METHOD] add [RETURN_TYPE] void   Class clazz [VARIABLES] boolean  Class  clazz  Method  m  Method[]  methods  Map  signatures  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < methods.length; i++ )  {^74^^^^^72^80^for  ( int i = 0; i < methods.length; i++ )  {^[CLASS] InterfaceMaker  [METHOD] add [RETURN_TYPE] void   Class clazz [VARIABLES] boolean  Class  clazz  Method  m  Method[]  methods  Map  signatures  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^setUseCache ( true ) ;^86^^^^^85^88^setUseCache ( false ) ;^[CLASS] InterfaceMaker  [METHOD] create [RETURN_TYPE] Class   [VARIABLES] Map  signatures  Source  SOURCE  boolean  
[BugLab_Argument_Swapping]^ce.begin_class ( Constants.V1_2, Constants.ACC_INTERFACE | Constants.ACC_PUBLIC, getClassName (  ) , null,^104^105^106^107^^102^118^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC | Constants.ACC_INTERFACE, getClassName (  ) , null,^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Wrong_Operator]^ce.begin_class  &  ( Constants.V1_2, Constants.ACC_PUBLIC | Constants.ACC_INTERFACE, getClassName (  ) , null,^104^105^106^107^^102^118^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC | Constants.ACC_INTERFACE, getClassName (  ) , null,^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Argument_Swapping]^for  ( Iterator it = sig.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^110^^^^^102^118^for  ( Iterator it = signatures.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Argument_Swapping]^Type[] exceptions =  ( Type[] ) signaturesnatures.get ( sig ) ;^112^^^^^102^118^Type[] exceptions =  ( Type[] ) signatures.get ( sig ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Argument_Swapping]^Type[] exceptions =  ( Type[] ) sig.get ( signatures ) ;^112^^^^^102^118^Type[] exceptions =  ( Type[] ) signatures.get ( sig ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Variable_Misuse]^ce.begin_method ( Constants.ACC_PUBLIC | this, sig, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Argument_Swapping]^ce.begin_method ( Constants.ACC_PUBLIC | exceptions, sig, Constants.ACC_ABSTRACT ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Argument_Swapping]^ce.begin_method ( Constants.ACC_ABSTRACT | Constants.ACC_PUBLIC, sig, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Wrong_Operator]^ce.begin_method  &&  ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Variable_Misuse]^ce.begin_method ( this | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Argument_Swapping]^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, exceptions, sig ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Wrong_Operator]^ce.begin_method  ^  ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Argument_Swapping]^ce.begin_method ( sig | Constants.ACC_ABSTRACT, Constants.ACC_PUBLIC, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Wrong_Operator]^ce.begin_method  >  ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
[BugLab_Wrong_Operator]^ce.begin_method   instanceof   ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^113^114^115^^^102^118^ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions ) .end_method (  ) ;^[CLASS] InterfaceMaker  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Signature  sig  ClassEmitter  ce  Iterator  it  Type[]  exceptions  ClassVisitor  v  Map  signatures  Source  SOURCE  
