[BugLab_Variable_Misuse]^public static final int XOR = this;^46^^^^^41^51^public static final int XOR = Constants.IXOR;^[CLASS] CodeEmitter State   [VARIABLES] 
[BugLab_Variable_Misuse]^public static final int NEG = 0;^50^^^^^45^55^public static final int NEG = Constants.INEG;^[CLASS] CodeEmitter State   [VARIABLES] 
[BugLab_Variable_Misuse]^this.access = USHR;^77^^^^^75^82^this.access = access;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^this.sig = LONG_VALUE;^78^^^^^75^82^this.sig = sig;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^this.exceptionTypes = argumentTypes;^79^^^^^75^82^this.exceptionTypes = exceptionTypes;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^localOffset = TypeUtils.isStatic ( REM )  ? 0 : 1;^80^^^^^75^82^localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^localOffset = TypeUtils.isStatic ( access )  ? 0 : LE;^80^^^^^75^82^localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^localOffset = TypeUtils.isStatic ( NE )  ? 0 : 1;^80^^^^^75^82^localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^argumentTypes = LONG_VALUE.getArgumentTypes (  ) ;^81^^^^^75^82^argumentTypes = sig.getArgumentTypes (  ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^argumentTypes = INT_VALUE.getArgumentTypes (  ) ;^81^^^^^75^82^argumentTypes = sig.getArgumentTypes (  ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^super ( OR, sig.getDescriptor (  ) , mv ) ;^107^^^^^106^110^super ( access, sig.getDescriptor (  ) , mv ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Variable_Misuse]^super ( access, DOUBLE_VALUE.getDescriptor (  ) , mv ) ;^107^^^^^106^110^super ( access, sig.getDescriptor (  ) , mv ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Argument_Swapping]^super ( mv, sig.getDescriptor (  ) , access ) ;^107^^^^^106^110^super ( access, sig.getDescriptor (  ) , mv ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Argument_Swapping]^super ( access, mv.getDescriptor (  ) , sig ) ;^107^^^^^106^110^super ( access, sig.getDescriptor (  ) , mv ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Variable_Misuse]^super ( access, LONG_VALUE.getDescriptor (  ) , mv ) ;^107^^^^^106^110^super ( access, sig.getDescriptor (  ) , mv ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Variable_Misuse]^state = new State ( ce.getClassInfo (  ) , localOffset, sig, exceptionTypes ) ;^109^^^^^106^110^state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Variable_Misuse]^state = new State ( ce.getClassInfo (  ) , access, LONG_VALUE, exceptionTypes ) ;^109^^^^^106^110^state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Variable_Misuse]^state = new State ( ce.getClassInfo (  ) , access, sig, argumentTypes ) ;^109^^^^^106^110^state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Argument_Swapping]^state = new State ( access.getClassInfo (  ) , ce, sig, exceptionTypes ) ;^109^^^^^106^110^state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Argument_Swapping]^state = new State ( ce.getClassInfo (  ) , exceptionTypes, sig, access ) ;^109^^^^^106^110^state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Argument_Swapping]^state = new State ( ce.getClassInfo (  ) , access, exceptionTypes, sig ) ;^109^^^^^106^110^state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Argument_Swapping]^state = new State ( sig.getClassInfo (  ) , access, ce, exceptionTypes ) ;^109^^^^^106^110^state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  MethodVisitor  mv  
[BugLab_Variable_Misuse]^this.ce = ce;^114^^^^^112^116^this.ce = wrap.ce;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] CodeEmitter)   CodeEmitter wrap [VARIABLES] CodeEmitter  wrap  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^this.ce = wrap.ce.ce;^114^^^^^112^116^this.ce = wrap.ce;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] CodeEmitter)   CodeEmitter wrap [VARIABLES] CodeEmitter  wrap  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^this.ce = wrap;^114^^^^^112^116^this.ce = wrap.ce;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] CodeEmitter)   CodeEmitter wrap [VARIABLES] CodeEmitter  wrap  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^this.state = state;^115^^^^^112^116^this.state = wrap.state;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] CodeEmitter)   CodeEmitter wrap [VARIABLES] CodeEmitter  wrap  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^this.state = wrap.state.state;^115^^^^^112^116^this.state = wrap.state;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] CodeEmitter)   CodeEmitter wrap [VARIABLES] CodeEmitter  wrap  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^this.state = wrap;^115^^^^^112^116^this.state = wrap.state;^[CLASS] CodeEmitter State  [METHOD] <init> [RETURN_TYPE] CodeEmitter)   CodeEmitter wrap [VARIABLES] CodeEmitter  wrap  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return NE;^89^^^^^88^90^return access;^[CLASS] CodeEmitter State  [METHOD] getModifiers [RETURN_TYPE] int   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return FLOAT_VALUE;^93^^^^^92^94^return sig;^[CLASS] CodeEmitter State  [METHOD] getSignature [RETURN_TYPE] Signature   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return argumentTypes;^97^^^^^96^98^return exceptionTypes;^[CLASS] CodeEmitter State  [METHOD] getExceptionTypes [RETURN_TYPE] Type[]   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^return true;^119^^^^^118^120^return false;^[CLASS] CodeEmitter State  [METHOD] isStaticHook [RETURN_TYPE] boolean   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return sig;^123^^^^^122^124^return state.sig;^[CLASS] CodeEmitter State  [METHOD] getSignature [RETURN_TYPE] Signature   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^return state;^123^^^^^122^124^return state.sig;^[CLASS] CodeEmitter State  [METHOD] getSignature [RETURN_TYPE] Signature   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^return state.sig.sig;^123^^^^^122^124^return state.sig;^[CLASS] CodeEmitter State  [METHOD] getSignature [RETURN_TYPE] Signature   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return DOUBLE_VALUE.getReturnType (  ) ;^127^^^^^126^128^return state.sig.getReturnType (  ) ;^[CLASS] CodeEmitter State  [METHOD] getReturnType [RETURN_TYPE] Type   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^return state.getReturnType (  ) ;^127^^^^^126^128^return state.sig.getReturnType (  ) ;^[CLASS] CodeEmitter State  [METHOD] getReturnType [RETURN_TYPE] Type   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^return state.sig.sig.getReturnType (  ) ;^127^^^^^126^128^return state.sig.getReturnType (  ) ;^[CLASS] CodeEmitter State  [METHOD] getReturnType [RETURN_TYPE] Type   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return LONG_VALUE.getReturnType (  ) ;^127^^^^^126^128^return state.sig.getReturnType (  ) ;^[CLASS] CodeEmitter State  [METHOD] getReturnType [RETURN_TYPE] Type   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^visitMaxs ( ADD, ADD ) ;^139^^^^^138^140^visitMaxs ( 0, 0 ) ;^[CLASS] CodeEmitter State  [METHOD] end_method [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^visitMaxs ( -1, -1 ) ;^139^^^^^138^140^visitMaxs ( 0, 0 ) ;^[CLASS] CodeEmitter State  [METHOD] end_method [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( block.getEnd (  )  != null )  {^147^^^^^146^154^if  ( block.getEnd (  )  == null )  {^[CLASS] CodeEmitter State  [METHOD] catch_exception [RETURN_TYPE] void   Block block Type exception [VARIABLES] Type  exception  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Block  block  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitTryCatchBlock ( exception.getStart (  ) , block.getEnd (  ) , mark (  ) , block.getInternalName (  )  ) ;^150^151^152^153^^146^154^mv.visitTryCatchBlock ( block.getStart (  ) , block.getEnd (  ) , mark (  ) , exception.getInternalName (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] catch_exception [RETURN_TYPE] void   Block block Type exception [VARIABLES] Type  exception  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Block  block  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^public void goTo ( Label label )  { null.visitJumpInsn ( Constants.GOTO, label ) ; }^156^^^^^151^161^public void goTo ( Label label )  { mv.visitJumpInsn ( Constants.GOTO, label ) ; }^[CLASS] CodeEmitter State  [METHOD] goTo [RETURN_TYPE] void   Label label [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^public void goTo ( Label mv )  { label.visitJumpInsn ( Constants.GOTO, label ) ; }^156^^^^^151^161^public void goTo ( Label label )  { mv.visitJumpInsn ( Constants.GOTO, label ) ; }^[CLASS] CodeEmitter State  [METHOD] goTo [RETURN_TYPE] void   Label label [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^public void ifnull ( Label mv )  { label.visitJumpInsn ( Constants.IFNULL, label ) ; }^157^^^^^152^162^public void ifnull ( Label label )  { mv.visitJumpInsn ( Constants.IFNULL, label ) ; }^[CLASS] CodeEmitter State  [METHOD] ifnull [RETURN_TYPE] void   Label label [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^public void ifnonnull ( Label mv )  { label.visitJumpInsn ( Constants.IFNONNULL, label ) ; }^158^^^^^153^163^public void ifnonnull ( Label label )  { mv.visitJumpInsn ( Constants.IFNONNULL, label ) ; }^[CLASS] CodeEmitter State  [METHOD] ifnonnull [RETURN_TYPE] void   Label label [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitJumpInsn ( SUB, label ) ;^161^^^^^160^162^mv.visitJumpInsn ( mode, label ) ;^[CLASS] CodeEmitter State  [METHOD] if_jump [RETURN_TYPE] void   int mode Label label [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if_cmp ( Type.INT_TYPE, NE, label ) ;^165^^^^^164^166^if_cmp ( Type.INT_TYPE, mode, label ) ;^[CLASS] CodeEmitter State  [METHOD] if_icmp [RETURN_TYPE] void   int mode Label label [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  mode  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if_cmp ( Type.INT_TYPE, label, mode ) ;^165^^^^^164^166^if_cmp ( Type.INT_TYPE, mode, label ) ;^[CLASS] CodeEmitter State  [METHOD] if_icmp [RETURN_TYPE] void   int mode Label label [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int intOp = -;^169^^^^^154^184^int intOp = -1;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int jumpmode = OR;^170^^^^^155^185^int jumpmode = mode;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^case GE: jumpmode = REM; break;^172^^^^^157^187^case GE: jumpmode = LT; break;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^case LE: jumpmode = OR; break;^173^^^^^158^188^case LE: jumpmode = GT; break;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitJumpInsn ( NEG, label ) ;^205^^^^^190^220^mv.visitJumpInsn ( intOp, label ) ;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitJumpInsn ( label, intOp ) ;^205^^^^^190^220^mv.visitJumpInsn ( intOp, label ) ;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if_jump ( intOp, label ) ;^208^^^^^193^223^if_jump ( jumpmode, label ) ;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if_jump ( label, jumpmode ) ;^208^^^^^193^223^if_jump ( jumpmode, label ) ;^[CLASS] CodeEmitter State  [METHOD] if_cmp [RETURN_TYPE] void   Type type int mode Label label [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  label  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^public void dup (  )  { 2.visitInsn ( Constants.DUP ) ; }^213^^^^^208^218^public void dup (  )  { mv.visitInsn ( Constants.DUP ) ; }^[CLASS] CodeEmitter State  [METHOD] dup [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^public void dup2_x1 (  )  { 0.visitInsn ( Constants.DUP2_X1 ) ; }^217^^^^^212^222^public void dup2_x1 (  )  { mv.visitInsn ( Constants.DUP2_X1 ) ; }^[CLASS] CodeEmitter State  [METHOD] dup2_x1 [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type.getSize (  )  != 1 )  {^223^^^^^222^239^if  ( type.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type.getSize (  )  >= 1 )  {^223^^^^^222^239^if  ( type.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type.getSize (  )  > 1 )  {^223^^^^^222^239^if  ( type.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( type.getSize (  )  == 0 )  {^223^^^^^222^239^if  ( type.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( type.getSize (  )  ==  )  {^223^^^^^222^239^if  ( type.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( type.getSize (  )  == LE )  {^223^^^^^222^239^if  ( type.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( type.getSize (  )  == 1 )  {^231^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( prev.getSize (  )  < 1 )  {^231^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( prev.getSize (  )  == access )  {^231^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( type.getSize (  )  == 1 )  {^224^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( prev.getSize (  )  <= 1 )  {^224^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( prev.getSize (  )  != 1 )  {^224^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( prev.getSize (  )  == 0 )  {^224^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( prev.getSize (  )  >= 1 )  {^231^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( prev.getSize (  )  == 2 )  {^231^^^^^222^239^if  ( prev.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( prev.getSize (  )  == 1 )  {^223^^^^^222^239^if  ( type.getSize (  )  == 1 )  {^[CLASS] CodeEmitter State  [METHOD] swap [RETURN_TYPE] void   Type prev Type type [VARIABLES] Type  prev  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^public void math ( int OR, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^244^^^^^239^249^public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^[CLASS] CodeEmitter State  [METHOD] math [RETURN_TYPE] void   int op Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^public void math ( int type, Type op )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^244^^^^^239^249^public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^[CLASS] CodeEmitter State  [METHOD] math [RETURN_TYPE] void   int op Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^public void math ( int op, Type mv )  { type.visitInsn ( type.getOpcode ( op )  ) ; }^244^^^^^239^249^public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^[CLASS] CodeEmitter State  [METHOD] math [RETURN_TYPE] void   int op Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^public void math ( int USHR, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^244^^^^^239^249^public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^[CLASS] CodeEmitter State  [METHOD] math [RETURN_TYPE] void   int op Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^public void array_load ( Type mv )  { type.visitInsn ( type.getOpcode ( Constants.IALOAD )  ) ; }^246^^^^^241^251^public void array_load ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IALOAD )  ) ; }^[CLASS] CodeEmitter State  [METHOD] array_load [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^public void array_store ( Type mv )  { type.visitInsn ( type.getOpcode ( Constants.IASTORE )  ) ; }^247^^^^^242^252^public void array_store ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IASTORE )  ) ; }^[CLASS] CodeEmitter State  [METHOD] array_store [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( to != to )  {^253^^^^^238^268^if  ( from != to )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( from != from )  {^253^^^^^238^268^if  ( from != to )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( to != from )  {^253^^^^^238^268^if  ( from != to )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( from == to )  {^253^^^^^238^268^if  ( from != to )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( from != Type.DOUBLE_TYPE )  {^254^^^^^239^269^if  ( from == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( from >= Type.DOUBLE_TYPE )  {^254^^^^^239^269^if  ( from == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( from < Type.DOUBLE_TYPE )  {^254^^^^^239^269^if  ( from == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( from <= Type.DOUBLE_TYPE )  {^254^^^^^239^269^if  ( from == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == Type.FLOAT_TYPE )  {^263^^^^^248^278^} else if  ( from == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from <= Type.FLOAT_TYPE )  {^263^^^^^248^278^} else if  ( from == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from != Type.FLOAT_TYPE )  {^263^^^^^248^278^} else if  ( from == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from < Type.FLOAT_TYPE )  {^263^^^^^248^278^} else if  ( from == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from >= Type.FLOAT_TYPE )  {^263^^^^^248^278^} else if  ( from == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == Type.LONG_TYPE )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from != Type.LONG_TYPE )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from >= Type.LONG_TYPE )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from <= Type.LONG_TYPE )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( from == Type.BYTE_TYPE )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to >= Type.BYTE_TYPE )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to != Type.BYTE_TYPE )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to < Type.BYTE_TYPE )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.CHAR_TYPE )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.CHAR_TYPE )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.CHAR_TYPE )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.DOUBLE_TYPE )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.DOUBLE_TYPE )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.DOUBLE_TYPE )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.DOUBLE_TYPE )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.FLOAT_TYPE )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.FLOAT_TYPE )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.FLOAT_TYPE )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.FLOAT_TYPE )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.LONG_TYPE )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.LONG_TYPE )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.SHORT_TYPE )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 3 )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.SHORT_TYPE == to )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.SHORT_TYPE )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.SHORT_TYPE )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.LONG_TYPE )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.SHORT_TYPE )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.FLOAT_TYPE == to )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.LONG_TYPE )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.SHORT_TYPE )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.LONG_TYPE )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == null )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.DOUBLE_TYPE )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == null )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.LONG_TYPE == to )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == this )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.LONG_TYPE )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 1 )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.CHAR_TYPE )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == null )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == this )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.SHORT_TYPE )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.FLOAT_TYPE )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.DOUBLE_TYPE == to )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.DOUBLE_TYPE )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 4 )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( from == Type.DOUBLE_TYPE )  {^273^^^^^258^288^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to != Type.DOUBLE_TYPE )  {^273^^^^^258^288^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.FLOAT_TYPE )  {^275^^^^^260^290^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.FLOAT_TYPE == to )  {^275^^^^^260^290^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.FLOAT_TYPE )  {^275^^^^^260^290^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^cast_numeric ( Type.INT_TYPE, from ) ;^279^^^^^275^280^cast_numeric ( Type.INT_TYPE, to ) ;^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^cast_numeric ( Type.INT_TYPE, from ) ;^279^^^^^264^294^cast_numeric ( Type.INT_TYPE, to ) ;^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to >= Type.DOUBLE_TYPE )  {^273^^^^^258^288^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.FLOAT_TYPE )  {^275^^^^^260^290^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( from == Type.BYTE_TYPE )  {^282^^^^^267^297^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to >= Type.BYTE_TYPE )  {^282^^^^^267^297^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to <= Type.BYTE_TYPE )  {^282^^^^^267^297^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to != Type.BYTE_TYPE )  {^282^^^^^267^297^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to > Type.BYTE_TYPE )  {^282^^^^^267^297^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.CHAR_TYPE )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.CHAR_TYPE == to )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.CHAR_TYPE )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.CHAR_TYPE )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.CHAR_TYPE )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.DOUBLE_TYPE )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.DOUBLE_TYPE == to )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.DOUBLE_TYPE )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.DOUBLE_TYPE )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.FLOAT_TYPE )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == null )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.FLOAT_TYPE )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.FLOAT_TYPE )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.LONG_TYPE )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.LONG_TYPE == to )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.LONG_TYPE )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.LONG_TYPE )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.SHORT_TYPE )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.SHORT_TYPE )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.LONG_TYPE )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.SHORT_TYPE == to )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.SHORT_TYPE )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.FLOAT_TYPE )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.FLOAT_TYPE )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.SHORT_TYPE )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.LONG_TYPE )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.DOUBLE_TYPE )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.SHORT_TYPE )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == this )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.LONG_TYPE )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 2 )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.FLOAT_TYPE == to )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.FLOAT_TYPE )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.SHORT_TYPE )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( from == Type.DOUBLE_TYPE )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to >= Type.DOUBLE_TYPE )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to > Type.DOUBLE_TYPE )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.LONG_TYPE )  {^266^^^^^251^281^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.LONG_TYPE )  {^266^^^^^251^281^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^cast_numeric ( Type.INT_TYPE, from ) ;^270^^^^^266^271^cast_numeric ( Type.INT_TYPE, to ) ;^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^cast_numeric ( Type.INT_TYPE, from ) ;^270^^^^^255^285^cast_numeric ( Type.INT_TYPE, to ) ;^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.LONG_TYPE == to )  {^266^^^^^251^281^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( Type.DOUBLE_TYPE == to )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to <= Type.DOUBLE_TYPE )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to != Type.DOUBLE_TYPE )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.LONG_TYPE )  {^266^^^^^251^281^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to > Type.BYTE_TYPE )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to <= Type.BYTE_TYPE )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.CHAR_TYPE )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.FLOAT_TYPE )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.CHAR_TYPE == to )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.CHAR_TYPE )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( Type.DOUBLE_TYPE == to )  {^273^^^^^258^288^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to <= Type.DOUBLE_TYPE )  {^273^^^^^258^288^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 4 )  {^275^^^^^260^290^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.FLOAT_TYPE )  {^275^^^^^260^290^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == null )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.DOUBLE_TYPE )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.CHAR_TYPE )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.DOUBLE_TYPE )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( from == Type.FLOAT_TYPE )  {^255^^^^^240^270^if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( to == null )  {^255^^^^^240^270^if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to >= Type.FLOAT_TYPE )  {^255^^^^^240^270^if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to <= Type.FLOAT_TYPE )  {^255^^^^^240^270^if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == Type.LONG_TYPE )  {^257^^^^^242^272^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.LONG_TYPE == to )  {^257^^^^^242^272^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.LONG_TYPE )  {^257^^^^^242^272^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^cast_numeric ( Type.INT_TYPE, from ) ;^261^^^^^257^262^cast_numeric ( Type.INT_TYPE, to ) ;^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^cast_numeric ( Type.INT_TYPE, from ) ;^261^^^^^246^276^cast_numeric ( Type.INT_TYPE, to ) ;^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to != Type.LONG_TYPE )  {^257^^^^^242^272^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.LONG_TYPE )  {^257^^^^^242^272^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from > Type.FLOAT_TYPE )  {^263^^^^^248^278^} else if  ( from == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from > Type.LONG_TYPE )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 2 )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 1 )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to < Type.DOUBLE_TYPE )  {^273^^^^^258^288^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == null )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == this )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 2 )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.LONG_TYPE )  {^266^^^^^251^281^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to < Type.BYTE_TYPE )  {^282^^^^^267^297^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 2 )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to < Type.CHAR_TYPE )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( from > Type.DOUBLE_TYPE )  {^254^^^^^239^269^if  ( from == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( from < Type.LONG_TYPE )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( to == null )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 0 )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 2 )  {^288^^^^^272^295^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( Type.BYTE_TYPE == to )  {^282^^^^^267^297^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 3 )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 0 )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == this )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == null )  {^284^^^^^269^299^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 3 )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 1 )  {^266^^^^^251^281^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to >= Type.LONG_TYPE )  {^266^^^^^251^281^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( from == null )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( to == null )  {^273^^^^^258^288^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to <= Type.FLOAT_TYPE )  {^275^^^^^260^290^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 3 )  {^288^^^^^273^303^} else if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 3 )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 4 )  {^292^^^^^277^307^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 4 )  {^290^^^^^275^305^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( Type.FLOAT_TYPE == to )  {^255^^^^^240^270^if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to != Type.FLOAT_TYPE )  {^255^^^^^240^270^if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to < Type.FLOAT_TYPE )  {^255^^^^^240^270^if  ( to == Type.FLOAT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( to > Type.LONG_TYPE )  {^257^^^^^242^272^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 1 )  {^284^^^^^272^295^} else if  ( to == Type.CHAR_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 0 )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == this )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( to < Type.DOUBLE_TYPE )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( to == 4 )  {^264^^^^^249^279^if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^} else if  ( Type.LONG_TYPE == from )  {^272^^^^^257^287^} else if  ( from == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( to == 3 )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( Type.BYTE_TYPE == to )  {^282^^^^^272^295^if  ( to == Type.BYTE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == this )  {^286^^^^^272^295^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 4 )  {^292^^^^^272^295^} else if  ( to == Type.SHORT_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 0 )  {^290^^^^^272^295^} else if  ( to == Type.LONG_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( to == 4 )  {^286^^^^^271^301^} else if  ( to == Type.DOUBLE_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] cast_numeric [RETURN_TYPE] void   Type from Type to [VARIABLES] Type  from  to  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( USHR < -1 )  {^300^^^^^299^311^if  ( i < -1 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( i <= -1 )  {^300^^^^^299^311^if  ( i < -1 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( i < - )  {^300^^^^^299^311^if  ( i < -1 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else USHRf  ( i <= 5 )  {^302^^^^^299^311^} else if  ( i <= 5 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i > 5 )  {^302^^^^^299^311^} else if  ( i <= 5 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i < 5 )  {^302^^^^^299^311^} else if  ( i <= 5 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^} else if  ( i <=  )  {^302^^^^^299^311^} else if  ( i <= 5 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else USHRf  ( i <= Byte.MAX_VALUE )  {^304^^^^^299^311^} else if  ( i <= Byte.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i < Byte.MAX_VALUE )  {^304^^^^^299^311^} else if  ( i <= Byte.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else REMf  ( i <= Short.MAX_VALUE )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i < Short.MAX_VALUE )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( OR )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( REM )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.SIPUSH, USHR ) ;^307^^^^^299^311^mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( USHR )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.BIPUSH, REM ) ;^305^^^^^299^311^mv.visitIntInsn ( Constants.BIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else SUBf  ( i <= Short.MAX_VALUE )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.SIPUSH, OR ) ;^307^^^^^299^311^mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( XOR )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.BIPUSH, OR ) ;^305^^^^^299^311^mv.visitIntInsn ( Constants.BIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.SIPUSH, REM ) ;^307^^^^^299^311^mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitInsn ( TypeUtils.ICONST ( SUB )  ) ;^303^^^^^299^311^mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitInsn ( TypeUtils.ICONST ( jumpmode )  ) ;^303^^^^^299^311^mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.SIPUSH, SUB ) ;^307^^^^^299^311^mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( access )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.BIPUSH, XOR ) ;^305^^^^^299^311^mv.visitIntInsn ( Constants.BIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else ORf  ( i <= Short.MAX_VALUE )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i > Short.MAX_VALUE )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( SUB )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitInsn ( TypeUtils.ICONST ( REM )  ) ;^303^^^^^299^311^mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( OR )  ) ;^301^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^} else if  ( i <= XOR )  {^302^^^^^299^311^} else if  ( i <= 5 )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else intOpf  ( i <= Byte.MAX_VALUE )  {^304^^^^^299^311^} else if  ( i <= Byte.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i == Byte.MAX_VALUE )  {^304^^^^^299^311^} else if  ( i <= Byte.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( i <= Short.null )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i == Short.MAX_VALUE )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( op )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else if  ( i <= Short.0 )  {^306^^^^^299^311^} else if  ( i <= Short.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^} else XORf  ( i <= Byte.MAX_VALUE )  {^304^^^^^299^311^} else if  ( i <= Byte.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^} else if  ( i > Byte.MAX_VALUE )  {^304^^^^^299^311^} else if  ( i <= Byte.MAX_VALUE )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.SIPUSH, XOR ) ;^307^^^^^299^311^mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.BIPUSH, intOp ) ;^305^^^^^299^311^mv.visitIntInsn ( Constants.BIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( intOp )  ) ;^309^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIntInsn ( Constants.SIPUSH, intOp ) ;^307^^^^^299^311^mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( REM )  ) ;^301^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLdcInsn ( new Integer ( XOR )  ) ;^301^^^^^299^311^mv.visitLdcInsn ( new Integer ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitInsn ( TypeUtils.ICONST ( OR )  ) ;^303^^^^^299^311^mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   int i [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value == 0L && value == 1L )  {^314^^^^^313^319^if  ( value == 0L || value == 1L )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   long value [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  long  value  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value != 0L || value == 1L )  {^314^^^^^313^319^if  ( value == 0L || value == 1L )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   long value [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  long  value  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value == 0L || value != 1L )  {^314^^^^^313^319^if  ( value == 0L || value == 1L )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   long value [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  long  value  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value == 0f && value == 1f || value == 2f )  {^322^^^^^321^327^if  ( value == 0f || value == 1f || value == 2f )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   float value [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  float  value  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value != 0f || value == 1f || value == 2f )  {^322^^^^^321^327^if  ( value == 0f || value == 1f || value == 2f )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   float value [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  float  value  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value >= 0f || value == 1f || value == 2f )  {^322^^^^^321^327^if  ( value == 0f || value == 1f || value == 2f )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   float value [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  float  value  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value == 0d && value == 1d )  {^329^^^^^328^334^if  ( value == 0d || value == 1d )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   double value [VARIABLES] boolean  State  state  double  value  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value <= 0d || value == 1d )  {^329^^^^^328^334^if  ( value == 0d || value == 1d )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   double value [VARIABLES] boolean  State  state  double  value  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( value != 0d || value == 1d )  {^329^^^^^328^334^if  ( value == 0d || value == 1d )  {^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   double value [VARIABLES] boolean  State  state  double  value  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( TypeUtils.isStatic ( USHR )  )  {^357^^^^^356^361^if  ( TypeUtils.isStatic ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] load_this [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( TypeUtils.isStatic ( state )  )  {^357^^^^^356^361^if  ( TypeUtils.isStatic ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] load_this [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( TypeUtils.isStatic ( state.access.access )  )  {^357^^^^^356^361^if  ( TypeUtils.isStatic ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] load_this [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( TypeUtils.isStatic ( SUB )  )  {^357^^^^^356^361^if  ( TypeUtils.isStatic ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] load_this [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^mv.visitVarInsn ( Constants.ALOAD, REM ) ;^360^^^^^356^361^mv.visitVarInsn ( Constants.ALOAD, 0 ) ;^[CLASS] CodeEmitter State  [METHOD] load_this [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^load_args ( op, state.argumentTypes.length ) ;^367^^^^^366^368^load_args ( 0, state.argumentTypes.length ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( intOp )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^load_local ( exceptionTypes[index], state.localOffset + skipArgs ( index )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^load_local ( state.argumentTypes[index], access + skipArgs ( index )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^load_local ( state.argumentTypes[index], index + skipArgs ( state.localOffset )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^load_local ( index[index], state.localOffset + skipArgs ( state.argumentTypes )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^load_local ( state.localOffset.argumentTypes[index], state + skipArgs ( index )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^load_local ( state.localOffset[index], state.argumentTypes + skipArgs ( index )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^load_local ( state.argumentTypes[index], state.localOffset  >=  skipArgs ( index )  ) ;^375^376^^^^374^377^load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^state.localOffset + skipArgs ( SUB )  ) ;^376^^^^^374^377^state.localOffset + skipArgs ( index )  ) ;^[CLASS] CodeEmitter State  [METHOD] load_arg [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int pos = state.localOffset + skipArgs ( SUB ) ;^381^^^^^380^387^int pos = state.localOffset + skipArgs ( fromArg ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int pos = index + skipArgs ( fromArg ) ;^381^^^^^380^387^int pos = state.localOffset + skipArgs ( fromArg ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^int pos = fromArg.localOffset + skipArgs ( state ) ;^381^^^^^380^387^int pos = state.localOffset + skipArgs ( fromArg ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^int pos = fromArg + skipArgs ( state.localOffset ) ;^381^^^^^380^387^int pos = state.localOffset + skipArgs ( fromArg ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^int pos = state.localOffset.localOffset + skipArgs ( fromArg ) ;^381^^^^^380^387^int pos = state.localOffset + skipArgs ( fromArg ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int pos = state.localOffset + skipArgs ( count ) ;^381^^^^^380^387^int pos = state.localOffset + skipArgs ( fromArg ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( SUBnt i = 0; i < count; i++ )  {^382^^^^^380^387^for  ( int i = 0; i < count; i++ )  {^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= count; i++ )  {^382^^^^^380^387^for  ( int i = 0; i < count; i++ )  {^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < count; i++ )  {^382^^^^^380^387^for  ( int i = 0; i < count; i++ )  {^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  >>  ( int i = 0; i < count; i++ )  {^382^^^^^380^387^for  ( int i = 0; i < count; i++ )  {^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = intOp; i < count; i++ )  {^382^^^^^380^387^for  ( int i = 0; i < count; i++ )  {^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^Type t = state.argumentTypes[localOffset + i];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^Type t = state.argumentTypes[fromArg + access];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^Type t = exceptionTypes[fromArg + i];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^Type t = i[fromArg + state.argumentTypes];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^Type t = state.argumentTypes.argumentTypes[fromArg + i];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^load_local ( t, SUB ) ;^384^^^^^380^387^load_local ( t, pos ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^load_local ( pos, t ) ;^384^^^^^380^387^load_local ( t, pos ) ;^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = EQ; i < count; i++ )  {^382^^^^^380^387^for  ( int i = 0; i < count; i++ )  {^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^Type t = state.argumentTypes[i + i];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^Type t = state.argumentTypes[fromArg + SUB];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^Type t = i.argumentTypes[fromArg + state];^383^^^^^380^387^Type t = state.argumentTypes[fromArg + i];^[CLASS] CodeEmitter State  [METHOD] load_args [RETURN_TYPE] void   int fromArg int count [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < XOR; i++ )  {^391^^^^^389^395^for  ( int i = 0; i < numArgs; i++ )  {^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( numArgsnt i = 0; i < i; i++ )  {^391^^^^^389^395^for  ( int i = 0; i < numArgs; i++ )  {^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= numArgs; i++ )  {^391^^^^^389^395^for  ( int i = 0; i < numArgs; i++ )  {^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for   instanceof   ( int i = 0; i < numArgs; i++ )  {^391^^^^^389^395^for  ( int i = 0; i < numArgs; i++ )  {^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^amount += state.argumentTypes.argumentTypes[i].getSize (  ) ;^392^^^^^389^395^amount += state.argumentTypes[i].getSize (  ) ;^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^amount += exceptionTypes[i].getSize (  ) ;^392^^^^^389^395^amount += state.argumentTypes[i].getSize (  ) ;^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^amount += state[i].getSize (  ) ;^392^^^^^389^395^amount += state.argumentTypes[i].getSize (  ) ;^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return USHR;^394^^^^^389^395^return amount;^[CLASS] CodeEmitter State  [METHOD] skipArgs [RETURN_TYPE] int   int numArgs [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitVarInsn ( t.getOpcode ( Constants.ILOAD ) , amount ) ;^399^^^^^397^400^mv.visitVarInsn ( t.getOpcode ( Constants.ILOAD ) , pos ) ;^[CLASS] CodeEmitter State  [METHOD] load_local [RETURN_TYPE] void   Type t int pos [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitVarInsn ( pos.getOpcode ( Constants.ILOAD ) , t ) ;^399^^^^^397^400^mv.visitVarInsn ( t.getOpcode ( Constants.ILOAD ) , pos ) ;^[CLASS] CodeEmitter State  [METHOD] load_local [RETURN_TYPE] void   Type t int pos [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitVarInsn ( t.getOpcode ( Constants.ISTORE ) , index ) ;^404^^^^^402^405^mv.visitVarInsn ( t.getOpcode ( Constants.ISTORE ) , pos ) ;^[CLASS] CodeEmitter State  [METHOD] store_local [RETURN_TYPE] void   Type t int pos [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitVarInsn ( pos.getOpcode ( Constants.ISTORE ) , t ) ;^404^^^^^402^405^mv.visitVarInsn ( t.getOpcode ( Constants.ISTORE ) , pos ) ;^[CLASS] CodeEmitter State  [METHOD] store_local [RETURN_TYPE] void   Type t int pos [VARIABLES] Type  t  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitIincInsn ( local.getIndex (  ) , intOp ) ;^408^^^^^407^409^mv.visitIincInsn ( local.getIndex (  ) , amount ) ;^[CLASS] CodeEmitter State  [METHOD] iinc [RETURN_TYPE] void   Local local int amount [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Local  local  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitIincInsn ( amount.getIndex (  ) , local ) ;^408^^^^^407^409^mv.visitIincInsn ( local.getIndex (  ) , amount ) ;^[CLASS] CodeEmitter State  [METHOD] iinc [RETURN_TYPE] void   Local local int amount [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Local  local  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitInsn ( DOUBLE_VALUE.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^420^^^^^419^421^mv.visitInsn ( state.sig.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^[CLASS] CodeEmitter State  [METHOD] return_value [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitInsn ( LONG_VALUE.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^420^^^^^419^421^mv.visitInsn ( state.sig.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^[CLASS] CodeEmitter State  [METHOD] return_value [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitInsn ( state.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^420^^^^^419^421^mv.visitInsn ( state.sig.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^[CLASS] CodeEmitter State  [METHOD] return_value [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitInsn ( state.sig.sig.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^420^^^^^419^421^mv.visitInsn ( state.sig.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^[CLASS] CodeEmitter State  [METHOD] return_value [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^ClassEmitter.FieldInfo info = name.getFieldInfo ( ce ) ;^424^^^^^423^427^ClassEmitter.FieldInfo info = ce.getFieldInfo ( name ) ;^[CLASS] CodeEmitter State  [METHOD] getfield [RETURN_TYPE] void   String name [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  FieldInfo  info  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^ClassEmitter.FieldInfo info = name.getFieldInfo ( ce ) ;^430^^^^^429^433^ClassEmitter.FieldInfo info = ce.getFieldInfo ( name ) ;^[CLASS] CodeEmitter State  [METHOD] putfield [RETURN_TYPE] void   String name [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  FieldInfo  info  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETFIELD, name.getSuperType (  ) , ce, type ) ;^436^^^^^435^437^emit_field ( Constants.GETFIELD, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_getfield [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETFIELD, type.getSuperType (  ) , name, ce ) ;^436^^^^^435^437^emit_field ( Constants.GETFIELD, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_getfield [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTFIELD, name.getSuperType (  ) , ce, type ) ;^440^^^^^439^441^emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_putfield [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTFIELD, type.getSuperType (  ) , name, ce ) ;^440^^^^^439^441^emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_putfield [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETSTATIC, name.getSuperType (  ) , ce, type ) ;^444^^^^^443^445^emit_field ( Constants.GETSTATIC, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_getstatic [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETSTATIC, ce.getSuperType (  ) , type, name ) ;^444^^^^^443^445^emit_field ( Constants.GETSTATIC, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_getstatic [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTSTATIC, name.getSuperType (  ) , ce, type ) ;^448^^^^^447^449^emit_field ( Constants.PUTSTATIC, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_putstatic [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTSTATIC, type.getSuperType (  ) , name, ce ) ;^448^^^^^447^449^emit_field ( Constants.PUTSTATIC, ce.getSuperType (  ) , name, type ) ;^[CLASS] CodeEmitter State  [METHOD] super_putstatic [RETURN_TYPE] void   String name Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^emit_field ( Constants.GETFIELD, owner, name, owner ) ;^452^^^^^451^453^emit_field ( Constants.GETFIELD, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] getfield [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETFIELD, type, name, owner ) ;^452^^^^^451^453^emit_field ( Constants.GETFIELD, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] getfield [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETFIELD, owner, type, name ) ;^452^^^^^451^453^emit_field ( Constants.GETFIELD, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] getfield [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTFIELD, type, name, owner ) ;^456^^^^^455^457^emit_field ( Constants.PUTFIELD, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] putfield [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTFIELD, name, owner, type ) ;^456^^^^^455^457^emit_field ( Constants.PUTFIELD, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] putfield [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^emit_field ( Constants.GETSTATIC, owner, name, owner ) ;^460^^^^^459^461^emit_field ( Constants.GETSTATIC, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] getstatic [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETSTATIC, type, name, owner ) ;^460^^^^^459^461^emit_field ( Constants.GETSTATIC, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] getstatic [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.GETSTATIC, name, owner, type ) ;^460^^^^^459^461^emit_field ( Constants.GETSTATIC, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] getstatic [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTSTATIC, type, name, owner ) ;^464^^^^^463^465^emit_field ( Constants.PUTSTATIC, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] putstatic [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_field ( Constants.PUTSTATIC, owner, type, name ) ;^464^^^^^463^465^emit_field ( Constants.PUTSTATIC, owner, name, type ) ;^[CLASS] CodeEmitter State  [METHOD] putstatic [RETURN_TYPE] void   Type owner String name Type type [VARIABLES] Type  owner  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitFieldInsn ( name, ctype.getInternalName (  ) , opcode, ftype.getDescriptor (  )  ) ;^469^470^471^472^^468^473^mv.visitFieldInsn ( opcode, ctype.getInternalName (  ) , name, ftype.getDescriptor (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] emit_field [RETURN_TYPE] void   int opcode Type ctype String name Type ftype [VARIABLES] Type  ctype  ftype  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  name  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^super_invoke ( LONG_VALUE ) ;^476^^^^^475^477^super_invoke ( state.sig ) ;^[CLASS] CodeEmitter State  [METHOD] super_invoke [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^super_invoke ( state ) ;^476^^^^^475^477^super_invoke ( state.sig ) ;^[CLASS] CodeEmitter State  [METHOD] super_invoke [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^super_invoke ( state.sig.sig ) ;^476^^^^^475^477^super_invoke ( state.sig ) ;^[CLASS] CodeEmitter State  [METHOD] super_invoke [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^emit_invoke ( Constants.INVOKESPECIAL, ce.getSuperType (  ) , LONG_VALUE ) ;^480^^^^^479^481^emit_invoke ( Constants.INVOKESPECIAL, ce.getSuperType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] super_invoke [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_invoke ( Constants.INVOKESPECIAL, sig.getSuperType (  ) , ce ) ;^480^^^^^479^481^emit_invoke ( Constants.INVOKESPECIAL, ce.getSuperType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] super_invoke [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( type, sig ) ;^484^^^^^483^485^invoke_constructor ( type, CSTRUCT_NULL ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_constructor [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( CSTRUCT_NULL, type ) ;^484^^^^^483^485^invoke_constructor ( type, CSTRUCT_NULL ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_constructor [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( DOUBLE_VALUE.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == null )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( Constants.INVOKESTATIC.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == sig )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( Constants.INVOKEVIRTUAL == opcode )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKESTATIC )  || ( opcode == Constants.INVOKEVIRTUAL )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  || (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  && ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode >= Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode != Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( LONG_VALUE.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitMethodInsn ( amount, type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^501^502^503^504^^495^505^mv.visitMethodInsn ( opcode, type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitMethodInsn ( opcode, type.getInternalName (  ) , INT_VALUE.getName (  ) , sig.getDescriptor (  )  ) ;^501^502^503^504^^495^505^mv.visitMethodInsn ( opcode, type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitMethodInsn ( sig, type.getInternalName (  ) , opcode.getName (  ) , sig.getDescriptor (  )  ) ;^501^502^503^504^^495^505^mv.visitMethodInsn ( opcode, type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitMethodInsn ( type, opcode.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^501^502^503^504^^495^505^mv.visitMethodInsn ( opcode, type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitMethodInsn ( opcode, sig.getInternalName (  ) , type.getName (  ) , sig.getDescriptor (  )  ) ;^501^502^503^504^^495^505^mv.visitMethodInsn ( opcode, type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^sig.getName (  ) , DOUBLE_VALUE.getDescriptor (  )  ) ;^503^504^^^^495^505^sig.getName (  ) , sig.getDescriptor (  )  ) ;^[CLASS] CodeEmitter State  [METHOD] emit_invoke [RETURN_TYPE] void   int opcode Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^emit_invoke ( Constants.INVOKEINTERFACE, owner, FLOAT_VALUE ) ;^508^^^^^507^509^emit_invoke ( Constants.INVOKEINTERFACE, owner, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_interface [RETURN_TYPE] void   Type owner Signature sig [VARIABLES] Type  owner  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_invoke ( Constants.INVOKEINTERFACE, sig, owner ) ;^508^^^^^507^509^emit_invoke ( Constants.INVOKEINTERFACE, owner, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_interface [RETURN_TYPE] void   Type owner Signature sig [VARIABLES] Type  owner  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^emit_invoke ( Constants.INVOKEVIRTUAL, owner, LONG_VALUE ) ;^512^^^^^511^513^emit_invoke ( Constants.INVOKEVIRTUAL, owner, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_virtual [RETURN_TYPE] void   Type owner Signature sig [VARIABLES] Type  owner  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_invoke ( Constants.INVOKEVIRTUAL, sig, owner ) ;^512^^^^^511^513^emit_invoke ( Constants.INVOKEVIRTUAL, owner, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_virtual [RETURN_TYPE] void   Type owner Signature sig [VARIABLES] Type  owner  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^emit_invoke ( Constants.INVOKESTATIC, owner, LONG_VALUE ) ;^516^^^^^515^517^emit_invoke ( Constants.INVOKESTATIC, owner, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_static [RETURN_TYPE] void   Type owner Signature sig [VARIABLES] Type  owner  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_invoke ( Constants.INVOKESTATIC, sig, owner ) ;^516^^^^^515^517^emit_invoke ( Constants.INVOKESTATIC, owner, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_static [RETURN_TYPE] void   Type owner Signature sig [VARIABLES] Type  owner  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( ce.getClassType (  ) , INT_VALUE ) ;^520^^^^^519^521^invoke_virtual ( ce.getClassType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_virtual_this [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_virtual ( sig.getClassType (  ) , ce ) ;^520^^^^^519^521^invoke_virtual ( ce.getClassType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_virtual_this [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_static ( ce.getClassType (  ) , LONG_VALUE ) ;^524^^^^^523^525^invoke_static ( ce.getClassType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_static_this [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_static ( sig.getClassType (  ) , ce ) ;^524^^^^^523^525^invoke_static ( ce.getClassType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_static_this [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^emit_invoke ( Constants.INVOKESPECIAL, type, DOUBLE_VALUE ) ;^528^^^^^527^529^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_constructor [RETURN_TYPE] void   Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^emit_invoke ( Constants.INVOKESPECIAL, sig, type ) ;^528^^^^^527^529^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_constructor [RETURN_TYPE] void   Type type Signature sig [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( ce.getClassType (  ) , DOUBLE_VALUE ) ;^532^^^^^531^533^invoke_constructor ( ce.getClassType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_constructor_this [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( sig.getClassType (  ) , ce ) ;^532^^^^^531^533^invoke_constructor ( ce.getClassType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke_constructor_this [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( ce.getSuperType (  ) , LONG_VALUE ) ;^536^^^^^535^537^invoke_constructor ( ce.getSuperType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] super_invoke_constructor [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( sig.getSuperType (  ) , ce ) ;^536^^^^^535^537^invoke_constructor ( ce.getSuperType (  ) , sig ) ;^[CLASS] CodeEmitter State  [METHOD] super_invoke_constructor [RETURN_TYPE] void   Signature sig [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTypeInsn ( XOR, desc ) ;^554^^^^^547^555^mv.visitTypeInsn ( opcode, desc ) ;^[CLASS] CodeEmitter State  [METHOD] emit_type [RETURN_TYPE] void   int opcode Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  desc  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^push ( amount ) ;^558^^^^^557^560^push ( index ) ;^[CLASS] CodeEmitter State  [METHOD] aaload [RETURN_TYPE] void   int index [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( amount == 0 )  {^598^^^^^596^604^if  ( keys.length == 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( keys.length.length == 0 )  {^598^^^^^596^604^if  ( keys.length == 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( keys == 0 )  {^598^^^^^596^604^if  ( keys.length == 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( keys.length != 0 )  {^598^^^^^596^604^if  ( keys.length == 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length == NEG )  {^598^^^^^596^604^if  ( keys.length == 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length == EQ )  {^598^^^^^596^604^if  ( keys.length == 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^density =  ( float ) access /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =  ( float ) keys.length -  ( keys[keys.length - 1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =  <=  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =  ( float ) keys.length /  ( keys[keys.length  <<  1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =  ( float ) keys.length /  ( keys[keys.length  &  1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0]  ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^density =  ( float ) keys.length /  ( keys[keys.length - LT] - keys[0] + LT ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^density = op;^599^^^^^596^604^density = 0;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^density = intOp;^599^^^^^596^604^density = 0;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^density =  ( float ) count /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^density =  ( float ) keys /  ( keys.length[keys.length - 1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =  ( float ) keys.length +  ( keys[keys.length - 1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =   instanceof   ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =  ( float ) keys.length /  ( keys[keys.length  |  1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^density =  ( float ) keys.length /  ( keys[keys.length  &&  1] - keys[0] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^density =  ( float ) keys.length /  ( keys[keys.length - MUL] - keys[0] + MUL ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[1] + 1 ) ;^601^^^^^596^604^density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^process_switch ( density, callback, keys >= 0.5f ) ;^603^^^^^596^604^process_switch ( keys, callback, density >= 0.5f ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^process_switch ( keys, density, callback >= 0.5f ) ;^603^^^^^596^604^process_switch ( keys, callback, density >= 0.5f ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^process_switch ( keys, callback, density > 0.5f ) ;^603^^^^^596^604^process_switch ( keys, callback, density >= 0.5f ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback [VARIABLES] boolean  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  float  density  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( keys.length >= 0 )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length > -1 )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length > EQ )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length >  )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length > 1 )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( countnt i = 0; i < len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < fromArg; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( lennt i = 0; i < i; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = localOffset; i < len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < max; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = SUB; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( keys[i], label ) ;^641^^^^^619^643^callback.processCase ( keys[i], end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^callback.processCase ( end[i], keys ) ;^641^^^^^619^643^callback.processCase ( keys[i], end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = pos; i < len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = len; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLookupSwitchInsn ( label, keys, labels ) ;^638^^^^^619^643^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( keys, def, labels ) ;^638^^^^^619^643^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( def, labels, keys ) ;^638^^^^^619^643^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( labels, keys, def ) ;^638^^^^^619^643^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( def != def )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( label != label )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( def != label )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( label <= def )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mark ( end ) ;^629^^^^^614^644^mark ( label ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( intOp + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + intOp, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + min, label ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^callback.processCase ( min + i, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^callback.processCase ( i + end, min ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( countnt i = 0; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < max; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - amount] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  >  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( amountnt i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < fromArg; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( rangent i = 0; i < i; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  <  ( int i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = min; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( end != def )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( max + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + count, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + amount, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  ==  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = XOR; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^Arrays.fill ( def, labels ) ;^621^^^^^606^636^Arrays.fill ( labels, def ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( fromArg, max, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( min, max, label, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( max, min, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( min, def, max, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( min, labels, def, max ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( index + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( label >= def )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( amount + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( amountnt i = 0; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( lennt i = 0; i < i; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - jumpmode] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  &&  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( fromArgnt i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < count; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ||  ( int i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = GE; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( label != end )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( label == def )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^callback.processCase ( end + min, i ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( fromArgnt i = 0; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < localOffset; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( lennt i = 0; i < i; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( countnt i = 0; i < len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < amount; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( lennt i = 0; i < i; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = len; i < len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( keys[i], label ) ;^641^^^^^626^656^callback.processCase ( keys[i], end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - numArgs] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  &  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^int len = keys.length.length;^614^^^^^599^629^int len = keys.length;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^int len = keys;^614^^^^^599^629^int len = keys.length;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int min = keys[LE];^615^^^^^600^630^int min = keys[0];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int max = keys[localOffset - 1];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int max = keys[len   instanceof   1];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int max = keys[len ];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int range = amount - min + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int range = max - amount + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^int range = min - max + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int range = max   instanceof   min + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int range = max - min + max;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = access; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = MUL; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^Arrays.fill ( labels, label ) ;^621^^^^^606^636^Arrays.fill ( labels, def ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( amount, max, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( min, count, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitLookupSwitchInsn ( label, keys, labels ) ;^638^^^^^623^653^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( labels, keys, def ) ;^638^^^^^623^653^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( def, labels, keys ) ;^638^^^^^623^653^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^callback.processCase ( end[i], keys ) ;^641^^^^^626^656^callback.processCase ( keys[i], end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( localOffsetnt i = 0; i < len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < count; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( amountnt i = 0; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < amount; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( lennt i = 0; i < i; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = LE; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = fromArg; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( jumpmodent i = 0; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < count; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  ||  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ==  ( int i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( count + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + fromArg, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]   instanceof   min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = ; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( count, max, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( min, index, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( fromArg + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( len + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + index, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( fromArgnt i = 0; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < amount; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( countnt i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < intOp; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( intOpnt i = 0; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < count; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( fromArgnt i = 0; i < len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < jumpmode; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( fromArg > 0 )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( keys.length == 0 )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length > NEG )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length > op )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys.length > GT )  {^613^^^^^598^628^if  ( keys.length > 0 )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < intOp; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( indexnt i = 0; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < fromArg; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - index] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  |  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ^  ( int i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + max, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  <<  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( min, fromArg, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( min, max, labels, def ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - len] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < amount; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = SUB; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( maxnt i = 0; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < amount; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < count; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int len = amount;^614^^^^^599^629^int len = keys.length;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int min = keys[1];^615^^^^^600^630^int min = keys[0];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int max = keys[len  |  1];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int max = keys[len - min];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int range = max  |  min + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int range = max - min ;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = len; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = op; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = DIV; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( min, localOffset, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( amountnt i = 0; i < len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < jumpmode; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = NE; i < len; i++ )  {^635^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( jumpmodent i = 0; i < len; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < count; i++ )  {^639^^^^^619^643^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( intOpnt i = 0; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = numArgs; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  >=  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  !=  ( int i = 0; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = jumpmode; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( label < def )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( localOffset + min, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - i] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = opcode; i < range; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( index, max, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitTableSwitchInsn ( labels, max, def, min ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( label > def )  {^628^^^^^613^643^if  ( label != def )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( minnt i = 0; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = NEG; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - fromArg] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  <=  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < index; i++ )  {^626^^^^^611^641^for  ( int i = 0; i < range; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + i, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( lennt i = 0; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = max; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( posnt i = 0; i < len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == len; i++ )  {^639^^^^^624^654^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^labels[keys[i] - count] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int len = count;^614^^^^^599^629^int len = keys.length;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int max = keys[count - 1];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int max = keys[len  !=  1];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int max = keys[len - pos];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int range = localOffset - min + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int range = max - fromArg + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int range = max  ==  min + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = access; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mv.visitTableSwitchInsn ( min, len, def, labels ) ;^625^^^^^610^640^mv.visitTableSwitchInsn ( min, max, def, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^mv.visitLookupSwitchInsn ( keys, def, labels ) ;^638^^^^^623^653^mv.visitLookupSwitchInsn ( def, keys, labels ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mark ( label ) ;^646^^^^^631^661^mark ( def ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^labels[keys[i]  ^  min] = make_label (  ) ;^623^^^^^608^638^labels[keys[i] - min] = make_label (  ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int len = fromArg;^614^^^^^599^629^int len = keys.length;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int min = keys[len];^615^^^^^600^630^int min = keys[0];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int max = keys[amount - 1];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int max = keys[len  <  1];^616^^^^^601^631^int max = keys[len - 1];^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int range = intOp - min + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^int range = max - count + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^int range = max  <<  min + 1;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^int range = max - min + count;^617^^^^^602^632^int range = max - min + 1;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = AND; i < len; i++ )  {^622^^^^^607^637^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = OR; i < len; i++ )  {^635^^^^^620^650^for  ( int i = 0; i < len; i++ )  {^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^callback.processCase ( i + op, end ) ;^630^^^^^615^645^callback.processCase ( i + min, end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mark ( label ) ;^648^^^^^633^663^mark ( end ) ;^[CLASS] CodeEmitter State  [METHOD] process_switch [RETURN_TYPE] void   int[] keys ProcessSwitchCallback callback boolean useTable [VARIABLES] Label[]  labels  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  def  end  label  Error  e  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  Exception  e  boolean  useTable  RuntimeException  e  ProcessSwitchCallback  callback  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( keys[i] < keys[intOp - 1] ) return false;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( keys[i] > keys[i - 1] ) return false;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( keys[i] < keys[i  <  1] ) return false;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys[i] < keys[i ] ) return false;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys[i] < keys[i - 1] ) return true;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^return true;^662^^^^^659^665^return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( countnt i = 1; i < keys.length; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^for  ( int i = 1; i < index; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( keysnt i = 1; i < i.length; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( int i = 1; i < keys.length.length; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^for  ( int i = 1; i < keys; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 1; i <= keys.length; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 2; i < keys.length; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = min; i < keys.length; i++ )  {^660^^^^^659^665^for  ( int i = 1; i < keys.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( keys[i] <= keys[i - 1] ) return false;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( keys[i] < keys[i  &&  1] ) return false;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( keys[i] < keys[i - access] ) return false;^661^662^^^^659^665^if  ( keys[i] < keys[i - 1] ) return false;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^return false;^664^^^^^659^665^return true;^[CLASS] CodeEmitter State  [METHOD] isSorted [RETURN_TYPE] boolean   int[] keys [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int[]  keys  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^push ( value ? amount : 0 ) ;^678^^^^^677^679^push ( value ? 1 : 0 ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   boolean value [VARIABLES] boolean  value  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^push ( value ? 1 : NEG ) ;^678^^^^^677^679^push ( value ? 1 : 0 ) ;^[CLASS] CodeEmitter State  [METHOD] push [RETURN_TYPE] void   boolean value [VARIABLES] boolean  value  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^math ( fromArg, Type.INT_TYPE ) ;^686^^^^^684^687^math ( XOR, Type.INT_TYPE ) ;^[CLASS] CodeEmitter State  [METHOD] not [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( type, FLOAT_VALUE ) ;^693^^^^^689^695^invoke_constructor ( type, CSTRUCT_STRING ) ;^[CLASS] CodeEmitter State  [METHOD] throw_exception [RETURN_TYPE] void   Type type String msg [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  msg  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( CSTRUCT_STRING, type ) ;^693^^^^^689^695^invoke_constructor ( type, CSTRUCT_STRING ) ;^[CLASS] CodeEmitter State  [METHOD] throw_exception [RETURN_TYPE] void   Type type String msg [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  String  msg  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type <= Type.VOID_TYPE )  {^706^^^^^704^724^if  ( type == Type.VOID_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type != Type.VOID_TYPE )  {^706^^^^^704^724^if  ( type == Type.VOID_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( boxed.getSize (  )  == 2 )  {^711^^^^^704^724^if  ( type.getSize (  )  == 2 )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type.getSize (  )  != 2 )  {^711^^^^^704^724^if  ( type.getSize (  )  == 2 )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( type.getSize (  )  == GE )  {^711^^^^^704^724^if  ( type.getSize (  )  == 2 )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ boxed } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( boxed, new Signature ( type, Type.VOID_TYPE, new Type[]{ Constants.CONSTRUCTOR_NAME } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( boxed, new Signature ( Type.VOID_TYPE, Constants.CONSTRUCTOR_NAME, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^Type boxed = TypeUtils.getBoxedType ( boxed ) ;^709^^^^^704^724^Type boxed = TypeUtils.getBoxedType ( type ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^new_instance ( type ) ;^710^^^^^704^724^new_instance ( boxed ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( type, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( boxed, new Signature ( null, Type.VOID_TYPE, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( Type.VOID_TYPE, new Signature ( Constants.CONSTRUCTOR_NAME, boxed, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( type, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ boxed } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type.getSize (  )  >= 2 )  {^711^^^^^704^724^if  ( type.getSize (  )  == 2 )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, type, new Type[]{ Type.VOID_TYPE } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( boxed, new Signature ( this, Type.VOID_TYPE, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type >= Type.VOID_TYPE )  {^706^^^^^704^724^if  ( type == Type.VOID_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( type.getSize (  )  == len )  {^711^^^^^704^724^if  ( type.getSize (  )  == 2 )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( Constants.CONSTRUCTOR_NAME, new Signature ( boxed, Type.VOID_TYPE, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^if  ( type.getSize (  )  == 1 )  {^711^^^^^704^724^if  ( type.getSize (  )  == 2 )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( boxed, new Signature ( 2, Type.VOID_TYPE, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( TypeUtils.isPrimitive ( boxed )  )  {^705^^^^^704^724^if  ( TypeUtils.isPrimitive ( type )  )  {^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, 3, new Type[]{ type } )  ) ;^721^^^^^704^724^invoke_constructor ( boxed, new Signature ( Constants.CONSTRUCTOR_NAME, Type.VOID_TYPE, new Type[]{ type } )  ) ;^[CLASS] CodeEmitter State  [METHOD] box [RETURN_TYPE] void   Type type [VARIABLES] Type  boxed  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^sig = sig;^741^^^^^726^756^sig = CHAR_VALUE;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^sig = INT_VALUE;^745^^^^^730^760^sig = BOOLEAN_VALUE;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^sig = FLOAT_VALUE;^748^^^^^733^763^sig = DOUBLE_VALUE;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^sig = DOUBLE_VALUE;^751^^^^^736^766^sig = FLOAT_VALUE;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^sig = DOUBLE_VALUE;^754^^^^^739^769^sig = LONG_VALUE;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^sig = LONG_VALUE;^759^^^^^744^774^sig = INT_VALUE;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^switch  ( t.getSort (  )  )  {^736^^^^^721^751^switch  ( type.getSort (  )  )  {^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( sig != null )  {^762^^^^^747^777^if  ( sig == null )  {^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( type, sig ) ;^766^^^^^762^767^invoke_virtual ( t, sig ) ;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( t, FLOAT_VALUE ) ;^766^^^^^762^767^invoke_virtual ( t, sig ) ;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_virtual ( sig, t ) ;^766^^^^^762^767^invoke_virtual ( t, sig ) ;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^checkcast ( t ) ;^763^^^^^748^778^checkcast ( type ) ;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( type, sig ) ;^766^^^^^751^781^invoke_virtual ( t, sig ) ;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( t, INT_VALUE ) ;^766^^^^^751^781^invoke_virtual ( t, sig ) ;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_virtual ( sig, t ) ;^766^^^^^751^781^invoke_virtual ( t, sig ) ;^[CLASS] CodeEmitter State  [METHOD] unbox [RETURN_TYPE] void   Type type [VARIABLES] Type  t  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == state.argumentTypes.length; i++ )  {^782^^^^^775^789^for  ( int i = 0; i < state.argumentTypes.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^push ( mode ) ;^784^^^^^775^789^push ( i ) ;^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^box ( exceptionTypes[i] ) ;^786^^^^^775^789^box ( state.argumentTypes[i] ) ;^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^box ( state[i] ) ;^786^^^^^775^789^box ( state.argumentTypes[i] ) ;^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^box ( state.argumentTypes.argumentTypes[i] ) ;^786^^^^^775^789^box ( state.argumentTypes[i] ) ;^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < state.argumentTypes.length; i++ )  {^782^^^^^775^789^for  ( int i = 0; i < state.argumentTypes.length; i++ )  {^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^push ( fromArg ) ;^784^^^^^775^789^push ( i ) ;^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^load_arg ( amount ) ;^785^^^^^775^789^load_arg ( i ) ;^[CLASS] CodeEmitter State  [METHOD] create_arg_array [RETURN_TYPE] void   [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^push ( -1 ) ;^810^^^^^795^815^push ( 0 ) ;^[CLASS] CodeEmitter State  [METHOD] zero_or_null [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^push (  ) ;^810^^^^^795^815^push ( 0 ) ;^[CLASS] CodeEmitter State  [METHOD] zero_or_null [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Operator]^if  ( type <= Type.VOID_TYPE )  {^823^^^^^821^838^if  ( type != Type.VOID_TYPE )  {^[CLASS] CodeEmitter State  [METHOD] unbox_or_zero [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  end  nonNull  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^ifnonnull ( end ) ;^827^^^^^821^838^ifnonnull ( nonNull ) ;^[CLASS] CodeEmitter State  [METHOD] unbox_or_zero [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  end  nonNull  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^goTo ( nonNull ) ;^830^^^^^821^838^goTo ( end ) ;^[CLASS] CodeEmitter State  [METHOD] unbox_or_zero [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  end  nonNull  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mark ( end ) ;^831^^^^^821^838^mark ( nonNull ) ;^[CLASS] CodeEmitter State  [METHOD] unbox_or_zero [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  end  nonNull  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^mark ( nonNull ) ;^833^^^^^821^838^mark ( end ) ;^[CLASS] CodeEmitter State  [METHOD] unbox_or_zero [RETURN_TYPE] void   Type type [VARIABLES] Type  type  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  Label  end  nonNull  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( !TypeUtils.isAbstract ( count )  )  {^841^^^^^840^844^if  ( !TypeUtils.isAbstract ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^mv.visitMaxs ( USHR, USHR ) ;^842^^^^^840^844^mv.visitMaxs ( 0, 0 ) ;^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^mv.visitMaxs ( min, min ) ;^842^^^^^840^844^mv.visitMaxs ( 0, 0 ) ;^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( !TypeUtils.isAbstract ( intOp )  )  {^841^^^^^840^844^if  ( !TypeUtils.isAbstract ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( !TypeUtils.isAbstract ( state )  )  {^841^^^^^840^844^if  ( !TypeUtils.isAbstract ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^if  ( !TypeUtils.isAbstract ( state.access.access )  )  {^841^^^^^840^844^if  ( !TypeUtils.isAbstract ( state.access )  )  {^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^mv.visitMaxs ( pos, pos ) ;^842^^^^^840^844^mv.visitMaxs ( 0, 0 ) ;^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^mv.visitMaxs ( -1, -1 ) ;^842^^^^^840^844^mv.visitMaxs ( 0, 0 ) ;^[CLASS] CodeEmitter State  [METHOD] visitMaxs [RETURN_TYPE] void   int maxStack int maxLocals [VARIABLES] boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( FLOAT_VALUE.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^850^^^^^846^859^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( virtualType, LONG_VALUE ) ;^857^^^^^846^859^invoke_virtual ( virtualType, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_virtual ( sig, virtualType ) ;^857^^^^^846^859^invoke_virtual ( virtualType, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_static ( virtualType, sig ) ;^855^^^^^846^859^invoke_static ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_static ( type, INT_VALUE ) ;^855^^^^^846^859^invoke_static ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_static ( sig, type ) ;^855^^^^^846^859^invoke_static ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( type, sig ) ;^857^^^^^846^859^invoke_virtual ( virtualType, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( virtualType, FLOAT_VALUE ) ;^857^^^^^846^859^invoke_virtual ( virtualType, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_interface ( virtualType, sig ) ;^853^^^^^846^859^invoke_interface ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_interface ( type, DOUBLE_VALUE ) ;^853^^^^^846^859^invoke_interface ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_interface ( sig, type ) ;^853^^^^^846^859^invoke_interface ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_virtual ( virtualType, DOUBLE_VALUE ) ;^857^^^^^846^859^invoke_virtual ( virtualType, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_static ( type, DOUBLE_VALUE ) ;^855^^^^^846^859^invoke_static ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_interface ( type, LONG_VALUE ) ;^853^^^^^846^859^invoke_interface ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_static ( type, LONG_VALUE ) ;^855^^^^^846^859^invoke_static ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( virtualType, sig ) ;^851^^^^^846^859^invoke_constructor ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^invoke_constructor ( type, INT_VALUE ) ;^851^^^^^846^859^invoke_constructor ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Argument_Swapping]^invoke_constructor ( sig, type ) ;^851^^^^^846^859^invoke_constructor ( type, sig ) ;^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( LONG_VALUE.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^850^^^^^846^859^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^if  ( INT_VALUE.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^850^^^^^846^859^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^[CLASS] CodeEmitter State  [METHOD] invoke [RETURN_TYPE] void   MethodInfo method Type virtualType [VARIABLES] Type  type  virtualType  boolean  State  state  Signature  BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  ClassEmitter  ce  Type[]  argumentTypes  exceptionTypes  MethodInfo  method  int  ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^this.access = localOffset;^77^^^^^75^82^this.access = access;^[CLASS] State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] Type[]  argumentTypes  exceptionTypes  boolean  int  access  localOffset  Signature  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^this.exceptionTypes = argumentTypes;^79^^^^^75^82^this.exceptionTypes = exceptionTypes;^[CLASS] State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] Type[]  argumentTypes  exceptionTypes  boolean  int  access  localOffset  Signature  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^localOffset = TypeUtils.isStatic ( localOffset )  ? 0 : 1;^80^^^^^75^82^localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[CLASS] State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] Type[]  argumentTypes  exceptionTypes  boolean  int  access  localOffset  Signature  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^localOffset = TypeUtils.isStatic ( access )  ? access : 1;^80^^^^^75^82^localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[CLASS] State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] Type[]  argumentTypes  exceptionTypes  boolean  int  access  localOffset  Signature  sig  ClassInfo  classInfo  
[BugLab_Wrong_Literal]^localOffset = TypeUtils.isStatic ( access )  ? 0 : access;^80^^^^^75^82^localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[CLASS] State  [METHOD] <init> [RETURN_TYPE] Type[])   ClassInfo classInfo int access Signature sig Type[] exceptionTypes [VARIABLES] Type[]  argumentTypes  exceptionTypes  boolean  int  access  localOffset  Signature  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return localOffset;^89^^^^^88^90^return access;^[CLASS] State  [METHOD] getModifiers [RETURN_TYPE] int   [VARIABLES] Type[]  argumentTypes  exceptionTypes  boolean  int  access  localOffset  Signature  sig  ClassInfo  classInfo  
[BugLab_Variable_Misuse]^return argumentTypes;^97^^^^^96^98^return exceptionTypes;^[CLASS] State  [METHOD] getExceptionTypes [RETURN_TYPE] Type[]   [VARIABLES] Type[]  argumentTypes  exceptionTypes  boolean  int  access  localOffset  Signature  sig  ClassInfo  classInfo  
