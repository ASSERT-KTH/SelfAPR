[BugLab_Wrong_Operator]^return Type.getType ( "L" + className.replace ( '.', '/' )  >>  + ";" ) ;^44^^^^^43^45^return Type.getType ( "L" + className.replace ( '.', '/' )  + ";" ) ;^[CLASS] TypeUtils  [METHOD] getType [RETURN_TYPE] Type   String className [VARIABLES] Map  rtransforms  transforms  String  className  boolean  
[BugLab_Wrong_Operator]^return Type.getType ( "L"  >  className.replace ( '.', '/' )  + ";" ) ;^44^^^^^43^45^return Type.getType ( "L" + className.replace ( '.', '/' )  + ";" ) ;^[CLASS] TypeUtils  [METHOD] getType [RETURN_TYPE] Type   String className [VARIABLES] Map  rtransforms  transforms  String  className  boolean  
[BugLab_Wrong_Operator]^return Type.getType ( "L" + className.replace ( '.', '/' )  <=  + ";" ) ;^44^^^^^43^45^return Type.getType ( "L" + className.replace ( '.', '/' )  + ";" ) ;^[CLASS] TypeUtils  [METHOD] getType [RETURN_TYPE] Type   String className [VARIABLES] Map  rtransforms  transforms  String  className  boolean  
[BugLab_Wrong_Operator]^return Type.getType ( "L"  ||  className.replace ( '.', '/' )  + ";" ) ;^44^^^^^43^45^return Type.getType ( "L" + className.replace ( '.', '/' )  + ";" ) ;^[CLASS] TypeUtils  [METHOD] getType [RETURN_TYPE] Type   String className [VARIABLES] Map  rtransforms  transforms  String  className  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_FINAL )  != 0;^48^^^^^47^49^return  ( Constants.ACC_FINAL & access )  != 0;^[CLASS] TypeUtils  [METHOD] isFinal [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_FINAL & access )  <= 0;^48^^^^^47^49^return  ( Constants.ACC_FINAL & access )  != 0;^[CLASS] TypeUtils  [METHOD] isFinal [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_FINAL  ^  access )  != 0;^48^^^^^47^49^return  ( Constants.ACC_FINAL & access )  != 0;^[CLASS] TypeUtils  [METHOD] isFinal [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Literal]^return  ( Constants.ACC_FINAL & access )  != 1;^48^^^^^47^49^return  ( Constants.ACC_FINAL & access )  != 0;^[CLASS] TypeUtils  [METHOD] isFinal [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_STATIC )  != 0;^52^^^^^51^53^return  ( Constants.ACC_STATIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isStatic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_STATIC & access )  == 0;^52^^^^^51^53^return  ( Constants.ACC_STATIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isStatic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_STATIC  <<  access )  != 0;^52^^^^^51^53^return  ( Constants.ACC_STATIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isStatic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Literal]^return  ( Constants.ACC_STATIC & access )  != -1;^52^^^^^51^53^return  ( Constants.ACC_STATIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isStatic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_PROTECTED )  != 0;^56^^^^^55^57^return  ( Constants.ACC_PROTECTED & access )  != 0;^[CLASS] TypeUtils  [METHOD] isProtected [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_PROTECTED & access )  == 0;^56^^^^^55^57^return  ( Constants.ACC_PROTECTED & access )  != 0;^[CLASS] TypeUtils  [METHOD] isProtected [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_PROTECTED  <=  access )  != 0;^56^^^^^55^57^return  ( Constants.ACC_PROTECTED & access )  != 0;^[CLASS] TypeUtils  [METHOD] isProtected [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_PUBLIC )  != 0;^60^^^^^59^61^return  ( Constants.ACC_PUBLIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPublic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_PUBLIC & access )  == 0;^60^^^^^59^61^return  ( Constants.ACC_PUBLIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPublic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_PUBLIC  ^  access )  != 0;^60^^^^^59^61^return  ( Constants.ACC_PUBLIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPublic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Literal]^return  ( Constants.ACC_PUBLIC & access )  != 1;^60^^^^^59^61^return  ( Constants.ACC_PUBLIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPublic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_ABSTRACT )  != 0;^64^^^^^63^65^return  ( Constants.ACC_ABSTRACT & access )  != 0;^[CLASS] TypeUtils  [METHOD] isAbstract [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_ABSTRACT & access )  == 0;^64^^^^^63^65^return  ( Constants.ACC_ABSTRACT & access )  != 0;^[CLASS] TypeUtils  [METHOD] isAbstract [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_ABSTRACT  !=  access )  != 0;^64^^^^^63^65^return  ( Constants.ACC_ABSTRACT & access )  != 0;^[CLASS] TypeUtils  [METHOD] isAbstract [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Literal]^return  ( Constants.ACC_ABSTRACT & access )  != access;^64^^^^^63^65^return  ( Constants.ACC_ABSTRACT & access )  != 0;^[CLASS] TypeUtils  [METHOD] isAbstract [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_INTERFACE )  != 0;^68^^^^^67^69^return  ( Constants.ACC_INTERFACE & access )  != 0;^[CLASS] TypeUtils  [METHOD] isInterface [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_INTERFACE & access )  == 0;^68^^^^^67^69^return  ( Constants.ACC_INTERFACE & access )  != 0;^[CLASS] TypeUtils  [METHOD] isInterface [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_INTERFACE  ||  access )  != 0;^68^^^^^67^69^return  ( Constants.ACC_INTERFACE & access )  != 0;^[CLASS] TypeUtils  [METHOD] isInterface [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_PRIVATE )  != 0;^72^^^^^71^73^return  ( Constants.ACC_PRIVATE & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPrivate [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_PRIVATE & access )  == 0;^72^^^^^71^73^return  ( Constants.ACC_PRIVATE & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPrivate [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_PRIVATE  ||  access )  != 0;^72^^^^^71^73^return  ( Constants.ACC_PRIVATE & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPrivate [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Literal]^return  ( Constants.ACC_PRIVATE & access )  != -1;^72^^^^^71^73^return  ( Constants.ACC_PRIVATE & access )  != 0;^[CLASS] TypeUtils  [METHOD] isPrivate [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( access & Constants.ACC_SYNTHETIC )  != 0;^76^^^^^75^77^return  ( Constants.ACC_SYNTHETIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isSynthetic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_SYNTHETIC & access )  <= 0;^76^^^^^75^77^return  ( Constants.ACC_SYNTHETIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isSynthetic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Operator]^return  ( Constants.ACC_SYNTHETIC  <=  access )  != 0;^76^^^^^75^77^return  ( Constants.ACC_SYNTHETIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isSynthetic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Wrong_Literal]^return  ( Constants.ACC_SYNTHETIC & access )  != access;^76^^^^^75^77^return  ( Constants.ACC_SYNTHETIC & access )  != 0;^[CLASS] TypeUtils  [METHOD] isSynthetic [RETURN_TYPE] boolean   int access [VARIABLES] Map  rtransforms  transforms  int  access  boolean  
[BugLab_Argument_Swapping]^return  ( className < 0 )  ? "" : idx.substring ( 0, idx ) ;^86^^^^^84^87^return  ( idx < 0 )  ? "" : className.substring ( 0, idx ) ;^[CLASS] TypeUtils  [METHOD] getPackageName [RETURN_TYPE] String   String className [VARIABLES] String  className  boolean  Map  rtransforms  transforms  int  idx  
[BugLab_Wrong_Operator]^return  ( idx <= 0 )  ? "" : className.substring ( 0, idx ) ;^86^^^^^84^87^return  ( idx < 0 )  ? "" : className.substring ( 0, idx ) ;^[CLASS] TypeUtils  [METHOD] getPackageName [RETURN_TYPE] String   String className [VARIABLES] String  className  boolean  Map  rtransforms  transforms  int  idx  
[BugLab_Wrong_Literal]^return  ( idx < idx )  ? "" : className.substring ( idx, idx ) ;^86^^^^^84^87^return  ( idx < 0 )  ? "" : className.substring ( 0, idx ) ;^[CLASS] TypeUtils  [METHOD] getPackageName [RETURN_TYPE] String   String className [VARIABLES] String  className  boolean  Map  rtransforms  transforms  int  idx  
[BugLab_Wrong_Literal]^return  ( idx < -1 )  ? "" : className.substring ( -1, idx ) ;^86^^^^^84^87^return  ( idx < 0 )  ? "" : className.substring ( 0, idx ) ;^[CLASS] TypeUtils  [METHOD] getPackageName [RETURN_TYPE] String   String className [VARIABLES] String  className  boolean  Map  rtransforms  transforms  int  idx  
[BugLab_Wrong_Operator]^if  ( s == null && s.length (  )  == 0 )  {^90^^^^^89^94^if  ( s == null || s.length (  )  == 0 )  {^[CLASS] TypeUtils  [METHOD] upperFirst [RETURN_TYPE] String   String s [VARIABLES] Map  rtransforms  transforms  String  s  boolean  
[BugLab_Wrong_Operator]^if  ( s != null || s.length (  )  == 0 )  {^90^^^^^89^94^if  ( s == null || s.length (  )  == 0 )  {^[CLASS] TypeUtils  [METHOD] upperFirst [RETURN_TYPE] String   String s [VARIABLES] Map  rtransforms  transforms  String  s  boolean  
[BugLab_Wrong_Operator]^if  ( s == null || s.length (  )  != 0 )  {^90^^^^^89^94^if  ( s == null || s.length (  )  == 0 )  {^[CLASS] TypeUtils  [METHOD] upperFirst [RETURN_TYPE] String   String s [VARIABLES] Map  rtransforms  transforms  String  s  boolean  
[BugLab_Wrong_Operator]^return Character.toUpperCase ( s.charAt ( 0 )  >>  )  + s.substring ( 1 ) ;^93^^^^^89^94^return Character.toUpperCase ( s.charAt ( 0 )  )  + s.substring ( 1 ) ;^[CLASS] TypeUtils  [METHOD] upperFirst [RETURN_TYPE] String   String s [VARIABLES] Map  rtransforms  transforms  String  s  boolean  
[BugLab_Wrong_Literal]^return Character.toUpperCase ( s.charAt ( 1 )  )  + s.substring ( 1 ) ;^93^^^^^89^94^return Character.toUpperCase ( s.charAt ( 0 )  )  + s.substring ( 1 ) ;^[CLASS] TypeUtils  [METHOD] upperFirst [RETURN_TYPE] String   String s [VARIABLES] Map  rtransforms  transforms  String  s  boolean  
[BugLab_Wrong_Literal]^return Character.toUpperCase ( s.charAt (  )  )  + s.substring ( 1 ) ;^93^^^^^89^94^return Character.toUpperCase ( s.charAt ( 0 )  )  + s.substring ( 1 ) ;^[CLASS] TypeUtils  [METHOD] upperFirst [RETURN_TYPE] String   String s [VARIABLES] Map  rtransforms  transforms  String  s  boolean  
[BugLab_Wrong_Operator]^return getClassName ( getComponentType ( type )  ==  )  + "[]";^100^^^^^96^104^return getClassName ( getComponentType ( type )  )  + "[]";^[CLASS] TypeUtils  [METHOD] getClassName [RETURN_TYPE] String   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Operator]^return getClassName ( getComponentType ( type )  <  )  + "[]";^100^^^^^96^104^return getClassName ( getComponentType ( type )  )  + "[]";^[CLASS] TypeUtils  [METHOD] getClassName [RETURN_TYPE] String   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Variable_Misuse]^return  ( String ) transforms.get ( type.getDescriptor (  )  ) ;^98^^^^^96^104^return  ( String ) rtransforms.get ( type.getDescriptor (  )  ) ;^[CLASS] TypeUtils  [METHOD] getClassName [RETURN_TYPE] String   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Argument_Swapping]^return  ( String ) type.get ( rtransforms.getDescriptor (  )  ) ;^98^^^^^96^104^return  ( String ) rtransforms.get ( type.getDescriptor (  )  ) ;^[CLASS] TypeUtils  [METHOD] getClassName [RETURN_TYPE] String   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Operator]^return getClassName ( getComponentType ( type )  >=  )  + "[]";^100^^^^^96^104^return getClassName ( getComponentType ( type )  )  + "[]";^[CLASS] TypeUtils  [METHOD] getClassName [RETURN_TYPE] String   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Operator]^return getClassName ( getComponentType ( type )  ||  )  + "[]";^100^^^^^96^104^return getClassName ( getComponentType ( type )  )  + "[]";^[CLASS] TypeUtils  [METHOD] getClassName [RETURN_TYPE] String   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Operator]^if  ( types != null )  {^107^^^^^106^119^if  ( types == null )  {^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Argument_Swapping]^if  ( extra.contains ( list )  )  {^111^^^^^106^119^if  ( list.contains ( extra )  )  {^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Variable_Misuse]^return copy;^112^^^^^106^119^return types;^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Variable_Misuse]^return types;^117^^^^^106^119^return copy;^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Variable_Misuse]^List list = Arrays.asList ( copy ) ;^110^^^^^106^119^List list = Arrays.asList ( types ) ;^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Wrong_Literal]^Type[] copy = new Type[types.length ];^114^^^^^106^119^Type[] copy = new Type[types.length + 1];^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Wrong_Literal]^System.arraycopy ( types, -1, copy, -1, types.length ) ;^115^^^^^106^119^System.arraycopy ( types, 0, copy, 0, types.length ) ;^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Wrong_Literal]^System.arraycopy ( types, 1, copy, 1, types.length ) ;^115^^^^^106^119^System.arraycopy ( types, 0, copy, 0, types.length ) ;^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] types Type extra [VARIABLES] Type[]  copy  types  Type  extra  List  list  boolean  Map  rtransforms  transforms  
[BugLab_Wrong_Literal]^System.arraycopy ( t2, , all, t1.length, t2.length ) ;^125^^^^^121^127^System.arraycopy ( t2, 0, all, t1.length, t2.length ) ;^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] t1 Type[] t2 [VARIABLES] Type[]  all  t1  t2  Map  rtransforms  transforms  boolean  
[BugLab_Variable_Misuse]^return t2;^126^^^^^121^127^return all;^[CLASS] TypeUtils  [METHOD] add [RETURN_TYPE] Type[]   Type[] t1 Type[] t2 [VARIABLES] Type[]  all  t1  t2  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^return Type.getType ( "L"   instanceof   name   instanceof   ";" ) ;^131^^^^^129^132^return Type.getType ( "L" + name + ";" ) ;^[CLASS] TypeUtils  [METHOD] fromInternalName [RETURN_TYPE] Type   String name [VARIABLES] Map  rtransforms  transforms  String  name  boolean  
[BugLab_Wrong_Operator]^return Type.getType ( "L"  <<  name + ";" ) ;^131^^^^^129^132^return Type.getType ( "L" + name + ";" ) ;^[CLASS] TypeUtils  [METHOD] fromInternalName [RETURN_TYPE] Type   String name [VARIABLES] Map  rtransforms  transforms  String  name  boolean  
[BugLab_Wrong_Operator]^return Type.getType ( "L"  !=  name  !=  ";" ) ;^131^^^^^129^132^return Type.getType ( "L" + name + ";" ) ;^[CLASS] TypeUtils  [METHOD] fromInternalName [RETURN_TYPE] Type   String name [VARIABLES] Map  rtransforms  transforms  String  name  boolean  
[BugLab_Wrong_Operator]^if  ( names != null )  {^135^^^^^134^143^if  ( names == null )  {^[CLASS] TypeUtils  [METHOD] fromInternalNames [RETURN_TYPE] Type[]   String[] names [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Argument_Swapping]^for  ( namesnt i = 0; i < i.length; i++ )  {^139^^^^^134^143^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] TypeUtils  [METHOD] fromInternalNames [RETURN_TYPE] Type[]   String[] names [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Argument_Swapping]^for  ( names.lengthnt i = 0; i < i; i++ )  {^139^^^^^134^143^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] TypeUtils  [METHOD] fromInternalNames [RETURN_TYPE] Type[]   String[] names [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= names.length; i++ )  {^139^^^^^134^143^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] TypeUtils  [METHOD] fromInternalNames [RETURN_TYPE] Type[]   String[] names [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < names.length; i++ )  {^139^^^^^134^143^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] TypeUtils  [METHOD] fromInternalNames [RETURN_TYPE] Type[]   String[] names [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^int size = ;^146^^^^^145^151^int size = 0;^[CLASS] TypeUtils  [METHOD] getStackSize [RETURN_TYPE] int   Type[] types [VARIABLES] Type[]  types  boolean  Map  rtransforms  transforms  int  i  size  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= types.length; i++ )  {^147^^^^^145^151^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] getStackSize [RETURN_TYPE] int   Type[] types [VARIABLES] Type[]  types  boolean  Map  rtransforms  transforms  int  i  size  
[BugLab_Wrong_Operator]^for  &  ( int i = 0; i < types.length; i++ )  {^147^^^^^145^151^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] getStackSize [RETURN_TYPE] int   Type[] types [VARIABLES] Type[]  types  boolean  Map  rtransforms  transforms  int  i  size  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < types.length; i++ )  {^147^^^^^145^151^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] getStackSize [RETURN_TYPE] int   Type[] types [VARIABLES] Type[]  types  boolean  Map  rtransforms  transforms  int  i  size  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < types.length; i++ )  {^147^^^^^145^151^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] getStackSize [RETURN_TYPE] int   Type[] types [VARIABLES] Type[]  types  boolean  Map  rtransforms  transforms  int  i  size  
[BugLab_Variable_Misuse]^return i;^150^^^^^145^151^return size;^[CLASS] TypeUtils  [METHOD] getStackSize [RETURN_TYPE] int   Type[] types [VARIABLES] Type[]  types  boolean  Map  rtransforms  transforms  int  i  size  
[BugLab_Wrong_Operator]^if  ( types != null )  {^154^^^^^153^162^if  ( types == null )  {^[CLASS] TypeUtils  [METHOD] toInternalNames [RETURN_TYPE] String[]   Type[] types [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > types.length; i++ )  {^158^^^^^153^162^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] toInternalNames [RETURN_TYPE] String[]   Type[] types [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < types.length; i++ )  {^158^^^^^153^162^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] toInternalNames [RETURN_TYPE] String[]   Type[] types [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < types.length; i++ )  {^158^^^^^153^162^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] toInternalNames [RETURN_TYPE] String[]   Type[] types [VARIABLES] Type[]  types  String[]  names  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Variable_Misuse]^int returnTypepace = s.indexOf ( ' ' ) ;^165^^^^^164^178^int space = s.indexOf ( ' ' ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^int lparen = returnType.indexOf ( ' ( ', space ) ;^166^^^^^164^178^int lparen = s.indexOf ( ' ( ', space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^int lparen = s.indexOf ( ' ( ', rparen ) ;^166^^^^^164^178^int lparen = s.indexOf ( ' ( ', space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^int lparen = space.indexOf ( ' ( ', s ) ;^166^^^^^164^178^int lparen = s.indexOf ( ' ( ', space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^int rparen = returnType.indexOf ( ' ) ', lparen ) ;^167^^^^^164^178^int rparen = s.indexOf ( ' ) ', lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^int rparen = s.indexOf ( ' ) ', space ) ;^167^^^^^164^178^int rparen = s.indexOf ( ' ) ', lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^int rparen = lparen.indexOf ( ' ) ', s ) ;^167^^^^^164^178^int rparen = s.indexOf ( ' ) ', lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^String returnType = methodName.substring ( 0, space ) ;^168^^^^^164^178^String returnType = s.substring ( 0, space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^String returnType = s.substring ( 0, rparen ) ;^168^^^^^164^178^String returnType = s.substring ( 0, space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^String returnType = space.substring ( 0, s ) ;^168^^^^^164^178^String returnType = s.substring ( 0, space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^String returnType = s.substring ( -1, space ) ;^168^^^^^164^178^String returnType = s.substring ( 0, space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^String returnType = returnType.substring ( 0, space ) ;^168^^^^^164^178^String returnType = s.substring ( 0, space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^String returnType = s.substring ( rparen, space ) ;^168^^^^^164^178^String returnType = s.substring ( 0, space ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^String methodName = returnType.substring ( space + 1, lparen ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^String methodName = s.substring ( space + 1, space ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^String methodName = space.substring ( s + 1, lparen ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^String methodName = lparen.substring ( space + 1, s ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^String methodName = s.substring ( space + space, lparen ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^String methodName = s.substring ( space + 1, rparen ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^String methodName = s.substring ( lparen + 1, space ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^String methodName = s.substring ( space , lparen ) ;^169^^^^^164^178^String methodName = s.substring ( space + 1, lparen ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^for  ( Iterator it = parseTypes ( returnType, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^for  ( Iterator it = parseTypes ( s, space + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^for  ( Iterator it = parseTypes ( s, lparen + 1, space ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^for  ( Iterator it = parseTypes ( rparen, lparen + 1, s ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^for  ( Iterator it = parseTypes ( s, rparen + 1, lparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Operator]^for  <=  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^for  ( Iterator it = parseTypes ( s, lparen , rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^for  ( Iterator it = parseTypes ( lparen, s + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Operator]^for  !=  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Operator]^for  &  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^for  ( Iterator it = parseTypes ( s, lparen + lparen, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Operator]^for  |  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^for  ( Iterator it = parseTypes ( s, lparen + , rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^sb.append ( map ( s )  ) ;^176^^^^^164^178^sb.append ( map ( returnType )  ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Variable_Misuse]^return new Signature ( s, sb.toString (  )  ) ;^177^^^^^164^178^return new Signature ( methodName, sb.toString (  )  ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Argument_Swapping]^return new Signature ( sb, methodName.toString (  )  ) ;^177^^^^^164^178^return new Signature ( methodName, sb.toString (  )  ) ;^[CLASS] TypeUtils  [METHOD] parseSignature [RETURN_TYPE] Signature   String s [VARIABLES] Iterator  it  StringBuffer  sb  String  methodName  returnType  s  boolean  Map  rtransforms  transforms  int  lparen  rparen  space  
[BugLab_Wrong_Literal]^List names = parseTypes ( s, i, s.length (  )  ) ;^185^^^^^184^191^List names = parseTypes ( s, 0, s.length (  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] Type[]   String s [VARIABLES] Type[]  types  List  names  String  s  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == types.length; i++ )  {^187^^^^^184^191^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] Type[]   String s [VARIABLES] Type[]  types  List  names  String  s  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < types.length; i++ )  {^187^^^^^184^191^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] Type[]   String s [VARIABLES] Type[]  types  List  names  String  s  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Argument_Swapping]^types[i] = Type.getType (  ( String ) i.get ( names )  ) ;^188^^^^^184^191^types[i] = Type.getType (  ( String ) names.get ( i )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] Type[]   String s [VARIABLES] Type[]  types  List  names  String  s  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= types.length; i++ )  {^196^^^^^193^202^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] parseConstructor [RETURN_TYPE] Signature   Type[] types [VARIABLES] Type[]  types  StringBuffer  sb  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < types.length; i++ )  {^196^^^^^193^202^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] TypeUtils  [METHOD] parseConstructor [RETURN_TYPE] Signature   Type[] types [VARIABLES] Type[]  types  StringBuffer  sb  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Argument_Swapping]^return new Signature ( sb, Constants.CONSTRUCTOR_NAME.toString (  )  ) ;^201^^^^^193^202^return new Signature ( Constants.CONSTRUCTOR_NAME, sb.toString (  )  ) ;^[CLASS] TypeUtils  [METHOD] parseConstructor [RETURN_TYPE] Signature   Type[] types [VARIABLES] Type[]  types  StringBuffer  sb  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Operator]^return parseSignature ( "void <init> ( "  >>  sig  >>  " ) " ) ;^205^^^^^204^206^return parseSignature ( "void <init> ( " + sig + " ) " ) ;^[CLASS] TypeUtils  [METHOD] parseConstructor [RETURN_TYPE] Signature   String sig [VARIABLES] Map  rtransforms  transforms  String  sig  boolean  
[BugLab_Wrong_Operator]^return parseSignature ( "void <init> ( "  &&  sig + " ) " ) ;^205^^^^^204^206^return parseSignature ( "void <init> ( " + sig + " ) " ) ;^[CLASS] TypeUtils  [METHOD] parseConstructor [RETURN_TYPE] Signature   String sig [VARIABLES] Map  rtransforms  transforms  String  sig  boolean  
[BugLab_Wrong_Operator]^return parseSignature ( "void <init> ( "  |  sig  |  " ) " ) ;^205^^^^^204^206^return parseSignature ( "void <init> ( " + sig + " ) " ) ;^[CLASS] TypeUtils  [METHOD] parseConstructor [RETURN_TYPE] Signature   String sig [VARIABLES] Map  rtransforms  transforms  String  sig  boolean  
[BugLab_Wrong_Operator]^return parseSignature ( "void <init> ( "   instanceof   sig + " ) " ) ;^205^^^^^204^206^return parseSignature ( "void <init> ( " + sig + " ) " ) ;^[CLASS] TypeUtils  [METHOD] parseConstructor [RETURN_TYPE] Signature   String sig [VARIABLES] Map  rtransforms  transforms  String  sig  boolean  
[BugLab_Wrong_Literal]^List types = new ArrayList ( 4 ) ;^209^^^^^208^220^List types = new ArrayList ( 5 ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^if  ( mark < 0 )  {^212^^^^^208^220^if  ( next < 0 )  {^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Wrong_Operator]^if  ( next == 0 )  {^212^^^^^208^220^if  ( next < 0 )  {^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Wrong_Operator]^if  ( next > 0 )  {^212^^^^^208^220^if  ( next < 0 )  {^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Wrong_Literal]^if  ( next < -1 )  {^212^^^^^208^220^if  ( next < 0 )  {^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^mark = mark + 1;^216^^^^^208^220^mark = next + 1;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Wrong_Literal]^mark = next + next;^216^^^^^208^220^mark = next + 1;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^int next = s.indexOf ( ',', end ) ;^211^^^^^208^220^int next = s.indexOf ( ',', mark ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Argument_Swapping]^int next = mark.indexOf ( ',', s ) ;^211^^^^^208^220^int next = s.indexOf ( ',', mark ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^int next = s.indexOf ( ',', next ) ;^211^^^^^208^220^int next = s.indexOf ( ',', mark ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^types.add ( map ( s.substring ( end, next ) .trim (  )  )  ) ;^215^^^^^208^220^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^215^^^^^208^220^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Argument_Swapping]^types.add ( map ( s.substring ( next, mark ) .trim (  )  )  ) ;^215^^^^^208^220^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Argument_Swapping]^types.add ( map ( next.substring ( mark, s ) .trim (  )  )  ) ;^215^^^^^208^220^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^types.add ( map ( s.substring ( mark, mark ) .trim (  )  )  ) ;^215^^^^^208^220^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Argument_Swapping]^types.add ( map ( mark.substring ( s, next ) .trim (  )  )  ) ;^215^^^^^208^220^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Wrong_Literal]^mark = next ;^216^^^^^208^220^mark = next + 1;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^types.add ( map ( s.substring ( next, end ) .trim (  )  )  ) ;^218^^^^^208^220^types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^218^^^^^208^220^types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Argument_Swapping]^types.add ( map ( end.substring ( mark, s ) .trim (  )  )  ) ;^218^^^^^208^220^types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Argument_Swapping]^types.add ( map ( s.substring ( end, mark ) .trim (  )  )  ) ;^218^^^^^208^220^types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Argument_Swapping]^types.add ( map ( mark.substring ( s, end ) .trim (  )  )  ) ;^218^^^^^208^220^types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[CLASS] TypeUtils  [METHOD] parseTypes [RETURN_TYPE] List   String s int mark int end [VARIABLES] List  types  String  s  boolean  Map  rtransforms  transforms  int  end  mark  next  
[BugLab_Variable_Misuse]^if  ( t.equals ( "" )  )  {^223^^^^^222^241^if  ( type.equals ( "" )  )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^return t;^224^^^^^222^241^return type;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^String t =  ( String ) rtransforms.get ( type ) ;^226^^^^^222^241^String t =  ( String ) transforms.get ( type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Argument_Swapping]^String t =  ( String ) type.get ( transforms ) ;^226^^^^^222^241^String t =  ( String ) transforms.get ( type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^String t =  ( String ) transforms.get ( t ) ;^226^^^^^222^241^String t =  ( String ) transforms.get ( type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^while  (  ( index = t.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Argument_Swapping]^while  (  ( type = index.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  >= 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  ==  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^while  (  ( index = type.indexOf ( "[]", index )   )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^if  ( type != null )  {^227^^^^^222^241^if  ( t != null )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^if  ( t == null )  {^227^^^^^222^241^if  ( t != null )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  ^  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^while  (  ( index = type.indexOf ( "[]", index )  + index )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^} else if  ( t.indexOf ( '.' )  < 0 )  {^229^^^^^222^241^} else if  ( type.indexOf ( '.' )  < 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^} else if  ( type.indexOf ( '.' )  <= 0 )  {^229^^^^^222^241^} else if  ( type.indexOf ( '.' )  < 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^} else if  ( type.indexOf ( '.' )  <  )  {^229^^^^^222^241^} else if  ( type.indexOf ( '.' )  < 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^} else if  ( type.indexOf ( '.' )  < index )  {^229^^^^^222^241^} else if  ( type.indexOf ( '.' )  < 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  >=  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > -1 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  |  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Argument_Swapping]^type = sb.substring ( 0, type.length (  )  - type.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )   ^  sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )  - sb.length (  )  / 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^type = type.substring ( 0, type.length (  )  - sb.length (  )  * index ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^int index = index;^233^^^^^222^241^int index = 0;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^type = t.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )   |  sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )  - sb.length (  )  - 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^type = type.substring ( index, type.length (  )  - sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^sb.append ( 'L' ) .append ( t.replace ( '.', '/' )  ) .append ( ';' ) ;^238^^^^^222^241^sb.append ( 'L' ) .append ( type.replace ( '.', '/' )  ) .append ( ';' ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^return map ( "java.lang." + t ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^return map ( "java.lang."  <  type ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^return map ( "java.lang."  &&  type ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  !=  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^type = type.substring ( , type.length (  )  - sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^return map ( "java.lang."  <=  type ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^return map ( "java.lang."  >>  type ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )   ||  sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^return type;^228^^^^^222^241^return t;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  >  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > index )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  <=  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )   &  sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 1 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^int index = -1;^233^^^^^222^241^int index = 0;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )   ==  sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^return map ( "java.lang."  !=  type ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^return map ( "java.lang."  &  type ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^while  ||  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^234^^^^^222^241^while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )   <=  sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^return map ( "java.lang."  ==  type ) ;^230^^^^^222^241^return map ( "java.lang." + type ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )    instanceof   sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Operator]^type = type.substring ( 0, type.length (  )  - sb.length (  )  + 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Wrong_Literal]^type = type.substring ( 1, type.length (  )  - sb.length (  )  * 2 ) ;^237^^^^^222^241^type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[CLASS] TypeUtils  [METHOD] map [RETURN_TYPE] String   String type [VARIABLES] StringBuffer  sb  String  t  type  boolean  Map  rtransforms  transforms  int  index  
[BugLab_Variable_Misuse]^return null;^250^^^^^243^264^return Constants.TYPE_DOUBLE;^[CLASS] TypeUtils  [METHOD] getBoxedType [RETURN_TYPE] Type   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Variable_Misuse]^return 1;^258^^^^^243^264^return Constants.TYPE_SHORT;^[CLASS] TypeUtils  [METHOD] getBoxedType [RETURN_TYPE] Type   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Operator]^return type.getSort (  )  < Type.ARRAY;^289^^^^^288^290^return type.getSort (  )  == Type.ARRAY;^[CLASS] TypeUtils  [METHOD] isArray [RETURN_TYPE] boolean   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Literal]^return Type.getType ( type.getDescriptor (  ) .substring ( 2 )  ) ;^296^^^^^292^297^return Type.getType ( type.getDescriptor (  ) .substring ( 1 )  ) ;^[CLASS] TypeUtils  [METHOD] getComponentType [RETURN_TYPE] Type   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Literal]^return true;^303^^^^^299^307^return false;^[CLASS] TypeUtils  [METHOD] isPrimitive [RETURN_TYPE] boolean   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Literal]^return false;^305^^^^^299^307^return true;^[CLASS] TypeUtils  [METHOD] isPrimitive [RETURN_TYPE] boolean   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Operator]^if  ( classes != null )  {^322^^^^^321^330^if  ( classes == null )  {^[CLASS] TypeUtils  [METHOD] getTypes [RETURN_TYPE] Type[]   Class[] classes [VARIABLES] Type[]  types  Class[]  classes  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < classes; i++ )  {^326^^^^^321^330^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] TypeUtils  [METHOD] getTypes [RETURN_TYPE] Type[]   Class[] classes [VARIABLES] Type[]  types  Class[]  classes  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= classes.length; i++ )  {^326^^^^^321^330^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] TypeUtils  [METHOD] getTypes [RETURN_TYPE] Type[]   Class[] classes [VARIABLES] Type[]  types  Class[]  classes  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < classes.length; i++ )  {^326^^^^^321^330^for  ( int i = 0; i < classes.length; i++ )  {^[CLASS] TypeUtils  [METHOD] getTypes [RETURN_TYPE] Type[]   Class[] classes [VARIABLES] Type[]  types  Class[]  classes  boolean  Map  rtransforms  transforms  int  i  
[BugLab_Wrong_Literal]^return -value;^342^^^^^332^343^return -1;^[CLASS] TypeUtils  [METHOD] ICONST [RETURN_TYPE] int   int value [VARIABLES] Map  rtransforms  transforms  int  value  boolean  
[BugLab_Wrong_Operator]^if  ( value >= 0L )  {^346^^^^^345^353^if  ( value == 0L )  {^[CLASS] TypeUtils  [METHOD] LCONST [RETURN_TYPE] int   long value [VARIABLES] Map  rtransforms  transforms  long  value  boolean  
[BugLab_Wrong_Operator]^} else if  ( value >= 1L )  {^348^^^^^345^353^} else if  ( value == 1L )  {^[CLASS] TypeUtils  [METHOD] LCONST [RETURN_TYPE] int   long value [VARIABLES] Map  rtransforms  transforms  long  value  boolean  
[BugLab_Wrong_Literal]^return -0;^351^^^^^345^353^return -1;^[CLASS] TypeUtils  [METHOD] LCONST [RETURN_TYPE] int   long value [VARIABLES] Map  rtransforms  transforms  long  value  boolean  
[BugLab_Wrong_Operator]^} else if  ( value > 1L )  {^348^^^^^345^353^} else if  ( value == 1L )  {^[CLASS] TypeUtils  [METHOD] LCONST [RETURN_TYPE] int   long value [VARIABLES] Map  rtransforms  transforms  long  value  boolean  
[BugLab_Wrong_Literal]^return -2;^351^^^^^345^353^return -1;^[CLASS] TypeUtils  [METHOD] LCONST [RETURN_TYPE] int   long value [VARIABLES] Map  rtransforms  transforms  long  value  boolean  
[BugLab_Wrong_Operator]^if  ( value != 0f )  {^356^^^^^355^365^if  ( value == 0f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^if  ( value >= 0f )  {^356^^^^^355^365^if  ( value == 0f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^} else if  ( value > 1f )  {^358^^^^^355^365^} else if  ( value == 1f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^} else if  ( value <= 1f )  {^358^^^^^355^365^} else if  ( value == 1f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Literal]^} else if  ( value == 2f )  {^358^^^^^355^365^} else if  ( value == 1f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^} else if  ( value > 2f )  {^360^^^^^355^365^} else if  ( value == 2f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Literal]^return -2;^363^^^^^355^365^return -1;^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Variable_Misuse]^return this;^361^^^^^355^365^return Constants.FCONST_2;^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Literal]^return -0;^363^^^^^355^365^return -1;^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^} else if  ( value <= 2f )  {^360^^^^^355^365^} else if  ( value == 2f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^} else if  ( value != 1f )  {^358^^^^^355^365^} else if  ( value == 1f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^} else if  ( value >= 1f )  {^358^^^^^355^365^} else if  ( value == 1f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^} else if  ( value != 2f )  {^360^^^^^355^365^} else if  ( value == 2f )  {^[CLASS] TypeUtils  [METHOD] FCONST [RETURN_TYPE] int   float value [VARIABLES] float  value  Map  rtransforms  transforms  boolean  
[BugLab_Wrong_Operator]^if  ( value <= 0d )  {^368^^^^^367^375^if  ( value == 0d )  {^[CLASS] TypeUtils  [METHOD] DCONST [RETURN_TYPE] int   double value [VARIABLES] Map  rtransforms  transforms  double  value  boolean  
[BugLab_Wrong_Operator]^if  ( value > 0d )  {^368^^^^^367^375^if  ( value == 0d )  {^[CLASS] TypeUtils  [METHOD] DCONST [RETURN_TYPE] int   double value [VARIABLES] Map  rtransforms  transforms  double  value  boolean  
[BugLab_Wrong_Operator]^} else if  ( value != 1d )  {^370^^^^^367^375^} else if  ( value == 1d )  {^[CLASS] TypeUtils  [METHOD] DCONST [RETURN_TYPE] int   double value [VARIABLES] Map  rtransforms  transforms  double  value  boolean  
[BugLab_Wrong_Operator]^} else if  ( value > 1d )  {^370^^^^^367^375^} else if  ( value == 1d )  {^[CLASS] TypeUtils  [METHOD] DCONST [RETURN_TYPE] int   double value [VARIABLES] Map  rtransforms  transforms  double  value  boolean  
[BugLab_Wrong_Literal]^} else if  ( value == 2d )  {^370^^^^^367^375^} else if  ( value == 1d )  {^[CLASS] TypeUtils  [METHOD] DCONST [RETURN_TYPE] int   double value [VARIABLES] Map  rtransforms  transforms  double  value  boolean  
[BugLab_Variable_Misuse]^return 2;^371^^^^^367^375^return Constants.DCONST_1;^[CLASS] TypeUtils  [METHOD] DCONST [RETURN_TYPE] int   double value [VARIABLES] Map  rtransforms  transforms  double  value  boolean  
[BugLab_Variable_Misuse]^return null;^382^^^^^377^398^return Constants.T_CHAR;^[CLASS] TypeUtils  [METHOD] NEWARRAY [RETURN_TYPE] int   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Variable_Misuse]^return 3;^386^^^^^377^398^return Constants.T_FLOAT;^[CLASS] TypeUtils  [METHOD] NEWARRAY [RETURN_TYPE] int   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Wrong_Literal]^return -2;^396^^^^^377^398^return -1;^[CLASS] TypeUtils  [METHOD] NEWARRAY [RETURN_TYPE] int   Type type [VARIABLES] Map  rtransforms  transforms  Type  type  boolean  
[BugLab_Variable_Misuse]^for  ( lennt i = 0, len = s.length (  ) ; i < len; i++ )  {^402^^^^^400^417^for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
[BugLab_Argument_Swapping]^for  ( snt i = 0, len = i.length (  ) ; i < len; i++ )  {^402^^^^^400^417^for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
[BugLab_Argument_Swapping]^for  ( lennt i = 0, i = s.length (  ) ; i < len; i++ )  {^402^^^^^400^417^for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
[BugLab_Wrong_Operator]^for  ( int i = 0, len = s.length (  ) ; i <= len; i++ )  {^402^^^^^400^417^for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
[BugLab_Wrong_Literal]^for  ( int i = 1, len = s.length (  ) ; i < len; i++ )  {^402^^^^^400^417^for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
[BugLab_Variable_Misuse]^char c = s.charAt ( len ) ;^403^^^^^400^417^char c = s.charAt ( i ) ;^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
[BugLab_Argument_Swapping]^char c = i.charAt ( s ) ;^403^^^^^400^417^char c = s.charAt ( i ) ;^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
[BugLab_Wrong_Literal]^for  ( int i = len, len = s.length (  ) ; i < len; i++ )  {^402^^^^^400^417^for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[CLASS] TypeUtils  [METHOD] escapeType [RETURN_TYPE] String   String s [VARIABLES] char  c  StringBuffer  sb  String  s  boolean  Map  rtransforms  transforms  int  i  len  
