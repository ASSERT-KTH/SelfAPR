[buglab_swap_variables]^return  ( BeanMap ) super.create ( require.newInstance ( beanClass, KEY_FACTORY )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] BeanMap Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( require, beanClass )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] BeanMap Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance (  require )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] BeanMap Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] BeanMap Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^new BeanMapEmitter ( beanClass, getClassName (  ) , v, require ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] BeanMap Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^new BeanMapEmitter (  getClassName (  ) , beanClass, require ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] BeanMap Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^new BeanMapEmitter ( v, getClassName (  ) , require, beanClass ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] BeanMap Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^new BeanMapEmitter ( v, getClassName (  ) ,  require ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] BeanMap Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^new BeanMapEmitter ( v, getClassName (  ) , beanClass ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] BeanMap Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return  (  ( BeanMap ) ReflectUtils.newInstance ( bean )  ) .newInstance ( type ) ;^131^^^^^130^132^return  (  ( BeanMap ) ReflectUtils.newInstance ( type )  ) .newInstance ( bean ) ;^[CLASS] BeanMap Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return get ( key, bean ) ;^164^^^^^163^165^return get ( bean, key ) ;^[CLASS] BeanMap Generator  [METHOD] get [RETURN_TYPE] Object   Object key [VARIABLES] Object  bean  instance  key  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return get ( bean ) ;^164^^^^^163^165^return get ( bean, key ) ;^[CLASS] BeanMap Generator  [METHOD] get [RETURN_TYPE] Object   Object key [VARIABLES] Object  bean  instance  key  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return get (  key ) ;^164^^^^^163^165^return get ( bean, key ) ;^[CLASS] BeanMap Generator  [METHOD] get [RETURN_TYPE] Object   Object key [VARIABLES] Object  bean  instance  key  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return put ( key, bean, value ) ;^168^^^^^167^169^return put ( bean, key, value ) ;^[CLASS] BeanMap Generator  [METHOD] put [RETURN_TYPE] Object   Object key Object value [VARIABLES] Object  bean  instance  key  value  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return put ( bean,  value ) ;^168^^^^^167^169^return put ( bean, key, value ) ;^[CLASS] BeanMap Generator  [METHOD] put [RETURN_TYPE] Object   Object key Object value [VARIABLES] Object  bean  instance  key  value  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return put ( bean, value, key ) ;^168^^^^^167^169^return put ( bean, key, value ) ;^[CLASS] BeanMap Generator  [METHOD] put [RETURN_TYPE] Object   Object key Object value [VARIABLES] Object  bean  instance  key  value  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return put ( bean, key ) ;^168^^^^^167^169^return put ( bean, key, value ) ;^[CLASS] BeanMap Generator  [METHOD] put [RETURN_TYPE] Object   Object key Object value [VARIABLES] Object  bean  instance  key  value  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^return put (  key, value ) ;^168^^^^^167^169^return put ( bean, key, value ) ;^[CLASS] BeanMap Generator  [METHOD] put [RETURN_TYPE] Object   Object key Object value [VARIABLES] Object  bean  instance  key  value  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^if  (  (  ( v == null )  &&  ( value == null )  )  || value.equals ( v )  ) return true;^220^221^^^^217^224^if  (  (  ( value == null )  &&  ( v == null )  )  || value.equals ( v )  ) return true;^[CLASS] BeanMap Generator  [METHOD] containsValue [RETURN_TYPE] boolean   Object value [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  v  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^if  (  (  ( valuealue == null )  &&  ( v == null )  )  || v.equals ( v )  ) return true;^220^221^^^^217^224^if  (  (  ( value == null )  &&  ( v == null )  )  || value.equals ( v )  ) return true;^[CLASS] BeanMap Generator  [METHOD] containsValue [RETURN_TYPE] boolean   Object value [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  v  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^for  ( Iterator t = it.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^239^^^^^238^243^for  ( Iterator it = t.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] BeanMap Generator  [METHOD] putAll [RETURN_TYPE] void   Map t [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  v  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  Map  t  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^put ( t, key.get ( key )  ) ;^241^^^^^238^243^put ( key, t.get ( key )  ) ;^[CLASS] BeanMap Generator  [METHOD] putAll [RETURN_TYPE] void   Map t [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  v  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  Map  t  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^put (  t.get ( key )  ) ;^241^^^^^238^243^put ( key, t.get ( key )  ) ;^[CLASS] BeanMap Generator  [METHOD] putAll [RETURN_TYPE] void   Map t [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  v  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  Map  t  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^put ( key.get ( key )  ) ;^241^^^^^238^243^put ( key, t.get ( key )  ) ;^[CLASS] BeanMap Generator  [METHOD] putAll [RETURN_TYPE] void   Map t [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  v  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  Map  t  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^if  ( ! (  ( v2 == null )  ? v1 == null : v1.equals ( v2 )  )  )  {^260^^^^^245^265^if  ( ! (  ( v1 == null )  ? v2 == null : v1.equals ( v2 )  )  )  {^[CLASS] BeanMap Generator  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  o  v  v1  v2  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  Map  other  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^Object v2 = key.get ( other ) ;^259^^^^^245^265^Object v2 = other.get ( key ) ;^[CLASS] BeanMap Generator  [METHOD] equals [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  o  v  v1  v2  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  Map  other  int  REQUIRE_GETTER  REQUIRE_SETTER  require  Source  SOURCE  
[buglab_swap_variables]^code +=  (  ( value == null )  ? 0 : key.hashCode (  )  )  ^ (  ( key == null )  ? 0 : value.hashCode (  )  ) ;^272^273^^^^267^276^code +=  (  ( key == null )  ? 0 : key.hashCode (  )  )  ^ (  ( value == null )  ? 0 : value.hashCode (  )  ) ;^[CLASS] BeanMap Generator  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  Iterator  it  Object  bean  instance  key  o  v  v1  v2  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  code  require  Source  SOURCE  
[buglab_swap_variables]^for  ( Iterator key = itSet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^281^^^^^279^286^for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] BeanMap Generator  [METHOD] entrySet [RETURN_TYPE] Set   [VARIABLES] boolean  HashMap  copy  Iterator  it  Object  bean  instance  key  o  v  v1  v2  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  code  require  Source  SOURCE  
[buglab_swap_variables]^copy.put (  get ( key )  ) ;^283^^^^^279^286^copy.put ( key, get ( key )  ) ;^[CLASS] BeanMap Generator  [METHOD] entrySet [RETURN_TYPE] Set   [VARIABLES] boolean  HashMap  copy  Iterator  it  Object  bean  instance  key  o  v  v1  v2  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  code  require  Source  SOURCE  
[buglab_swap_variables]^for  ( Iterator key = itSet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^304^^^^^300^315^for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] BeanMap Generator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  sb  boolean  Iterator  it  Object  bean  instance  key  o  v  v1  v2  value  Class  beanClass  type  BeanMapKey  KEY_FACTORY  int  REQUIRE_GETTER  REQUIRE_SETTER  code  require  Source  SOURCE  
[buglab_swap_variables]^return  ( BeanMap ) super.create ( require.newInstance ( beanClass, KEY_FACTORY )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( require, beanClass )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance (  require )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass )  ) ;^123^^^^^119^124^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[CLASS] Generator  [METHOD] create [RETURN_TYPE] BeanMap   [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^new BeanMapEmitter ( beanClass, getClassName (  ) , v, require ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^new BeanMapEmitter (  getClassName (  ) , beanClass, require ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^new BeanMapEmitter ( v, getClassName (  ) , require, beanClass ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^new BeanMapEmitter ( v, getClassName (  ) ,  require ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^new BeanMapEmitter ( v, getClassName (  ) , beanClass ) ;^127^^^^^126^128^new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  Object  bean  Class  beanClass  type  ClassVisitor  v  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
[buglab_swap_variables]^return  (  ( BeanMap ) ReflectUtils.newInstance ( bean )  ) .newInstance ( type ) ;^131^^^^^130^132^return  (  ( BeanMap ) ReflectUtils.newInstance ( type )  ) .newInstance ( bean ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  beanClass  type  boolean  BeanMapKey  KEY_FACTORY  Source  SOURCE  int  require  
