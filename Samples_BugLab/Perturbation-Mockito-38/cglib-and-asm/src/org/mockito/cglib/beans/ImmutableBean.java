[buglab_swap_variables]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) ,^73^74^75^76^^58^88^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , targetType,^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME,  null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_PRIVATE | Constants.ACC_FINAL, FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL |  FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, targetType, FIELD_NAME, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE,  targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^CodeEmitter e = CSTRUCT_OBJECT.begin_method ( Constants.ACC_PUBLIC, ce, null ) ;^82^^^^^67^97^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC, CSTRUCT_OBJECT, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC,  null ) ;^82^^^^^67^97^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC, CSTRUCT_OBJECT, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^for  ( gettersnt i = 0; i < i.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^for  ( int i = 0; i < getter.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^for  ( getters.lengthnt i = 0; i < i; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^e = EmitUtils.begin_method ( getter, ce, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^e = EmitUtils.begin_method (  getter, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^e = EmitUtils.begin_method ( ce,  Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^for  ( setters.lengthnt i = 0; i < i; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^for  ( int i = 0; i < setters.length.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^for  ( int i = 0; i < setters.lengths.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^e = EmitUtils.begin_method ( setter, ce, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^e = EmitUtils.begin_method (  setter, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^e = EmitUtils.begin_method ( ce,  Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^e.throw_exception (  "Bean is immutable" ) ;^109^^^^^94^124^e.throw_exception ( ILLEGAL_STATE_EXCEPTION, "Bean is immutable" ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[buglab_swap_variables]^return ReflectUtils.newInstance ( bean, OBJECT_CLASSES, new Object[]{ type } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance (  OBJECT_CLASSES, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance ( OBJECT_CLASSES, type, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance ( type,  new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance ( type, bean, new Object[]{ OBJECT_CLASSES } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[buglab_swap_variables]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) ,^73^74^75^76^^58^88^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , targetType,^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME,  null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_PRIVATE | Constants.ACC_FINAL, FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL |  FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL | FIELD_NAME, Constants.ACC_PRIVATE, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE,  targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^CodeEmitter e = CSTRUCT_OBJECT.begin_method ( Constants.ACC_PUBLIC, ce, null ) ;^82^^^^^67^97^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC, CSTRUCT_OBJECT, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC,  null ) ;^82^^^^^67^97^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC, CSTRUCT_OBJECT, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^for  ( getters.lengthnt i = 0; i < i; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^e = EmitUtils.begin_method ( getter, ce, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^e = EmitUtils.begin_method (  getter, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^e = EmitUtils.begin_method ( ce,  Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^for  ( setters.lengthnt i = 0; i < i; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^for  ( int i = 0; i < setterss.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^for  ( int i = 0; i < setters; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^e = EmitUtils.begin_method ( setter, ce, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^e = EmitUtils.begin_method (  setter, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^e = EmitUtils.begin_method ( ce,  Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^e.throw_exception (  "Bean is immutable" ) ;^109^^^^^94^124^e.throw_exception ( ILLEGAL_STATE_EXCEPTION, "Bean is immutable" ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[buglab_swap_variables]^return ReflectUtils.newInstance ( bean, OBJECT_CLASSES, new Object[]{ type } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance (  OBJECT_CLASSES, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance ( type, bean, new Object[]{ OBJECT_CLASSES } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance ( type,  new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[buglab_swap_variables]^return ReflectUtils.newInstance ( OBJECT_CLASSES, type, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
