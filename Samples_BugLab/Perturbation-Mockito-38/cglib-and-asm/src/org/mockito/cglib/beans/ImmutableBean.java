[BugLab_Variable_Misuse]^setNamePrefix ( FIELD_NAME ) ;^66^^^^^64^68^setNamePrefix ( name ) ;^[CLASS] ImmutableBean Generator  [METHOD] create [RETURN_TYPE] Object   [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  String  FIELD_NAME  name  Source  SOURCE  
[BugLab_Variable_Misuse]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , ILLEGAL_STATE_EXCEPTION,^73^74^75^76^^58^88^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , targetType,^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, ILLEGAL_STATE_EXCEPTION, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, name, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, targetType, FIELD_NAME, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^ce.declare_field ( Constants.ACC_PRIVATE | Constants.ACC_FINAL, FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^ce.declare_field ( Constants.ACC_FINAL | FIELD_NAME, Constants.ACC_PRIVATE, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Operator]^ce.declare_field  <  ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^CodeEmitter e = CSTRUCT_OBJECT.begin_method ( Constants.ACC_PUBLIC, ce, null ) ;^82^^^^^67^97^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC, CSTRUCT_OBJECT, null ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Literal]^e.load_arg ( i ) ;^86^^^^^71^101^e.load_arg ( 0 ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^e.checkcast ( ILLEGAL_STATE_EXCEPTION ) ;^87^^^^^72^102^e.checkcast ( targetType ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^e.putfield ( name ) ;^88^^^^^73^103^e.putfield ( FIELD_NAME ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Literal]^Method[] getters = ReflectUtils.getPropertyMethods ( descriptors, false, false ) ;^93^^^^^78^108^Method[] getters = ReflectUtils.getPropertyMethods ( descriptors, true, false ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Literal]^Method[] setters = ReflectUtils.getPropertyMethods ( descriptors, false, false ) ;^94^^^^^79^109^Method[] setters = ReflectUtils.getPropertyMethods ( descriptors, false, true ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < setters.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^for  ( getternt i = 0; i < is.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < getterss.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < getter; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= getters.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < getters.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^e = EmitUtils.begin_method ( getter, ce, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^MethodInfo getter = ReflectUtils.getMethodInfo ( setters[i] ) ;^97^^^^^82^112^MethodInfo getter = ReflectUtils.getMethodInfo ( getters[i] ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^e.invoke ( setter ) ;^101^^^^^86^116^e.invoke ( getter ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Literal]^for  ( int i = i; i < getters.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^e.getfield ( name ) ;^100^^^^^85^115^e.getfield ( FIELD_NAME ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < getters.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^for  ( setters.lengthnt i = 0; i < i; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^for  ( settersnt i = 0; i < i.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < setterss.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= setters.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Wrong_Literal]^for  ( int i = i; i < setters.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^e = EmitUtils.begin_method ( setter, ce, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^MethodInfo setter = ReflectUtils.getMethodInfo ( getters[i] ) ;^107^^^^^92^122^MethodInfo setter = ReflectUtils.getMethodInfo ( setters[i] ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Variable_Misuse]^e.throw_exception ( targetType, "Bean is immutable" ) ;^109^^^^^94^124^e.throw_exception ( ILLEGAL_STATE_EXCEPTION, "Bean is immutable" ) ;^[CLASS] ImmutableBean Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] Class[]  OBJECT_CLASSES  ClassEmitter  ce  String  FIELD_NAME  name  ClassVisitor  v  Method[]  getters  setters  Source  SOURCE  int  i  CodeEmitter  e  Type  ILLEGAL_STATE_EXCEPTION  targetType  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  MethodInfo  getter  setter  PropertyDescriptor[]  descriptors  
[BugLab_Argument_Swapping]^return ReflectUtils.newInstance ( OBJECT_CLASSES, type, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[BugLab_Argument_Swapping]^return ReflectUtils.newInstance ( type, bean, new Object[]{ OBJECT_CLASSES } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[BugLab_Variable_Misuse]^return ReflectUtils.newInstance ( target, OBJECT_CLASSES, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[BugLab_Argument_Swapping]^return ReflectUtils.newInstance ( bean, OBJECT_CLASSES, new Object[]{ type } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] ImmutableBean Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[BugLab_Variable_Misuse]^return firstInstance ( bean.getClass (  )  ) ;^122^^^^^121^123^return firstInstance ( instance.getClass (  )  ) ;^[CLASS] ImmutableBean Generator  [METHOD] nextInstance [RETURN_TYPE] Object   Object instance [VARIABLES] Type  ILLEGAL_STATE_EXCEPTION  targetType  Class[]  OBJECT_CLASSES  boolean  Signature  CSTRUCT_OBJECT  Object  bean  instance  Class  target  type  String  FIELD_NAME  name  Source  SOURCE  
[BugLab_Variable_Misuse]^ce.declare_field ( Constants.ACC_FINAL | 0, FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, 2, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^ce.declare_field ( Constants.ACC_FINAL | targetType, FIELD_NAME, Constants.ACC_PRIVATE, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^ce.declare_field ( Constants.ACC_PRIVATE | Constants.ACC_FINAL, FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^ce.declare_field ( Constants.ACC_FINAL | FIELD_NAME, Constants.ACC_PRIVATE, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Operator]^ce.declare_field  !=  ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^80^^^^^65^95^ce.declare_field ( Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^CodeEmitter e = CSTRUCT_OBJECT.begin_method ( Constants.ACC_PUBLIC, ce, null ) ;^82^^^^^67^97^CodeEmitter e = ce.begin_method ( Constants.ACC_PUBLIC, CSTRUCT_OBJECT, null ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^e.load_arg ( i ) ;^86^^^^^71^101^e.load_arg ( 0 ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^Method[] getters = ReflectUtils.getPropertyMethods ( descriptors, false, false ) ;^93^^^^^78^108^Method[] getters = ReflectUtils.getPropertyMethods ( descriptors, true, false ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^Method[] setters = ReflectUtils.getPropertyMethods ( descriptors, false, false ) ;^94^^^^^79^109^Method[] setters = ReflectUtils.getPropertyMethods ( descriptors, false, true ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < setters.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( getters.lengthnt i = 0; i < i; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < getters.length.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= getters.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < getters.length; i++ )  {^96^^^^^81^111^for  ( int i = 0; i < getters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^e = EmitUtils.begin_method ( getter, ce, Constants.ACC_PUBLIC ) ;^98^^^^^83^113^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^MethodInfo getter = ReflectUtils.getMethodInfo ( setters[i] ) ;^97^^^^^82^112^MethodInfo getter = ReflectUtils.getMethodInfo ( getters[i] ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^e.getfield ( 1 ) ;^100^^^^^85^115^e.getfield ( FIELD_NAME ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^e.invoke ( setter ) ;^101^^^^^86^116^e.invoke ( getter ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < getters.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < setter.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( setters.lengthnt i = 0; i < i; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > setters.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < setters.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^e = EmitUtils.begin_method ( ce, getter, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^e = EmitUtils.begin_method ( setter, ce, Constants.ACC_PUBLIC ) ;^108^^^^^93^123^e = EmitUtils.begin_method ( ce, setter, Constants.ACC_PUBLIC ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^MethodInfo setter = ReflectUtils.getMethodInfo ( getters[i] ) ;^107^^^^^92^122^MethodInfo setter = ReflectUtils.getMethodInfo ( setters[i] ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^e.throw_exception ( targetType, "Bean is immutable" ) ;^109^^^^^94^124^e.throw_exception ( ILLEGAL_STATE_EXCEPTION, "Bean is immutable" ) ;^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < setters.length; i++ )  {^106^^^^^91^121^for  ( int i = 0; i < setters.length; i++ )  {^[CLASS] Generator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] CodeEmitter  e  Type  targetType  boolean  ClassEmitter  ce  Object  bean  Class  target  MethodInfo  getter  setter  ClassVisitor  v  PropertyDescriptor[]  descriptors  Method[]  getters  setters  Source  SOURCE  int  i  
[BugLab_Variable_Misuse]^return ReflectUtils.newInstance ( target, OBJECT_CLASSES, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[BugLab_Argument_Swapping]^return ReflectUtils.newInstance ( OBJECT_CLASSES, type, new Object[]{ bean } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[BugLab_Argument_Swapping]^return ReflectUtils.newInstance ( bean, OBJECT_CLASSES, new Object[]{ type } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[BugLab_Argument_Swapping]^return ReflectUtils.newInstance ( type, bean, new Object[]{ OBJECT_CLASSES } ) ;^117^^^^^116^118^return ReflectUtils.newInstance ( type, OBJECT_CLASSES, new Object[]{ bean } ) ;^[CLASS] Generator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] Object  bean  Class  target  type  boolean  Source  SOURCE  
[BugLab_Variable_Misuse]^return firstInstance ( bean.getClass (  )  ) ;^122^^^^^121^123^return firstInstance ( instance.getClass (  )  ) ;^[CLASS] Generator  [METHOD] nextInstance [RETURN_TYPE] Object   Object instance [VARIABLES] Object  bean  instance  Class  target  type  boolean  Source  SOURCE  
