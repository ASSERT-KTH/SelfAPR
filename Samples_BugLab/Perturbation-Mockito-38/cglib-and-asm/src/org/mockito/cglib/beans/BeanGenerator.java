[BugLab_Wrong_Operator]^if  ( superclass != null || superclass.equals ( Object.class )  )  {^53^^^^^52^57^if  ( superclass != null && superclass.equals ( Object.class )  )  {^[CLASS] BeanGenerator  [METHOD] setSuperclass [RETURN_TYPE] void   Class superclass [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Wrong_Operator]^if  ( superclass == null && superclass.equals ( Object.class )  )  {^53^^^^^52^57^if  ( superclass != null && superclass.equals ( Object.class )  )  {^[CLASS] BeanGenerator  [METHOD] setSuperclass [RETURN_TYPE] void   Class superclass [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^if  ( name.containsKey ( props )  )  {^60^^^^^59^64^if  ( props.containsKey ( name )  )  {^[CLASS] BeanGenerator  [METHOD] addProperty [RETURN_TYPE] void   String name Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  String  name  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^props.put ( name, Type.getType ( superclass )  ) ;^63^^^^^59^64^props.put ( name, Type.getType ( type )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperty [RETURN_TYPE] void   String name Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  String  name  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^props.put ( type, Type.getType ( name )  ) ;^63^^^^^59^64^props.put ( name, Type.getType ( type )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperty [RETURN_TYPE] void   String name Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  String  name  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^if  ( type != null )  {^67^^^^^66^72^if  ( superclass != null )  {^[CLASS] BeanGenerator  [METHOD] getDefaultClassLoader [RETURN_TYPE] ClassLoader   [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Wrong_Operator]^if  ( superclass == null )  {^67^^^^^66^72^if  ( superclass != null )  {^[CLASS] BeanGenerator  [METHOD] getDefaultClassLoader [RETURN_TYPE] ClassLoader   [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^return type.getClassLoader (  ) ;^68^^^^^66^72^return superclass.getClassLoader (  ) ;^[CLASS] BeanGenerator  [METHOD] getDefaultClassLoader [RETURN_TYPE] ClassLoader   [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Wrong_Literal]^classOnly = true;^75^^^^^74^77^classOnly = false;^[CLASS] BeanGenerator  [METHOD] create [RETURN_TYPE] Object   [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Wrong_Literal]^classOnly = false;^80^^^^^79^82^classOnly = true;^[CLASS] BeanGenerator  [METHOD] createClass [RETURN_TYPE] Object   [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Wrong_Operator]^if  ( superclass == null )  {^85^^^^^84^91^if  ( superclass != null )  {^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^setNamePrefix ( type.getName (  )  ) ;^86^^^^^84^91^setNamePrefix ( superclass.getName (  )  ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[BugLab_Wrong_Operator]^String superName =  ( superclass == null )  ? superclass.getName (  )  : "java.lang.Object";^88^^^^^84^91^String superName =  ( superclass != null )  ? superclass.getName (  )  : "java.lang.Object";^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^String superName =  ( type != null )  ? superclass.getName (  )  : "java.lang.Object";^88^^^^^84^91^String superName =  ( superclass != null )  ? superclass.getName (  )  : "java.lang.Object";^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^Object key = superName.newInstance ( KEY_FACTORY, props ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^Object key = KEY_FACTORY.newInstance ( props, superName ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^Object key = props.newInstance ( superName, KEY_FACTORY ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^for  ( sizent i = 0; i < size; i++ )  {^97^^^^^93^110^for  ( int i = 0; i < size; i++ )  {^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Argument_Swapping]^for  ( sizent i = 0; i < i; i++ )  {^97^^^^^93^110^for  ( int i = 0; i < size; i++ )  {^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > size; i++ )  {^97^^^^^93^110^for  ( int i = 0; i < size; i++ )  {^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < size; i++ )  {^97^^^^^93^110^for  ( int i = 0; i < size; i++ )  {^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Argument_Swapping]^types[i] =  ( Type ) names.get ( props[i] ) ;^98^^^^^93^110^types[i] =  ( Type ) props.get ( names[i] ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Wrong_Literal]^for  ( int i = size; i < size; i++ )  {^97^^^^^93^110^for  ( int i = 0; i < size; i++ )  {^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Variable_Misuse]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , type != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^101^102^103^104^^93^110^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Argument_Swapping]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , Constants.TYPE_OBJECT != null ? Type.getType ( superclass )  : superclass,^101^102^103^104^^93^110^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Wrong_Operator]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass == null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^101^102^103^104^^93^110^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Variable_Misuse]^superclass != null ? Type.getType ( type )  : Constants.TYPE_OBJECT, null, null ) ;^104^105^106^^^93^110^superclass != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT, null, null ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Argument_Swapping]^EmitUtils.add_properties ( names, ce, types ) ;^108^^^^^93^110^EmitUtils.add_properties ( ce, names, types ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Argument_Swapping]^EmitUtils.add_properties ( ce, types, names ) ;^108^^^^^93^110^EmitUtils.add_properties ( ce, names, types ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[BugLab_Variable_Misuse]^return ReflectUtils.newInstance ( superclass ) ;^116^^^^^112^118^return ReflectUtils.newInstance ( type ) ;^[CLASS] BeanGenerator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^return superclass;^114^^^^^112^118^return type;^[CLASS] BeanGenerator  [METHOD] firstInstance [RETURN_TYPE] Object   Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Wrong_Operator]^Class protoclass =  ( instance  |  Class )  ?  ( Class ) instance : instance.getClass (  ) ;^121^^^^^120^127^Class protoclass =  ( instance instanceof Class )  ?  ( Class ) instance : instance.getClass (  ) ;^[CLASS] BeanGenerator  [METHOD] nextInstance [RETURN_TYPE] Object   Object instance [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  Object  instance  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^return ReflectUtils.newInstance ( type ) ;^125^^^^^120^127^return ReflectUtils.newInstance ( protoclass ) ;^[CLASS] BeanGenerator  [METHOD] nextInstance [RETURN_TYPE] Object   Object instance [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  Object  instance  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^return type;^123^^^^^120^127^return protoclass;^[CLASS] BeanGenerator  [METHOD] nextInstance [RETURN_TYPE] Object   Object instance [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  Object  instance  boolean  classOnly  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^gen.addProperty ( props,  ( Class ) name.get ( name )  ) ;^132^^^^^129^134^gen.addProperty ( name,  ( Class ) props.get ( name )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Map props [VARIABLES] boolean  classOnly  BeanGenerator  gen  Iterator  it  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  String  name  Map  props  Source  SOURCE  
[BugLab_Variable_Misuse]^addProperties ( gen, ReflectUtils.getBeanProperties ( superclass )  ) ;^137^^^^^136^138^addProperties ( gen, ReflectUtils.getBeanProperties ( type )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  boolean  classOnly  BeanGenerator  gen  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^addProperties ( type, ReflectUtils.getBeanProperties ( gen )  ) ;^137^^^^^136^138^addProperties ( gen, ReflectUtils.getBeanProperties ( type )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  boolean  classOnly  BeanGenerator  gen  Map  props  Source  SOURCE  
[BugLab_Argument_Swapping]^for  ( descriptorsnt i = 0; i < i.length; i++ )  {^141^^^^^140^144^for  ( int i = 0; i < descriptors.length; i++ )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < descriptors; i++ )  {^141^^^^^140^144^for  ( int i = 0; i < descriptors.length; i++ )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= descriptors.length; i++ )  {^141^^^^^140^144^for  ( int i = 0; i < descriptors.length; i++ )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < descriptors.length; i++ )  {^141^^^^^140^144^for  ( int i = 0; i < descriptors.length; i++ )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < descriptors.length; i++ )  {^141^^^^^140^144^for  ( int i = 0; i < descriptors.length; i++ )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
