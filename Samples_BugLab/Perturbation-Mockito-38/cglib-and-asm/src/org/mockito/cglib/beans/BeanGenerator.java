[buglab_swap_variables]^if  ( name.containsKey ( props )  )  {^60^^^^^59^64^if  ( props.containsKey ( name )  )  {^[CLASS] BeanGenerator  [METHOD] addProperty [RETURN_TYPE] void   String name Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  String  name  Map  props  Source  SOURCE  
[buglab_swap_variables]^props.put (  Type.getType ( type )  ) ;^63^^^^^59^64^props.put ( name, Type.getType ( type )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperty [RETURN_TYPE] void   String name Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  boolean  classOnly  String  name  Map  props  Source  SOURCE  
[buglab_swap_variables]^Object key = KEY_FACTORY.newInstance ( props, superName ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[buglab_swap_variables]^Object key = KEY_FACTORY.newInstance (  props ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[buglab_swap_variables]^Object key = props.newInstance ( superName, KEY_FACTORY ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[buglab_swap_variables]^Object key = KEY_FACTORY.newInstance ( superName ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[buglab_swap_variables]^Object key = superName.newInstance ( KEY_FACTORY, props ) ;^89^^^^^84^91^Object key = KEY_FACTORY.newInstance ( superName, props ) ;^[CLASS] BeanGenerator  [METHOD] createHelper [RETURN_TYPE] Object   [VARIABLES] boolean  classOnly  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  Object  key  String  superName  Map  props  Source  SOURCE  
[buglab_swap_variables]^types[i] =  ( Type ) names.get ( props[i] ) ;^98^^^^^93^110^types[i] =  ( Type ) props.get ( names[i] ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , Constants.TYPE_OBJECT != null ? Type.getType ( superclass )  : superclass,^101^102^103^104^^93^110^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  )  != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^101^102^103^104^^93^110^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass != null ? Type.getType ( superclass )  :^101^102^103^104^^93^110^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC, getClassName (  ) , superclass != null ? Type.getType ( superclass )  : Constants.TYPE_OBJECT,^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^EmitUtils.add_properties ( names, ce, types ) ;^108^^^^^93^110^EmitUtils.add_properties ( ce, names, types ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^EmitUtils.add_properties (  names, types ) ;^108^^^^^93^110^EmitUtils.add_properties ( ce, names, types ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^EmitUtils.add_properties ( ce,  types ) ;^108^^^^^93^110^EmitUtils.add_properties ( ce, names, types ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^EmitUtils.add_properties ( ce, types, names ) ;^108^^^^^93^110^EmitUtils.add_properties ( ce, names, types ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^EmitUtils.add_properties ( ce, names ) ;^108^^^^^93^110^EmitUtils.add_properties ( ce, names, types ) ;^[CLASS] BeanGenerator  [METHOD] generateClass [RETURN_TYPE] void   ClassVisitor v [VARIABLES] boolean  classOnly  Type[]  types  ClassEmitter  ce  BeanGeneratorKey  KEY_FACTORY  Class  superclass  type  ClassVisitor  v  String[]  names  Map  props  Source  SOURCE  int  i  size  
[buglab_swap_variables]^for  ( Iterator props = it.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^130^^^^^129^134^for  ( Iterator it = props.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Map props [VARIABLES] boolean  classOnly  BeanGenerator  gen  Iterator  it  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  String  name  Map  props  Source  SOURCE  
[buglab_swap_variables]^gen.addProperty (   ( Class ) props.get ( name )  ) ;^132^^^^^129^134^gen.addProperty ( name,  ( Class ) props.get ( name )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Map props [VARIABLES] boolean  classOnly  BeanGenerator  gen  Iterator  it  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  String  name  Map  props  Source  SOURCE  
[buglab_swap_variables]^gen.addProperty ( props,  ( Class ) name.get ( name )  ) ;^132^^^^^129^134^gen.addProperty ( name,  ( Class ) props.get ( name )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Map props [VARIABLES] boolean  classOnly  BeanGenerator  gen  Iterator  it  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  String  name  Map  props  Source  SOURCE  
[buglab_swap_variables]^addProperties ( type, ReflectUtils.getBeanProperties ( gen )  ) ;^137^^^^^136^138^addProperties ( gen, ReflectUtils.getBeanProperties ( type )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  boolean  classOnly  BeanGenerator  gen  Map  props  Source  SOURCE  
[buglab_swap_variables]^addProperties (  ReflectUtils.getBeanProperties ( type )  ) ;^137^^^^^136^138^addProperties ( gen, ReflectUtils.getBeanProperties ( type )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen Class type [VARIABLES] BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  boolean  classOnly  BeanGenerator  gen  Map  props  Source  SOURCE  
[buglab_swap_variables]^for  ( descriptorsnt i = 0; i < i.length; i++ )  {^141^^^^^140^144^for  ( int i = 0; i < descriptors.length; i++ )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
[buglab_swap_variables]^for  ( descriptors.lengthnt i = 0; i < i; i++ )  {^141^^^^^140^144^for  ( int i = 0; i < descriptors.length; i++ )  {^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
[buglab_swap_variables]^gen.addProperty ( descriptors[i].getName (  ) [i].getPropertyType (  )  ) ;^142^^^^^140^144^gen.addProperty ( descriptors[i].getName (  ) , descriptors[i].getPropertyType (  )  ) ;^[CLASS] BeanGenerator  [METHOD] addProperties [RETURN_TYPE] void   BeanGenerator gen PropertyDescriptor[] descriptors [VARIABLES] boolean  classOnly  BeanGenerator  gen  BeanGeneratorKey  KEY_FACTORY  Class  protoclass  superclass  type  PropertyDescriptor[]  descriptors  Map  props  Source  SOURCE  int  i  
