[BugLab_Wrong_Literal]^private boolean transformInit = false;^78^^^^^73^83^private boolean transformInit = true;^[CLASS] AddDelegateTransformer 1   [VARIABLES] 
[BugLab_Variable_Misuse]^for  ( versionnt i = 0; i < delegateIf.length; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < version; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^for  ( delegateIfnt i = 0; i < i.length; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= delegateIf.length; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Literal]^for  ( int i = version; i < delegateIf.length; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^for  ( int version = 0; j < methods.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^for  ( int j = 0; j < version; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^for  ( int methods.length = 0; j < j; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^for  ( int methods = 0; j < j.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Operator]^for  ( int j = 0; j <= methods.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Literal]^for  ( int j = access; j < methods.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Literal]^for  ( int j = j; j < methods.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Literal]^for  ( int j = i; j < methods.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^Type[] all = TypeUtils.add ( delegateIf, TypeUtils.getTypes ( interfaces )  ) ;^54^^^^^50^72^Type[] all = TypeUtils.add ( interfaces, TypeUtils.getTypes ( delegateIf )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < delegateIf.length; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Literal]^for  ( int j = 1; j < methods.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^Type[] all = TypeUtils.add ( all, TypeUtils.getTypes ( delegateIf )  ) ;^54^^^^^50^72^Type[] all = TypeUtils.add ( interfaces, TypeUtils.getTypes ( delegateIf )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^declare_field ( Constants.ACC_PRIVATE | 1, DELEGATE, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, sourceFile, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, superType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^declare_field ( delegateType | Constants.ACC_TRANSIENT, DELEGATE, Constants.ACC_PRIVATE, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^declare_field ( Constants.ACC_TRANSIENT | Constants.ACC_PRIVATE, DELEGATE, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, delegateType, DELEGATE, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^declare_field ( Constants.ACC_PRIVATE | delegateType, DELEGATE, Constants.ACC_TRANSIENT, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Operator]^declare_field  <<  ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^for  ( delegateIf.lengthnt i = 0; i < i; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^for  ( int j = 0; j < methods; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Literal]^for  ( int j = -1; j < methods.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^if ( !TypeUtils.isInterface ( version )  ) {^52^^^^^50^72^if ( !TypeUtils.isInterface ( access )  ) {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^declare_field ( this | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Argument_Swapping]^declare_field ( Constants.ACC_PRIVATE | DELEGATE, Constants.ACC_TRANSIENT, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Wrong_Operator]^declare_field  >>  ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[BugLab_Variable_Misuse]^if  ( transformInit && access == Constants.INVOKESPECIAL )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Argument_Swapping]^if  ( Constants.INVOKESPECIAL && opcode == transformInit )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Argument_Swapping]^if  ( transformInit && Constants.INVOKESPECIAL == opcode )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Wrong_Operator]^if  ( transformInit || opcode == Constants.INVOKESPECIAL )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Wrong_Operator]^if  ( transformInit && opcode != Constants.INVOKESPECIAL )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Wrong_Literal]^transformInit = true;^88^^^^^74^94^transformInit = false;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Variable_Misuse]^new_instance ( superType ) ;^83^^^^^74^94^new_instance ( delegateType ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Variable_Misuse]^invoke_constructor ( superType, CSTRUCT_OBJECT ) ;^86^^^^^74^94^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Argument_Swapping]^invoke_constructor ( CSTRUCT_OBJECT, delegateType ) ;^86^^^^^74^94^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Variable_Misuse]^putfield ( owner ) ;^87^^^^^74^94^putfield ( DELEGATE ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Wrong_Operator]^if  ( transformInit && opcode <= Constants.INVOKESPECIAL )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Variable_Misuse]^invoke_constructor ( delegateType, sig ) ;^86^^^^^74^94^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Variable_Misuse]^putfield ( sourceFile ) ;^87^^^^^74^94^putfield ( DELEGATE ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Variable_Misuse]^if  ( CSTRUCT_OBJECT.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^76^^^^^74^94^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[BugLab_Argument_Swapping]^if  ( transformInit && Constants.INVOKESPECIAL == opcode )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Wrong_Operator]^if  ( transformInit || opcode == Constants.INVOKESPECIAL )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Wrong_Operator]^if  ( transformInit && opcode != Constants.INVOKESPECIAL )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Wrong_Literal]^transformInit = true;^88^^^^^79^90^transformInit = false;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Variable_Misuse]^new_instance ( superType ) ;^83^^^^^79^90^new_instance ( delegateType ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Variable_Misuse]^invoke_constructor ( superType, CSTRUCT_OBJECT ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Variable_Misuse]^invoke_constructor ( delegateType, sig ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Argument_Swapping]^invoke_constructor ( CSTRUCT_OBJECT, delegateType ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Variable_Misuse]^putfield ( sourceFile ) ;^87^^^^^79^90^putfield ( DELEGATE ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Variable_Misuse]^putfield ( owner ) ;^87^^^^^79^90^putfield ( DELEGATE ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[BugLab_Variable_Misuse]^delegate = delegateImpl.getMethod ( delegate.getName (  ) , m.getParameterTypes (  )  ) ;^99^^^^^96^116^delegate = delegateImpl.getMethod ( m.getName (  ) , m.getParameterTypes (  )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Argument_Swapping]^delegate = m.getMethod ( delegateImpl.getName (  ) , m.getParameterTypes (  )  ) ;^99^^^^^96^116^delegate = delegateImpl.getMethod ( m.getName (  ) , m.getParameterTypes (  )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Variable_Misuse]^if  ( !delegate.getReturnType (  ) .getName (  ) .equals ( delegate.getReturnType (  ) .getName (  )  )  ) {^100^^^^^96^116^if  ( !delegate.getReturnType (  ) .getName (  ) .equals ( m.getReturnType (  ) .getName (  )  )  ) {^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Variable_Misuse]^final Signature sig = ReflectUtils.getSignature ( delegate ) ;^107^^^^^96^116^final Signature sig = ReflectUtils.getSignature ( m ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Variable_Misuse]^Type[] exceptions = TypeUtils.getTypes ( delegate.getExceptionTypes (  )  ) ;^108^^^^^96^116^Type[] exceptions = TypeUtils.getTypes ( m.getExceptionTypes (  )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Variable_Misuse]^e.getfield ( sourceFile ) ;^111^^^^^96^116^e.getfield ( DELEGATE ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Variable_Misuse]^e.invoke_virtual ( delegateType, CSTRUCT_OBJECT ) ;^113^^^^^96^116^e.invoke_virtual ( delegateType, sig ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Variable_Misuse]^e.invoke_virtual ( superType, sig ) ;^113^^^^^96^116^e.invoke_virtual ( delegateType, sig ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Argument_Swapping]^e.invoke_virtual ( sig, delegateType ) ;^113^^^^^96^116^e.invoke_virtual ( delegateType, sig ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Wrong_Literal]^private boolean transformInit = false;^78^^^^^73^83^private boolean transformInit = true;^[CLASS] 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[BugLab_Argument_Swapping]^if  ( Constants.INVOKESPECIAL && opcode == transformInit )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[BugLab_Wrong_Operator]^if  ( transformInit || opcode == Constants.INVOKESPECIAL )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[BugLab_Wrong_Operator]^if  ( transformInit && opcode >= Constants.INVOKESPECIAL )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[BugLab_Wrong_Literal]^transformInit = true;^88^^^^^79^90^transformInit = false;^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[BugLab_Argument_Swapping]^invoke_constructor ( CSTRUCT_OBJECT, delegateType ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[BugLab_Variable_Misuse]^putfield ( name ) ;^87^^^^^79^90^putfield ( DELEGATE ) ;^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
