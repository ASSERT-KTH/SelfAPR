[buglab_swap_variables]^for  ( int i = 0; i < delegateIf.length.length; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^for  ( int methods.length = 0; j < j; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^for  ( int j = 0; j < methods.length.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^for  ( int j = 0; j < methods; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^for  ( int methods = 0; j < j.length; j++ )  {^63^^^^^50^72^for  ( int j = 0; j < methods.length; j++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^Type[] all = TypeUtils.add ( delegateIf, TypeUtils.getTypes ( interfaces )  ) ;^54^^^^^50^72^Type[] all = TypeUtils.add ( interfaces, TypeUtils.getTypes ( delegateIf )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^Type[] all = TypeUtils.add (  TypeUtils.getTypes ( delegateIf )  ) ;^54^^^^^50^72^Type[] all = TypeUtils.add ( interfaces, TypeUtils.getTypes ( delegateIf )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^declare_field ( Constants.ACC_TRANSIENT | Constants.ACC_PRIVATE, DELEGATE, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^declare_field ( Constants.ACC_PRIVATE |  DELEGATE, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^declare_field ( Constants.ACC_PRIVATE | DELEGATE, Constants.ACC_TRANSIENT, delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT,  delegateType, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^declare_field ( Constants.ACC_PRIVATE | delegateType, DELEGATE, Constants.ACC_TRANSIENT, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE,  null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^for  ( delegateIf.lengthnt i = 0; i < i; i++ )  {^61^^^^^50^72^for  ( int i = 0; i < delegateIf.length; i++ )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, delegateType, DELEGATE, null ) ;^57^58^59^60^^50^72^declare_field ( Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_class [RETURN_TYPE] void   int version int access String className Type superType Type[] interfaces String sourceFile [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  Type[]  all  interfaces  Class  delegateImpl  String  DELEGATE  className  sourceFile  Method[]  methods  int  access  i  j  version  
[buglab_swap_variables]^if  ( opcode && transformInit == Constants.INVOKESPECIAL )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[buglab_swap_variables]^if  ( Constants.INVOKESPECIAL && opcode == transformInit )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[buglab_swap_variables]^invoke_constructor ( CSTRUCT_OBJECT, delegateType ) ;^86^^^^^74^94^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[buglab_swap_variables]^invoke_constructor (  CSTRUCT_OBJECT ) ;^86^^^^^74^94^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[buglab_swap_variables]^invoke_constructor ( delegateType ) ;^86^^^^^74^94^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[buglab_swap_variables]^if  ( transformInit && Constants.INVOKESPECIAL == opcode )  {^81^^^^^74^94^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] begin_method [RETURN_TYPE] CodeEmitter   int access Signature sig Type[] exceptions [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  access  opcode  
[buglab_swap_variables]^if  ( transformInit && Constants.INVOKESPECIAL == opcode )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[buglab_swap_variables]^invoke_constructor ( CSTRUCT_OBJECT, delegateType ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[buglab_swap_variables]^invoke_constructor (  CSTRUCT_OBJECT ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[buglab_swap_variables]^invoke_constructor ( delegateType ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  int  opcode  
[buglab_swap_variables]^delegate = m.getMethod ( delegateImpl.getName (  ) , m.getParameterTypes (  )  ) ;^99^^^^^96^116^delegate = delegateImpl.getMethod ( m.getName (  ) , m.getParameterTypes (  )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[buglab_swap_variables]^delegate = delegateImpl.getMethod ( m.getName (  ) .getParameterTypes (  )  ) ;^99^^^^^96^116^delegate = delegateImpl.getMethod ( m.getName (  ) , m.getParameterTypes (  )  ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[buglab_swap_variables]^e.invoke_virtual ( delegateTyp sig ) ;^113^^^^^96^116^e.invoke_virtual ( delegateType, sig ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[buglab_swap_variables]^e.invoke_virtual ( sig, delegateType ) ;^113^^^^^96^116^e.invoke_virtual ( delegateType, sig ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[buglab_swap_variables]^e.invoke_virtual ( delegateType ) ;^113^^^^^96^116^e.invoke_virtual ( delegateType, sig ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[buglab_swap_variables]^e.invoke_virtual (  sig ) ;^113^^^^^96^116^e.invoke_virtual ( delegateType, sig ) ;^[CLASS] AddDelegateTransformer 1  [METHOD] addDelegate [RETURN_TYPE] void   Method m [VARIABLES] CodeEmitter  e  Type  delegateType  superType  Class[]  delegateIf  boolean  transformInit  Signature  CSTRUCT_OBJECT  sig  Type[]  exceptions  Class  delegateImpl  String  DELEGATE  className  desc  name  owner  sourceFile  Method  delegate  m  NoSuchMethodException  e  
[buglab_swap_variables]^if  ( transformInit && Constants.INVOKESPECIAL == opcode )  {^81^^^^^79^90^if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[buglab_swap_variables]^invoke_constructor ( CSTRUCT_OBJECT, delegateType ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[buglab_swap_variables]^invoke_constructor (  CSTRUCT_OBJECT ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
[buglab_swap_variables]^invoke_constructor ( delegateType ) ;^86^^^^^79^90^invoke_constructor ( delegateType, CSTRUCT_OBJECT ) ;^[CLASS] 1  [METHOD] visitMethodInsn [RETURN_TYPE] void   int opcode String owner String name String desc [VARIABLES] int  opcode  boolean  transformInit  String  desc  name  owner  
