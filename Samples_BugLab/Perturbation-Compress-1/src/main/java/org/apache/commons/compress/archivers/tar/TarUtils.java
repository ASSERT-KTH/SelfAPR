[BugLab_Wrong_Literal]^boolean stillPadding = false;^41^^^^^39^66^boolean stillPadding = true;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Variable_Misuse]^int     end = offset + offset;^42^^^^^39^66^int     end = offset + length;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Argument_Swapping]^int     end = length + offset;^42^^^^^39^66^int     end = offset + length;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^int  ||  end = offset + length;^42^^^^^39^66^int     end = offset + length;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] != 0 )  {^45^^^^^39^66^if  ( header[i] == 0 )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] ==  ( byte )  ' ' && header[i] == '0' )  {^49^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' || header[i] == '0' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] >=  ( byte )  ' ' || header[i] == '0' )  {^49^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' || header[i] == '0' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] ==  ( byte )  ' ' || header[i] != '0' )  {^49^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' || header[i] == '0' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] !=  ( byte )  ' ' || header[i] == '0' )  {^49^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' || header[i] == '0' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] >=  ( byte )  ' ' )  {^54^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] <=  ( byte )  ' ' )  {^54^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Variable_Misuse]^for  ( int i = length; i < end; ++i )  {^44^^^^^39^66^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Variable_Misuse]^for  ( int i = offset; i < offset; ++i )  {^44^^^^^39^66^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Argument_Swapping]^for  ( endnt i = offset; i < i; ++i )  {^44^^^^^39^66^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^for  ( int i = offset; i <= end; ++i )  {^44^^^^^39^66^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^for  ||  ( int i = offset; i < end; ++i )  {^44^^^^^39^66^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Literal]^if  ( header[i] == 1 )  {^45^^^^^39^66^if  ( header[i] == 0 )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] ==  ( byte )  ' ' || header[i] <= '0' )  {^49^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' || header[i] == '0' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^if  ( header[i] !=  ( byte )  ' ' )  {^54^^^^^39^66^if  ( header[i] ==  ( byte )  ' ' )  {^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Literal]^stillPadding = true;^59^^^^^39^66^stillPadding = false;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Argument_Swapping]^result =  ( header << 3 )  +  ( result[i] - '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^result =  ^  ( result << 3 )  +  ( header[i] - '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^result =  ( result  >>  3 )  +  ( header[i] - '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^result =  ( result << 3 )  +  ( header[i]   instanceof   '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^result =  &&  ( result << 3 )  +  ( header[i] - '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^result =  ( result  |  3 )  +  ( header[i] - '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Operator]^result =  ( result << 3 )  +  ( header[i]  <=  '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Wrong_Literal]^result =  ( result << 4 )  +  ( header[i] - '0' ) ;^61^^^^^39^66^result =  ( result << 3 )  +  ( header[i] - '0' ) ;^[CLASS] TarUtils  [METHOD] parseOctal [RETURN_TYPE] long   byte[] header int offset int length [VARIABLES] byte[]  header  boolean  stillPadding  int  BYTE_MASK  end  i  length  offset  long  result  
[BugLab_Variable_Misuse]^StringBuffer result = new StringBuffer ( i ) ;^77^^^^^76^89^StringBuffer result = new StringBuffer ( length ) ;^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^int          end = length + length;^78^^^^^76^89^int          end = offset + length;^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^int          end = offset + offset;^78^^^^^76^89^int          end = offset + length;^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Argument_Swapping]^int          end = length + offset;^78^^^^^76^89^int          end = offset + length;^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^int  ==  end = offset + length;^78^^^^^76^89^int          end = offset + length;^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^if  ( header[i] > 0 )  {^81^^^^^76^89^if  ( header[i] == 0 )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Literal]^if  ( header[i] == 1 )  {^81^^^^^76^89^if  ( header[i] == 0 )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^for  ( int i = length; i < end; ++i )  {^80^^^^^76^89^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^for  ( lengthnt i = offset; i < end; ++i )  {^80^^^^^76^89^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^for  ( int i = offset; i < offset; ++i )  {^80^^^^^76^89^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Argument_Swapping]^for  ( int i = end; i < offset; ++i )  {^80^^^^^76^89^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^for  ( int i = offset; i > end; ++i )  {^80^^^^^76^89^for  ( int i = offset; i < end; ++i )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^if  ( header[i] != 0 )  {^81^^^^^76^89^if  ( header[i] == 0 )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Literal]^if  ( header[i] == -1 )  {^81^^^^^76^89^if  ( header[i] == 0 )  {^[CLASS] TarUtils  [METHOD] parseName [RETURN_TYPE] StringBuffer   byte[] header int offset int length [VARIABLES] byte[]  header  StringBuffer  result  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^for  ( length = 0; i < length && i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^for  ( i = 0; i < offset && i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Argument_Swapping]^for  ( length = 0; i < i && i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Argument_Swapping]^for  ( name = 0; i < length && i < i.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^for  ( i = 0; i < length || i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^for  ( i = 0; i <= length && i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^for  ( i = 0; i < length && i == name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^for  &&  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Literal]^for  ( i = end; i < length && i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^buf[length + i] =  ( byte )  name.charAt ( i ) ;^104^^^^^100^112^buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^buf[offset + length] =  ( byte )  name.charAt ( i ) ;^104^^^^^100^112^buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^buf[offset + i] =  <=  ( byte )  name.charAt ( i ) ;^104^^^^^100^112^buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^buf[offset + offset] =  ( byte )  name.charAt ( i ) ;^104^^^^^100^112^buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Argument_Swapping]^buf[offset + name] =  ( byte )  i.charAt ( i ) ;^104^^^^^100^112^buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Literal]^for  ( i = -1; i < length && i < name.length (  ) ; ++i )  {^103^^^^^100^112^for  ( i = 0; i < length && i < name.length (  ) ; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^buf[offset + i] =  ^  ( byte )  name.charAt ( i ) ;^104^^^^^100^112^buf[offset + i] =  ( byte )  name.charAt ( i ) ;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^for  ( ; length < length; ++i )  {^107^^^^^100^112^for  ( ; i < length; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^for  ( ; i < i; ++i )  {^107^^^^^100^112^for  ( ; i < length; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Argument_Swapping]^for  ( ; length < i; ++i )  {^107^^^^^100^112^for  ( ; i < length; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^for  ( ; i <= length; ++i )  {^107^^^^^100^112^for  ( ; i < length; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Operator]^for  &&  ( ; i < length; ++i )  {^107^^^^^100^112^for  ( ; i < length; ++i )  {^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^buf[offset + offset] = 0;^108^^^^^100^112^buf[offset + i] = 0;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^buf[length + i] = 0;^108^^^^^100^112^buf[offset + i] = 0;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^buf[offset + length] = 0;^108^^^^^100^112^buf[offset + i] = 0;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Wrong_Literal]^buf[offset + i] = -1;^108^^^^^100^112^buf[offset + i] = 0;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^return i + length;^111^^^^^100^112^return offset + length;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^return offset + i;^111^^^^^100^112^return offset + length;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Argument_Swapping]^return length + offset;^111^^^^^100^112^return offset + length;^[CLASS] TarUtils  [METHOD] getNameBytes [RETURN_TYPE] int   StringBuffer name byte[] buf int offset int length [VARIABLES] byte[]  buf  StringBuffer  name  boolean  int  BYTE_MASK  end  i  length  offset  
[BugLab_Variable_Misuse]^int    idx = offset - 1;^124^^^^^123^148^int    idx = length - 1;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^int    idx = length  ^  1;^124^^^^^123^148^int    idx = length - 1;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^int    idx = length ;^124^^^^^123^148^int    idx = length - 1;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[length + idx] = 0;^126^^^^^123^148^buf[offset + idx] = 0;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[offset + length] = 0;^126^^^^^123^148^buf[offset + idx] = 0;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^buf[offset + idx] = i;^126^^^^^123^148^buf[offset + idx] = 0;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[length + idx] =  ( byte )  ' ';^128^^^^^123^148^buf[offset + idx] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[offset + length] =  ( byte )  ' ';^128^^^^^123^148^buf[offset + idx] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  <  ( byte )  ' ';^128^^^^^123^148^buf[offset + idx] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^if  ( valueue == 0 )  {^131^^^^^123^148^if  ( value == 0 )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^if  ( value != 0 )  {^131^^^^^123^148^if  ( value == 0 )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^if  ( value == i )  {^131^^^^^123^148^if  ( value == 0 )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^if  ( value == 1 )  {^131^^^^^123^148^if  ( value == 0 )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^for  ( long val = value; offset >= 0 && val > 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^for  ( long value = value; idx >= 0 && val > 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Argument_Swapping]^for  ( long value = val; idx >= 0 && val > 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Argument_Swapping]^for  ( long idx = value; val >= 0 && val > 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^for  ( long val = value; idx >= 0 || val > 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^for  ( long val = value; idx < 0 && val > 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^for  ( long val = value; idx >= 0 && val >= 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^for  ( long val = value; idx >= end && val > end; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[offset + length] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( value & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  >=  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ==  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val  <<  7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & i )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^val = val  &&  3;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^val = val >> offset;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[length + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Argument_Swapping]^buf[offset + val] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( idx & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  !=  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ^  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val  ^  7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 8 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^val = value >> 3;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^val = val   instanceof   3;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[length + idx] =  ( byte )  '0';^132^^^^^123^148^buf[offset + idx] =  ( byte )  '0';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[offset + length] =  ( byte )  '0';^132^^^^^123^148^buf[offset + idx] =  ( byte )  '0';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ==  ( byte )  '0';^132^^^^^123^148^buf[offset + idx] =  ( byte )  '0';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^for  ( long val = value; idx > 0 && val > 0; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^for  ( long val = value; idx >= i && val > i; --idx )  {^135^^^^^123^148^for  ( long val = value; idx >= 0 && val > 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ||  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  |  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val   instanceof   7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^val = val  !=  3;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^val = val >> idx;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[idx + idx] =  ( byte )  '0';^132^^^^^123^148^buf[offset + idx] =  ( byte )  '0';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ^  ( byte )  '0';^132^^^^^123^148^buf[offset + idx] =  ( byte )  '0';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  <=  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val  !=  7 )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & end )  ) ;^137^^^^^123^148^buf[offset + idx] =  ( byte )   (  ( byte )  '0' +  ( byte )   ( val & 7 )  ) ;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^val = val  <=  3;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^val = val >> 4;^138^^^^^123^148^val = val >> 3;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^for  ( ; offset >= 0; --idx )  {^143^^^^^123^148^for  ( ; idx >= 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^for  ( ; idx < 0; --idx )  {^143^^^^^123^148^for  ( ; idx >= 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Literal]^for  ( ; idx >= i; --idx )  {^143^^^^^123^148^for  ( ; idx >= 0; --idx )  {^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[length + idx] =  ( byte )  ' ';^144^^^^^123^148^buf[offset + idx] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^buf[offset + length] =  ( byte )  ' ';^144^^^^^123^148^buf[offset + idx] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =   instanceof   ( byte )  ' ';^144^^^^^123^148^buf[offset + idx] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Wrong_Operator]^buf[offset + idx] =  <<  ( byte )  ' ';^144^^^^^123^148^buf[offset + idx] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^return idx + length;^147^^^^^123^148^return offset + length;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Argument_Swapping]^return length + offset;^147^^^^^123^148^return offset + length;^[CLASS] TarUtils  [METHOD] getOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  val  value  
[BugLab_Variable_Misuse]^byte[] temp = new byte[offset + 1];^160^^^^^159^166^byte[] temp = new byte[length + 1];^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Literal]^byte[] temp = new byte[length + offset];^160^^^^^159^166^byte[] temp = new byte[length + 1];^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^getOctalBytes ( value, buf, 0, length + 1 ) ;^162^^^^^159^166^getOctalBytes ( value, temp, 0, length + 1 ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^getOctalBytes ( temp, value, 0, length + 1 ) ;^162^^^^^159^166^getOctalBytes ( value, temp, 0, length + 1 ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^getOctalBytes ( length, temp, 0, value + 1 ) ;^162^^^^^159^166^getOctalBytes ( value, temp, 0, length + 1 ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Operator]^getOctalBytes ( value, temp, 0, length  >=  1 ) ;^162^^^^^159^166^getOctalBytes ( value, temp, 0, length + 1 ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Literal]^getOctalBytes ( value, temp, 0, length + end ) ;^162^^^^^159^166^getOctalBytes ( value, temp, 0, length + 1 ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^System.arraycopy ( temp, 0, temp, offset, length ) ;^163^^^^^159^166^System.arraycopy ( temp, 0, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^System.arraycopy ( temp, 0, buf, offset, offset ) ;^163^^^^^159^166^System.arraycopy ( temp, 0, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^System.arraycopy ( offset, 0, buf, temp, length ) ;^163^^^^^159^166^System.arraycopy ( temp, 0, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^System.arraycopy ( temp, 0, offset, buf, length ) ;^163^^^^^159^166^System.arraycopy ( temp, 0, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^System.arraycopy ( temp, 0, buf, length, offset ) ;^163^^^^^159^166^System.arraycopy ( temp, 0, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Literal]^System.arraycopy ( temp, -1, buf, offset, length ) ;^163^^^^^159^166^System.arraycopy ( temp, 0, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^return offset + idx;^165^^^^^159^166^return offset + length;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^return length + offset;^165^^^^^159^166^return offset + length;^[CLASS] TarUtils  [METHOD] getLongOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  temp  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^getOctalBytes ( value, buf, idx, length ) ;^178^^^^^177^184^getOctalBytes ( value, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^getOctalBytes ( value, buf, offset, idx ) ;^178^^^^^177^184^getOctalBytes ( value, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^getOctalBytes ( length, buf, offset, value ) ;^178^^^^^177^184^getOctalBytes ( value, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^getOctalBytes ( value, offset, buf, length ) ;^178^^^^^177^184^getOctalBytes ( value, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^getOctalBytes ( value, buf, length, offset ) ;^178^^^^^177^184^getOctalBytes ( value, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^getOctalBytes ( value, length, offset, buf ) ;^178^^^^^177^184^getOctalBytes ( value, buf, offset, length ) ;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^buf[idx + length - 1] =  ( byte )  ' ';^180^^^^^177^184^buf[offset + length - 1] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^buf[offset + idx - 1] =  ( byte )  ' ';^180^^^^^177^184^buf[offset + length - 1] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Operator]^buf[offset + length  <<  1] =  ( byte )  ' ';^180^^^^^177^184^buf[offset + length - 1] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Operator]^buf[offset  |  length - 1] =  ( byte )  ' ';^180^^^^^177^184^buf[offset + length - 1] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Literal]^buf[offset + length - offset] =  ( byte )  ' ';^180^^^^^177^184^buf[offset + length - 1] =  ( byte )  ' ';^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^buf[idx + length - 2] = 0;^181^^^^^177^184^buf[offset + length - 2] = 0;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^buf[offset + offset - 2] = 0;^181^^^^^177^184^buf[offset + length - 2] = 0;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Operator]^buf[offset + length  <  2] = 0;^181^^^^^177^184^buf[offset + length - 2] = 0;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Operator]^buf[offset  ==  length - 2] = 0;^181^^^^^177^184^buf[offset + length - 2] = 0;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Literal]^buf[offset + length - i] = 0;^181^^^^^177^184^buf[offset + length - 2] = 0;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Literal]^buf[offset + length - 2] = end;^181^^^^^177^184^buf[offset + length - 2] = 0;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^return idx + length;^183^^^^^177^184^return offset + length;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Variable_Misuse]^return offset + idx;^183^^^^^177^184^return offset + length;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Argument_Swapping]^return length + offset;^183^^^^^177^184^return offset + length;^[CLASS] TarUtils  [METHOD] getCheckSumOctalBytes [RETURN_TYPE] int   long value byte[] buf int offset int length [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  value  
[BugLab_Wrong_Literal]^long sum = end;^193^^^^^192^200^long sum = 0;^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Variable_Misuse]^for  ( offsetnt i = 0; i < buf.length; ++i )  {^195^^^^^192^200^for  ( int i = 0; i < buf.length; ++i )  {^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < offset; ++i )  {^195^^^^^192^200^for  ( int i = 0; i < buf.length; ++i )  {^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Argument_Swapping]^for  ( buf.lengthnt i = 0; i < i; ++i )  {^195^^^^^192^200^for  ( int i = 0; i < buf.length; ++i )  {^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < buf.length.length; ++i )  {^195^^^^^192^200^for  ( int i = 0; i < buf.length; ++i )  {^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= buf.length; ++i )  {^195^^^^^192^200^for  ( int i = 0; i < buf.length; ++i )  {^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Wrong_Operator]^for  &  ( int i = 0; i < buf.length; ++i )  {^195^^^^^192^200^for  ( int i = 0; i < buf.length; ++i )  {^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Wrong_Literal]^for  ( int i = ; i < buf.length; ++i )  {^195^^^^^192^200^for  ( int i = 0; i < buf.length; ++i )  {^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Variable_Misuse]^sum += offset & buf[i];^196^^^^^192^200^sum += BYTE_MASK & buf[i];^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Argument_Swapping]^sum += buf & BYTE_MASK[i];^196^^^^^192^200^sum += BYTE_MASK & buf[i];^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Wrong_Operator]^sum += BYTE_MASK  <=  buf[i];^196^^^^^192^200^sum += BYTE_MASK & buf[i];^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
[BugLab_Wrong_Operator]^sum += BYTE_MASK  >=  buf[i];^196^^^^^192^200^sum += BYTE_MASK & buf[i];^[CLASS] TarUtils  [METHOD] computeCheckSum [RETURN_TYPE] long   byte[] buf [VARIABLES] byte[]  buf  boolean  int  BYTE_MASK  end  i  idx  length  offset  long  sum  
