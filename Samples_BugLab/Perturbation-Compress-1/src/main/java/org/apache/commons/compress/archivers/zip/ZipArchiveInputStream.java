[BugLab_Wrong_Operator]^if ( entry != null )  {^38^^^^^36^42^if ( entry == null )  {^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[BugLab_Argument_Swapping]^return b.read ( input, off, len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[BugLab_Argument_Swapping]^return input.read ( b, len, off ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[BugLab_Argument_Swapping]^return input.read ( len, off, b ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[BugLab_Variable_Misuse]^return input.read ( b, off, off ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[BugLab_Argument_Swapping]^return input.read ( off, b, len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[BugLab_Argument_Swapping]^return off.read ( b, input, len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[BugLab_Variable_Misuse]^if  ( i < ZipArchiveOutputStream.LFH_SIG.length )  {^58^^^^^57^69^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Operator]^if  ( length <= ZipArchiveOutputStream.LFH_SIG.length )  {^58^^^^^57^69^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Literal]^return true;^59^^^^^57^69^return false;^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Argument_Swapping]^if  ( ZipArchiveOutputStream.LFH_SIG[i] != signature[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Operator]^if  ( signature[i] == ZipArchiveOutputStream.LFH_SIG[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Literal]^return true;^64^^^^^57^69^return false;^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Variable_Misuse]^for  ( lengthnt i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Argument_Swapping]^for  ( ZipArchiveOutputStream.LFH_SIGnt i = 0; i < i.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Operator]^if  ( signature[i] >= ZipArchiveOutputStream.LFH_SIG[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[BugLab_Wrong_Literal]^return false;^68^^^^^57^69^return true;^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
