[BugLab_Wrong_Literal]^private static final int RAND_PART_A_STATE = 1;^69^^^^^64^74^private static final int RAND_PART_A_STATE = 2;^[CLASS] BZip2CompressorInputStream Data   [VARIABLES] 
[BugLab_Wrong_Literal]^private static final int NO_RAND_PART_A_STATE = 4;^72^^^^^67^77^private static final int NO_RAND_PART_A_STATE = 5;^[CLASS] BZip2CompressorInputStream Data   [VARIABLES] 
[BugLab_Wrong_Literal]^private static final int NO_RAND_PART_C_STATE = ;^74^^^^^69^79^private static final int NO_RAND_PART_C_STATE = 7;^[CLASS] BZip2CompressorInputStream Data   [VARIABLES] 
[BugLab_Wrong_Literal]^final boolean[] inUse = new boolean[];^913^^^^^908^918^final boolean[] inUse = new boolean[256];^[CLASS] BZip2CompressorInputStream Data   [VARIABLES] 
[BugLab_Wrong_Literal]^final byte[] seqToUnseq = new byte[257];^915^^^^^910^920^final byte[] seqToUnseq = new byte[256];^[CLASS] BZip2CompressorInputStream Data   [VARIABLES] 
[BugLab_Wrong_Literal]^final int[] unzftab = new int[255];^923^^^^^918^928^final int[] unzftab = new int[256];^[CLASS] BZip2CompressorInputStream Data   [VARIABLES] 
[BugLab_Wrong_Literal]^final char[] getAndMoveToFrontDecode_yy = new char[255];^931^^^^^926^936^final char[] getAndMoveToFrontDecode_yy = new char[256];^[CLASS] BZip2CompressorInputStream Data   [VARIABLES] 
[BugLab_Variable_Misuse]^this.ll8 = new byte[origPtr * BZip2Constants.baseBlockSize];^948^^^^^945^949^this.ll8 = new byte[blockSize100k * BZip2Constants.baseBlockSize];^[CLASS] BZip2CompressorInputStream Data  [METHOD] <init> [RETURN_TYPE] BZip2CompressorInputStream$Data(int)   int blockSize100k [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.ll8 = new byte[blockSize100k * data];^948^^^^^945^949^this.ll8 = new byte[blockSize100k * BZip2Constants.baseBlockSize];^[CLASS] BZip2CompressorInputStream Data  [METHOD] <init> [RETURN_TYPE] BZip2CompressorInputStream$Data(int)   int blockSize100k [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.ll8 + = new byte[blockSize100k * BZip2Constants.baseBlockSize];^948^^^^^945^949^this.ll8 = new byte[blockSize100k * BZip2Constants.baseBlockSize];^[CLASS] BZip2CompressorInputStream Data  [METHOD] <init> [RETURN_TYPE] BZip2CompressorInputStream$Data(int)   int blockSize100k [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( in != null )  {^127^^^^^126^132^if  ( this.in != null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.in == null )  {^127^^^^^126^132^if  ( this.in != null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  last  nInUse  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( last < 0 )  {^141^^^^^139^162^if  ( offs < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( offs <= 0 )  {^141^^^^^139^162^if  ( offs < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( offs < -1 )  {^141^^^^^139^162^if  ( offs < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( storedBlockCRC < 0 )  {^144^^^^^139^162^if  ( len < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( len <= 0 )  {^144^^^^^139^162^if  ( len < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( len < storedCombinedCRC )  {^144^^^^^139^162^if  ( len < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( offs + len > seqToUnseq.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( offs + len > last )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( len + offs > dest.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( offs + len > dest.length.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( dest.length + len > offs )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( offs + len >= dest.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( offs  |  len > dest.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ^  ( offs + len > dest.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  |  ( offs + len > dest.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  <=  ( offs + len > dest.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  !=  ( offs + len > dest.length )  {^147^^^^^139^162^if  ( offs + len > dest.length )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + destOffs ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > seqToUnseq.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > hi ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException  (" ")   + dest.length ( " + len + " )  > len ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException  (" ")   + dest ( " + len + " )  > len.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  !=  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  <<  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  <=  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  >=  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  ||  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + hi ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > selectorMtf.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > destOffs ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length.length ( " + dest + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  &  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  ==  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  ^  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  >>  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException   instanceof   (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + storedBlockCRC ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > storedCombinedCRC ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  >  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > last ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  &&  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException  <  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^148^149^^^^139^162^throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( in == null )  {^151^^^^^139^162^if  ( this.in == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.in != null )  {^151^^^^^139^162^if  ( this.in == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int hi = destOffs + len;^155^^^^^139^162^final int hi = offs + len;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int hi = offs + nInUse;^155^^^^^139^162^final int hi = offs + len;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int hi = len + offs;^155^^^^^139^162^final int hi = offs + len;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int b;  ( len < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int b;  ( destOffs < last )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int b;  ( seqToUnseqOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int b;  ( hiOffs < dest )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int b;  ( destOffs < hi )  ||  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int b;  ( destOffs <= hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  > 0 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read-1 (  )  )  >= -1 ) ; )  {^157^^^^^139^162^for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return  ( hi == offs )  ? -1 :  ( destOffs - offs ) ;^161^^^^^139^162^return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return  ( destOffs == hi )  ? -1 :  ( destOffs - offs ) ;^161^^^^^139^162^return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^return  ( offs == destOffs )  ? -1 :  ( destOffs - offs ) ;^161^^^^^139^162^return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  ( destOffs <= offs )  ? -1 :  ( destOffs - offs ) ;^161^^^^^139^162^return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  ( destOffs == offs )  ? -1 :  ( destOffs  &&  offs ) ;^161^^^^^139^162^return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  ( destOffs == offs )  ? -su_ch2 :  ( destOffs - offs ) ;^161^^^^^139^162^return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read [RETURN_TYPE] int   final byte[] dest final int offs final int len [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final boolean[] inUse = data.inUse;^165^^^^^164^176^final boolean[] inUse = this.data.inUse;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final boolean[] this.data = inUse.inUse;^165^^^^^164^176^final boolean[] inUse = this.data.inUse;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] selectorMtf = this.data.seqToUnseq;^166^^^^^164^176^final byte[] seqToUnseq = this.data.seqToUnseq;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] seqToUnseq = data.seqToUnseq;^166^^^^^164^176^final byte[] seqToUnseq = this.data.seqToUnseq;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] this.data = seqToUnseq.seqToUnseq;^166^^^^^164^176^final byte[] seqToUnseq = this.data.seqToUnseq;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int nInUseShadow = START_BLOCK_STATE;^168^^^^^164^176^int nInUseShadow = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nInUsenUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^171^172^^^^164^176^if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( inUse[i] ) selectorMtf[nInUseShadow++] =  ( byte )  i;^171^172^^^^164^176^if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( seqToUnseq[i] ) inUse[nInUseShadow++] =  ( byte )  i;^171^172^^^^164^176^if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( seqToUnseqnUse[i] ) i[nInUseShadow++] =  ( byte )  i;^171^172^^^^164^176^if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( hint i = 0; i < 256; i++ )  {^170^^^^^164^176^for  ( int i = 0; i < 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= 256; i++ )  {^170^^^^^164^176^for  ( int i = 0; i < 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = su_count; i < 256; i++ )  {^170^^^^^164^176^for  ( int i = 0; i < 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 0; i < 255; i++ )  {^170^^^^^164^176^for  ( int i = 0; i < 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( hinUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^171^172^^^^164^176^if  ( inUse[i] ) seqToUnseq[nInUseShadow++] =  ( byte )  i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] makeMaps [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int retChar = offs;^179^^^^^164^194^final int retChar = this.currentChar;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read0 [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return -2;^183^^^^^168^198^return -1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read0 [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return i;^214^^^^^199^229^return retChar;^[CLASS] BZip2CompressorInputStream Data  [METHOD] read0 [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( null != in )  {^218^^^^^217^238^if  ( null == in )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( in.available (  )  < 0 )  {^221^^^^^217^238^if  ( in.available (  )  == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( in.available (  )  == computedCombinedCRC )  {^221^^^^^217^238^if  ( in.available (  )  == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int blockSize = in.read (  ) ;^228^^^^^217^238^int blockSize = this.in.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( nInUse < '1' )  ||  ( blockSize > '9' )  )  {^229^^^^^217^238^if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( blockSize < '1' )  &&  ( blockSize > '9' )  )  {^229^^^^^217^238^if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( blockSize == '1' )  ||  ( blockSize > '9' )  )  {^229^^^^^217^238^if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( blockSize < '1' )  ||  ( blockSize >= '9' )  )  {^229^^^^^217^238^if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  &  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal "  ||  "blocksize " +  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  >=  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal "  !=  "blocksize " +  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ==  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal "  ==  "blocksize " +  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  >  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: illegal "  ^  "blocksize " +  ( char )  blockSize ) ;^230^231^^^^217^238^throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.blockSize100k = i - '0';^234^^^^^217^238^this.blockSize100k = blockSize - '0';^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.blockSize100k = blockSize  ^  '0';^234^^^^^217^238^this.blockSize100k = blockSize - '0';^[CLASS] BZip2CompressorInputStream Data  [METHOD] init [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int magic = in.read (  ) ;^242^^^^^240^248^int magic = this.in.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( len != expected )  {^243^^^^^240^248^if  ( magic != expected )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic != su_z )  {^243^^^^^240^248^if  ( magic != expected )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( magic == expected )  {^243^^^^^240^248^if  ( magic != expected )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^throw new IOException ( "Stream is not BZip2 formatted: su_z '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^throw new IOException ( "Stream is not BZip2 formatted: position '" + expected + "' as " + expected + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  |  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  >  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +   instanceof   ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  <=  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '"  ==  expected  ==  "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '"  ^  expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  !=  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  &&  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  <  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '"  <  expected  <  "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '"  !=  expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  &  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  <<  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '"  <=  expected  <=  "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '"  >=  expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ==  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ||  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^throw new IOException ( "Stream is not BZip2 formatted: expected '"  &&  expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^244^245^246^^^240^248^throw new IOException ( "Stream is not BZip2 formatted: expected '" + expected + "' as " + position + " byte but got '" +  ( char )  magic + "'" ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] checkMagicChar [RETURN_TYPE] void   char expected String position [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  String  position  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic5 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic0 == 0x17 && su_z == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic5 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && su_z == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic4 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( magic1 == 0x17 && magic0 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( magic0 == 0x17 && magic1 == 0x72 && magic4 == 0x45 && magic3 == 0x38 && magic2 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( magic0 == 0x17 && magic3 == 0x72 && magic2 == 0x45 && magic1 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( magic4 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic0 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( magic5 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic0 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( magic0 == 0x17 || magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( magic0 <= 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( magic0 != 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( magic0 > 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( magic0 >= 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0xblockSize100k && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( magic0 == 0xblockSize100k7 && magicblockSize100k == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( magic0 == 0xcurrentState7 && magiccurrentState == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^258^259^^^^243^273^if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( su_z != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( magic0 != 0x31 || su_z != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( magic0 != 0x31 || magic1 != 0x41 || su_z != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || su_z != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic3 != 0x59 || magic2 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( magic0 != 0x31 && magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( magic0 == 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( magic0 > 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( magic0 <= 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( magic0 >= 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^} else if  ( magic0 != 0x32 || magic2 != 0x42 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^} else if  ( magic0 != 0x3bsBuff || magicbsBuff != 0x4bsBuff || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( data == null )  {^278^^^^^261^287^if  ( this.data == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.data != null )  {^278^^^^^261^287^if  ( this.data == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( su_chPrev ) ;^279^^^^^261^287^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( origPtr ) ;^279^^^^^261^287^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.blockRandomised = bsR ( 1 )  <= 1;^272^^^^^261^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( retChar )  == retChar;^272^^^^^261^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( last )  == last;^272^^^^^261^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( len ) ;^279^^^^^261^287^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^286^^^^^261^287^this.currentState = START_BLOCK_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( last ) ;^279^^^^^261^287^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = retChar;^268^^^^^261^287^this.currentState = EOF;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.data != null )  {^278^^^^^263^293^if  ( this.data == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( last ) ;^279^^^^^264^294^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = nInUse;^268^^^^^253^283^this.currentState = EOF;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.blockRandomised = bsR ( 1 )  >= 1;^272^^^^^257^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( last )  == last;^272^^^^^257^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( len ) ;^279^^^^^264^294^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = origPtr;^286^^^^^271^301^this.currentState = START_BLOCK_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( computedBlockCRC )  == computedBlockCRC;^272^^^^^257^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic5 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^} else if  ( magic1 != 0x31 || magic0 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( magic0 < 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^} else if  ( magic0 != 0x3RAND_PART_C_STATE || magicRAND_PART_C_STATE != 0x4RAND_PART_C_STATE || magic2 != 0x59 || magic3 != 0x26 ||^261^262^263^264^^246^276^} else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( nInUse ) ;^279^^^^^261^287^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.blockRandomised = bsR ( 1 )  != 1;^272^^^^^261^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( nInUseShadow )  == nInUseShadow;^272^^^^^261^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( 0 )  == 0;^272^^^^^261^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( nInUseShadow ) ;^279^^^^^261^287^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = len;^286^^^^^261^287^this.currentState = START_BLOCK_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( i ) ;^279^^^^^261^287^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^268^^^^^261^287^this.currentState = EOF;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( data == null )  {^278^^^^^263^293^if  ( this.data == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( origPtr ) ;^279^^^^^264^294^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = last;^268^^^^^253^283^this.currentState = EOF;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.blockRandomised = bsR ( 1 )  <= 1;^272^^^^^257^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( su_rTPos )  == su_rTPos;^272^^^^^257^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^286^^^^^271^301^this.currentState = START_BLOCK_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.data = new Data ( i ) ;^279^^^^^264^294^this.data = new Data ( this.blockSize100k ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.blockRandomised = bsR ( su_ch2 )  == su_ch2;^272^^^^^257^287^this.blockRandomised = bsR ( 1 )  == 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.computedBlockCRC = crc.getFinalCRC (  ) ;^291^^^^^290^307^this.computedBlockCRC = this.crc.getFinalCRC (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( last != this.computedBlockCRC )  {^294^^^^^290^307^if  ( this.storedBlockCRC != this.computedBlockCRC )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.storedBlockCRC <= this.computedBlockCRC )  {^294^^^^^290^307^if  ( this.storedBlockCRC != this.computedBlockCRC )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.computedCombinedCRC =  ( i << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC  <  =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC =  ( this.storedCombinedCRC  ==  1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC  >  31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.computedCombinedCRC =  ( this.storedCombinedCRC << 0 ) |  ( this.storedCombinedCRC >>> 30 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> su_rTPos ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.computedCombinedCRC ^= nInUse;^299^^^^^290^307^this.computedCombinedCRC ^= this.storedBlockCRC;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.computedCombinedCRC =  ( magic << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC  <<  =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC =  ( this.storedCombinedCRC  &  1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC  &  31 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 32 ) ;^297^298^^^^290^307^this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.computedCombinedCRC =  ( nInUse << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^304^305^^^^290^307^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC  !=  =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^304^305^^^^290^307^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC =  ( this.computedCombinedCRC  ||  1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^304^305^^^^290^307^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC  ==  31 ) ;^304^305^^^^290^307^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.computedCombinedCRC =  ( this.computedCombinedCRC << nInUse ) |  ( this.computedCombinedCRC >>> 3nInUse ) ;^304^305^^^^290^307^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.computedCombinedCRC ^= last;^306^^^^^290^307^this.computedCombinedCRC ^= this.computedBlockCRC;^[CLASS] BZip2CompressorInputStream Data  [METHOD] endBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^311^^^^^309^317^this.currentState = EOF;^[CLASS] BZip2CompressorInputStream Data  [METHOD] complete [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( offs != this.computedCombinedCRC )  {^314^^^^^309^317^if  ( this.storedCombinedCRC != this.computedCombinedCRC )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] complete [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( this.storedCombinedCRC != i )  {^314^^^^^309^317^if  ( this.storedCombinedCRC != this.computedCombinedCRC )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] complete [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( this.computedCombinedCRC != this.storedCombinedCRC )  {^314^^^^^309^317^if  ( this.storedCombinedCRC != this.computedCombinedCRC )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] complete [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.storedCombinedCRC >= this.computedCombinedCRC )  {^314^^^^^309^317^if  ( this.storedCombinedCRC != this.computedCombinedCRC )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] complete [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^InputStream inShadow = in;^320^^^^^319^331^InputStream inShadow = this.in;^[CLASS] BZip2CompressorInputStream Data  [METHOD] close [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( in != null )  {^321^^^^^319^331^if  ( inShadow != null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] close [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( inShadowShadow != null )  {^321^^^^^319^331^if  ( inShadow != null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] close [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( inShadow == null )  {^321^^^^^319^331^if  ( inShadow != null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] close [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( in != System.in )  {^323^^^^^319^331^if  ( inShadow != System.in )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] close [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( inShadowShadow != System.in )  {^323^^^^^319^331^if  ( inShadow != System.in )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] close [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( inShadow == System.in )  {^323^^^^^319^331^if  ( inShadow != System.in )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] close [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int bsLiveShadow = storedCombinedCRC;^334^^^^^333^355^int bsLiveShadow = this.bsLive;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int bsBuffShadow = last;^335^^^^^333^355^int bsBuffShadow = this.bsBuff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( len < n )  {^337^^^^^333^355^if  ( bsLiveShadow < n )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( bsLiveShadow < nInUse )  {^337^^^^^333^355^if  ( bsLiveShadow < n )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( n < bsLiveShadow )  {^337^^^^^333^355^if  ( bsLiveShadow < n )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( bsLiveShadow <= n )  {^337^^^^^333^355^if  ( bsLiveShadow < n )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( bsLiveShadow > n )  {^337^^^^^333^355^if  ( bsLiveShadow < n )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( i < 0 )  {^342^^^^^333^355^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech <= 0 )  {^342^^^^^333^355^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech < 1 )  {^342^^^^^333^355^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( last << 8 )  | thech;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | n;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^bsBuffShadow =  ( thech << 8 )  | bsBuffShadow;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >  =  ( bsBuffShadow << 8 )  | thech;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  !=  8 )  | thech;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsBuff = last;^350^^^^^333^355^this.bsBuff = bsBuffShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final InputStream inShadow = in;^338^^^^^333^355^final InputStream inShadow = this.in;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int thech = in.read (  ) ;^340^^^^^333^355^int thech = inShadow.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech == 0 )  {^342^^^^^333^355^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech < i )  {^342^^^^^333^355^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( len << 8 )  | thech;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | offs;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &  =  ( bsBuffShadow << 8 )  | thech;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ||  8 )  | thech;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << bsLiveShadow )  | thech;^346^^^^^333^355^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_ch2;^347^^^^^333^355^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsBuff = nInUseShadow;^350^^^^^333^355^this.bsBuff = bsBuffShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsLive = last - n;^353^^^^^333^355^this.bsLive = bsLiveShadow - n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsLive = bsLiveShadow - retChar;^353^^^^^333^355^this.bsLive = bsLiveShadow - n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^this.bsLive = n - bsLiveShadow;^353^^^^^333^355^this.bsLive = bsLiveShadow - n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.bsLive = bsLiveShadow  &&  n;^353^^^^^333^355^this.bsLive = bsLiveShadow - n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return  ( magic >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return  ( bsBuffShadow >>  ( magic - n )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return  ( bsBuffShadow >>  ( bsLiveShadow - last )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^return  ( bsLiveShadow >>  ( bsBuffShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^return  ( bsBuffShadow >>  ( n - bsLiveShadow )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )   >   (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  ( bsBuffShadow  ^   ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  ( bsBuffShadow >>  ( bsLiveShadow  <  n )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  ( bsBuffShadow >>  ( bsLiveShadow  >=  n )  )  &  (  ( 1 << n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1  <=  n )  - 1 ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( bsBuffShadow << n )  - bsBuffShadow ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( bsLiveShadow << n )  - bsLiveShadow ) ;^354^^^^^333^355^return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsR [RETURN_TYPE] int   final int n [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int bsLiveShadow = len;^358^^^^^357^375^int bsLiveShadow = this.bsLive;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int bsBuffShadow = last;^359^^^^^357^375^int bsBuffShadow = this.bsBuff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic < 1 )  {^361^^^^^357^375^if  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( bsLiveShadow <= 1 )  {^361^^^^^357^375^if  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( bsLiveShadow <  )  {^361^^^^^357^375^if  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( i < 0 )  {^364^^^^^357^375^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech <= 0 )  {^364^^^^^357^375^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nInUseShadow << 8 )  | thech;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | n;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^bsBuffShadow =  ( thech << 8 )  | bsBuffShadow;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &&  =  ( bsBuffShadow << 8 )  | thech;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ||  8 )  | thech;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 9;^369^^^^^357^375^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsBuff = magic;^370^^^^^357^375^this.bsBuff = bsBuffShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int thech = inShadow.read (  ) ;^362^^^^^357^375^int thech = this.in.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech < -1 )  {^364^^^^^357^375^if  ( thech < 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( len << 8 )  | thech;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ==  =  ( bsBuffShadow << 8 )  | thech;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << storedBlockCRC )  | thech;^368^^^^^357^375^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += currentState;^369^^^^^357^375^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsLive = n - 1;^373^^^^^357^375^this.bsLive = bsLiveShadow - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.bsLive = bsLiveShadow  >=  1;^373^^^^^357^375^this.bsLive = bsLiveShadow - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.bsLive = bsLiveShadow - magic;^373^^^^^357^375^this.bsLive = bsLiveShadow - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return  (  ( magic >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^return  (  ( bsBuffShadow >>  ( n - 1 )  )  & 1 )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^return  (  ( bsLiveShadow >>  ( bsBuffShadow - 1 )  )  & 1 )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  == 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )   >=  1 )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  (  ( bsBuffShadow  &&   ( bsLiveShadow - 1 )  )  & 1 )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  (  ( bsBuffShadow >>  ( bsLiveShadow  ||  1 )  )  & 1 )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  ( bsBuffShadow >>  ( bsLiveShadow - last )  )  & last )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  ( bsBuffShadow >>  ( bsLiveShadow - su_count )  )  & su_count )  != 0;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 1;^374^^^^^357^375^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetBit [RETURN_TYPE] boolean   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  ( char )  bsR ( NO_RAND_PART_B_STATE ) ;^378^^^^^377^379^return  ( char )  bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetUByte [RETURN_TYPE] char   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  &&   (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  (  (  (  (  ( bsR ( 8 )   ||  8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  >   (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  (  (  (  (  ( bsR ( 8 )   &  8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^return  (  (  (  (  ( bsR ( 8 )   <=  8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  (  (  (  ( bsR ( 7 )  << 7 )  | bsR ( 7 )  )  << 7 )  | bsR ( 7 )  )  << 7 )  | bsR ( 7 ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  (  (  (  ( bsR ( 9 )  << 9 )  | bsR ( 9 )  )  << 9 )  | bsR ( 9 )  )  << 9 )  | bsR ( 9 ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  (  (  (  ( bsR (  )  <<  )  | bsR (  )  )  <<  )  | bsR (  )  )  <<  )  | bsR (  ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  (  (  (  ( bsR ( bsLive )  << bsLive )  | bsR ( bsLive )  )  << bsLive )  | bsR ( bsLive )  )  << bsLive )  | bsR ( bsLive ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  (  (  (  ( bsR ( bsBuffShadow )  << bsBuffShadow )  | bsR ( bsBuffShadow )  )  << bsBuffShadow )  | bsR ( bsBuffShadow )  )  << bsBuffShadow )  | bsR ( bsBuffShadow ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^return  (  (  (  (  ( bsR ( hi )  << hi )  | bsR ( hi )  )  << hi )  | bsR ( hi )  )  << hi )  | bsR ( hi ) ;^382^^^^^381^383^return  (  (  (  (  ( bsR ( 8 )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 )  )  << 8 )  | bsR ( 8 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] bsGetInt [RETURN_TYPE] int   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( getAndMoveToFrontDecode_yy[j] == i )  {^393^^^^^378^408^if  ( length[j] == i )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( length[j] == nInUse )  {^393^^^^^378^408^if  ( length[j] == i )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( i[j] == length )  {^393^^^^^378^408^if  ( length[j] == i )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( length[j] != i )  {^393^^^^^378^408^if  ( length[j] == i )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm[pp++] = maxLen;^394^^^^^379^409^perm[pp++] = j;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = maxLen, pp = 0; i <= maxLen; i++ )  {^391^^^^^376^406^for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt i = minLen, pp = 0; i <= maxLen; i++ )  {^391^^^^^376^406^for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = minLen, pp = 0; i <= len; i++ )  {^391^^^^^376^406^for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( minLennt i = i, pp = 0; i <= maxLen; i++ )  {^391^^^^^376^406^for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = minLen, pp = 0; i > maxLen; i++ )  {^391^^^^^376^406^for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen, pp = -1; i <= maxLen; i++ )  {^391^^^^^376^406^for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm[pp++] = n;^394^^^^^379^409^perm[pp++] = j;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int magic = 0; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = 0; j < magic; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nbnt j = 0; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( jnt i = 0; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( alphaSizent j = 0; j < i; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = 0; j <= alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = RAND_PART_B_STATE; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( length[j] == magic )  {^393^^^^^378^408^if  ( length[j] == i )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( length[j] >= i )  {^393^^^^^378^408^if  ( length[j] == i )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm[pp++] = magic;^394^^^^^379^409^perm[pp++] = j;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = len; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int minLen = 0; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = 0; j < nInUseShadow; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nInUsent j = 0; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int alphaSize = 0; j < j; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = 0; j > alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = hi; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm[pp++] = nInUseShadow;^394^^^^^379^409^perm[pp++] = j;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm[pp++] = minLen;^394^^^^^379^409^perm[pp++] = j;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm[pp++] = nInUse;^394^^^^^379^409^perm[pp++] = j;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen, pp = su_count; i <= maxLen; i++ )  {^391^^^^^376^406^for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = computedCombinedCRC; j < alphaSize; j++ )  {^392^^^^^377^407^for  ( int j = 0; j < alphaSize; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt i = MAX_CODE_LEN; --i > 0; )  {^399^^^^^384^414^for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( MAX_CODE_LENnt i = i; --i > 0; )  {^399^^^^^384^414^for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = MAX_CODE_LEN; --i >= 0; )  {^399^^^^^384^414^for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = MAX_CODE_LEN; --i > NO_RAND_PART_A_STATE; )  {^399^^^^^384^414^for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = MAX_CODE_LEN; --i > nb; )  {^399^^^^^384^414^for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^base[i] = maxLen;^400^^^^^385^415^base[i] = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^limit[i] = RAND_PART_C_STATE;^401^^^^^386^416^limit[i] = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^base[i] = su_chPrev;^400^^^^^385^415^base[i] = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^limit[i] = storedBlockCRC;^401^^^^^386^416^limit[i] = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt i = 0; i < alphaSize; i++ )  {^404^^^^^389^419^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < maxLen; i++ )  {^404^^^^^389^419^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( alphaSizent i = 0; i < i; i++ )  {^404^^^^^389^419^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= alphaSize; i++ )  {^404^^^^^389^419^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < alphaSize; i++ )  {^404^^^^^389^419^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen; i < alphaSize; i++ )  {^404^^^^^389^419^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 1, b = unzftab[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nnt i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 1, minLen = base[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( basent i = 1, b = i[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( bnt i = 1, i = base[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int i = 1, base = b[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( MAX_CODE_LENnt i = 1, b = base[0]; i < i; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 1, b = base[0]; i > MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  >>  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 0, b = base[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 1, b = base[RAND_PART_C_STATE]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^b += unzftab[i];^409^^^^^394^424^b += base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^base[i] = maxLen;^410^^^^^395^425^base[i] = b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^b += tt[i];^409^^^^^394^424^b += base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^base[i] = nInUse;^410^^^^^395^425^base[i] = b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 1, b = tt[0]; i < MAX_CODE_LEN; i++ )  {^408^^^^^393^423^for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = origPtr, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = minLen, vec = 0, b = tt[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( maxLennt i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = minLen, vec = 0, b = base[i]; i <= nInUse; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = minLen, vec = 0, maxLen = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = minLen, len = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int i = vec, minLen = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int i = minLen, maxLen = 0, b = base[i]; i <= vec; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int i = b, vec = 0, minLen = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = minLen, vec = 0, b = base[i]; i == maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  >=  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  !=  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen, vec = su_count, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^vec += maxLen - b;^415^^^^^400^430^vec += nb - b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^vec += nb - nInUse;^415^^^^^400^430^vec += nb - b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^vec += b - nb;^415^^^^^400^430^vec += nb - b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^vec += nb  >  b;^415^^^^^400^430^vec += nb - b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^b = last;^416^^^^^401^431^b = nb;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit[i] = nInUseShadow - 1;^417^^^^^402^432^limit[i] = vec - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^limit[i] = vec   instanceof   1;^417^^^^^402^432^limit[i] = vec - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^limit[i] = vec ;^417^^^^^402^432^limit[i] = vec - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^vec <<= retChar;^418^^^^^403^433^vec <<= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int nb = unzftab[i + 1];^414^^^^^399^429^final int nb = base[i + 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final magicnt nb = base[i + 1];^414^^^^^399^429^final int nb = base[i + 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final basent nb = i[i + 1];^414^^^^^399^429^final int nb = base[i + 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int nb = base[i ];^414^^^^^399^429^final int nb = base[i + 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^vec += nb - len;^415^^^^^400^430^vec += nb - b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^vec += nb  |  b;^415^^^^^400^430^vec += nb - b;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^b = origPtr;^416^^^^^401^431^b = nb;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit[i] = minLen - 1;^417^^^^^402^432^limit[i] = vec - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^limit[i] = vec  &  1;^417^^^^^402^432^limit[i] = vec - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^limit[i] = vec - EOF;^417^^^^^402^432^limit[i] = vec - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^vec <<= 2;^418^^^^^403^433^vec <<= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = magic, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen, vec = 1, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = minLen, vec = 0, b = perm[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nnt i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( basent i = minLen, vec = 0, b = i[i]; i <= maxLen; i++ )  {^413^^^^^398^428^for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int nb = tt[i + 1];^414^^^^^399^429^final int nb = base[i + 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final minLennt nb = base[i + 1];^414^^^^^399^429^final int nb = base[i + 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = maxLen + 1; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( lennt i = minLen + 1; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int i = maxLen + 1; i <= minLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( maxLennt i = minLen + 1; i <= i; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  |  ( int i = minLen + 1; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = minLen + 1; i < maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  <=  ( int i = minLen + 1; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen + maxLen; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen + len; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen + NO_RAND_PART_B_STATE; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = minLen ; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - tt[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^base[i] =  (  ( limit[magic - 1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^base[i] =  (  ( tt[i - 1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^base[i] =  (  ( base[i - 1] + 1 )  << 1 )  - limit[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  (  ( limit[i  >  1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  (  ( limit[i - 1] + 1 )   |  1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  >  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  (  ( limit[i  ==  1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^base[i] =  (  ( limit[i - 1]  )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^base[i] =  (  ( limit[i - ] +  )  <<  )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - unzftab[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^base[i] =  (  ( limit[maxLen - 1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  (  ( limit[i  |  1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  (  ( limit[i - 1] + 1 )   >>  1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  !=  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^base[i] =  (  ( limit[i  >=  1] + 1 )  << 1 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^base[i] =  (  ( limit[i - currentState] + currentState )  << currentState )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^base[i] =  (  ( limit[i - su_ch2] + su_ch2 )  << su_ch2 )  - base[i];^422^^^^^407^437^base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = magic + 1; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ||  ( int i = minLen + 1; i <= maxLen; i++ )  {^421^^^^^406^436^for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] hbCreateDecodeTables [RETURN_TYPE] void   final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  temp_charArray2d  Data  data  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  char[]  getAndMoveToFrontDecode_yy  length  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final Data dataShadow = data;^427^^^^^412^442^final Data dataShadow = this.data;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final boolean[] inUse = data.inUse;^428^^^^^413^443^final boolean[] inUse = dataShadow.inUse;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final boolean[] inUse = dataShadow.inUse.inUse;^428^^^^^413^443^final boolean[] inUse = dataShadow.inUse;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final boolean[] inUse = dataShadow;^428^^^^^413^443^final boolean[] inUse = dataShadow.inUse;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] pos = data.recvDecodingTables_pos;^429^^^^^414^444^final byte[] pos = dataShadow.recvDecodingTables_pos;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] pos = selectorMtf;^429^^^^^414^444^final byte[] pos = dataShadow.recvDecodingTables_pos;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] pos = dataShadow.recvDecodingTables_pos.recvDecodingTables_pos;^429^^^^^414^444^final byte[] pos = dataShadow.recvDecodingTables_pos;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] pos = dataShadow;^429^^^^^414^444^final byte[] pos = dataShadow.recvDecodingTables_pos;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] selector = data.selector;^430^^^^^415^445^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] selector = recvDecodingTables_pos;^430^^^^^415^445^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] selector = dataShadow.selector.selector;^430^^^^^415^445^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] selector = dataShadow;^430^^^^^415^445^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] selectorMtf = data.selectorMtf;^431^^^^^416^446^final byte[] selectorMtf = dataShadow.selectorMtf;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] selectorMtf = seqToUnseq;^431^^^^^416^446^final byte[] selectorMtf = dataShadow.selectorMtf;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] selectorMtf = dataShadow.selectorMtf.selectorMtf;^431^^^^^416^446^final byte[] selectorMtf = dataShadow.selectorMtf;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] selectorMtf = dataShadow;^431^^^^^416^446^final byte[] selectorMtf = dataShadow.selectorMtf;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int inUse16 = -1;^433^^^^^418^448^int inUse16 = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse16 |= 1 << n;^438^^^^^423^453^inUse16 |= 1 << i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^inUse16 |= 1  &&  i;^438^^^^^423^453^inUse16 |= 1 << i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt i = 0; i < 16; i++ )  {^436^^^^^421^451^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= 16; i++ )  {^436^^^^^421^451^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 0; i < currentChar; i++ )  {^436^^^^^421^451^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse16 |= 1 << nInUse;^438^^^^^423^453^inUse16 |= 1 << i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^inUse16 |= 1  >>  i;^438^^^^^423^453^inUse16 |= 1 << i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse16 |= 1 << magic;^438^^^^^423^453^inUse16 |= 1 << i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^inUse16 |= 1  ^  i;^438^^^^^423^453^inUse16 |= 1 << i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^inUse6 |=  << i;^438^^^^^423^453^inUse16 |= 1 << i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < 16; i++ )  {^436^^^^^421^451^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( maxLennt i = 256; --i >= 0; )  {^442^^^^^427^457^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 256; --i == 0; )  {^442^^^^^427^457^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = RAND_PART_B_STATE; --i >= 0; )  {^442^^^^^427^457^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^inUse[i] = true;^443^^^^^428^458^inUse[i] = false;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = ; --i >= 0; )  {^442^^^^^427^457^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( n &  ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( maxLennUse16 &  ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( inUse1616 &  ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16 &  ( 1 << i )  )  <= 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16  ^   ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16 &  ( 1  >>  i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16 &  ( 1  ==  i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  (  ( inUse06 &  ( 0 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  (  ( inUse16 &  ( 1 << i )  )  != curr )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  (  ( inUse16 &  ( 1 << i )  )  != 1 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[nGroups + j] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[i16 + maxLen] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^inUse[i16 + j] = false;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int nInUseShadow = 0; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = 0; j <= 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  |  ( int j = 0; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = j; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = 0; j < 17; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[minLen + j] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[i16 + n] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[nb + j] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[maxLen + j] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[i16 + nInUseShadow] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final maxLennt i16 = i << 4;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^final int i16 = i  |  4;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int i16 = i << i;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = -1; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( maxLennt i = 0; i < 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = ; i < 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 0; i < nb; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = inUse16; i < 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = pp; i < 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 0; i < su_j2; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( nSelectors &  ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( nnUse16 &  ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( i &  ( 1 << inUse16 )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( inUse16nUse16 &  ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( i16 &  ( 1 << inUse )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16 &  ( 1 << i )  )  == 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16  >>   ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16 &  ( 1  >  i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( inUse16 &  ( 1  ^  i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  (  ( inUsealphaSize6 &  ( alphaSize << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  (  ( inUse16 &  ( 1 << i )  )  != -1 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  (  ( inUse &  ( 1 << i )  )  != 0 )  {^447^^^^^432^462^if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[i16 + nInUse] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int n = 0; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  <  ( int j = 0; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[i16 + nGroups] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^final int i16 = i  <  4;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = magic; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[n + j] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int minLen = 0; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  &&  ( int j = 0; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = 0; j < su_count; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final ppnt i16 = i << 4;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^final int i16 = i  >  4;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int i16 = i << blockSize;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = last; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  >  ( int j = 0; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = 0; j < ; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[magic + j] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^inUse[i16 + nSelectors] = true;^451^^^^^436^466^inUse[i16 + j] = true;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = vec; i < 16; i++ )  {^446^^^^^431^461^for  ( int i = 0; i < 16; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^final int i16 = i  &  4;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int i16 = i << retChar;^448^^^^^433^463^final int i16 = i << 4;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nInUseShadow; j < 16; j++ )  {^449^^^^^434^464^for  ( int j = 0; j < 16; j++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int alphaSize = this.nInUse + RAND_PART_C_STATE;^458^^^^^443^473^final int alphaSize = this.nInUse + 2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int nSelectors = bsR ( su_rTPos ) ;^462^^^^^447^477^final int nSelectors = bsR ( 15 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nGroupsnt i = 0; i < nSelectors; i++ )  {^464^^^^^449^479^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < n; i++ )  {^464^^^^^449^479^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= nSelectors; i++ )  {^464^^^^^449^479^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = nInUseShadow; i < nSelectors; i++ )  {^464^^^^^449^479^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int j = pp;^465^^^^^450^480^int j = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int j = 1;^465^^^^^450^480^int j = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int v = len; --v >= 0; )  {^473^^^^^458^488^for  ( int v = nGroups; --v >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int magic = nGroups; --v >= 0; )  {^473^^^^^458^488^for  ( int v = nGroups; --v >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int nGroups = v; --v >= 0; )  {^473^^^^^458^488^for  ( int v = nGroups; --v >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int v = nGroups; --v > 0; )  {^473^^^^^458^488^for  ( int v = nGroups; --v >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int v = nGroups; --v >= RAND_PART_C_STATE; )  {^473^^^^^458^488^for  ( int v = nGroups; --v >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^pos[v] =  ( byte )  maxLen;^474^^^^^459^489^pos[v] =  ( byte )  v;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^pos[v] =  ( byte )  len;^474^^^^^459^489^pos[v] =  ( byte )  v;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int v = nInUseShadow; --v >= 0; )  {^473^^^^^458^488^for  ( int v = nGroups; --v >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( magic > 0 )  {^480^^^^^465^495^while  ( v > 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( v >= 0 )  {^480^^^^^465^495^while  ( v > 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( v > nInUse )  {^480^^^^^465^495^while  ( v > 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^pos[v] = seqToUnseq[v - 1];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^pos[v] = pos[magic - 1];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^pos[v] = pos[v  !=  1];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^pos[v] = pos[v - ];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nGroupsnt i = 0; i < nSelectors; i++ )  {^477^^^^^462^492^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < maxLen; i++ )  {^477^^^^^462^492^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( nSelectorsnt i = 0; i < i; i++ )  {^477^^^^^462^492^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > nSelectors; i++ )  {^477^^^^^462^492^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < nSelectors; i++ )  {^477^^^^^462^492^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( len > 0 )  {^480^^^^^465^495^while  ( v > 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( v > storedBlockCRC )  {^480^^^^^465^495^while  ( v > 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^pos[v] = pos[nb - 1];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^pos[v] = pos[v  >=  1];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^pos[v] = pos[v - nb];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^pos[v] = pos[v  ||  1];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^pos[v] = pos[v ];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^pos[-1] = tmp;^485^^^^^470^500^pos[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int v = seqToUnseq[i] & 0xff;^478^^^^^463^493^int v = selectorMtf[i] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^int v = selectorMtf[i]  >>  0xff;^478^^^^^463^493^int v = selectorMtf[i] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte tmp = selector[v];^479^^^^^464^494^final byte tmp = pos[v];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^pos[v] = pos[v  >>  1];^482^^^^^467^497^pos[v] = pos[v - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^pos[NO_RAND_PART_C_STATE] = tmp;^485^^^^^470^500^pos[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < nSelectors; i++ )  {^477^^^^^462^492^for  ( int i = 0; i < nSelectors; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^int v = recvDecodingTables_pos[i] & 0xff;^478^^^^^463^493^int v = selectorMtf[i] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^int v = selectorMtf[i]  !=  0xff;^478^^^^^463^493^int v = selectorMtf[i] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[][] len = data.temp_charArray2d;^489^^^^^474^504^final char[][] len = dataShadow.temp_charArray2d;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[][] len = temp_charArray2d;^489^^^^^474^504^final char[][] len = dataShadow.temp_charArray2d;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final char[][] len = dataShadow.temp_charArray2d.temp_charArray2d;^489^^^^^474^504^final char[][] len = dataShadow.temp_charArray2d;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final char[][] len = dataShadow;^489^^^^^474^504^final char[][] len = dataShadow.temp_charArray2d;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -2 : 2;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int len = 0; t < nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int t = 0; t < n; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt t = 0; t < nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int nGroups = 0; t < t; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( tnt i = 0; t < nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int t = 0; t <= nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int t = 0; t > nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  <<  ( int t = 0; t < nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int t = v; t < nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int t = -1; t < nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -0 : 0;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -origPtr : origPtr;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nGroupsnt i = 0; i < alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < minLen; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( alphaSizent i = 0; i < i; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  !=  ( int i = 0; i < alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = su_j2; i < alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -bsBuffShadow : bsBuffShadow;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[] len_minLen = len[t];^494^^^^^479^509^final char[] len_t = len[t];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int curr = bsR ( t ) ;^493^^^^^478^508^int curr = bsR ( 5 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt i = 0; i < alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < nInUseShadow; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ==  ( int i = 0; i < alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < alphaSize; i++ )  {^495^^^^^480^510^for  ( int i = 0; i < alphaSize; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -inUse16 : inUse16;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -su_rTPos : su_rTPos;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -RAND_PART_C_STATE : RAND_PART_C_STATE;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^curr += bsGetBit (  )  ? -v : v;^497^^^^^482^512^curr += bsGetBit (  )  ? -1 : 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int t = bsLive; t < nGroups; t++ )  {^492^^^^^477^507^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int curr = bsR ( RAND_PART_C_STATE ) ;^493^^^^^478^508^int curr = bsR ( 5 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[] temp_charArray2d_t = len[t];^494^^^^^479^509^final char[] len_t = len[t];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[] len_n = len[t];^494^^^^^479^509^final char[] len_t = len[t];^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int curr = bsR ( storedCombinedCRC ) ;^493^^^^^478^508^int curr = bsR ( 5 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^createHuffmanDecodingTables ( n, nGroups ) ;^504^^^^^489^519^createHuffmanDecodingTables ( alphaSize, nGroups ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^createHuffmanDecodingTables ( alphaSize, n ) ;^504^^^^^489^519^createHuffmanDecodingTables ( alphaSize, nGroups ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^createHuffmanDecodingTables ( nGroups, alphaSize ) ;^504^^^^^489^519^createHuffmanDecodingTables ( alphaSize, nGroups ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] recvDecodingTables [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  tmp  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final Data dataShadow = data;^512^^^^^511^536^final Data dataShadow = this.data;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[][] len = temp_charArray2d;^513^^^^^511^536^final char[][] len = dataShadow.temp_charArray2d;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final char[][] len = dataShadow.temp_charArray2d.temp_charArray2d;^513^^^^^511^536^final char[][] len = dataShadow.temp_charArray2d;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final char[][] len = dataShadow;^513^^^^^511^536^final char[][] len = dataShadow.temp_charArray2d;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] minLens = data.minLens;^514^^^^^511^536^final int[] minLens = dataShadow.minLens;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] minLens = dataShadow.minLens.minLens;^514^^^^^511^536^final int[] minLens = dataShadow.minLens;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] minLens = dataShadow;^514^^^^^511^536^final int[] minLens = dataShadow.minLens;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] limit = data.limit;^515^^^^^511^536^final int[][] limit = dataShadow.limit;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] limit = perm;^515^^^^^511^536^final int[][] limit = dataShadow.limit;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] limit = dataShadow.limit.limit;^515^^^^^511^536^final int[][] limit = dataShadow.limit;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] limit = dataShadow;^515^^^^^511^536^final int[][] limit = dataShadow.limit;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] base = data.base;^516^^^^^511^536^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] base = perm;^516^^^^^511^536^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] base = dataShadow.base.base;^516^^^^^511^536^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] base = dataShadow;^516^^^^^511^536^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] perm = data.perm;^517^^^^^511^536^final int[][] perm = dataShadow.perm;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] perm = dataShadow.perm.perm;^517^^^^^511^536^final int[][] perm = dataShadow.perm;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] perm = dataShadow;^517^^^^^511^536^final int[][] perm = dataShadow.perm;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lent > nGroups )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( maxLen > lent )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( lent >= maxLen )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^maxLen = su_z;^526^^^^^511^536^maxLen = lent;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic4 < minLen )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lent < len )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( minLen < lent )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( lent <= minLen )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLen = su_z;^529^^^^^511^536^minLen = lent;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int len = 0; t < nGroups; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int t = 0; t < maxLen; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt t = 0; t < nGroups; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( tnt i = 0; t < nGroups; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int nGroups = 0; t < t; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int t = 0; t <= nGroups; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int t = bsBuffShadow; t < nGroups; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int t = nb; t < nGroups; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic4 > maxLen )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lent > len )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^maxLen = magic3;^526^^^^^511^536^maxLen = lent;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic3 < minLen )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLen = magic4;^529^^^^^511^536^minLen = lent;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = maxLen; --i >= 0; )  {^523^^^^^511^536^for  ( int i = alphaSize; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( magicnt i = alphaSize; --i >= 0; )  {^523^^^^^511^536^for  ( int i = alphaSize; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = alphaSize; --i > 0; )  {^523^^^^^511^536^for  ( int i = alphaSize; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = alphaSize; --i >= NO_RAND_PART_C_STATE; )  {^523^^^^^511^536^for  ( int i = alphaSize; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( lent < maxLen )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( su_z < minLen )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lent < n )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^maxLen = magic5;^526^^^^^511^536^maxLen = lent;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char lent = length[i];^524^^^^^511^536^final char lent = len_t[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLen = magic3;^529^^^^^511^536^minLen = lent;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens[t] = len;^534^^^^^511^536^minLens[t] = minLen;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int minLen = destOffs;^520^^^^^511^536^int minLen = 32;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[] temp_charArray2d_t = len[t];^522^^^^^511^536^final char[] len_t = len[t];^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[] len_magic = len[t];^522^^^^^511^536^final char[] len_t = len[t];^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( base[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], perm[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], base[t], limit[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], base[t], perm[t], temp_charArray2d[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], storedBlockCRC, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, magic, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, minLen ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( base[t], limit[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( limit[t], alphaSize[t], perm[t], len[t], minLen, maxLen, base ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( limit[t], perm[t], base[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( limit[t], base[t], perm[t], maxLen[t], minLen, len, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], alphaSize, maxLen, minLen ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nnt i = alphaSize; --i >= 0; )  {^523^^^^^511^536^for  ( int i = alphaSize; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = alphaSize; --i >= -1; )  {^523^^^^^511^536^for  ( int i = alphaSize; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic3 > maxLen )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lent > minLen )  {^525^^^^^511^536^if  ( lent > maxLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lent < magic )  {^528^^^^^511^536^if  ( lent < minLen )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLen = magic5;^529^^^^^511^536^minLen = lent;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens[t] = nGroups;^534^^^^^511^536^minLens[t] = minLen;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int t = n; t < nGroups; t++ )  {^519^^^^^511^536^for  ( int t = 0; t < nGroups; t++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^int minLen = storedBlockCRC;^520^^^^^511^536^int minLen = 32;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( perm[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], limit[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, len, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Variable_Misuse]^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, nGroups ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( len[t], base[t], perm[t], limit[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( perm[t], base[t], limit[t], len[t], minLen, maxLen, alphaSize ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Argument_Swapping]^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, alphaSize, maxLen ) ;^532^533^^^^511^536^hbCreateDecodeTables ( limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] createHuffmanDecodingTables [RETURN_TYPE] void   final int alphaSize final int nGroups [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  cftab  limit  minLens  perm  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  char[]  getAndMoveToFrontDecode_yy  len_t  length  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.origPtr = bsR ( 25 ) ;^539^^^^^524^554^this.origPtr = bsR ( 24 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.origPtr = bsR ( i16 ) ;^539^^^^^524^554^this.origPtr = bsR ( 24 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final Data dataShadow = data;^543^^^^^528^558^final Data dataShadow = this.data;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] ll8 = data.ll8;^544^^^^^529^559^final byte[] ll8 = dataShadow.ll8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] ll8 = seqToUnseq;^544^^^^^529^559^final byte[] ll8 = dataShadow.ll8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] ll8 = dataShadow.ll8.ll8;^544^^^^^529^559^final byte[] ll8 = dataShadow.ll8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] ll8 = dataShadow;^544^^^^^529^559^final byte[] ll8 = dataShadow.ll8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] unzftab = perm;^545^^^^^530^560^final int[] unzftab = dataShadow.unzftab;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] unzftab = dataShadow.unzftab.unzftab;^545^^^^^530^560^final int[] unzftab = dataShadow.unzftab;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] unzftab = dataShadow;^545^^^^^530^560^final int[] unzftab = dataShadow.unzftab;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] selector = data.selector;^546^^^^^531^561^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] selector = seqToUnseq;^546^^^^^531^561^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] selector = dataShadow.selector.selector;^546^^^^^531^561^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] selector = dataShadow;^546^^^^^531^561^final byte[] selector = dataShadow.selector;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] seqToUnseq = selectorMtf;^547^^^^^532^562^final byte[] seqToUnseq = dataShadow.seqToUnseq;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] seqToUnseq = dataShadow.seqToUnseq.seqToUnseq;^547^^^^^532^562^final byte[] seqToUnseq = dataShadow.seqToUnseq;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] seqToUnseq = dataShadow;^547^^^^^532^562^final byte[] seqToUnseq = dataShadow.seqToUnseq;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[] yy = data.getAndMoveToFrontDecode_yy;^548^^^^^533^563^final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char[] yy = length;^548^^^^^533^563^final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final char[] yy = dataShadow.getAndMoveToFrontDecode_yy.getAndMoveToFrontDecode_yy;^548^^^^^533^563^final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final char[] yy = dataShadow;^548^^^^^533^563^final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] minLens = data.minLens;^549^^^^^534^564^final int[] minLens = dataShadow.minLens;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] minLens = tt;^549^^^^^534^564^final int[] minLens = dataShadow.minLens;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] minLens = dataShadow.minLens.minLens;^549^^^^^534^564^final int[] minLens = dataShadow.minLens;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] minLens = dataShadow;^549^^^^^534^564^final int[] minLens = dataShadow.minLens;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] limit = data.limit;^550^^^^^535^565^final int[][] limit = dataShadow.limit;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] limit = dataShadow.limit.limit;^550^^^^^535^565^final int[][] limit = dataShadow.limit;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] limit = dataShadow;^550^^^^^535^565^final int[][] limit = dataShadow.limit;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] base = data.base;^551^^^^^536^566^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] base = perm;^551^^^^^536^566^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] base = dataShadow.base.base;^551^^^^^536^566^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] base = dataShadow;^551^^^^^536^566^final int[][] base = dataShadow.base;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] perm = data.perm;^552^^^^^537^567^final int[][] perm = dataShadow.perm;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[][] perm = limit;^552^^^^^537^567^final int[][] perm = dataShadow.perm;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] perm = dataShadow.perm.perm;^552^^^^^537^567^final int[][] perm = dataShadow.perm;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[][] perm = dataShadow;^552^^^^^537^567^final int[][] perm = dataShadow.perm;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int limitLast = n * 100000;^553^^^^^538^568^final int limitLast = this.blockSize100k * 100000;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final / int limitLast = this.blockSize100k * 100000;^553^^^^^538^568^final int limitLast = this.blockSize100k * 100000;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int limitLast = this.blockSize100k * storedCombinedCRC;^553^^^^^538^568^final int limitLast = this.blockSize100k * 100000;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( maxLennt i = 256; --i >= 0; )  {^560^^^^^545^575^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 256; --i < 0; )  {^560^^^^^545^575^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 256; --i >= -1; )  {^560^^^^^545^575^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 256; --i >= bsLiveShadow; )  {^560^^^^^545^575^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^yy[i] =  ( char )  minLens_zt;^561^^^^^546^576^yy[i] =  ( char )  i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^unzftab[i] = -1;^562^^^^^547^577^unzftab[i] = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^yy[i] =  ( char )  magic;^561^^^^^546^576^yy[i] =  ( char )  i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 257; --i >= 0; )  {^560^^^^^545^575^for  ( int i = 256; --i >= 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int groupNo = -1;^565^^^^^550^580^int groupNo = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int groupPos = G_SIZE  &&  1;^566^^^^^551^581^int groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int groupPos = G_SIZE - bsBuffShadow;^566^^^^^551^581^int groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int eob = n + 1;^567^^^^^552^582^final int eob = this.nInUse + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int eob = this.nInUse + su_rNToGo;^567^^^^^552^582^final int eob = this.nInUse + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int nextSym = getAndMoveToFrontDecode (  ) ;^568^^^^^553^583^int nextSym = getAndMoveToFrontDecode0 ( 0 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int bsBuffShadow = magic;^569^^^^^554^584^int bsBuffShadow = this.bsBuff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int lastShadow = -su_tPos;^571^^^^^556^586^int lastShadow = -1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zt = recvDecodingTables_pos[groupNo] & 0xff;^572^^^^^557^587^int zt = selector[groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zt = selector[groupNo]  |  0xff;^572^^^^^557^587^int zt = selector[groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int[] perm_zt = base[zt];^573^^^^^558^588^int[] base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int[] base_offs = base[zt];^573^^^^^558^588^int[] base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int[] perm_zt = limit[zt];^574^^^^^559^589^int[] limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int[] limit_magic = limit[zt];^574^^^^^559^589^int[] limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int[] limit_zt = perm[zt];^575^^^^^560^590^int[] perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int[] perm_maxLen = perm[zt];^575^^^^^560^590^int[] perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int perm_zt_zt = minLens[zt];^576^^^^^561^591^int minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int minLens_maxLen = minLens[zt];^576^^^^^561^591^int minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nextSym != maxLen )  {^578^^^^^563^593^while  ( nextSym != eob )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( magicextSym != eob )  {^578^^^^^563^593^while  ( nextSym != eob )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^while  ( eob != nextSym )  {^578^^^^^563^593^while  ( nextSym != eob )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( nextSym >= eob )  {^578^^^^^563^593^while  ( nextSym != eob )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLens_zt < zn )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( bsLiveShadow < limitLast )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow <= zn )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen >= 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech > 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= 1 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( maxLen << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | n;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^bsBuffShadow =  ( thech << 8 )  | bsBuffShadow;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &&  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >>  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << su_count )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += currentState;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | magic;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  |  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += zn;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int thech = in.read (  ) ;^607^^^^^592^622^final int thech = inShadow.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( maxLen > limit_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( zvec == limit_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow == 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < 2 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech == 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( maxLen << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | maxLen;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^bsBuffShadow =  ( thech << 8 )  | bsBuffShadow;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >>  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << retChar )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += hi;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( magic << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nInUseShadow;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ^  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ||  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 9 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int thech = in.read (  ) ;^623^^^^^608^638^final int thech = inShadow.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech > 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLen << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | magic;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 9;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nSelectors;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  !=  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ^  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow <<  )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( maxLen >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> minLen )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( bsBuffShadow << 1 ) |  (  ( zvec >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( zvec << 1 ) |  (  ( bsLiveShadow >> bsBuffShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( bsLiveShadow << 1 ) |  (  ( bsBuffShadow >> zvec )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  <  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  |  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   ^  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow  &  bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << bsBuffShadow ) |  (  ( bsBuffShadow >> bsLiveShadow )  & bsBuffShadow ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << blockSize ) |  (  ( bsBuffShadow >> bsLiveShadow )  & blockSize ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLens_zt < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow <= 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= NO_RAND_PART_C_STATE )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLens_zt << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nInUse;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <=  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << RAND_PART_B_STATE )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &&  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ==  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << su_j2 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += t;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( s-- > 0 )  {^643^^^^^628^658^while  ( s-- >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( s-- >= j )  {^643^^^^^628^658^while  ( s-- >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( magic < zn )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( bsLiveShadow < limitLast )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^while  ( zn < bsLiveShadow )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow <= zn )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic >= 0 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech > 0 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= 1 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLen << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nInUse;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^bsBuffShadow =  ( thech << 8 )  | bsBuffShadow;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >  =  ( bsBuffShadow << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <  8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nSelectors << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLens_zt;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  !=  =  ( bsBuffShadow << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  &  8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << storedCombinedCRC )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += ;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int thech = in.read (  ) ;^690^^^^^675^705^final int thech = inShadow.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLens_zt > limit_zt[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( zvec > perm[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( zvec >= limit_zt[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLen < 1 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow <= 1 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < su_chPrev )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( offs >= 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech < 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= t )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLens_zt << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nInUseShadow;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^bsBuffShadow =  ( thech << 8 )  | bsBuffShadow;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >>  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow   instanceof   8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 7 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += ;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nInUse << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | magic;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &&  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << su_i2 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 7;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen >= 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech > 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= 1 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( magic << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLen;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >=  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <=  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow <<  )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nInUseShadow;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( maxLen << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | n;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ||  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 9 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += j;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( maxLen << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( minLens_zt >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> pp )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( bsLiveShadow << 1 )  |  (  ( bsBuffShadow >> zvec )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( zvec << 1 )  |  (  ( bsLiveShadow >> bsBuffShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  &&  =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  &  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   >=  1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow  ||  bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << len )  |  (  ( bsBuffShadow >> bsLiveShadow )  & len ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << retChar )  |  (  ( bsBuffShadow >> bsLiveShadow )  & retChar ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int thech = in.read (  ) ;^706^^^^^691^721^final int thech = inShadow.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow == 1 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < 0 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 9;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLen << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >>  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_rNToGo;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( limitLast == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( limitLastextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym == RUNA )  &&  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym > RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym == RUNA )  ||  ( nextSym < RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym != RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym == RUNA )  ||  ( nextSym >= RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym <= RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  &&   (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  >   (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym >= RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  >>   (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nSelectors < zn )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( bsLiveShadow < nInUse )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech < 0 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= RAND_PART_C_STATE )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( magic << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLen;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &  =  ( bsBuffShadow << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ==  8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 9 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_j2;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( pp << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <=  =  ( bsBuffShadow << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >>  8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 7 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( maxLen > limit_zt[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( zvec > unzftab[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( zvec < limit_zt[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLens_zt < 1 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < destOffs )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( n >= 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= su_i2 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | maxLen;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ^  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ==  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << computedBlockCRC )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  !=  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nextSym;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow   instanceof   =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >=  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += thech;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += minLens_zt;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( nInUseShadow << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( n >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( bsBuffShadow << 1 )  |  (  ( zvec >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  >=  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   >  1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << minLens_zt )  |  (  ( bsBuffShadow >> bsLiveShadow )  & minLens_zt ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < su_rTPos )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= vec )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( offs << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <=  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  |  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << maxLen )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += groupPos;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( storedBlockCRC << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  !=  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( ++lastShadow >= n )  {^651^^^^^636^666^if  ( ++lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++lastShadow > limitLast )  {^651^^^^^636^666^if  ( ++lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen <= 16 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( nextSym < 16 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= currentState )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= 26 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= 6 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( length, 0, yy, 1, nextSym - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, magic - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^System.arraycopy ( nextSym, 0, yy, 1, yy - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^System.arraycopy ( yy, 0, yy, 1, nextSym   instanceof   1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, blockSize, nextSym - blockSize ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, j, nextSym - j ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = maxLen - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int maxLen = nextSym - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( int nextSym = j - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  >=  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym - 1; j < 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - RAND_PART_A_STATE; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^yy[j] = length[--j];^666^^^^^651^681^yy[j] = yy[--j];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  >>  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym ; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( offs == 0 )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( groupPos >= 0 )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  <=  1;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - storedCombinedCRC;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zt = selectorMtf[++groupNo] & 0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  <=  0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_zt = perm[zt];^677^^^^^662^692^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_limitLast = base[zt];^677^^^^^662^692^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_zt = perm[zt];^678^^^^^663^693^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_magic = limit[zt];^678^^^^^663^693^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_zt = limit[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_maxLen = perm[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = unzftab[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_minLens_zt = minLens[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen >= 0 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLens_zt << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nInUseShadow;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &&  =  ( bsBuffShadow << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 9;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nb;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << nGroups )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = minLens_zt - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int magic = nextSym - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym   instanceof   1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym - 1; j == 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - 1; j > -1; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^ll8[lastShadow] = selectorMtf[tmp];^657^^^^^642^672^ll8[lastShadow] = seqToUnseq[tmp];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^yy[0] = magic4;^672^^^^^657^687^yy[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - storedBlockCRC;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zt = recvDecodingTables_pos[++groupNo] & 0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  >  0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_maxLen = base[zt];^677^^^^^662^692^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_minLens_zt = limit[zt];^678^^^^^663^693^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_magic = perm[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = perm[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_limitLast = minLens[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | maxLen;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  |  8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= nSelectors;^701^^^^^686^716^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsLiveShadow += zn;^701^^^^^686^716^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << t )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nSelectors;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( magic << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( magic >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> nGroups )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  >  =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  |  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   |  1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow   instanceof   bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << su_i2 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & su_i2 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = minLens[zvec - base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[magic - base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[zvec - tt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  &  base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char tmp = length[nextSym - 1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char tmp = yy[limitLast - 1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final char tmp = yy[nextSym  ==  1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final char tmp = yy[nextSym ];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = minLen - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  &&  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( magic >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( magic - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - limitLast )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^int zvec =  ( zn >>  ( bsLiveShadow - bsBuffShadow )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^int zvec =  ( bsLiveShadow >>  ( bsBuffShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^int zvec =  ( bsBuffShadow >>  ( zn - bsLiveShadow )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  <=   (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  |   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  >  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  ^  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  <  zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )   ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( groupPos << zn )  - groupPos ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, n - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^System.arraycopy ( nextSym, 0, yy, 1, yy - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^System.arraycopy ( yy, 0, yy, 1, nextSym  <<  1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 1, yy, 1, nextSym - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, RAND_PART_C_STATE, nextSym - RAND_PART_C_STATE ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, 1, nextSym  ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nInUseShadow < zn )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^while  ( zn < bsLiveShadow )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt >= 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( n << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >=  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  &&  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 9 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 7;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | maxLen;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ^  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( magic > limit_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( zvec > perm[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( zvec >= limit_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLen < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | n;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >=  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <=  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << j )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_rTPos;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nGroups << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ==  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << b )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= -1 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLen;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  !=  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 7 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += storedCombinedCRC;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( maxLen << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( offs >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> nb )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec   instanceof   =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  >>  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   <=  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow  !=  bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << t ) |  (  ( bsBuffShadow >> bsLiveShadow )  & t ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nInUseShadow < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow > 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech < 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLens_zt;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << thech )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 7;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow   instanceof   8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( s-- < 0 )  {^643^^^^^628^658^while  ( s-- >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nInUse == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( limitLastextSym == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( n == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( nextSymextSym == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( nextSym <= RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( nextSym != RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( limitLast == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( limitLastextSym == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^} else if  ( RUNB == nextSym )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^} else if  ( nextSymextSym == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( nextSym != RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  &  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << groupPos;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += minLens_zt << 1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  >  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += su_i2;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( nInUseShadow == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( nbextSym == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^} else if  ( n == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( groupPos != 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == nSelectors )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  &&  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE ;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zt = selectorMtf[++groupNo] & 0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  ==  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_zt = perm[zt];^594^^^^^579^609^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_limitLast = base[zt];^594^^^^^579^609^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_limitLast = limit[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_zt = limit[zt];^596^^^^^581^611^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_magic = perm[zt];^596^^^^^581^611^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = perm_zt[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_magic = minLens[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( n >= 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech == 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( magic << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  !=  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  !=  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += hi;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= START_BLOCK_STATE )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen >= limitLast )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lastShadow >= minLen )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( limitLast >= lastShadow )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( lastShadow < limitLast )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = 1; false; n <<= 1 )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = t; true; n <<= t )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = NO_RAND_PART_C_STATE; true; n <<= NO_RAND_PART_C_STATE )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = curr; true; n <<= curr )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = 0; true; n <<= 0 )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = storedCombinedCRC; true; n <<= storedCombinedCRC )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow > zn )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic >= 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= n )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nGroups << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLens_zt;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ^  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << origPtr )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow   instanceof   =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 7 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 9;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nGroups > limit_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( zvec > unzftab[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( maxLen < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= hi )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nb;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << groupNo )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += RAND_PART_C_STATE;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  |  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= EOF )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nGroups;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >>  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( n << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( magic << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( nInUseShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> maxLen )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  &&  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  ||  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   >  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow  |  bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << RAND_PART_A_STATE ) |  (  ( bsBuffShadow >> bsLiveShadow )  & RAND_PART_A_STATE ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( magic < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < 0 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= magic )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >=  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nInUse;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  &  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( limitLast == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nSelectorsextSym == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( nInUse == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += nGroups << 1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  |  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << 0;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  !=  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << currentChar;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += nextSym;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( magic == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( nextSym <= RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += limitLast << 1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n   instanceof   1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << i;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( groupPos > 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == retChar )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE   instanceof   1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  <<  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_magic = base[zt];^594^^^^^579^609^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_zt = perm[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = perm[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_maxLen = minLens[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= len )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ==  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ||  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( n >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += destOffs;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += minLen;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  <=  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  >  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - limitLast;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zt = seqToUnseq[++groupNo] & 0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  ^  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_nSelectors = base[zt];^594^^^^^579^609^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = unzftab[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <<  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= offs;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsLiveShadow = zn;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nGroups;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  ==  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   |  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow  ==  bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << 2 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 2 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = unzftab[zvec - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[maxLen - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[zvec - perm[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  ||  base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = limitLast;^602^^^^^587^617^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( maxLen >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( minLen - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - magic )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^int zvec =  ( bsLiveShadow >>  ( bsBuffShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^int zvec =  ( bsBuffShadow >>  ( zn - bsLiveShadow )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  ||   (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  &   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  <  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow   instanceof   zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  |  zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  (  << zn )  -  ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( RAND_PART_A_STATE << zn )  - RAND_PART_A_STATE ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += nSelectors;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zt = recvDecodingTables_pos[++groupNo] & 0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  >=  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_minLen = perm[zt];^596^^^^^581^611^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_minLen = minLens[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += zt;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= minLen;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsLiveShadow += zn;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow   instanceof   =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << v )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += bsLive;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  <=  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  >=  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   ||  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow  <  bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec <<  ) |  (  ( bsBuffShadow >> bsLiveShadow )  &  ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = minLens[zvec - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[nGroups - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[zvec - perm_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^nextSym = base_zt[zvec - perm_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  ==  base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^unzftab[ch & 0xff] += minLens_zt + 1;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^unzftab[ch  <<  0xff] += s + 1;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^unzftab[ch & 0xff] += s ;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = currentChar; true; n <<= currentChar )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = magic;^602^^^^^587^617^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( magic >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( nGroups - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - minLens_zt )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  >>   (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  <<   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  >  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  ==  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  >  zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( pp << zn )  - pp ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )   ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte ch = recvDecodingTables_pos[yy[0]];^640^^^^^625^655^final byte ch = seqToUnseq[yy[0]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( nextSym >= RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  ||  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << maxLen;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( maxLen == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^} else if  ( RUNBextSym == n )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( nextSym >= RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt == 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == bsLiveShadow )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  ^  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_maxLen = perm[zt];^596^^^^^581^611^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_limitLast = minLens[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen >= 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech < 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLen;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <=  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_count;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= eob )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_j2;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lastShadow >= maxLen )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( lastShadow > limitLast )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++lastShadow == limitLast )  {^651^^^^^636^666^if  ( ++lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen <= 16 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( nextSym > 16 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <=  )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= zn6 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= inUse166 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, minLen - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^System.arraycopy ( yy, 0, yy, 1, nextSym  |  1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, zn, yy, 1, nextSym - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, 1, nextSym  ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, EOF, nextSym - EOF ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = magic - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  &  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - zn; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = nb - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  ||  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - alphaSize; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nInUse == 0 )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( groupPos <= 0 )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  |  1;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE ;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  ^  0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_magic = base[zt];^677^^^^^662^692^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_minLen = limit[zt];^678^^^^^663^693^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_minLens_zt = perm[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_magic = minLens[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= bsBuffShadow )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( origPtr << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >  8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic >= 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech == 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= nSelectors )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <<  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int minLens_zt = 1; true; n <<= 1 )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = 2; true; n <<= 2 )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = nextSym; true; n <<= nextSym )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = b; true; n <<= b )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = minLens_zt; true; n <<= minLens_zt )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = zt; true; n <<= zt )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = hi; true; n <<= hi )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( bsLiveShadow < n )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= bsBuffShadow )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nInUse << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << nb )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nInUseShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >>  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << t )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += offs;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( zvec > perm_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( zvec < limit_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( n < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= su_chPrev )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <<  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << blockSize )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += vec;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nInUse << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << lastShadow )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_rNToGo;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nGroups >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <  =  ( bsBuffShadow << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( nInUse << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( n >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  !=  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow   instanceof   bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << j ) |  (  ( bsBuffShadow >> bsLiveShadow )  & j ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= 1 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  &&  8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( origPtr << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << pp )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( nSelectors == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << inUse16;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += magic;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  &&  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic == 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  ||  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_maxLen = base[zt];^594^^^^^579^609^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_magic = limit[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_nextSym = perm[zt];^596^^^^^581^611^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= -1 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLen << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += magic << 1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << thech;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  >=  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - last;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  ||  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= su_count;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << n )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( minLen << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( magic >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  >=  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  <=  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   <<  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow  ||  bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << n ) |  (  ( bsBuffShadow >> bsLiveShadow )  & n ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  &  base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  ^   (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  <=   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  <=  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  ==  zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( START_BLOCK_STATE << zn )  - START_BLOCK_STATE ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym - 1; j >= 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - 1; j > 1; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += limitLast;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += nInUseShadow << 1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  >=  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^groupPos = null - 1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  &  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - su_rTPos;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  >  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_minLen = base[zt];^594^^^^^579^609^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_minLens_zt = limit[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_nGroups = perm[zt];^596^^^^^581^611^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << minLens_zt )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += bsBuff;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= limitLast;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += blockSize100k;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( origPtr << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( minLens_zt >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> nInUseShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow  >  bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << zt ) |  (  ( bsBuffShadow >> bsLiveShadow )  & zt ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[n - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^unzftab[ch & 0xff] += minLen + 1;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^unzftab[ch  !=  0xff] += s + 1;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^yy[0] = magic3;^672^^^^^657^687^yy[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^yy[1] = tmp;^672^^^^^657^687^yy[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  ==  1;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - i;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zt = seqToUnseq[++groupNo] & 0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  ==  0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_n = limit[zt];^678^^^^^663^693^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_limitLast = perm[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = tt[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <=  8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << alphaSize )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 7;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= magic;^701^^^^^686^716^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsLiveShadow = zn;^701^^^^^686^716^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nb;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( su_ch2 >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> nInUseShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  !=  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow  ^  bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec <<  )  |  (  ( bsBuffShadow >> bsLiveShadow )  &  ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << zt )  |  (  ( bsBuffShadow >> bsLiveShadow )  & zt ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = unzftab[zvec - base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[limitLast - base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[zvec - perm[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^nextSym = base_zt[zvec - perm_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int s = -blockSize100k;^580^^^^^565^595^int s = -1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = nInUseShadow;^602^^^^^587^617^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^int zvec =  ( zn >>  ( bsLiveShadow - bsBuffShadow )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  !=   (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  <   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  ^  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  <=  zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( minLen << zn )  - minLen ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte ch = selectorMtf[yy[0]];^640^^^^^625^655^final byte ch = seqToUnseq[yy[0]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final byte ch = seqToUnseq[yy[last]];^640^^^^^625^655^final byte ch = seqToUnseq[yy[0]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final char tmp = yy[nextSym  &&  1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  <<  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = n;^685^^^^^670^700^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( maxLen >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( nInUseShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - maxLen )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )   instanceof    (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  <=   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  ==  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow   instanceof   zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  >=  zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( length, 0, yy, 1, nextSym - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, nb - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^System.arraycopy ( yy, 0, yy, 1, nextSym  >  1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, currentState, yy, 1, nextSym - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( bsLiveShadow < maxLen )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  &  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += NO_RAND_PART_C_STATE;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << i )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += last;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << RAND_PART_C_STATE )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += ;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( minLen >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  ^  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   !=  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << 0 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 0 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nInUse < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= groupPos )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nSelectors << 8 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << zn )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( s-- >= -1 )  {^643^^^^^628^658^while  ( s-- >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLen < zn )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( bsLiveShadow < nInUseShadow )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech == 0 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( maxLen << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << nInUseShadow )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += currentChar;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow   instanceof   =  ( bsBuffShadow << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += currentState;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( zvec > perm_zt[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( maxLen < 1 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow > 1 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < groupNo )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= inUse16 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << groupPos )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  &  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_j2;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( n << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << i )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( minLen >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> minLen )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  <  =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   ^  1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow  >=  bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << nb )  |  (  ( bsBuffShadow >> bsLiveShadow )  & nb ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( magic < 1 )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < nSelectors )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nextSym << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << minLen )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += EOF;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ==  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += computedCombinedCRC;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( minLen == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( nSelectorsextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( nextSymextSym == RUNA )  ||  ( n == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( nextSym == RUNB )  ||  ( nextSym == RUNA )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( nextSym == RUNA )  ||  ( nextSym != RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  !=   (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ==   (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  <=   (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  <   (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^579^^^^^564^594^if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( n < zn )  {^689^^^^^674^704^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nextSym >= 0 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow   instanceof   8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << nInUse )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | n;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += lastShadow;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( limitLast > limit_zt[zn] )  {^703^^^^^688^718^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt >= 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= curr )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  &&  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << i16 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  <=  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   >>  1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow  <  bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << storedCombinedCRC )  |  (  ( bsBuffShadow >> bsLiveShadow )  & storedCombinedCRC ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < alphaSize )  {^705^^^^^690^720^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << su_tPos )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <  8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << RAND_PART_B_STATE )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_chPrev;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( ++lastShadow >= magic )  {^651^^^^^636^666^if  ( ++lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++lastShadow < limitLast )  {^651^^^^^636^666^if  ( ++lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt <= 16 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= su_rTPos )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= 06 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, maxLen - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^System.arraycopy ( yy, 0, yy, 1, nextSym  !=  1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, offs, yy, 1, nextSym - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = nInUseShadow - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int minLens_zt = nextSym - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  |  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - 1; j > curr; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic == 0 )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == su_rTPos )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  ||  1;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  >>  0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_nGroups = base[zt];^677^^^^^662^692^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_nGroups = perm[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = perm_zt[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= nSelectors )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << inUse16 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += maxLen;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= currentChar )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - vec; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^yy[0] = su_z;^672^^^^^657^687^yy[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^yy[v] = tmp;^672^^^^^657^687^yy[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - ;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_limitLast = limit[zt];^678^^^^^663^693^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_n = perm[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << computedCombinedCRC )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += storedCombinedCRC;^693^^^^^678^708^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << vec )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += RAND_PART_C_STATE;^709^^^^^694^724^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> magic )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  &  =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  ^  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   ||  1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow  |  bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << 0 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 0 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm[zvec - base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  >  base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char tmp = yy[maxLen - 1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final char tmp = yy[nextSym  ^  1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  !=  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = limitLast;^685^^^^^670^700^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( maxLen - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - minLen )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  ^   (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  <   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  <<  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  |  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  >>  zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  (  << zn )  -  ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, limitLast - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, alphaSize, nextSym - alphaSize ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, curr, nextSym - curr ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( maxLen < zn )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( bsLiveShadow < minLen )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow == zn )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= b )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow   instanceof   8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << zvec )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += storedCombinedCRC;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << retChar )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += RAND_PART_C_STATE;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( limitLast > limit_zt[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^while  ( limit_zt > zvec[zn] )  {^620^^^^^605^635^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < storedCombinedCRC )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= retChar )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << inUse16 )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= nextSym )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( n << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  >>  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << EOF ) |  (  ( bsBuffShadow >> bsLiveShadow )  & EOF ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nGroups < 1 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < zn )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << nInUse )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLenextSym == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( RUNAextSym == n )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( nextSym < RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( nGroupsextSym == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += nInUse << 1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << nSelectors;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << zt;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += nGroups;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( maxLenextSym == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( nextSym < RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  ^  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << 2;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen == 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( groupPos >= 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == 1 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  !=  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - alphaSize;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_nGroups = limit[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >=  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += ;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += alphaSize;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( lastShadow >= minLens_zt )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int minLen = 1; true; n <<= 1 )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = su_count; true; n <<= su_count )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = s; true; n <<= s )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( nGroups < zn )  {^606^^^^^591^621^while  ( bsLiveShadow < zn )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << eob )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += eob;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ==  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << groupPos )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << bsBuffShadow )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << zt )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nSelectors;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= su_rNToGo )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << offs )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += i16;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> nGroups )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << RAND_PART_B_STATE ) |  (  ( bsBuffShadow >> bsLiveShadow )  & RAND_PART_B_STATE ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << NO_RAND_PART_C_STATE ) |  (  ( bsBuffShadow >> bsLiveShadow )  & NO_RAND_PART_C_STATE ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < su_i2 )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nextSym >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << magic )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += NO_RAND_PART_C_STATE;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_ztextSym == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( RUNA == nextSym )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( nextSym > RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  ==  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << computedBlockCRC;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << ;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( minLenextSym == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << b;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen == 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  <=  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^base_n = base[zt];^594^^^^^579^609^base_zt = base[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nb >= 0 )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= offs )  {^608^^^^^593^623^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <  =  ( bsBuffShadow << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <=  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += EOF;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += b;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^s += n  >>  1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << j;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  <  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - n;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  <=  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_minLen = limit[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << bsBuffShadow )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += groupNo;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= nInUse;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << bsBuff )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_tPos;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  ^  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[limitLast - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( maxLen - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - limitLast )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow   instanceof    ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  &&  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( b << zn )  - b ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += maxLen;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << minLens_zt;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - ;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_maxLen = limit[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLens_zt << 8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= magic;^618^^^^^603^633^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << len )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> nInUse )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   >=  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << hi ) |  (  ( bsBuffShadow >> bsLiveShadow )  & hi ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  >=  base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^unzftab[ch & 0xff] += limitLast + 1;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^unzftab[ch  ^  0xff] += s + 1;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = maxLen;^602^^^^^587^617^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( minLens_zt >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( bsBuffShadow >>  ( magic - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  >=   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  <<  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  >>  zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( inUse16 << zn )  - inUse16 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( su_rNToGo << zn )  - su_rNToGo ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final byte ch = seqToUnseq[yy[-1]];^640^^^^^625^655^final byte ch = seqToUnseq[yy[0]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( nGroups == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( nInUseextSym == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << RAND_PART_B_STATE;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += maxLen << 1;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^s += minLens_zt;^584^^^^^569^599^s += n;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == limitLast )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  <  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limit_n = limit[zt];^595^^^^^580^610^limit_zt = limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << i16 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += maxLen;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nSelectors >= 0 )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= su_rTPos )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << currentChar )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen >= limitLast )  {^647^^^^^632^662^if  ( lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( ++lastShadow >= nSelectors )  {^651^^^^^636^666^if  ( ++lastShadow >= limitLast )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( nextSym <= su_rNToGo6 )  {^664^^^^^649^679^if  ( nextSym <= 16 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, minLens_zt - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^System.arraycopy ( yy, 0, yy, 1, nextSym  ^  1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, -1, yy, 1, nextSym - 1 ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, 0, yy, storedCombinedCRC, nextSym - storedCombinedCRC ) ;^669^^^^^664^670^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = offs - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - 1; j > su_j2; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int j = nextSym  >  1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int j = nextSym - hi; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( groupPos > 0 )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == 1 )  {^674^^^^^659^689^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  ^  1;^675^^^^^660^690^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen >= 0 )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= storedBlockCRC )  {^691^^^^^676^706^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nInUse << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << currentChar )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen >= 0 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= -1 )  {^707^^^^^692^722^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int n = zn; true; n <<= zn )  {^582^^^^^567^597^for  ( int n = 1; true; n <<= 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < v )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << currentState )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << computedBlockCRC )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= RAND_PART_C_STATE )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> nSelectors )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  ==  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << eob ) |  (  ( bsBuffShadow >> bsLiveShadow )  & eob ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << su_ch2 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & su_ch2 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < blockSize )  {^622^^^^^607^637^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= su_count )  {^624^^^^^609^639^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += bsLiveShadow;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magicextSym == RUNA )  {^583^^^^^568^598^if  ( nextSym == RUNA )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^} else if  ( minLen == RUNB )  {^585^^^^^570^600^} else if  ( nextSym == RUNB )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nSelectors == 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( groupPos <= 0 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( groupPos == -1 )  {^591^^^^^576^606^if  ( groupPos == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^groupPos = G_SIZE  <<  1;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^groupPos = G_SIZE - storedCombinedCRC;^592^^^^^577^607^groupPos = G_SIZE - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  !=  0xff;^593^^^^^578^608^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_zt = tt[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nGroups;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += blockSize;^610^^^^^595^625^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nInUseShadow;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  <  8 )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << zt )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << limitLast )  | thech;^625^^^^^610^640^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  >  =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  !=  1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )   ==  1 ) ;^634^635^^^^619^649^zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[magic - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[zvec - tt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  |  base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = nInUse;^602^^^^^587^617^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( nInUse >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  |   (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  ^   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( curr << zn )  - curr ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( NO_RAND_PART_A_STATE << zn )  - NO_RAND_PART_A_STATE ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int j = n - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int nGroups = nextSym - 1; j > 0; )  {^665^^^^^650^680^for  ( int j = nextSym - 1; j > 0; )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^s += n << v;^586^^^^^571^601^s += n << 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_limitLast = perm[zt];^596^^^^^581^611^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_minLens_zt = minLens[zt];^597^^^^^582^612^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << hi )  | thech;^609^^^^^594^624^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += nInUseShadow;^626^^^^^611^641^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[minLen - base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = perm_zt[zvec - unzftab[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  <=  base_zt[zn]];^637^^^^^622^652^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^unzftab[ch   instanceof   0xff] += s + 1;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^unzftab[ch & 0xff] += s + i16;^641^^^^^626^656^unzftab[ch & 0xff] += s + 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^yy[] = tmp;^672^^^^^657^687^yy[0] = tmp;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zt = selector[++groupNo]  <  0xff;^676^^^^^661^691^zt = selector[++groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^perm_nSelectors = perm[zt];^679^^^^^664^694^perm_zt = perm[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLens_maxLen = minLens[zt];^680^^^^^665^695^minLens_zt = minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( n << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  ^  =  ( bsBuffShadow << 8 )  | thech;^692^^^^^677^707^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsLiveShadow -= maxLen;^701^^^^^686^716^bsLiveShadow -= zn;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >  =  ( bsBuffShadow << 8 )  | thech;^708^^^^^693^723^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( minLen << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> minLens_zt )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  >>  =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << EOF )  |  (  ( bsBuffShadow >> bsLiveShadow )  & EOF ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << s )  |  (  ( bsBuffShadow >> bsLiveShadow )  & s ) ;^716^^^^^701^731^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = tt[zvec - base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^nextSym = perm_zt[zvec  >>  base_zt[zn]];^718^^^^^703^733^nextSym = perm_zt[zvec - base_zt[zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^int s = -2;^580^^^^^565^595^int s = -1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec =  ( minLen >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  <<   (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  >=  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^616^617^^^^601^631^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte ch = selector[yy[0]];^640^^^^^625^655^final byte ch = seqToUnseq[yy[0]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final byte ch = seqToUnseq[yy[curr]];^640^^^^^625^655^final byte ch = seqToUnseq[yy[0]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final char tmp = yy[minLens_zt - 1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final char tmp = yy[nextSym   instanceof   1];^655^^^^^640^670^final char tmp = yy[nextSym - 1];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = magic;^685^^^^^670^700^int zn = minLens_zt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  )  >>   (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow  &   ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow  !=  zn )  ) &  (  ( 1 << zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1  !=  zn )  - 1 ) ;^699^700^^^^684^714^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( yy, 0, yy, 1, magic - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^System.arraycopy ( yy, 0, yy, 1, nextSym  >=  1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^System.arraycopy ( yy, , yy, 1, nextSym - 1 ) ;^669^^^^^654^684^System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.last = n;^722^^^^^707^737^this.last = lastShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsLive = maxLen;^723^^^^^708^738^this.bsLive = bsLiveShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsBuff = magic;^724^^^^^709^739^this.bsBuff = bsBuffShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  byte  ch  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final Data dataShadow = data;^729^^^^^714^744^final Data dataShadow = this.data;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int zt = data.selector[groupNo] & 0xff;^730^^^^^715^745^final int zt = dataShadow.selector[groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int zt = selector[groupNo] & 0xff;^730^^^^^715^745^final int zt = dataShadow.selector[groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int zt = dataShadow.selector.selector[groupNo] & 0xff;^730^^^^^715^745^final int zt = dataShadow.selector[groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final int zt = dataShadow.selector[groupNo]  <  0xff;^730^^^^^715^745^final int zt = dataShadow.selector[groupNo] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] limit_zt = data.limit[zt];^731^^^^^716^746^final int[] limit_zt = dataShadow.limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] limit_magic = dataShadow.limit[zt];^731^^^^^716^746^final int[] limit_zt = dataShadow.limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] limit_zt = perm[zt];^731^^^^^716^746^final int[] limit_zt = dataShadow.limit[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = data.minLens[zt];^732^^^^^717^747^int zn = dataShadow.minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zn = unzftab[zt];^732^^^^^717^747^int zn = dataShadow.minLens[zt];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int zvec = bsR ( limitLast ) ;^733^^^^^718^748^int zvec = bsR ( zn ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int bsLiveShadow = nInUse;^734^^^^^719^749^int bsLiveShadow = this.bsLive;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int bsBuffShadow = maxLen;^735^^^^^720^750^int bsBuffShadow = this.bsBuff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( zvec > perm_zt[zn] )  {^737^^^^^722^752^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( zvec >= limit_zt[zn] )  {^737^^^^^722^752^while  ( zvec > limit_zt[zn] )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( maxLen < 1 )  {^739^^^^^724^754^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow <= 1 )  {^739^^^^^724^754^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^while  ( bsLiveShadow < 2 )  {^739^^^^^724^754^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen >= 0 )  {^742^^^^^727^757^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech > 0 )  {^742^^^^^727^757^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= 1 )  {^742^^^^^727^757^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( magic << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nInUseShadow;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^bsBuffShadow =  ( thech << 8 )  | bsBuffShadow;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &&  =  ( bsBuffShadow << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  !=  8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += j;^744^^^^^729^759^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( origPtr << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nextSym;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ||  8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << hi )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += minLens_zt;^744^^^^^729^759^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int thech = in.read (  ) ;^740^^^^^725^755^final int thech = inShadow.read (  ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nGroups >= 0 )  {^742^^^^^727^757^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= vec )  {^742^^^^^727^757^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( maxLen << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | nSelectors;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  &  =  ( bsBuffShadow << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  >>  8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << b )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += 9;^744^^^^^729^759^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( minLen << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | maxLen;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >=  =  ( bsBuffShadow << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( minLen << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> nSelectors )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( bsLiveShadow << 1 )  |  (  ( bsBuffShadow >> zvec )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( zvec << 1 )  |  (  ( bsLiveShadow >> bsBuffShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  >=  =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  ==  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   <  1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow  >  bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << nInUseShadow )  |  (  ( bsBuffShadow >> bsLiveShadow )  & nInUseShadow ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << bsBuffShadow )  |  (  ( bsBuffShadow >> bsLiveShadow )  & bsBuffShadow ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^while  ( minLen < 1 )  {^739^^^^^724^754^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^while  ( bsLiveShadow == 1 )  {^739^^^^^724^754^while  ( bsLiveShadow < 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( thech < 0 )  {^742^^^^^727^757^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  >>  =  ( bsBuffShadow << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow   instanceof   8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_count;^744^^^^^729^759^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << 7 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += ;^744^^^^^729^759^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( thech >= RAND_PART_A_STATE )  {^742^^^^^727^757^if  ( thech >= 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( nGroups << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | minLens_zt;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow  <<  =  ( bsBuffShadow << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^bsBuffShadow =  ( bsBuffShadow  ^  8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += vec;^744^^^^^729^759^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( n << 8 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^bsBuffShadow =  ( bsBuffShadow << 8 )  | magic;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsBuffShadow =  ( bsBuffShadow << inUse16 )  | thech;^743^^^^^728^758^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^bsLiveShadow += su_j2;^744^^^^^729^759^bsLiveShadow += 8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( nGroups << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( nInUseShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> magic )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^zvec =  ( bsBuffShadow << 1 )  |  (  ( zvec >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec  >>  =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec  ^  1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )   >  1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow  ==  bsLiveShadow )  & 1 ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << computedCombinedCRC )  |  (  ( bsBuffShadow >> bsLiveShadow )  & computedCombinedCRC ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^zvec =  ( zvec << maxLen )  |  (  ( bsBuffShadow >> bsLiveShadow )  & maxLen ) ;^751^^^^^736^766^zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsLive = minLen;^754^^^^^739^769^this.bsLive = bsLiveShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.bsBuff = nInUse;^755^^^^^740^770^this.bsBuff = bsBuffShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^return data.perm[zt][zvec - dataShadow.base[zt][zn]];^757^^^^^742^772^return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^return dataShadow.perm[zt][maxLen - dataShadow.base[zt][zn]];^757^^^^^742^772^return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^return limit[zt][zvec - dataShadow.base[zt][zn]];^757^^^^^742^772^return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^return dataShadow.perm[zt][zvec - perm[zt][zn]];^757^^^^^742^772^return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^return dataShadow.perm.perm[zt][zvec - dataShadow.base[zt][zn]];^757^^^^^742^772^return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^return dataShadow.base[zt][zvec - dataShadow.perm[zt][zn]];^757^^^^^742^772^return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^return dataShadow.perm[zt][zvec  |  dataShadow.base[zt][zn]];^757^^^^^742^772^return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[CLASS] BZip2CompressorInputStream Data  [METHOD] getAndMoveToFrontDecode0 [RETURN_TYPE] int   final int groupNo [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( dataShadow == null )  {^761^^^^^746^776^if  ( this.data == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.data != null )  {^761^^^^^746^776^if  ( this.data == null )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] perm_zt = this.data.cftab;^765^^^^^750^780^final int[] cftab = this.data.cftab;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] this.data = cftab.cftab;^765^^^^^750^780^final int[] cftab = this.data.cftab;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] tt = dataShadow.initTT ( this.last + 1 ) ;^766^^^^^751^781^final int[] tt = this.data.initTT ( this.last + 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final int[] tt = this.data.initTT ( limitLast + 1 ) ;^766^^^^^751^781^final int[] tt = this.data.initTT ( this.last + 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final int[] tt = this.last.initTT ( this.data + 1 ) ;^766^^^^^751^781^final int[] tt = this.data.initTT ( this.last + 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final int[] tt = this.data.initTT ( this.last  <  1 ) ;^766^^^^^751^781^final int[] tt = this.data.initTT ( this.last + 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int[] tt = this.data.initTT ( this.last + inUse16 ) ;^766^^^^^751^781^final int[] tt = this.data.initTT ( this.last + 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^final int[] tt = this.data.initTT ( this.last  >  1 ) ;^766^^^^^751^781^final int[] tt = this.data.initTT ( this.last + 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int[] tt = this.data.initTT ( this.last  ) ;^766^^^^^751^781^final int[] tt = this.data.initTT ( this.last + 1 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] seqToUnseq = this.data.ll8;^767^^^^^752^782^final byte[] ll8 = this.data.ll8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^final byte[] ll8 = dataShadow.ll8;^767^^^^^752^782^final byte[] ll8 = this.data.ll8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^final byte[] this.data = ll8.ll8;^767^^^^^752^782^final byte[] ll8 = this.data.ll8;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^cftab[bsLiveShadow] = bsLiveShadow;^768^^^^^753^783^cftab[0] = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^cftab[vec] = vec;^768^^^^^753^783^cftab[0] = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( this.data.unzftab, 0, perm, 1, 256 ) ;^769^^^^^754^784^System.arraycopy ( this.data.unzftab, 0, cftab, 1, 256 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^System.arraycopy ( dataShadow.unzftab, 0, cftab, 1, 256 ) ;^769^^^^^754^784^System.arraycopy ( this.data.unzftab, 0, cftab, 1, 256 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^System.arraycopy ( cftab.unzftab, 0, this.data, 1, 256 ) ;^769^^^^^754^784^System.arraycopy ( this.data.unzftab, 0, cftab, 1, 256 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 1, c = perm_zt[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nnt i = 1, c = cftab[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 1, minLen = cftab[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( cftabnt i = 1, c = i[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( cnt i = 1, i = cftab[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 1, c = cftab[0]; i == 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ||  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = nextSym, c = cftab[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 1, c = cftab[0]; i <= groupNo; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^c += perm[i];^772^^^^^757^787^c += cftab[i];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^cftab[i] = maxLen;^773^^^^^758^788^cftab[i] = c;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 0, c = cftab[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 1, c = unzftab[0]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 1, c = cftab[zt]; i <= 256; i++ )  {^771^^^^^756^786^for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( nInUseShadownt i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 0, lastShadow = n; i <= lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( lastShadownt i = 0, i = this.last; i <= lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^for  ( this.lastnt i = 0, lastShadow = i; i <= lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^for  ( int i = 0, lastShadow = this.last; i == lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = 1, lastShadow = this.last; i <= lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^tt[cftab[ll8[i] & 0xff]++] = maxLen;^777^^^^^762^792^tt[cftab[ll8[i] & 0xff]++] = i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^tt[cftab[ll8[i]  ^  0xff]++] = i;^777^^^^^762^792^tt[cftab[ll8[i] & 0xff]++] = i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^tt[cftab[ll8[i]  >>  0xff]++] = i;^777^^^^^762^792^tt[cftab[ll8[i] & 0xff]++] = i;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^for  ( int i = -1, lastShadow = this.last; i <= lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^for  ( int i = 0, lastShadow = magic; i <= lastShadow; i++ )  {^776^^^^^761^791^for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= perm.length )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( maxLen < 0 )  ||  ( this.origPtr >= tt.length )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( tt < 0 )  ||  ( this.origPtr >= this.origPtr.length )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( tt.length < 0 )  ||  ( this.origPtr >= this.origPtr )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( this.origPtr < 0 )  &&  ( this.origPtr >= tt.length )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( this.origPtr == 0 )  ||  ( this.origPtr >= tt.length )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr > tt.length )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  (  ( this.origPtr < limitLast )  ||  ( this.origPtr >= tt.length )  )  {^780^^^^^765^795^if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_count = ;^785^^^^^770^800^this.su_count = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( blockRandomised )  {^789^^^^^774^804^if  ( this.blockRandomised )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = 1;^790^^^^^775^805^this.su_rNToGo = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = pp;^791^^^^^776^806^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = ;^790^^^^^775^805^this.su_rNToGo = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = lastShadow;^791^^^^^776^806^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupBlock [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( this.su_i2 <= nextSym )  {^799^^^^^798^821^if  ( this.su_i2 <= this.last )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_i2 < this.last )  {^799^^^^^798^821^if  ( this.su_i2 <= this.last )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( limitLast == 0 )  {^803^^^^^798^821^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo <= 0 )  {^803^^^^^798^821^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == s )  {^803^^^^^798^821^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos != 512 )  {^805^^^^^798^821^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == computedBlockCRC )  {^805^^^^^798^821^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = v;^806^^^^^798^821^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  >  1;^804^^^^^798^821^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - pp;^804^^^^^798^821^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos > 512 )  {^805^^^^^798^821^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == currentChar )  {^805^^^^^798^821^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = ;^806^^^^^798^821^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_chPrev = limitLast;^800^^^^^798^821^this.su_chPrev = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_tPos = dataShadow.tt[this.su_tPos];^802^^^^^798^821^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^magic = this.data.tt[this.su_tPos];^802^^^^^798^821^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  >=  1;^804^^^^^798^821^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] ;^804^^^^^798^821^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_ch2 = su_ch2Shadow ^=  ( nb == 1 )  ? 1 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo >= 1 )  ? 1 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == thech )  ? thech : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == i16 )  ? i16 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_ch2 = su_ch2Shadow ^=  ( limitLast == 1 )  ? 1 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo != 1 )  ? 1 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 2 )  ? 2 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = nInUseShadow;^814^^^^^798^821^this.currentState = RAND_PART_B_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int su_ch2Shadow = dataShadow.ll8[this.su_tPos] & 0xff;^801^^^^^798^821^int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int su_ch2Shadow = this.data.ll8[this.su_tPos]  ^  0xff;^801^^^^^798^821^int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.crc.updateCRC ( limitLast ) ;^815^^^^^798^821^this.crc.updateCRC ( su_ch2Shadow ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( magic == 0 )  {^803^^^^^798^821^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo != 0 )  {^803^^^^^798^821^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == groupPos )  {^803^^^^^798^821^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == c )  {^805^^^^^798^821^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  ||  1;^804^^^^^798^821^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = i;^806^^^^^798^821^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos <= 512 )  {^805^^^^^798^821^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == zn )  {^805^^^^^798^821^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_chPrev = magic;^800^^^^^798^821^this.su_chPrev = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^minLen = this.data.tt[this.su_tPos];^802^^^^^798^821^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  &&  1;^804^^^^^798^821^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - destOffs;^804^^^^^798^821^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_ch2 = su_ch2Shadow ^=  ( minLen == 1 )  ? 1 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 0 )  ? 0 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : -1;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_ch2 = su_ch2Shadow ^=  ( magic == 1 )  ? 1 : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo ==  )  ?  : 0;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : destOffs;^811^^^^^798^821^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentChar = magic;^813^^^^^798^821^this.currentChar = su_ch2Shadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^814^^^^^798^821^this.currentState = RAND_PART_B_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int su_ch2Shadow = this.data.ll8[this.su_tPos]  |  0xff;^801^^^^^798^821^int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.crc.updateCRC ( magic ) ;^815^^^^^798^821^this.crc.updateCRC ( su_ch2Shadow ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen <= this.last )  {^824^^^^^823^839^if  ( this.su_i2 <= this.last )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( this.su_i2 <= n )  {^824^^^^^823^839^if  ( this.su_i2 <= this.last )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_i2 < this.last )  {^824^^^^^823^839^if  ( this.su_i2 <= this.last )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^834^^^^^823^839^this.currentState = NO_RAND_PART_A_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_chPrev = limitLast;^825^^^^^823^839^this.su_chPrev = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_ch2 = maxLen;^827^^^^^823^839^this.su_ch2 = su_ch2Shadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_tPos = dataShadow.tt[this.su_tPos];^828^^^^^823^839^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^magic = this.data.tt[this.su_tPos];^828^^^^^823^839^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentChar = minLen;^830^^^^^823^839^this.currentChar = su_ch2Shadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^831^^^^^823^839^this.currentState = NO_RAND_PART_B_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int su_ch2Shadow = dataShadow.ll8[this.su_tPos] & 0xff;^826^^^^^823^839^int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int su_ch2Shadow = this.data.ll8[this.su_tPos]  ^  0xff;^826^^^^^823^839^int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.crc.updateCRC ( nInUseShadow ) ;^832^^^^^823^839^this.crc.updateCRC ( su_ch2Shadow ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_chPrev = minLen;^825^^^^^823^839^this.su_chPrev = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_ch2 = limitLast;^827^^^^^823^839^this.su_ch2 = su_ch2Shadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentChar = maxLen;^830^^^^^823^839^this.currentChar = su_ch2Shadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^int su_ch2Shadow = this.data.ll8[this.su_tPos]  <<  0xff;^826^^^^^823^839^int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartA [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( limitLast != this.su_chPrev )  {^842^^^^^841^867^if  ( this.su_ch2 != this.su_chPrev )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( this.su_ch2 != nInUse )  {^842^^^^^841^867^if  ( this.su_ch2 != this.su_chPrev )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_ch2 == this.su_chPrev )  {^842^^^^^841^867^if  ( this.su_ch2 != this.su_chPrev )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( ++this.su_count > 4 )  {^846^^^^^841^867^} else if  ( ++this.su_count >= 4 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^} else if  ( ++this.su_count >= 5 )  {^846^^^^^841^867^} else if  ( ++this.su_count >= 4 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^864^^^^^846^866^this.currentState = RAND_PART_A_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen == 0 )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo <= 0 )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo != 0 )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == limitLast )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == currentChar )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos >= 512 )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == origPtr )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = su_ch2Shadow;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]   instanceof   1;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - storedCombinedCRC;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = 1;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos <= 512 )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == bsLive )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = bsLive;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt == 1 )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo != 1 )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == eob )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == minLens_zt )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_z ^= 2;^860^^^^^841^867^this.su_z ^= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_z =  ( char )   ( dataShadow.ll8[this.su_tPos] & 0xff ) ;^847^^^^^841^867^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos]  !=  0xff ) ;^847^^^^^841^867^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_tPos = dataShadow.tt[this.su_tPos];^848^^^^^841^867^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limitLast = this.data.tt[this.su_tPos];^848^^^^^841^867^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  !=  1;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] ;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = -1;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_j2 = -1;^857^^^^^841^867^this.su_j2 = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = maxLen;^858^^^^^841^867^this.currentState = RAND_PART_C_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_z ^= su_i2;^860^^^^^841^867^this.su_z ^= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( limitLast == 0 )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo > 0 )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == destOffs )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == nSelectors )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos != 512 )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = blockSize100k;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  &&  1;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = lastShadow;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo <= 1 )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo ==  )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_z ^= offs;^860^^^^^841^867^this.su_z ^= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos]  >  0xff ) ;^847^^^^^841^867^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_j2 = EOF;^857^^^^^841^867^this.su_j2 = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = minLen;^864^^^^^841^867^this.currentState = RAND_PART_A_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^843^^^^^841^867^this.currentState = RAND_PART_A_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_count = s;^844^^^^^841^867^this.su_count = 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^} else if  ( ++this.su_count >= currentState )  {^846^^^^^841^867^} else if  ( ++this.su_count >= 4 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLen == 0 )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == bsBuff )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos < 512 )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  <=  1;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = ;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == bsLiveShadow )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( maxLen == 1 )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_rNToGo < 1 )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_z ^= su_tPos;^860^^^^^841^867^this.su_z ^= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos]  >>  0xff ) ;^847^^^^^841^867^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nInUse = this.data.tt[this.su_tPos];^848^^^^^841^867^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - bsBuff;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = vec;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = minLen;^858^^^^^841^867^this.currentState = RAND_PART_C_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_z ^= nInUse;^860^^^^^841^867^this.su_z ^= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == RAND_PART_A_STATE )  {^849^^^^^841^867^if  ( this.su_rNToGo == 0 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - nInUseShadow;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( ++this.su_rTPos > 512 )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( ++this.su_rTPos == 513 )  {^851^^^^^841^867^if  ( ++this.su_rTPos == 512 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = len;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( nInUse == 1 )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^if  ( this.su_rNToGo == len )  {^859^^^^^841^867^if  ( this.su_rNToGo == 1 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = minLen;^843^^^^^841^867^this.currentState = RAND_PART_A_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos]  >=  0xff ) ;^847^^^^^841^867^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^magic = this.data.tt[this.su_tPos];^848^^^^^841^867^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  |  1;^850^^^^^841^867^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_rTPos = nInUseShadow;^852^^^^^841^867^this.su_rTPos = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_j2 = NO_RAND_PART_B_STATE;^857^^^^^841^867^this.su_j2 = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = nb;^858^^^^^841^867^this.currentState = RAND_PART_C_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_z ^= v;^860^^^^^841^867^this.su_z ^= 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = maxLen;^864^^^^^841^867^this.currentState = RAND_PART_A_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( this.su_j2 < magic4 )  {^870^^^^^869^880^if  ( this.su_j2 < this.su_z )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( this.su_z < this.su_j2 )  {^870^^^^^869^880^if  ( this.su_j2 < this.su_z )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_j2 <= this.su_z )  {^870^^^^^869^880^if  ( this.su_j2 < this.su_z )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = nGroups;^875^^^^^869^880^this.currentState = RAND_PART_A_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_count = 1;^877^^^^^869^880^this.su_count = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentChar = minLen;^871^^^^^869^880^this.currentChar = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.crc.updateCRC ( minLen ) ;^872^^^^^869^880^this.crc.updateCRC ( this.su_ch2 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentChar = magic;^871^^^^^869^880^this.currentChar = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.crc.updateCRC ( limitLast ) ;^872^^^^^869^880^this.crc.updateCRC ( this.su_ch2 ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( minLens_zt != this.su_chPrev )  {^883^^^^^882^894^if  ( this.su_ch2 != this.su_chPrev )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( this.su_ch2 != maxLen )  {^883^^^^^882^894^if  ( this.su_ch2 != this.su_chPrev )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  ( this.su_chPrev != this.su_ch2 )  {^883^^^^^882^894^if  ( this.su_ch2 != this.su_chPrev )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_ch2 < this.su_chPrev )  {^883^^^^^882^894^if  ( this.su_ch2 != this.su_chPrev )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^} else if  ( ++this.su_count > 4 )  {^886^^^^^882^894^} else if  ( ++this.su_count >= 4 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^} else if  ( ++this.su_count >= 5 )  {^886^^^^^882^894^} else if  ( ++this.su_count >= 4 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_z =  ( char )   ( dataShadow.ll8[this.su_tPos] & 0xff ) ;^887^^^^^882^894^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos]  ^  0xff ) ;^887^^^^^882^894^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.su_tPos = dataShadow.tt[this.su_tPos];^888^^^^^882^894^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^limitLast = this.data.tt[this.su_tPos];^888^^^^^882^894^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_j2 = s;^889^^^^^882^894^this.su_j2 = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^su_count = this.data.tt[this.su_tPos];^888^^^^^882^894^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_count = 2;^884^^^^^882^894^this.su_count = 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^} else if  ( ++this.su_count >= computedBlockCRC )  {^886^^^^^882^894^} else if  ( ++this.su_count >= 4 )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos]  ==  0xff ) ;^887^^^^^882^894^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^nextSym = this.data.tt[this.su_tPos];^888^^^^^882^894^this.su_tPos = this.data.tt[this.su_tPos];^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_j2 = groupPos;^889^^^^^882^894^this.su_j2 = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_count = eob;^884^^^^^882^894^this.su_count = 1;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos]  <=  0xff ) ;^887^^^^^882^894^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_j2 = ;^889^^^^^882^894^this.su_j2 = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartB [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( limitLast < this.su_z )  {^897^^^^^896^908^if  ( this.su_j2 < this.su_z )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  ( this.su_j2 < tmp )  {^897^^^^^896^908^if  ( this.su_j2 < this.su_z )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  ( this.su_j2 <= this.su_z )  {^897^^^^^896^908^if  ( this.su_j2 < this.su_z )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^this.su_count = currentState;^905^^^^^896^908^this.su_count = 0;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentChar = limitLast;^899^^^^^896^908^this.currentChar = su_ch2Shadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentState = magic;^902^^^^^896^908^this.currentState = NO_RAND_PART_C_STATE;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int su_ch2Shadow = magic;^898^^^^^896^908^int su_ch2Shadow = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.crc.updateCRC ( limitLast ) ;^900^^^^^896^908^this.crc.updateCRC ( su_ch2Shadow ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.currentChar = minLen;^899^^^^^896^908^this.currentChar = su_ch2Shadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int su_ch2Shadow = minLens_zt;^898^^^^^896^908^int su_ch2Shadow = this.su_ch2;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^this.crc.updateCRC ( minLen ) ;^900^^^^^896^908^this.crc.updateCRC ( su_ch2Shadow ) ;^[CLASS] BZip2CompressorInputStream Data  [METHOD] setupNoRandPartC [RETURN_TYPE] void   [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^int[] ttShadow = minLens;^959^^^^^958^970^int[] ttShadow = this.tt;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( minLens == null )  ||  ( ttShadow.length < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^if  (  ( ttShadow == null )  ||  ( magic < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( length == null )  ||  ( ttShadow.length < ttShadow )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Argument_Swapping]^if  (  ( ttShadow.length == null )  ||  ( ttShadow < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( ttShadow == null )  &&  ( ttShadow.length < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( ttShadow != null )  ||  ( ttShadow.length < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^if  (  ( ttShadow == null )  ||  ( ttShadow.length <= length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Variable_Misuse]^return minLens;^969^^^^^958^970^return ttShadow;^[CLASS] BZip2CompressorInputStream Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final int[] cftab = new int[];^930^^^^^925^935^final int[] cftab = new int[257];^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Literal]^final char[] getAndMoveToFrontDecode_yy = new char[currentState];^931^^^^^926^936^final char[] getAndMoveToFrontDecode_yy = new char[256];^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] int[][]  base  limit  perm  InputStream  in  inShadow  char[][]  len  temp_charArray2d  Data  data  dataShadow  int[]  base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  char[]  getAndMoveToFrontDecode_yy  len_t  length  yy  byte[]  dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  CRC  crc  char  expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  boolean[]  inUse  
[BugLab_Wrong_Operator]^this.ll8 - = new byte[blockSize100k * BZip2Constants.baseBlockSize];^948^^^^^945^949^this.ll8 = new byte[blockSize100k * BZip2Constants.baseBlockSize];^[CLASS] Data  [METHOD] <init> [RETURN_TYPE] BZip2CompressorInputStream$Data(int)   int blockSize100k [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  unzftab  boolean[]  inUse  int  blockSize100k  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Variable_Misuse]^int[] ttShadow = unzftab;^959^^^^^958^970^int[] ttShadow = this.tt;^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Variable_Misuse]^if  (  ( unzftab == null )  ||  ( ttShadow.length < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Argument_Swapping]^if  (  ( length == null )  ||  ( ttShadow.length < ttShadow )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Argument_Swapping]^if  (  ( ttShadow == null )  ||  ( length < ttShadow.length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Wrong_Operator]^if  (  ( ttShadow == null )  &&  ( ttShadow.length < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Wrong_Operator]^if  (  ( ttShadow != null )  ||  ( ttShadow.length < length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Wrong_Operator]^if  (  ( ttShadow == null )  ||  ( ttShadow.length <= length )  )  {^965^^^^^958^970^if  (  ( ttShadow == null )  ||  ( ttShadow.length < length )  )  {^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
[BugLab_Variable_Misuse]^return unzftab;^969^^^^^958^970^return ttShadow;^[CLASS] Data  [METHOD] initTT [RETURN_TYPE] int[]   int length [VARIABLES] byte[]  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  int[][]  base  limit  perm  boolean  char[][]  temp_charArray2d  int[]  cftab  minLens  tt  ttShadow  unzftab  boolean[]  inUse  int  length  char[]  getAndMoveToFrontDecode_yy  
