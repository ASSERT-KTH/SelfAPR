[BugLab_Argument_Swapping]^implementations.put ( c.getHeaderId (  ) , ze ) ;^58^^^^^55^66^implementations.put ( ze.getHeaderId (  ) , c ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[BugLab_Argument_Swapping]^Class c =  ( Class )  headerId.get ( implementations ) ;^78^^^^^76^85^Class c =  ( Class )  implementations.get ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[BugLab_Wrong_Operator]^if  ( c == null )  {^79^^^^^76^85^if  ( c != null )  {^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[BugLab_Wrong_Literal]^return parse ( data, false ) ;^95^^^^^94^96^return parse ( data, true ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data [VARIABLES] byte[]  data  boolean  Map  implementations  int  WORD  
[BugLab_Wrong_Literal]^int start = length;^110^^^^^108^137^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^while  ( length <= data.length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^while  ( start <= data.start - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^while  ( start <= length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^while  ( WORD <= data.length - start )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^while  ( start < data.length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^while  ( start <= data.length  ==  WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^if  ( WORD + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^if  ( start + WORD + WORD > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^if  ( start + start + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^if  ( data.length + WORD + length > start )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^if  ( length + WORD + start > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^if  ( start + WORD + data > length.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^if  ( start + data.length + length > WORD )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^if  ( start + WORD + length > data )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  ( start + WORD + length >= data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  >>  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  ( start  <=  WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  <=  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  &  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^throw new ZipException ( "data lengthing at " + start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  ==  start  ==  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  ||  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  &&  start  &&  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  >>  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, WORD + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, start + start, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( length, start + WORD, data ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( data, start + length, WORD ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromLocalFileData ( data, WORD + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromLocalFileData ( data, start + WORD, WORD ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromLocalFileData ( data, start + length, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromLocalFileData ( data, length + WORD, start ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromLocalFileData ( data, start + length, WORD ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, length + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, start + length, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( start, data + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromLocalFileData ( data, start + WORD, start ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromLocalFileData ( data, start + start, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromLocalFileData ( WORD, start + data, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromLocalFileData ( data, WORD + start, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromLocalFileData ( data, length + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromLocalFileData ( start, data + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, length + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, start + WORD, WORD ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, start + start, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( data, WORD + start, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( data, length + WORD, start ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( data, start + length, WORD ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^start +=  ( WORD + length ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^start +=  ( length   instanceof   WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ZipShort headerId = new ZipShort ( start, data ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^int length =  ( new ZipShort ( data, length + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^int length =  ( new ZipShort ( start, data + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^int length =  ( new ZipShort ( data, start  <=  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Literal]^int length =  ( new ZipShort ( data, start  )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  <<  start  <<  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  >  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^int length =  ( new ZipShort ( data, WORD + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^int length =  ( new ZipShort ( data, start  <<  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Literal]^int length =  ( new ZipShort ( data, start + WORD )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  &  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^int length =  ( new ZipShort ( data, start  |  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, start + WORD, start ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, start + length, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( WORD, start + data, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^if  ( length + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^if  ( start + WORD + start > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^if  ( start + WORD + length > start )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^if  ( start + WORD + data.length > length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^if  ( start + data + length > WORD.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  >=  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  ( start  |  WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  ||  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^if  <  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  ^  start  ^  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  !=  start  !=  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  !=  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, start + WORD, WORD ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( data, length + WORD, start ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromLocalFileData ( length, start + WORD, data ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( data, WORD + start, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ze.parseFromCentralDirectoryData ( data, WORD + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^ze.parseFromCentralDirectoryData ( length, start + WORD, data ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^start +=  ( start + WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^start +=  ( length + start ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^start +=  ( length  |  WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^int length =  ( new ZipShort ( data, start  !=  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Literal]^int length =  ( new ZipShort ( data, start + length )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  ==  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Variable_Misuse]^ZipShort headerId = new ZipShort ( data, length ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  <  start  <  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^throw new ZipException ( "data starting at "  &&  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^int length =  ( new ZipShort ( data, start  ==  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Literal]^int length =  ( new ZipShort ( data, start + start )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Argument_Swapping]^return  ( ZipExtraField[] )  result.toArray ( v ) ;^136^^^^^108^137^return  ( ZipExtraField[] )  v.toArray ( result ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[BugLab_Wrong_Operator]^int / sum = WORD * data.length;^145^^^^^144^161^int sum = WORD * data.length;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  !=  ( int i = 0; i < data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^int start = length;^150^^^^^144^161^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  &&  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  !=  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  ==  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^for  ( int i = ; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( result.length + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( sum + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( local.length + start ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^start +=  ( local.length.length + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^start +=  ( local + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^start +=  ( WORD + local.length ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^start +=  ( local.length  !=  WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, local, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, length, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( result[i].getHeaderId (  ) .getBytes (  ) , 0, data, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, start, result, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , -1, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 3 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, local, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, sum + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^System.arraycopy ( data[i].getLocalFileDataLength (  <=  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , length, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start , 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + start, start ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( result, 0, result, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, result, sum + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, result, start + sum, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( result, 0, local, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( local, 0, result, local.length + WORD, start ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( local, 0, result, WORD + start, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( local, 0, result, start + local.length, WORD ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( local, i, result, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^start +=  ( local.length  >>  WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, sum, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( result[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, data, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^System.arraycopy ( data[i].getLocalFileDataLength (  !=  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, result, start + WORD, length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( local, start, result, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^return local;^160^^^^^144^161^return result;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^int / sum = WORD * data.length;^169^^^^^168^185^int sum = WORD * data.length;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= data.length; i++ )  {^170^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  <<  ( int i = 0; i < data.length; i++ )  {^170^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^int start = length;^174^^^^^168^185^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  &&  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  >=  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^for  &  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^for  ( int i = i; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^for  ( int i = length; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( start + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( local.length + start ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^start +=  ( WORD.length + local ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^start +=  ( WORD + local.length ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^start +=  ( local.length  &&  WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, local, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, length, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , , result, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, WORD ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, sum + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( start[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, data + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, start, result + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^System.arraycopy ( data[i].getCentralDirectoryLength (  ||  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , WORD, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + WORD, WORD ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start , 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( result, 0, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, result, sum + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, result, start + sum, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, result, start + WORD, sum ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( result, 0, local, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( local, 0, result, WORD + start, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( local, 0, result, start + local.length, WORD ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( local, -1, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( result.length + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( length + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^start +=  ( local.length + sum ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^start +=  ( local.length.length + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( start[i].getHeaderId (  ) .getBytes (  ) , 0, result, data, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( result[i].getHeaderId (  ) .getBytes (  ) , 0, data, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, start, result, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 1, result, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, i ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, local, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( result[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, data, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Operator]^System.arraycopy ( data[i].getCentralDirectoryLength (   instanceof   ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 1, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + ,  ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + start, start ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, local, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^System.arraycopy ( local, 0, result, start + WORD, start ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Argument_Swapping]^System.arraycopy ( local, 0, result, local.length + WORD, start ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Wrong_Literal]^System.arraycopy ( local, WORD, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[BugLab_Variable_Misuse]^return local;^184^^^^^168^185^return result;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
