[buglab_swap_variables]^implementations.put ( c.getHeaderId (  ) , ze ) ;^58^^^^^55^66^implementations.put ( ze.getHeaderId (  ) , c ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[buglab_swap_variables]^implementations.put ( ze.getHeaderId (  )  ) ;^58^^^^^55^66^implementations.put ( ze.getHeaderId (  ) , c ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[buglab_swap_variables]^Class c =  ( Class )  headerId.get ( implementations ) ;^78^^^^^76^85^Class c =  ( Class )  implementations.get ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[buglab_swap_variables]^while  ( start <= data.length.length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^while  ( data.length <= start - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^if  ( length + WORD + start > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^if  ( start + length + WORD > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^if  ( start + WORD + length > data.length.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^if  ( data.length + WORD + length > start )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( WORD, start + data, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData (  start + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, WORD + start, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, length + WORD, start ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, start + WORD ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, start +  length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( WORD, start + data, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData (  start + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( data, length + WORD, start ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( data + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( data, start + WORD ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( data, start + length, WORD ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( data, start +  length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( length, start + WORD, data ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( WORD, start + data, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData (  start + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, length + WORD, start ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, start + length, WORD ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, start + WORD ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, start +  length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^start +=  ( WORD + length ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ZipShort headerId = new ZipShort ( start, data ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ZipShort headerId = new ZipShort (  start ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ZipShort headerId = new ZipShort ( data ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^int length =  ( new ZipShort ( start, data + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^int length =  ( new ZipShort (  start + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^int length =  ( new ZipShort ( data + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( start, data + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( length, start + WORD, data ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, WORD + start, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^if  ( WORD + start + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^if  ( start + WORD + data.length > length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^if  ( start + data + length > WORD.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( data, start + length, WORD ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromLocalFileData ( data, WORD + start, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( length, start + WORD, data ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^ze.parseFromCentralDirectoryData ( start, data + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^return  ( ZipExtraField[] )  result.toArray ( v ) ;^136^^^^^108^137^return  ( ZipExtraField[] )  v.toArray ( result ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[buglab_swap_variables]^start +=  ( WORD.length + local ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^start +=  ( local + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^start +=  ( WORD + local.length ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, start, result, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0,  start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result,  2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( result[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, data, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0,  start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, start, result + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( result, 0, local, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy (  0, result, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, start, result + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0,  start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, WORD + start, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, start + local.length, WORD ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, start +  local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, local.length + WORD, start ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, start + WORD ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^start +=  ( local.length.length + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( result[i].getHeaderId (  ) .getBytes (  ) , 0, data, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( start[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, data + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( WORD, 0, result, start + local, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^start +=  ( WORD.length + local ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^start +=  ( WORD + local.length ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( start[i].getHeaderId (  ) .getBytes (  ) , 0, result, data, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, start, result, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0,  start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result,  2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, start, result + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0,  start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( start[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, data + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( result, 0, local, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy (  0, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, WORD, start + result, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0,  start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, local.length + WORD, start ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, WORD + start, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, start +  local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, start + WORD ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^start +=  ( local.length.length + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( result[i].getHeaderId (  ) .getBytes (  ) , 0, data, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[buglab_swap_variables]^System.arraycopy ( local, 0, result, start + local.length, WORD ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
