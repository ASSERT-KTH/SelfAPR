[buglab_swap_variables]^this.reverseMapping.add ( new Simple8BitChar ( ++code[i] )  ) ;^97^98^^^^90^102^this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[buglab_swap_variables]^return this.unicode - a.unicode.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[buglab_swap_variables]^return a.unicode - this.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[buglab_swap_variables]^return this.unicode - a;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[buglab_swap_variables]^return "0x" + Integer.toHexString ( 0xffff & code ) + "->0x" + Integer.toHexString ( 0xff & unicode ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[buglab_swap_variables]^return b[128 + this.highChars];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[buglab_swap_variables]^bb.put ( r.code.code ) ;^154^^^^^143^156^bb.put ( r.code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[buglab_swap_variables]^while  ( i01 > i )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^while  ( i11 > i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( c.unicode == m )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( c == m.unicode )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( m == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( c < m.unicode )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^int i = i1 +  ( i0 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^Simple8BitChar m =  ( Simple8BitChar )  i.get ( this.reverseMapping ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( m.unicode.unicode == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( m.unicode.unicode < c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( this.reverseMapping >= i0.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^Simple8BitChar r =  ( Simple8BitChar )  i0.get ( this.reverseMapping ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( r.unicode.unicode != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( c != r.unicode )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^if  ( r != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[buglab_swap_variables]^char c = i.charAt ( name ) ;^208^^^^^204^216^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[buglab_swap_variables]^if  ( !this.pushEncodedChar ( c )  )  {^234^^^^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[buglab_swap_variables]^ZipEncodingHelper.appendSurrogate ( c ) ;^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[buglab_swap_variables]^char c = i.charAt ( name ) ;^228^^^^^222^243^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[buglab_swap_variables]^return this.unicode - a.unicode.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[buglab_swap_variables]^return a.unicode - this.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[buglab_swap_variables]^return "0x" + Integer.toHexString ( 0xffff & code ) + "->0x" + Integer.toHexString ( 0xff & unicode ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
