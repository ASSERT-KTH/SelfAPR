[BugLab_Variable_Misuse]^this.reverseMapping = new ArrayList ( this.highChars.i ) ;^92^^^^^90^102^this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^this.reverseMapping = new ArrayList ( highChars.length ) ;^92^^^^^90^102^this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^byte code = i;^94^^^^^90^102^byte code = 127;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Argument_Swapping]^for  ( this.highCharsnt i = 0; i < i.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= this.highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^this.reverseMapping.add ( new Simple8BitChar ( ++code, highChars[i] )  ) ;^97^98^^^^90^102^this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^for  ( int i = i; i < this.highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^Collections.sort ( reverseMapping ) ;^101^^^^^90^102^Collections.sort ( this.reverseMapping ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^return unicode - a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[BugLab_Variable_Misuse]^return this.unicode - unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[BugLab_Argument_Swapping]^return this.unicode - a.unicode.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[BugLab_Argument_Swapping]^return a.unicode - this.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[BugLab_Wrong_Operator]^return this.unicode  &&  a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[BugLab_Argument_Swapping]^return "0x" + Integer.toHexString ( 0xffff & code ) + "->0x" + Integer.toHexString ( 0xff & unicode ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[BugLab_Wrong_Operator]^return "0x" + Integer.toHexString ( 0xffff  !=  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[BugLab_Wrong_Operator]^return "0x" + Integer.toHexString ( 0xffff  ^  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[BugLab_Wrong_Operator]^+ "->0x" + Integer.toHexString ( 0xff  ||  code ) ;^69^^^^^67^70^+ "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( b > 0 )  {^112^^^^^110^118^if  ( b >= 0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Literal]^if  ( b >=  )  {^112^^^^^110^118^if  ( b >= 0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[BugLab_Variable_Misuse]^return this.highChars[128 + code];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[BugLab_Argument_Swapping]^return b[128 + this.highChars];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Literal]^return this.highChars[ + b];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( unicode >= 0 && c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( c >= 0 || c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( c > 0 && c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( c >= 0 && c <= 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Literal]^if  ( c >= 0 && c <  )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Literal]^return false;^127^^^^^124^132^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Variable_Misuse]^Simple8BitChar r = this.encodeHighChar ( unicode ) ;^130^^^^^124^132^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Operator]^return r == null;^131^^^^^124^132^return r != null;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( c >= 0 || c < 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( c > 0 && c < 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( c >= 0 && c <= 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Wrong_Literal]^if  ( c >= 0 && c < 127 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Wrong_Literal]^return false;^147^^^^^143^156^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Variable_Misuse]^Simple8BitChar r = this.encodeHighChar ( unicode ) ;^150^^^^^143^156^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( r != null )  {^151^^^^^143^156^if  ( r == null )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Wrong_Literal]^return true;^152^^^^^143^156^return false;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Variable_Misuse]^bb.put ( code ) ;^154^^^^^143^156^bb.put ( r.code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Argument_Swapping]^bb.put ( r.code.code ) ;^154^^^^^143^156^bb.put ( r.code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Argument_Swapping]^bb.put ( r ) ;^154^^^^^143^156^bb.put ( r.code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Wrong_Literal]^return false;^155^^^^^143^156^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[BugLab_Variable_Misuse]^int i1 = reverseMapping.size (  ) ;^168^^^^^153^183^int i1 = this.reverseMapping.size (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^while  ( i0 > i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^while  ( i1 > i1 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^while  ( i11 > i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^while  ( i1 == i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Literal]^while  ( i2 > i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( r.unicode == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( m.unicode == unicode )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^if  ( c.unicode == m )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^if  ( c == m.unicode )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^if  ( m == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( m.unicode <= c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^return r;^177^^^^^162^192^return m;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( r.unicode < c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( m.unicode < unicode )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( unicode < c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^if  ( c < m.unicode )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( m.unicode <= c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^i1 = i1;^183^^^^^180^184^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^i0 = i1 + 1;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Literal]^i0 = i ;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Literal]^i0 = i + i1;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^i1 = i1;^183^^^^^168^198^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^int i = i1 +  ( i1 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^int i = i0 +  ( i0 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^int i = i1 +  ( i0 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^int i = i0 +  ==  ( i1 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^int i = i0 +  ( i1 - i0 )  + 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^int i = i0 +  ( i1  |  i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i1 ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^Simple8BitChar m =  ( Simple8BitChar )  reverseMapping.get ( i ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^Simple8BitChar m =  ( Simple8BitChar )  i.get ( this.reverseMapping ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( unicode == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( m.unicode > c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Literal]^i0 = i + i;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^int i = i0 +  ( i1  <  i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( i1 >= this.reverseMapping.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( i0 >= reverseMapping.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^if  ( this.reverseMapping >= i0.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( i0 == this.reverseMapping.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i1 ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^Simple8BitChar r =  ( Simple8BitChar )  reverseMapping.get ( i0 ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^Simple8BitChar r =  ( Simple8BitChar )  i0.get ( this.reverseMapping ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( m.unicode != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( r.unicode != unicode )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( unicode != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^if  ( c.unicode != r )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Argument_Swapping]^if  ( c != r.unicode )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( r.unicode >= c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^return m;^197^^^^^182^212^return r;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( !this.canEncodeChar ( unicode )  )  {^210^^^^^204^216^if  ( !this.canEncodeChar ( c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^return true;^211^^^^^204^216^return false;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^for  ( int i=i;i<name.length (  ) ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[BugLab_Argument_Swapping]^char c = i.charAt ( name ) ;^208^^^^^204^216^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^for  ( int i=-1;i<name.length (  ) ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^return false;^215^^^^^204^216^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  !=  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  |  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  - 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )   >>  1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) +  +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )   )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 3 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  >  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  &&  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  * 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )   ||  1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + i +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / i ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^if  ( out.remaining (  )  <= 6 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^if  ( out.remaining (  )  < i )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   ==  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + i ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )    instanceof   6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^ZipEncodingHelper.appendSurrogate ( out,unicode ) ;^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^for  <=  ( int i=0;i<name.length (  ) ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^for  ( int i=i;i<name.length (  ) ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Literal]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   &  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^if  ( !this.pushEncodedChar ( out,unicode )  )  {^234^^^^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Argument_Swapping]^char c = i.charAt ( name ) ;^228^^^^^222^243^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   <=  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   ^  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Wrong_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   <  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[BugLab_Variable_Misuse]^return new String ( highChars ) ;^256^^^^^249^257^return new String ( ret ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[BugLab_Variable_Misuse]^return unicode - a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[BugLab_Variable_Misuse]^return this.unicode - unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[BugLab_Argument_Swapping]^return a - this.unicode.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[BugLab_Argument_Swapping]^return a.unicode - this.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[BugLab_Wrong_Operator]^return this.unicode  <  a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[BugLab_Argument_Swapping]^return "0x" + Integer.toHexString ( 0xffff & code ) + "->0x" + Integer.toHexString ( 0xff & unicode ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[BugLab_Wrong_Operator]^return "0x" + Integer.toHexString ( 0xffff  ^  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[BugLab_Wrong_Operator]^return "0x" + Integer.toHexString ( 0xffff  ==  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[BugLab_Wrong_Operator]^return "0x" + Integer.toHexString ( 0xffff  |  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[BugLab_Wrong_Operator]^+ "->0x" + Integer.toHexString ( 0xff  ^  code ) ;^69^^^^^67^70^+ "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
