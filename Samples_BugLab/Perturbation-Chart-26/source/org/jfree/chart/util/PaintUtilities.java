[buglab_swap_variables]^result = p2.equals ( p1 ) ;^98^^^^^87^99^result = p1.equals ( p2 ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[buglab_swap_variables]^result = gp2.getColor1 (  ) .equals ( gp1.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^90^91^92^93^^75^102^result = gp1.getColor1 (  ) .equals ( gp2.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[buglab_swap_variables]^&& gp2.getColor2 (  ) .equals ( gp1.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^91^92^93^94^^75^102^&& gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[buglab_swap_variables]^&& gp2.getPoint1 (  ) .equals ( gp1.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^92^93^94^95^^75^102^&& gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[buglab_swap_variables]^&& gp2.getPoint2 (  ) .equals ( gp1.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^93^94^95^^^75^102^&& gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[buglab_swap_variables]^result = p2.equals ( p1 ) ;^98^^^^^75^102^result = p1.equals ( p2 ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[buglab_swap_variables]^if  ( oColor.equals ( c )  )  {^124^^^^^118^128^if  ( c.equals ( oColor )  )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[buglab_swap_variables]^if  ( oColor.equals ( c )  )  {^124^^^^^109^139^if  ( c.equals ( oColor )  )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[buglab_swap_variables]^for  ( fields.lengthnt i = 0; i < i; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[buglab_swap_variables]^for  ( int i = 0; i < f; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[buglab_swap_variables]^for  ( fillUpnt i = 0; i < i; i++ )  {^141^^^^^126^156^for  ( int i = 0; i < fillUp; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
