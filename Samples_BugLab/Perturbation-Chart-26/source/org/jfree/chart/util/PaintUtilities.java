[BugLab_Wrong_Operator]^if  ( p1 != null )  {^78^^^^^75^102^if  ( p1 == null )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^return  ( p1 == null ) ;^79^^^^^75^102^return  ( p2 == null ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Operator]^return  ( p2 != null ) ;^79^^^^^75^102^return  ( p2 == null ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^if  ( p1 == null )  {^81^^^^^75^102^if  ( p2 == null )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Operator]^if  ( p2 != null )  {^81^^^^^75^102^if  ( p2 == null )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Literal]^return true;^82^^^^^75^102^return false;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Literal]^boolean result = true;^85^^^^^75^102^boolean result = false;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^if  ( p2 instanceof GradientPaint && p2 instanceof GradientPaint )  {^87^^^^^75^102^if  ( p1 instanceof GradientPaint && p2 instanceof GradientPaint )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^if  ( p1 instanceof GradientPaint && p1 instanceof GradientPaint )  {^87^^^^^75^102^if  ( p1 instanceof GradientPaint && p2 instanceof GradientPaint )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1 instanceof GradientPaint || p2 instanceof GradientPaint )  {^87^^^^^75^102^if  ( p1 instanceof GradientPaint && p2 instanceof GradientPaint )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1  ||  GradientPaint && p2 instanceof GradientPaint )  {^87^^^^^75^102^if  ( p1 instanceof GradientPaint && p2 instanceof GradientPaint )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1 instanceof GradientPaint && p2  ||  GradientPaint )  {^87^^^^^75^102^if  ( p1 instanceof GradientPaint && p2 instanceof GradientPaint )  {^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Argument_Swapping]^result = p2.equals ( p1 ) ;^98^^^^^87^99^result = p1.equals ( p2 ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Argument_Swapping]^result = gp2.getColor1 (  ) .equals ( gp1.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^90^91^92^93^^75^102^result = gp1.getColor1 (  ) .equals ( gp2.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Operator]^result = gp1.getColor1 (  ) .equals ( gp2.getColor1 (  )  ) || gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^90^91^92^93^^75^102^result = gp1.getColor1 (  ) .equals ( gp2.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^result = gp1.getColor1 (  ) .equals ( gp1.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^90^91^92^93^^75^102^result = gp1.getColor1 (  ) .equals ( gp2.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Argument_Swapping]^&& gp2.getColor2 (  ) .equals ( gp1.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^91^92^93^94^^75^102^&& gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp2.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^91^92^93^94^^75^102^&& gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp1.getColor2 (  ) .equals ( gp1.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^91^92^93^94^^75^102^&& gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Argument_Swapping]^&& gp2.getPoint1 (  ) .equals ( gp1.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^92^93^94^95^^75^102^&& gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp2.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^92^93^94^95^^75^102^&& gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp1.getPoint1 (  ) .equals ( gp1.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^92^93^94^95^^75^102^&& gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Argument_Swapping]^&& gp2.getPoint2 (  ) .equals ( gp1.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^93^94^95^^^75^102^&& gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp1.getPoint2 (  ) .equals ( gp1.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^93^94^95^^^75^102^&& gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  ) && gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp2.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^94^95^^^^75^102^&& gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp1.isCyclic (  )  == gp1.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^94^95^^^^75^102^&& gp1.isCyclic (  )  == gp2.isCyclic (  ) && gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^&& gp2.getTransparency (  )  == gp1.getTransparency (  ) ;^95^^^^^75^102^&& gp1.getTransparency (  )  == gp1.getTransparency (  ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Argument_Swapping]^result = p2.equals ( p1 ) ;^98^^^^^75^102^result = p1.equals ( p2 ) ;^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Variable_Misuse]^result = gp2.getColor1 (  ) .equals ( gp2.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^90^91^92^93^^75^102^result = gp1.getColor1 (  ) .equals ( gp2.getColor1 (  )  ) && gp1.getColor2 (  ) .equals ( gp2.getColor2 (  )  ) && gp1.getPoint1 (  ) .equals ( gp2.getPoint1 (  )  ) && gp1.getPoint2 (  ) .equals ( gp2.getPoint2 (  )  )^[CLASS] PaintUtilities  [METHOD] equal [RETURN_TYPE] boolean   Paint p1 Paint p2 [VARIABLES] boolean  result  GradientPaint  gp1  gp2  Paint  p1  p2  
[BugLab_Wrong_Operator]^if  ( Modifier.isPublic ( f.getModifiers (  )  ) || Modifier.isFinal ( f.getModifiers (  )  ) && Modifier.isStatic ( f.getModifiers (  )  )  )  {^118^119^120^^^103^133^if  ( Modifier.isPublic ( f.getModifiers (  )  ) && Modifier.isFinal ( f.getModifiers (  )  ) && Modifier.isStatic ( f.getModifiers (  )  )  )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  &&  Color )  {^123^^^^^118^128^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Argument_Swapping]^if  ( oColor.equals ( c )  )  {^124^^^^^118^128^if  ( c.equals ( oColor )  )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Variable_Misuse]^return color;^125^^^^^118^128^return name;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  >  Color )  {^123^^^^^108^138^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Argument_Swapping]^if  ( oColor.equals ( c )  )  {^124^^^^^109^139^if  ( c.equals ( oColor )  )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Variable_Misuse]^return color;^125^^^^^110^140^return name;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Variable_Misuse]^for  ( fillUpnt i = 0; i < fields.length; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Argument_Swapping]^for  ( fields.lengthnt i = 0; i < i; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == fields.length; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Literal]^for  ( int i = ; i < fields.length; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  ^  Color )  {^123^^^^^118^128^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  &  Color )  {^123^^^^^108^138^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  <<  Color )  {^123^^^^^118^128^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  ^  Color )  {^123^^^^^108^138^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < fillUp; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Argument_Swapping]^for  ( fieldsnt i = 0; i < i.length; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < fields.lengthields.length; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Literal]^for  ( int i = i; i < fields.length; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  ==  Color )  {^123^^^^^118^128^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( oColor  &&  Color )  {^123^^^^^108^138^if  ( oColor instanceof Color )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < fields.length; i++ )  {^116^^^^^101^131^for  ( int i = 0; i < fields.length; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^String color = Integer.toHexString ( c.getRGB (  )   >>  0x00ffffff ) ;^136^^^^^121^151^String color = Integer.toHexString ( c.getRGB (  )  & 0x00ffffff ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^String color = Integer.toHexString ( c.getRGB (  )   >  0x00ffffff ) ;^136^^^^^121^151^String color = Integer.toHexString ( c.getRGB (  )  & 0x00ffffff ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Literal]^StringBuffer retval = new StringBuffer ( fillUp ) ;^137^^^^^122^152^StringBuffer retval = new StringBuffer ( 7 ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Literal]^StringBuffer retval = new StringBuffer ( 8 ) ;^137^^^^^122^152^StringBuffer retval = new StringBuffer ( 7 ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^int fillUp = 6  >  color.length (  ) ;^140^^^^^125^155^int fillUp = 6 - color.length (  ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Literal]^int fillUp = fillUp - color.length (  ) ;^140^^^^^125^155^int fillUp = 6 - color.length (  ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Variable_Misuse]^int fillUp = 6 - name.length (  ) ;^140^^^^^125^155^int fillUp = 6 - color.length (  ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Variable_Misuse]^for  ( fillUpnt i = 0; i < fillUp; i++ )  {^141^^^^^126^156^for  ( int i = 0; i < fillUp; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Argument_Swapping]^for  ( fillUpnt i = 0; i < i; i++ )  {^141^^^^^126^156^for  ( int i = 0; i < fillUp; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > fillUp; i++ )  {^141^^^^^126^156^for  ( int i = 0; i < fillUp; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < fillUp; i++ )  {^141^^^^^126^156^for  ( int i = 0; i < fillUp; i++ )  {^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Variable_Misuse]^retval.append ( name ) ;^145^^^^^130^160^retval.append ( color ) ;^[CLASS] PaintUtilities  [METHOD] colorToString [RETURN_TYPE] String   Color c [VARIABLES] Field  f  StringBuffer  retval  boolean  Color  c  Object  oColor  String  color  name  Field[]  fields  int  fillUp  i  Exception  e  
[BugLab_Wrong_Operator]^if  ( value != null )  {^157^^^^^155^177^if  ( value == null )  {^[CLASS] PaintUtilities  [METHOD] stringToColor [RETURN_TYPE] Color   String value [VARIABLES] Field  f  boolean  NumberFormatException  nfe  String  value  Exception  ce  
