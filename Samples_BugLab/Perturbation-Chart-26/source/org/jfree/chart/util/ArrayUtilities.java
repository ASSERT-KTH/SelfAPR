[BugLab_Variable_Misuse]^if  ( result == null )  {^69^^^^^67^84^if  ( array == null )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Operator]^if  ( array != null )  {^69^^^^^67^84^if  ( array == null )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^System.arraycopy ( array, 0, array, 0, array.length ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^System.arraycopy ( array, 0, result, 0, i ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Argument_Swapping]^System.arraycopy ( result, 0, array, 0, array.length ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Argument_Swapping]^System.arraycopy ( array.length, 0, result, 0, array ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Literal]^System.arraycopy ( array, i, result, i, array.length ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Literal]^System.arraycopy ( array, -1, result, -1, array.length ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < result.length; i++ )  {^75^^^^^67^84^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == array.length; i++ )  {^75^^^^^67^84^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < array.length; i++ )  {^75^^^^^67^84^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Literal]^for  ( int i = i; i < array.length; i++ )  {^75^^^^^67^84^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^result[i] = child;^79^^^^^67^84^result[i] = copychild;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^float[] child = result[i];^76^^^^^67^84^float[] child = array[i];^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^System.arraycopy ( child, 0, copychild, 0, i ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Argument_Swapping]^System.arraycopy ( child.length, 0, copychild, 0, child ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Argument_Swapping]^System.arraycopy ( copychild, 0, child, 0, child.length ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Argument_Swapping]^System.arraycopy ( child, 0, child.length, 0, copychild ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Literal]^System.arraycopy ( child, i, copychild, i, child.length ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Literal]^System.arraycopy ( child, 1, copychild, 1, child.length ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < array.length; i++ )  {^75^^^^^67^84^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^System.arraycopy ( copychild, 0, copychild, 0, child.length ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Variable_Misuse]^return array;^82^^^^^67^84^return result;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[BugLab_Wrong_Operator]^if  ( array1 != null )  {^98^^^^^97^123^if  ( array1 == null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^return  ( array1 == null ) ;^99^^^^^97^123^return  ( array2 == null ) ;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^return  ( array2 != null ) ;^99^^^^^97^123^return  ( array2 == null ) ;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array1 == null )  {^101^^^^^97^123^if  ( array2 == null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array2 != null )  {^101^^^^^97^123^if  ( array2 == null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^102^^^^^97^123^return false;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array2.length != array2.length )  {^104^^^^^97^123^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( i != array2.length )  {^104^^^^^97^123^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( array2.length != array1.length )  {^104^^^^^97^123^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( array1.length != array2 )  {^104^^^^^97^123^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array1.length <= array2.length )  {^104^^^^^97^123^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^105^^^^^97^123^return false;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array1[i] != null )  {^108^^^^^97^123^if  ( array1[i] == null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array1[i] != null )  {^109^^^^^97^123^if  ( array2[i] != null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array2[i] == null )  {^109^^^^^97^123^if  ( array2[i] != null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^110^^^^^97^123^return false;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array1[i] == null )  {^113^^^^^97^123^if  ( array2[i] == null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array2[i] != null )  {^113^^^^^97^123^if  ( array2[i] == null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array2[i] != null )  {^114^^^^^97^123^if  ( array1[i] != null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array1[i] == null )  {^114^^^^^97^123^if  ( array1[i] != null )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^115^^^^^97^123^return false;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( array2[i] != array1[i] )  {^118^^^^^97^123^if  ( array1[i] != array2[i] )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array1[i] == array2[i] )  {^118^^^^^97^123^if  ( array1[i] != array2[i] )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^119^^^^^97^123^return false;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < array2.length; i++ )  {^107^^^^^97^123^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Argument_Swapping]^for  ( array1.lengthnt i = 0; i < i; i++ )  {^107^^^^^97^123^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < array1; i++ )  {^107^^^^^97^123^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= array1.length; i++ )  {^107^^^^^97^123^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < array1.length; i++ )  {^107^^^^^97^123^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array2[i] != array2[i] )  {^118^^^^^97^123^if  ( array1[i] != array2[i] )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return false;^122^^^^^97^123^return true;^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array1 != null )  {^134^^^^^133^152^if  ( array1 == null )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Variable_Misuse]^return  ( array1 == null ) ;^135^^^^^133^152^return  ( array2 == null ) ;^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Operator]^return  ( array2 != null ) ;^135^^^^^133^152^return  ( array2 == null ) ;^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array1 == null )  {^138^^^^^133^152^if  ( array2 == null )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array2 != null )  {^138^^^^^133^152^if  ( array2 == null )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^139^^^^^133^152^return false;^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array1.length != array1.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( i != array2.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( array1.length != i )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( array2.length != array1.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( array1.length != array2.length.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( array2 != array1.length.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Operator]^if  ( array1.length >= array2.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^143^^^^^133^152^return false;^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( array2[i], array1[i] )  )  {^147^^^^^133^152^if  ( !Arrays.equals ( array1[i], array2[i] )  )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return true;^148^^^^^133^152^return false;^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < array1.length.length; i++ )  {^146^^^^^133^152^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Argument_Swapping]^for  ( array1.lengthnt i = 0; i < i; i++ )  {^146^^^^^133^152^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == array1.length; i++ )  {^146^^^^^133^152^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < array1.length; i++ )  {^146^^^^^133^152^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( !Arrays.equals ( array2[i], array2[i] )  )  {^147^^^^^133^152^if  ( !Arrays.equals ( array1[i], array2[i] )  )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Variable_Misuse]^if  ( !Arrays.equals ( array1[i], array1[i] )  )  {^147^^^^^133^152^if  ( !Arrays.equals ( array1[i], array2[i] )  )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < array1.length; i++ )  {^146^^^^^133^152^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Wrong_Literal]^return false;^151^^^^^133^152^return true;^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[BugLab_Argument_Swapping]^if  ( o2 != null && o1 != null )  {^167^^^^^162^175^if  ( o1 != null && o2 != null )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Operator]^if  ( o1 != null || o2 != null )  {^167^^^^^162^175^if  ( o1 != null && o2 != null )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Operator]^if  ( o1 == null && o2 != null )  {^167^^^^^162^175^if  ( o1 != null && o2 != null )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Operator]^if  ( o1 != null && o2 == null )  {^167^^^^^162^175^if  ( o1 != null && o2 != null )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Argument_Swapping]^if  ( o2.equals ( o1 )  )  {^168^^^^^162^175^if  ( o1.equals ( o2 )  )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Literal]^return false;^169^^^^^162^175^return true;^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < j; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Argument_Swapping]^for  ( array.lengthnt i = 0; i < i; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Argument_Swapping]^for  ( int i = 0; i < array.length.length; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > array.length; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= array.length; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < array.length; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Variable_Misuse]^for  ( int i = 0; j < i; j++ )  {^164^^^^^162^175^for  ( int j = 0; j < i; j++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Argument_Swapping]^for  ( jnt i = 0; j < i; j++ )  {^164^^^^^162^175^for  ( int j = 0; j < i; j++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Operator]^for  ( int j = 0; j <= i; j++ )  {^164^^^^^162^175^for  ( int j = 0; j < i; j++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j = j; j < i; j++ )  {^164^^^^^162^175^for  ( int j = 0; j < i; j++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j = ; j < i; j++ )  {^164^^^^^162^175^for  ( int j = 0; j < i; j++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i = i; i < array.length; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Wrong_Literal]^return true;^174^^^^^162^175^return false;^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[BugLab_Variable_Misuse]^int length = Math.min  ( a2.length, a2.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^int length = Math.min  ( a1.length, a1.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^int length = Math.min  ( retval, a2.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^int length = Math.min  ( a1.length, retval ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Argument_Swapping]^int length = Math.min  ( a2.length, a1.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Argument_Swapping]^int length = Math.min  ( a2.length.length, a1 ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Argument_Swapping]^int length = Math.min  ( a2, a1.length.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Argument_Swapping]^int length = Math.min  ( a1.length, a2 ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Argument_Swapping]^if  ( o2 == null && o1 == null )  {^190^^^^^185^206^if  ( o1 == null && o2 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^if  ( o1 == null || o2 == null )  {^190^^^^^185^206^if  ( o1 == null && o2 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^if  ( o1 != null && o2 == null )  {^190^^^^^185^206^if  ( o1 == null && o2 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^if  ( o1 == null && o2 != null )  {^190^^^^^185^206^if  ( o1 == null && o2 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^if  ( o2 == null )  {^194^^^^^185^206^if  ( o1 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^if  ( o1 != null )  {^194^^^^^185^206^if  ( o1 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^if  ( oretval == null )  {^194^^^^^185^206^if  ( o1 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^return 2;^195^^^^^185^206^return 1;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^if  ( o1 == null )  {^197^^^^^185^206^if  ( o2 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^if  ( o2 != null )  {^197^^^^^185^206^if  ( o2 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^return -0;^198^^^^^185^206^return -1;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^if  ( length != 0 )  {^201^^^^^185^206^if  ( retval != 0 )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^if  ( retval <= 0 )  {^201^^^^^185^206^if  ( retval != 0 )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^return length;^202^^^^^185^206^return retval;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^for  ( retvalnt i = 0; i < length; i++ )  {^187^^^^^185^206^for  ( int i = 0; i < length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < retval; i++ )  {^187^^^^^185^206^for  ( int i = 0; i < length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Argument_Swapping]^for  ( lengthnt i = 0; i < i; i++ )  {^187^^^^^185^206^for  ( int i = 0; i < length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= length; i++ )  {^187^^^^^185^206^for  ( int i = 0; i < length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^for  ( int i = retval; i < length; i++ )  {^187^^^^^185^206^for  ( int i = 0; i < length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^return 0;^195^^^^^185^206^return 1;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^return -2;^198^^^^^185^206^return -1;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Operator]^if  ( retval >= 0 )  {^201^^^^^185^206^if  ( retval != 0 )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^if  ( retval != length )  {^201^^^^^185^206^if  ( retval != 0 )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^return i;^195^^^^^185^206^return 1;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^Comparable o1 = a2[i];^188^^^^^185^206^Comparable o1 = a1[i];^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^Comparable o2 = a1[i];^189^^^^^185^206^Comparable o2 = a2[i];^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^int retval = o2.compareTo ( o2 ) ;^200^^^^^185^206^int retval = o1.compareTo ( o2 ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Variable_Misuse]^int retval = o1.compareTo ( o1 ) ;^200^^^^^185^206^int retval = o1.compareTo ( o2 ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Argument_Swapping]^int retval = o2.compareTo ( o1 ) ;^200^^^^^185^206^int retval = o1.compareTo ( o2 ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^return length;^195^^^^^185^206^return 1;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[BugLab_Wrong_Literal]^return length;^205^^^^^185^206^return 0;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
