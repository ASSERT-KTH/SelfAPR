[buglab_swap_variables]^System.arraycopy ( result, 0, array, 0, array.length ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy (  0, result, 0, array.length ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( array, 0,  0, array.length ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( array.length, 0, result, 0, array ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( array, 0, result, 0 ) ;^73^^^^^67^84^System.arraycopy ( array, 0, result, 0, array.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^for  ( array.lengthnt i = 0; i < i; i++ )  {^75^^^^^67^84^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( copychild, 0, child, 0, child.length ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy (  0, copychild, 0, child.length ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( child, 0,  0, child.length ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( child.length, 0, copychild, 0, child ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( child, 0, copychild, 0 ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^System.arraycopy ( child, 0, child.length, 0, copychild ) ;^78^^^^^67^84^System.arraycopy ( child, 0, copychild, 0, child.length ) ;^[CLASS] ArrayUtilities  [METHOD] clone [RETURN_TYPE] float[][]   float[][] array [VARIABLES] boolean  float[][]  array  result  int  i  float[]  child  copychild  
[buglab_swap_variables]^if  ( array2.length != array1.length )  {^104^^^^^97^123^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[buglab_swap_variables]^if  ( array2[i] != array1[i] )  {^118^^^^^97^123^if  ( array1[i] != array2[i] )  {^[CLASS] ArrayUtilities  [METHOD] equalReferencesInArrays [RETURN_TYPE] boolean   Object[] array1 Object[] array2 [VARIABLES] boolean  Object[]  array1  array2  int  i  
[buglab_swap_variables]^if  ( array2.length != array1.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[buglab_swap_variables]^if  ( array1.length != array2.length.length )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[buglab_swap_variables]^if  ( array1.length != array2 )  {^142^^^^^133^152^if  ( array1.length != array2.length )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[buglab_swap_variables]^if  ( !Arrays.equals ( array2[i], array1[i] )  )  {^147^^^^^133^152^if  ( !Arrays.equals ( array1[i], array2[i] )  )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[buglab_swap_variables]^if  ( !Arrays.equals ( array1[i][i] )  )  {^147^^^^^133^152^if  ( !Arrays.equals ( array1[i], array2[i] )  )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[buglab_swap_variables]^for  ( array1.lengthnt i = 0; i < i; i++ )  {^146^^^^^133^152^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[buglab_swap_variables]^for  ( array1nt i = 0; i < i.length; i++ )  {^146^^^^^133^152^for  ( int i = 0; i < array1.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] equal [RETURN_TYPE] boolean   float[][] array1 float[][] array2 [VARIABLES] boolean  float[][]  array1  array2  int  i  
[buglab_swap_variables]^if  ( o2 != null && o1 != null )  {^167^^^^^162^175^if  ( o1 != null && o2 != null )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[buglab_swap_variables]^if  ( o2.equals ( o1 )  )  {^168^^^^^162^175^if  ( o1.equals ( o2 )  )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[buglab_swap_variables]^for  ( int i = 0; i < array.length.length; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[buglab_swap_variables]^for  ( array.lengthnt i = 0; i < i; i++ )  {^163^^^^^162^175^for  ( int i = 0; i < array.length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[buglab_swap_variables]^for  ( jnt i = 0; j < i; j++ )  {^164^^^^^162^175^for  ( int j = 0; j < i; j++ )  {^[CLASS] ArrayUtilities  [METHOD] hasDuplicateItems [RETURN_TYPE] boolean   Object[] array [VARIABLES] boolean  Object  o1  o2  Object[]  array  int  i  j  
[buglab_swap_variables]^int length = Math.min  ( a2.length, a1.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[buglab_swap_variables]^int length = Math.min  ( a1.length.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[buglab_swap_variables]^int length = Math.min  (  a2.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[buglab_swap_variables]^int length = Math.min  ( a1.length ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[buglab_swap_variables]^int length = Math.min  ( a2.length.length, a1 ) ;^186^^^^^185^206^int length = Math.min  ( a1.length, a2.length ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[buglab_swap_variables]^if  ( o2 == null && o1 == null )  {^190^^^^^185^206^if  ( o1 == null && o2 == null )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[buglab_swap_variables]^for  ( lengthnt i = 0; i < i; i++ )  {^187^^^^^185^206^for  ( int i = 0; i < length; i++ )  {^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
[buglab_swap_variables]^int retval = o2.compareTo ( o1 ) ;^200^^^^^185^206^int retval = o1.compareTo ( o2 ) ;^[CLASS] ArrayUtilities  [METHOD] compareVersionArrays [RETURN_TYPE] int   Comparable[] a1 Comparable[] a2 [VARIABLES] Comparable  o1  o2  boolean  int  i  length  retval  Comparable[]  a1  a2  
