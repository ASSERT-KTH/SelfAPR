[BugLab_Variable_Misuse]^if  ( result instanceof Cloneable )  {^105^^^^^103^114^if  ( shape instanceof Cloneable )  {^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[BugLab_Wrong_Operator]^if  ( shape  <=  Cloneable )  {^105^^^^^103^114^if  ( shape instanceof Cloneable )  {^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[BugLab_Variable_Misuse]^return  ( Shape )  ObjectUtilities.clone ( result ) ;^107^^^^^103^114^return  ( Shape )  ObjectUtilities.clone ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[BugLab_Variable_Misuse]^return shape;^113^^^^^103^114^return result;^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[BugLab_Variable_Misuse]^if  ( s1 instanceof Line2D && s1 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( s1 instanceof Line2D || s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( s1  <<  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( s1 instanceof Line2D && s2  >  Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( s1  ==  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( s1  !=  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( s1  >=  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( s1  ||  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s2 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s1 instanceof Ellipse2D && s1 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Argument_Swapping]^else if  ( s2 instanceof Ellipse2D && s1 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Ellipse2D || s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >>  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Ellipse2D && s2  >  Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ^  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  &  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >=  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <<  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s2 instanceof Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Arc2D || s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  &&  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Arc2D && s2  <=  Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >=  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ||  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >>  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s2 instanceof Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s1 instanceof Polygon && s1 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Argument_Swapping]^else if  ( s2 instanceof Polygon && s1 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Polygon || s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <<  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Polygon && s2  |  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >=  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s1 instanceof GeneralPath && s1 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath || s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  !=  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  &&  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Argument_Swapping]^return ObjectUtilities.equal ( s2, s1 ) ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  >  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  &&  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Polygon && s2  ==  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ==  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Argument_Swapping]^else if  ( s2 instanceof GeneralPath && s1 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <<  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  &&  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  !=  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s1 instanceof Arc2D && s1 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <=  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Arc2D && s2  >>  Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  &  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Polygon && s2  &  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  |  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  <<  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Variable_Misuse]^else if  ( s2 instanceof GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >=  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  ==  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Polygon && s2  <<  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ^  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ^  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  <=  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  ||  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Ellipse2D && s2  !=  Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ==  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  |  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ||  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <=  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Arc2D && s2  <  Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ==  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ^  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Polygon && s2  >  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  >>  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  >=  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  &  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  >>  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  !=  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Polygon && s2  >=  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  ||  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  |  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  |  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof Arc2D && s2  &  Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  !=  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <<  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1 instanceof GeneralPath && s2  |  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^else if  ( s1  <=  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[BugLab_Wrong_Operator]^if  ( l1 != null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Variable_Misuse]^return  ( l1 == null ) ;^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Wrong_Operator]^return  ( l2 != null ) ;^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Variable_Misuse]^if  ( l1 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Wrong_Operator]^if  ( l2 != null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Wrong_Literal]^return true;^165^^^^^160^174^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Wrong_Literal]^return true;^168^^^^^160^174^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Variable_Misuse]^if  ( !l1.getP1 (  ) .equals ( l1.getP1 (  )  )  )  {^167^^^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Wrong_Literal]^return true;^171^^^^^160^174^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Variable_Misuse]^if  ( !l1.getP2 (  ) .equals ( l1.getP2 (  )  )  )  {^170^^^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Wrong_Literal]^return false;^173^^^^^160^174^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[BugLab_Wrong_Operator]^if  ( e1 != null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[BugLab_Wrong_Operator]^return  ( e2 != null ) ;^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[BugLab_Wrong_Operator]^if  ( e2 != null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[BugLab_Wrong_Literal]^return true;^190^^^^^185^196^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[BugLab_Wrong_Literal]^return true;^193^^^^^185^196^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[BugLab_Variable_Misuse]^if  ( !e1.getFrame (  ) .equals ( e1.getFrame (  )  )  )  {^192^^^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[BugLab_Wrong_Literal]^return false;^195^^^^^185^196^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[BugLab_Wrong_Operator]^if  ( a1 != null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^return  ( a1 == null ) ;^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Operator]^return  ( a2 != null ) ;^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^if  ( a1 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Operator]^if  ( a2 != null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Literal]^return true;^212^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Literal]^return true;^215^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Argument_Swapping]^if  ( a2.getAngleStart (  )  != a1.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Operator]^if  ( a1.getAngleStart (  )  >= a2.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Literal]^return true;^218^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^if  ( a2.getAngleStart (  )  != a2.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^if  ( a1.getAngleStart (  )  != a1.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Argument_Swapping]^if  ( a2.getAngleExtent (  )  != a1.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Operator]^if  ( a1.getAngleExtent (  )  == a2.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Literal]^return true;^221^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^if  ( a2.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^if  ( a1.getAngleExtent (  )  != a1.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Argument_Swapping]^if  ( a2.getArcType (  )  != a1.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Operator]^if  ( a1.getArcType (  )  <= a2.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Literal]^return true;^224^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^if  ( a2.getArcType (  )  != a2.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Variable_Misuse]^if  ( a1.getArcType (  )  != a1.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Literal]^return false;^226^^^^^207^227^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[BugLab_Wrong_Operator]^if  ( p1 != null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Operator]^return  ( p2 != null ) ;^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Variable_Misuse]^return  ( p1 == null ) ;^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Variable_Misuse]^if  ( p1 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Operator]^if  ( p2 != null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Literal]^return true;^243^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Variable_Misuse]^if  ( p1.npoints != null )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( p2.npoints != p1.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( p2 != p1.npoints.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Operator]^if  ( p1.npoints == p2.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Literal]^return true;^246^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Variable_Misuse]^if  ( !Arrays.equals ( p2.xpoints, p2.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p2.xpoints, p1.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p2, p1.xpoints.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Literal]^return true;^249^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p2.xpoints.xpoints, p1 )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p1.xpoints, p2 )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Variable_Misuse]^if  ( !Arrays.equals ( p1.ypoints, 1 )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p2.ypoints.ypoints, p1 )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p2.ypoints, p1.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p2, p1.ypoints.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Literal]^return true;^252^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Variable_Misuse]^if  ( !Arrays.equals ( p2.ypoints, p2.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Variable_Misuse]^if  ( !Arrays.equals ( p1.ypoints, null )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p1.ypoints.ypoints, p2.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( p1.ypoints, p2 )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Literal]^return false;^254^^^^^238^255^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[BugLab_Wrong_Operator]^if  ( p1 != null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^return  ( p1 == null ) ;^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^return  ( p2 != null ) ;^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^if  ( p1 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^if  ( p2 != null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Literal]^return true;^271^^^^^256^286^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^if  ( p2.getWindingRule (  )  != p1.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^if  ( p1.getWindingRule (  )  >= p2.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Literal]^return true;^274^^^^^259^289^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^if  ( p2.getWindingRule (  )  != p2.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^if  ( p1.getWindingRule (  )  != p1.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^PathIterator iterator1 = p2.getPathIterator ( null ) ;^276^^^^^261^291^PathIterator iterator1 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^PathIterator iterator2 = p2.getPathIterator ( null ) ;^277^^^^^262^292^PathIterator iterator2 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Literal]^double[] d2 = new double[seg1];^279^^^^^264^294^double[] d2 = new double[6];^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^boolean done = iterator2.isDone (  )  && iterator2.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^boolean done = iterator1.isDone (  )  && iterator1.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^boolean done = iterator2.isDone (  )  && iterator1.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^boolean done = iterator1.isDone (  )  || iterator2.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^if  ( iterator2.isDone (  )  != iterator1.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^if  ( iterator1.isDone (  )  >= iterator2.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Literal]^return true;^283^^^^^268^298^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^if  ( seg2 != seg1 )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^if  ( seg1 <= seg2 )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Literal]^return true;^288^^^^^273^303^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^if  ( !Arrays.equals ( d2, d1 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Literal]^return true;^291^^^^^276^306^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^done = iterator2.isDone (  )  && iterator1.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^done = iterator1.isDone (  )  || iterator2.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^int seg1 = iterator2.currentSegment ( d1 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^int seg1 = iterator1.currentSegment ( d2 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^int seg1 = d1.currentSegment ( iterator1 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^int seg2 = iterator1.currentSegment ( d2 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^int seg2 = iterator2.currentSegment ( d1 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Argument_Swapping]^int seg2 = d2.currentSegment ( iterator2 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^if  ( iterator2.isDone (  )  != iterator2.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^if  ( iterator1.isDone (  )  != iterator1.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^done = iterator2.isDone (  )  && iterator2.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Variable_Misuse]^done = iterator1.isDone (  )  && iterator1.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^if  ( iterator1.isDone (  )  == iterator2.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Literal]^return false;^297^^^^^282^312^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[BugLab_Wrong_Operator]^if  ( shape != null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[BugLab_Variable_Misuse]^AffineTransform transform = AffineTransform.getTranslateInstance ( transY, transY ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[BugLab_Variable_Misuse]^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transX ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[BugLab_Argument_Swapping]^AffineTransform transform = AffineTransform.getTranslateInstance ( transY, transX ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[BugLab_Argument_Swapping]^return shape.createTransformedShape ( transform ) ;^317^^^^^309^318^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[BugLab_Wrong_Operator]^if  ( shape != null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Wrong_Operator]^if  ( anchor != null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Argument_Swapping]^Point2D shapePoint = RectangleAnchor.coordinates ( anchor.getBounds2D (  ) , anchor ) ;^342^343^^^^332^347^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  ) , anchor ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Variable_Misuse]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationY - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Variable_Misuse]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationX - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Argument_Swapping]^AffineTransform transform = AffineTransform.getTranslateInstance ( anchorPoint - locationX.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Argument_Swapping]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - locationY.getX (  ) , anchorPoint - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Wrong_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX  <=  anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Wrong_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY   instanceof   anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Argument_Swapping]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationY - anchorPoint.getX (  ) , locationX - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Wrong_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX  >  anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Wrong_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY  >  anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Argument_Swapping]^return shape.createTransformedShape ( transform ) ;^346^^^^^332^347^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[BugLab_Variable_Misuse]^if  ( result == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Wrong_Operator]^if  ( base != null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Variable_Misuse]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Variable_Misuse]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, x ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Argument_Swapping]^AffineTransform rotate = AffineTransform.getRotateInstance ( y, x, angle ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Argument_Swapping]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, x ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Variable_Misuse]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, SQRT2 ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Argument_Swapping]^AffineTransform rotate = AffineTransform.getRotateInstance ( x, angle, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Argument_Swapping]^Shape result = base.createTransformedShape ( rotate ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Variable_Misuse]^Shape result = rotate.createTransformedShape ( result ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Variable_Misuse]^return base;^367^^^^^360^368^return result;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[BugLab_Variable_Misuse]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Variable_Misuse]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, x ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Argument_Swapping]^AffineTransform rotate = AffineTransform.getRotateInstance ( y, x, angle ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Argument_Swapping]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, x ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Variable_Misuse]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, SQRT2, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Argument_Swapping]^AffineTransform rotate = AffineTransform.getRotateInstance ( x, angle, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Variable_Misuse]^g2.transform ( saved ) ;^384^^^^^379^388^g2.transform ( rotate ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Variable_Misuse]^g2.setTransform ( rotate ) ;^386^^^^^379^388^g2.setTransform ( saved ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[BugLab_Variable_Misuse]^p0.moveTo ( -y - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.moveTo ( -l - y, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.moveTo ( -l  !=  t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.moveTo ( -l - t, -l   instanceof   t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -y + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -l + y, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( -l + t,  & l  &  t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( 0.0f, -y * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( 0.0f, -t * y ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( 0.0f, -t + SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( l - y, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( t - l, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( l - t, -l  >>  t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( l - t,  ^ l  ^  t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( l + y, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( t + l, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( l + t, -l  ||  t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( l + t, -l  <  t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( t * y, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( SQRT2 * t, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo - ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( l + y, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( t + l, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( l + t, l  !=  t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( l - y, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( t - l, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( l  >  t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( l - t, l  ^  t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( 0.0f, y * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( 0.0f, t * y ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( 0.0f, SQRT2 * t ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( 0.0f, t - SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -l + t, x + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -l + y, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( -l + l, t + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( -l + t, l  <<  t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -l - t, y - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -l - y, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( -l - l, t - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( -l  ==  t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo ( -l - t, l  <  t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -y * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -t * y, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Wrong_Operator]^p0.lineTo - ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.moveTo ( -l, y ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -t, x ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -t, y ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( t, y ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( l, t ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( x, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( l, x ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Argument_Swapping]^p0.lineTo ( t, l ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( l, -y ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( t, -y ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -t, -y ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -t, -y ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -l, -y ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.moveTo ( 0.0f, -y ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( 0.0f, y ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.moveTo ( 0.0f, -y ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.moveTo ( 0.0f, x ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( y, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^p0.lineTo ( -s, -y ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[BugLab_Variable_Misuse]^if  (  ( y1 - x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^if  (  ( x2 - width )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^if  (  ( x2 - x1 )  == 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^if  (  ( x2  >  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^if  (  ( x2  |  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^if  (  ( x2  <  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^if  (  ( x2  ^  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^if  (  ( x2  &  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( y2 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - x / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - width / 2.0f, x2 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( width - x1 / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( y1 - width / 2.0f, x1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1  <=  width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1 - width * 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( y1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + y2 / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + width / 2.0f, width ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( width + x1 / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x1 + y1 / 2.0f, width ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x1 + width * 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( width + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + x1 / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + width / 2.0f, y1 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( y2 + width / 2.0f, x2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( width + x2 / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x2 + y2 / 2.0f, width ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 + width + 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - x1 / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( y2 - width / 2.0f, x2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x2 - y2 / 2.0f, width ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2  <<  width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 - width + 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y1 - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - x1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - y1 )  /  ( width - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^double theta = Math.atan (  ( x1 - y1 )  /  ( x2 - y2 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^double theta = Math.atan (  ( y2 - x1 )  /  ( x2 - y1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^double theta = Math.atan (  ( x2 - y1 )  /  ( y2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^double theta = Math.atan (  ( y2 - y1 )  +  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^double theta = Math.atan (  ( y2  <=  y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2  ||  x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^float dx =  ( float )  Math.sin ( theta )  * y1;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^float dx =  ( float )  Math.sin ( width )  * theta;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^float / dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^float dy =  ( float )  Math.cos ( width )  * theta;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^float + dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( x1 - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - y1 )  /  ( y - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x2 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^double theta = Math.atan (  ( y2 - x2 )  /  ( y1 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^double theta = Math.atan (  ( y2 - y1 )  /  ( x1 - x2 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^double theta = Math.atan (  ( y2 - y1 )  *  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^double theta = Math.atan (  ( y2   instanceof   y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2  ==  x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( y1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - x2, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - dx, x + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - dx, y1 + y ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( y1 - dx, x1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( x1 - y1, dx + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( x1 - dx, dy + y1 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( dy - dx, y1 + x1 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1  ^  dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1 - dx, y1  ^  dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + x, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + dx, y - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + dx, y1 - x2 ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( dy + dx, y1 - x1 ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x1 + y1, dx - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x1 + dx, y1  &  dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + x1, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + dx, y1 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + dx, y2 - x2 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( dy + dx, y2 - x2 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x2 + dy, y2 - dx ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x2 + dx, dy - y2 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 + dx, y2  ^  dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( y1 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - y, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - dx, x1 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - dx, y2 + y1 ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( dy - dx, y2 + x2 ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( dx - x2, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x2 - dx, dy + y2 ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2  >  dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 - dx, y2  <<  dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( width - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - y1 )  /  ( x - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^float dx =  ( float )  Math.sin ( theta )  * y2;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^float - dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^float - dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - width )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^double theta = Math.atan (  ( y2 - y1 )  /  ( y2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2  |  x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - x1, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - dx, y1 + x1 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( dx - x1, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( x1 - dy, y1 + dx ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1  >>  dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1 - dx, y1  <<  dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( y2 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + x2, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + dx, y2 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + dx, y1 - y2 ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( y1 + dx, x1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x1 + dx, y1  ||  dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + y2, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + dx, x1 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + dx, y2 - x1 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 + dx, y2  <  dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( y - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - dx, x2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - dx, y2 + x ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( y2 - dx, x2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x2 - y2, dx + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( x2 - dy, y2 + dx ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 - dx, y2  &&  dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - y / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.moveTo ( x1 - width / 2.0f, x ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.moveTo ( x1 - y1 / 2.0f, width ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1  <<  width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.moveTo ( x1 - width + 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( y2 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + x / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + width / 2.0f, x1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x1 + width - 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x1 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + x / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 + width / 2.0f, width ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 + width - 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( width - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - x / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^result.lineTo ( x2 - width / 2.0f, width ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Argument_Swapping]^result.lineTo ( width - x2 / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2   instanceof   width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Wrong_Operator]^result.lineTo ( x2 - width * 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[BugLab_Variable_Misuse]^x = Math.max ( area.getMinX (  ) , Math.min ( y, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[BugLab_Argument_Swapping]^x = Math.max ( x.getMinX (  ) , Math.min ( area, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[BugLab_Variable_Misuse]^y = Math.max ( area.getMinY (  ) , Math.min ( x, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[BugLab_Argument_Swapping]^y = Math.max ( y.getMinY (  ) , Math.min ( area, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[BugLab_Argument_Swapping]^return new Point2D.Double ( y, x ) ;^549^^^^^544^551^return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[BugLab_Variable_Misuse]^double x0 = rect2.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^double y0 = rect2.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^double x = rect1.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^double y = rect1.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^double w = rect1.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^double h = rect1.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  (  ( y >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  (  ( x >= y0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  (  ( x >= x0 )  &&  ( y0 >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  (  ( x >= x0 )  &&  ( y >= y ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + y0 )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect2.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  (  ( x0 >= x )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  (  ( x >= x0 )  &&  ( y0 >= y ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  (  ( x >= y0 )  &&  ( y >= x0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  (  ( x >= x0 )  &&  ( y >= w ) &&  (  ( x + y0 )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  (  ( rect1 >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + x.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  (  ( h >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + x )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  ||  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x > x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  &&  ( y == y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x  ^  w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0  >=  rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  ==  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y  >  h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0  >=  rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^&&  (  ( x + w )  <=  ( x0 + rect2.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^572^573^^^^562^575^&&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^&&  (  ( y + h )  <=  ( y0 + rect2.getHeight (  )  )  )  ) ;^573^^^^^562^575^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[BugLab_Variable_Misuse]^double x0 = rect2.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^double y0 = rect2.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^double x = rect1.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^double width = rect1.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^double y = rect1.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^double height = rect1.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  ( y0 + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  ( x + y >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  ( x + width >= x0 && y0 + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect2.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  ( y + width >= x0 && x + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  ( x + x0 >= width && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  ( x + width >= x0 && height + y >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  ( height + width >= x0 && y + x >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  ( x + width >= y0 && y + height >= x0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Argument_Swapping]^return  ( x + rect1 >= x0 && y + height >= y0 && x <= x0 + width.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width >= x0 || y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width > x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x  ^  width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width >= x0 && y + height > y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width >= x0 && y  &&  height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width >= x0 && y + height >= y0 && x > x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width >= x0 && y + height >= y0 && x <= x0  <  rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width >= x0 && y + height >= y0 && x < x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Wrong_Operator]^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0   instanceof   rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[BugLab_Variable_Misuse]^&& y <= y0 + rect2.getHeight (  )  ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
