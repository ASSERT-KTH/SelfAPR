[buglab_swap_variables]^else if  ( s2 instanceof Ellipse2D && s1 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[buglab_swap_variables]^return ObjectUtilities.equal ( s2, s1 ) ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[buglab_swap_variables]^return ObjectUtilities.equal (  s2 ) ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[buglab_swap_variables]^return ObjectUtilities.equal ( s1 ) ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[buglab_swap_variables]^else if  ( s2 instanceof GeneralPath && s1 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[buglab_swap_variables]^else if  ( s2 instanceof Polygon && s1 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[buglab_swap_variables]^else if  ( s2 instanceof Arc2D && s1 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[buglab_swap_variables]^if  ( a2.getAngleStart (  )  != a1.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[buglab_swap_variables]^if  ( a2.getAngleExtent (  )  != a1.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[buglab_swap_variables]^if  ( a2.getArcType (  )  != a1.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[buglab_swap_variables]^if  ( p1.npoints.npoints != p2.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( p2 != p1.npoints.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( p2.npoints != p1.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p2.xpoints, p1.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p1.xpoints.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals (  p2.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p1.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p2, p1.xpoints.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p2.ypoints, p1.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p1.ypoints.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals (  p2.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p1.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( !Arrays.equals ( p2.ypoints.ypoints, p1 )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[buglab_swap_variables]^if  ( p2.getWindingRule (  )  != p1.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^boolean done = iterator2.isDone (  )  && iterator1.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^if  ( iterator2.isDone (  )  != iterator1.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^if  ( seg2 != seg1 )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^if  ( !Arrays.equals ( d2, d1 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^if  ( !Arrays.equals (  d2 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^if  ( !Arrays.equals ( d1 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^done = iterator2.isDone (  )  && iterator1.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^int seg1 = d1.currentSegment ( iterator1 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^int seg2 = d2.currentSegment ( iterator2 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[buglab_swap_variables]^AffineTransform transform = AffineTransform.getTranslateInstance ( transY, transX ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[buglab_swap_variables]^AffineTransform transform = AffineTransform.getTranslateInstance (  transY ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[buglab_swap_variables]^AffineTransform transform = AffineTransform.getTranslateInstance ( transX ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[buglab_swap_variables]^return shape.createTransformedShape ( transform ) ;^317^^^^^309^318^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[buglab_swap_variables]^Point2D shapePoint = RectangleAnchor.coordinates ( anchor.getBounds2D (  ) , anchor ) ;^342^343^^^^332^347^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  ) , anchor ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[buglab_swap_variables]^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  )  ) ;^342^343^^^^332^347^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  ) , anchor ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[buglab_swap_variables]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationY - anchorPoint.getX (  ) , locationX - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[buglab_swap_variables]^AffineTransform transform = AffineTransform.getTranslateInstance ( anchorPoint - locationX.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[buglab_swap_variables]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - locationY.getX (  ) , anchorPoint - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[buglab_swap_variables]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  )  - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[buglab_swap_variables]^return shape.createTransformedShape ( transform ) ;^346^^^^^332^347^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( x, angle, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance (  x, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle,  y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, x ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( y, x, angle ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[buglab_swap_variables]^Shape result = base.createTransformedShape ( rotate ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( y, x, angle ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance (  x, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, x ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle,  y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[buglab_swap_variables]^AffineTransform rotate = AffineTransform.getRotateInstance ( x, angle, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[buglab_swap_variables]^p0.moveTo ( -l -  -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -l +  -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( t - l, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l -  -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( t + l, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l +  -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( SQRT2 * t, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( t *  0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( t + l, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l + t - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l +  l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( t - l, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l - t + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l -  l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( 0.0f, SQRT2 * t ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( 0.0f * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -l + l, t + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -l + t + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -l +  l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -l - l, t - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -l - t - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -l -  l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -t *  0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.moveTo ( - t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.moveTo ( -l ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( -t ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l, t ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( t ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( t, l ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( l ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( 0.0f ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.moveTo ( 0.0f ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo (  -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^p0.lineTo ( - -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[buglab_swap_variables]^result.moveTo ( y1 - width / 2.0f, x1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( x1 - y1 / 2.0f, width ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( x1 - width / 2.0f ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( y1 + width / 2.0f, x1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( width + x1 / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x1 + y1 / 2.0f, width ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x1 + width / 2.0f ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( width + x2 / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 + y2 / 2.0f, width ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 + width / 2.0f ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( y2 - width / 2.0f, x2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 - width / 2.0f ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^double theta = Math.atan (  ( x2 - y1 )  /  ( y2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^double theta = Math.atan (  ( y2 - x1 )  /  ( x2 - y1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^double theta = Math.atan (  ( y2 - x2 )  /  ( y1 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^double theta = Math.atan (  ( y2 - y1 )  /  ( x1 - x2 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^float dx =  ( float )  Math.sin ( width )  * theta;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^float dy =  ( float )  Math.cos ( width )  * theta;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^double theta = Math.atan (  ( y1 - y2 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( y1 - dx, x1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( x1 - y1, dx + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( x1 -  y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( x1 - dx + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( x1 - dx, dy + y1 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( dy + dx, y1 - x1 ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x1 + y1, dx - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x1 +  y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( y1 + dx, x1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x1 + dx - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( y2 + dx, x2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 +  y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 + dx - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 + dy, y2 - dx ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( y2 - dx, x2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( dx - x2, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 -  y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 - dx + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 - dy, y2 + dx ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^double theta = Math.atan (  ( x1 - y1 )  /  ( x2 - y2 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( dy - dx, y1 + x1 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x1 + dy, y1 - dx ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( dy + dx, y2 - x2 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 - y2, dx + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( dy - dx, y2 + x2 ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.moveTo ( width - x1 / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( y2 + width / 2.0f, x2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( width - x2 / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^result.lineTo ( x2 - y2 / 2.0f, width ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[buglab_swap_variables]^x = Math.max ( x.getMinX (  ) , Math.min ( area, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^x = Math.max ( area.getMinX (  ) , Math.min ( x.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^x = Math.max ( area.getMinX (  ) , Math.min (  area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^y = Math.max ( y.getMinY (  ) , Math.min ( area, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^y = Math.max ( area.getMinY (  ) , Math.min ( y.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^y = Math.max ( area.getMinY (  ) , Math.min (  area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^return new Point2D.Double ( y, x ) ;^549^^^^^544^551^return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^return new Point2D.Double (  y ) ;^549^^^^^544^551^return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^return new Point2D.Double ( x ) ;^549^^^^^544^551^return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[buglab_swap_variables]^return  (  ( x0 >= x )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[buglab_swap_variables]^return  (  ( x >= h )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + x0 )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[buglab_swap_variables]^return  (  ( y >= x0 )  &&  ( x >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[buglab_swap_variables]^return  (  ( y0 >= x0 )  &&  ( y >= x ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[buglab_swap_variables]^return  (  ( w >= x0 )  &&  ( y >= y0 ) &&  (  ( x + x )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[buglab_swap_variables]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + rect1 )  <=  ( x0 + w.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[buglab_swap_variables]^return  ( y0 + width >= x0 && y + height >= x && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[buglab_swap_variables]^return  ( x + height >= x0 && y + width >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[buglab_swap_variables]^return  ( x + width >= y && x0 + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[buglab_swap_variables]^return  ( x + width >= x0 && y0 + height >= y && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[buglab_swap_variables]^return  ( height + width >= x0 && y + x >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[buglab_swap_variables]^return  ( x + width >= x0 && y + y0 >= height && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[buglab_swap_variables]^return  ( x + width >= x0 && y + height >= rect1 && x <= x0 + y0.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
