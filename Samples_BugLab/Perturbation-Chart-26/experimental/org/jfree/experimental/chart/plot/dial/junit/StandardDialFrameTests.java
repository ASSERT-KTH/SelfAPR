[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^51^52^^^^36^66^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^54^55^^^^39^69^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^59^60^^^^44^74^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^62^63^^^^47^77^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^80^^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[buglab_swap_variables]^assertEquals ( h2, h1 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[buglab_swap_variables]^assertEquals (  h2 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[buglab_swap_variables]^assertEquals ( h1 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[buglab_swap_variables]^assertTrue ( f2 != f1 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( f2.getClass (  )  == f1.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[buglab_swap_variables]^assertEquals ( f2, f1 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[buglab_swap_variables]^assertEquals (  f2 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[buglab_swap_variables]^assertEquals ( f1 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
