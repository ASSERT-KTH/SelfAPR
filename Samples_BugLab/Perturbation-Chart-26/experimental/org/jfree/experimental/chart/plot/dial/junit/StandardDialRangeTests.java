[buglab_swap_variables]^assertTrue ( r2.equals ( r1 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertFalse ( r2.equals ( r1 )  ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertTrue ( r2.equals ( r1 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertFalse ( r2.equals ( r1 )  ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertTrue ( r2.equals ( r1 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertFalse ( r2.equals ( r1 )  ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertTrue ( r2.equals ( r1 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^r1.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.blue )  ) ;^110^111^^^^95^125^r1.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertFalse ( r2.equals ( r1 )  ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^r2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.blue )  ) ;^113^114^^^^98^128^r2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertTrue ( r2.equals ( r1 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[buglab_swap_variables]^assertTrue ( r2.equals ( r1 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[buglab_swap_variables]^assertEquals ( h2, h1 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[buglab_swap_variables]^assertEquals (  h2 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[buglab_swap_variables]^assertEquals ( h1 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[buglab_swap_variables]^assertTrue ( r2 != r1 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( r2.getClass (  )  == r1.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( r2.equals ( r1 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[buglab_swap_variables]^assertEquals ( r2, r1 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[buglab_swap_variables]^assertEquals (  r2 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[buglab_swap_variables]^assertEquals ( r1 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
