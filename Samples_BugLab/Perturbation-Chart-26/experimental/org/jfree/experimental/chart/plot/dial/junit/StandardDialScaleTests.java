[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^134^135^^^^119^149^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^137^138^^^^122^152^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^s1.setTickLabelFont ( new Font ( "Dialog", Font. 15 )  ) ;^166^^^^^151^181^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^s2.setTickLabelFont ( new Font ( "Dialog", Font. 15 )  ) ;^168^^^^^153^183^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^172^173^^^^157^187^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertFalse ( s2.equals ( s1 )  ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^175^176^^^^160^190^s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals ( h2, h1 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals (  h2 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals ( h1 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertTrue ( s2 != s1 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( s2.getClass (  )  == s1.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[buglab_swap_variables]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.white )  ) ;^213^214^^^^196^226^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( s2 != s1 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( s2.getClass (  )  == s1.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( s2.equals ( s1 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertEquals ( s2, s1 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals (  s2 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals ( s1 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[buglab_swap_variables]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.white )  ) ;^256^257^^^^241^271^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals ( s2, s1 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals (  s2 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[buglab_swap_variables]^assertEquals ( s1 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
