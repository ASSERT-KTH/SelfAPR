[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^90^^^^^75^105^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^94^^^^^79^109^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^96^^^^^81^111^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^99^100^^^^84^114^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^101^^^^^86^116^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^102^103^^^^87^117^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^104^^^^^89^119^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^107^108^^^^92^122^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^109^^^^^94^124^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^110^111^^^^95^125^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^112^^^^^97^127^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertFalse ( f2.equals ( f1 )  ) ;^116^^^^^101^131^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^118^^^^^103^133^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^127^^^^^124^131^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  int  h1  h2  
[buglab_swap_variables]^assertEquals ( h2, h1 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  int  h1  h2  
[buglab_swap_variables]^assertEquals (  h2 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  int  h1  h2  
[buglab_swap_variables]^assertEquals ( h1 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  int  h1  h2  
[buglab_swap_variables]^assertTrue ( f2 != f1 ) ;^145^^^^^136^148^assertTrue ( f1 != f2 ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( f2.getClass (  )  == f1.getClass (  )  ) ;^146^^^^^136^148^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertTrue ( f2.equals ( f1 )  ) ;^147^^^^^136^148^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  CloneNotSupportedException  e  
[buglab_swap_variables]^assertEquals ( f2, f1 ) ;^172^^^^^154^173^assertEquals ( f1, f2 ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  SimpleDialFrame  f1  f2  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[buglab_swap_variables]^assertEquals (  f2 ) ;^172^^^^^154^173^assertEquals ( f1, f2 ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  SimpleDialFrame  f1  f2  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[buglab_swap_variables]^assertEquals ( f1 ) ;^172^^^^^154^173^assertEquals ( f1, f2 ) ;^[CLASS] SimpleDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  SimpleDialFrame  f1  f2  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
