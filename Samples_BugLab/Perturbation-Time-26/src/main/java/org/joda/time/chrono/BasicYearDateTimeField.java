[buglab_swap_variables]^return instant.getYear ( iChronology ) ;^54^^^^^53^55^return iChronology.getYear ( instant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] get [RETURN_TYPE] int   long instant [VARIABLES] long  instant  serialVersionUID  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^int newYear = FieldUtils.safeAdd ( years, thisYear ) ;^62^^^^^57^64^int newYear = FieldUtils.safeAdd ( thisYear, years ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  BasicChronology  chronology  iChronology  int  newYear  thisYear  years  
[buglab_swap_variables]^int newYear = FieldUtils.safeAdd (  years ) ;^62^^^^^57^64^int newYear = FieldUtils.safeAdd ( thisYear, years ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  BasicChronology  chronology  iChronology  int  newYear  thisYear  years  
[buglab_swap_variables]^int newYear = FieldUtils.safeAdd ( thisYear ) ;^62^^^^^57^64^int newYear = FieldUtils.safeAdd ( thisYear, years ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  BasicChronology  chronology  iChronology  int  newYear  thisYear  years  
[buglab_swap_variables]^return set ( newYear, instant ) ;^63^^^^^57^64^return set ( instant, newYear ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  BasicChronology  chronology  iChronology  int  newYear  thisYear  years  
[buglab_swap_variables]^return set (  newYear ) ;^63^^^^^57^64^return set ( instant, newYear ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  BasicChronology  chronology  iChronology  int  newYear  thisYear  years  
[buglab_swap_variables]^return set ( instant ) ;^63^^^^^57^64^return set ( instant, newYear ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  BasicChronology  chronology  iChronology  int  newYear  thisYear  years  
[buglab_swap_variables]^return add ( years, FieldUtils.safeToInt ( instant )  ) ;^67^^^^^66^68^return add ( instant, FieldUtils.safeToInt ( years )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant long years [VARIABLES] long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return add (  FieldUtils.safeToInt ( years )  ) ;^67^^^^^66^68^return add ( instant, FieldUtils.safeToInt ( years )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] add [RETURN_TYPE] long   long instant long years [VARIABLES] long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^int thisYear = instant.getYear ( iChronology ) ;^75^^^^^70^79^int thisYear = iChronology.getYear ( instant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^int wrappedYear = FieldUtils.getWrappedValue ( years, thisYear, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^76^77^^^^70^79^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, years, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^int wrappedYear = FieldUtils.getWrappedValue (  years, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^76^77^^^^70^79^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, years, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^int wrappedYear = FieldUtils.getWrappedValue ( thisYear,  iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^76^77^^^^70^79^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, years, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, iChronology, years.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^76^77^^^^70^79^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, years, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, years.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^76^77^^^^70^79^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, years, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^int wrappedYear = FieldUtils.getWrappedValue ( iChronology, years, thisYear.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^76^77^^^^70^79^int wrappedYear = FieldUtils.getWrappedValue ( thisYear, years, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^return set ( wrappedYear, instant ) ;^78^^^^^70^79^return set ( instant, wrappedYear ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^return set (  wrappedYear ) ;^78^^^^^70^79^return set ( instant, wrappedYear ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^return set ( instant ) ;^78^^^^^70^79^return set ( instant, wrappedYear ) ;^[CLASS] BasicYearDateTimeField  [METHOD] addWrapField [RETURN_TYPE] long   long instant int years [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  thisYear  wrappedYear  years  
[buglab_swap_variables]^FieldUtils.verifyValueBounds ( this, iChronology, year.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^82^83^^^^81^85^FieldUtils.verifyValueBounds ( this, year, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^FieldUtils.verifyValueBounds ( this,  iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^82^83^^^^81^85^FieldUtils.verifyValueBounds ( this, year, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^FieldUtils.verifyValueBounds ( this, year.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^82^83^^^^81^85^FieldUtils.verifyValueBounds ( this, year, iChronology.getMinYear (  ) , iChronology.getMaxYear (  )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^return instant.setYear ( iChronology, year ) ;^84^^^^^81^85^return iChronology.setYear ( instant, year ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^return iChronology.setYear (  year ) ;^84^^^^^81^85^return iChronology.setYear ( instant, year ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^return iChronology.setYear ( year, instant ) ;^84^^^^^81^85^return iChronology.setYear ( instant, year ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^return iChronology.setYear ( instant ) ;^84^^^^^81^85^return iChronology.setYear ( instant, year ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^return year.setYear ( instant, iChronology ) ;^84^^^^^81^85^return iChronology.setYear ( instant, year ) ;^[CLASS] BasicYearDateTimeField  [METHOD] set [RETURN_TYPE] long   long instant int year [VARIABLES] boolean  long  instant  serialVersionUID  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^if  ( subtrahendInstant < minuendInstant )  {^88^^^^^87^92^if  ( minuendInstant < subtrahendInstant )  {^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return -iChronology.getYearDifference (  minuendInstant ) ;^89^^^^^87^92^return -iChronology.getYearDifference ( subtrahendInstant, minuendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return -iChronology.getYearDifference ( minuendInstant, subtrahendInstant ) ;^89^^^^^87^92^return -iChronology.getYearDifference ( subtrahendInstant, minuendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return -iChronology.getYearDifference ( subtrahendInstant ) ;^89^^^^^87^92^return -iChronology.getYearDifference ( subtrahendInstant, minuendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return iChronology.getYearDifference ( subtrahendInstant, minuendInstant ) ;^91^^^^^87^92^return iChronology.getYearDifference ( minuendInstant, subtrahendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return iChronology.getYearDifference (  subtrahendInstant ) ;^91^^^^^87^92^return iChronology.getYearDifference ( minuendInstant, subtrahendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return iChronology.getYearDifference ( minuendInstant ) ;^91^^^^^87^92^return iChronology.getYearDifference ( minuendInstant, subtrahendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return subtrahendInstant.getYearDifference ( minuendInstant, iChronology ) ;^91^^^^^87^92^return iChronology.getYearDifference ( minuendInstant, subtrahendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return minuendInstant.getYearDifference ( iChronology, subtrahendInstant ) ;^91^^^^^87^92^return iChronology.getYearDifference ( minuendInstant, subtrahendInstant ) ;^[CLASS] BasicYearDateTimeField  [METHOD] getDifferenceAsLong [RETURN_TYPE] long   long minuendInstant long subtrahendInstant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return instant.isLeapYear ( get ( iChronology )  ) ;^99^^^^^98^100^return iChronology.isLeapYear ( get ( instant )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] isLeap [RETURN_TYPE] boolean   long instant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^if  ( instant.isLeapYear ( get ( iChronology )  )  )  {^103^^^^^102^108^if  ( iChronology.isLeapYear ( get ( instant )  )  )  {^[CLASS] BasicYearDateTimeField  [METHOD] getLeapAmount [RETURN_TYPE] int   long instant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^return instant.getYearMillis ( get ( iChronology )  ) ;^123^^^^^122^124^return iChronology.getYearMillis ( get ( instant )  ) ;^[CLASS] BasicYearDateTimeField  [METHOD] roundFloor [RETURN_TYPE] long   long instant [VARIABLES] long  instant  minuendInstant  serialVersionUID  subtrahendInstant  years  BasicChronology  chronology  iChronology  boolean  
[buglab_swap_variables]^long iChronologyStartMillis = year.getYearMillis ( year ) ;^128^^^^^126^134^long yearStartMillis = iChronology.getYearMillis ( year ) ;^[CLASS] BasicYearDateTimeField  [METHOD] roundCeiling [RETURN_TYPE] long   long instant [VARIABLES] boolean  long  instant  minuendInstant  serialVersionUID  subtrahendInstant  yearStartMillis  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^if  ( yearStartMillis != instant )  {^129^^^^^126^134^if  ( instant != yearStartMillis )  {^[CLASS] BasicYearDateTimeField  [METHOD] roundCeiling [RETURN_TYPE] long   long instant [VARIABLES] boolean  long  instant  minuendInstant  serialVersionUID  subtrahendInstant  yearStartMillis  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^if  ( instant != year )  {^129^^^^^126^134^if  ( instant != yearStartMillis )  {^[CLASS] BasicYearDateTimeField  [METHOD] roundCeiling [RETURN_TYPE] long   long instant [VARIABLES] boolean  long  instant  minuendInstant  serialVersionUID  subtrahendInstant  yearStartMillis  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^if  ( instant != yearStartMillisStartMillis )  {^129^^^^^126^134^if  ( instant != yearStartMillis )  {^[CLASS] BasicYearDateTimeField  [METHOD] roundCeiling [RETURN_TYPE] long   long instant [VARIABLES] boolean  long  instant  minuendInstant  serialVersionUID  subtrahendInstant  yearStartMillis  years  BasicChronology  chronology  iChronology  int  year  
[buglab_swap_variables]^instant = year.getYearMillis ( iChronology + 1 ) ;^131^^^^^126^134^instant = iChronology.getYearMillis ( year + 1 ) ;^[CLASS] BasicYearDateTimeField  [METHOD] roundCeiling [RETURN_TYPE] long   long instant [VARIABLES] boolean  long  instant  minuendInstant  serialVersionUID  subtrahendInstant  yearStartMillis  years  BasicChronology  chronology  iChronology  int  year  
