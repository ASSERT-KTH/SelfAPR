[BugLab_Wrong_Operator]^if  ( chrono == null )  {^68^^^^^67^80^if  ( chrono != null )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[BugLab_Argument_Swapping]^return getChronology ( zone, cal ) ;^79^^^^^67^80^return getChronology ( cal, zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[BugLab_Wrong_Operator]^} else if  ( object  ||  GregorianCalendar )  {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Variable_Misuse]^if  ( cutover == Long.cutover )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Operator]^if  ( cutover != Long.MIN_VALUE )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Operator]^} else if  ( cutover > Long.MAX_VALUE )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Argument_Swapping]^return GJChronology.getInstance ( cutover, zone, 4 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Literal]^return GJChronology.getInstance ( zone, cutover, 3 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Literal]^return GJChronology.getInstance ( zone, cutover, 5 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Operator]^} else if  ( cutover != Long.MAX_VALUE )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Literal]^return GJChronology.getInstance ( zone, cutover,  ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Operator]^} else if  ( object  &&  GregorianCalendar )  {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Operator]^if  ( cutover < Long.MIN_VALUE )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Operator]^} else if  ( cutover >= Long.MAX_VALUE )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Operator]^if  ( cutover >= Long.MIN_VALUE )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Variable_Misuse]^} else if  ( cutover == Long.cutover )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[BugLab_Wrong_Literal]^return GJChronology.getInstance ( zone, cutover, null ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
