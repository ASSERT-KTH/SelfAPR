[BugLab_Wrong_Operator]^if  ( value == 0 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 1 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size != Integer.MIN_VALUE )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( value != Integer.value )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= Integer.MIN_VALUE )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 10; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= 10; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^size = -value;^53^^^^^38^68^value = -value;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 10; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size < 10; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > 9; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value >= Integer.MIN_VALUE )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > ; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= 10; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size < 10 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= 10 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value > 10 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < value )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < size0 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 0 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^} else if  ( size < 100 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 100 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value == 100 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < d00 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < digits00 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size < 1000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= 1000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < size000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^} else if  ( size < 10000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 10000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < value )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Argument_Swapping]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  &  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_value0 )  + value;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  >=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = ;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value > 10000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < d )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 0000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 3;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; size > value; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Argument_Swapping]^for  ( ; digits > size; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size == digits; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = value;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ||  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^buf.append ( Integer.toString ( size )  ) ;^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= 2; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > 3; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^int d =  (  ( size + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )    instanceof   27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  ==  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + d )  * d342d772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  *  )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> d;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )   ( value + '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d  >  '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )   ( size -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )   ( value -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Argument_Swapping]^buf.append (  ( char )   ( d -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  >>  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  <<   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  >>   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d  &  3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  ==  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 0 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size < 1000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value > 1000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= 1000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 1001 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < size000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^} else if  ( size < 10000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 10000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Argument_Swapping]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  |  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_value0 )  + value;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 3;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Argument_Swapping]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_value0 )  + value;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 2;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < size )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < size0000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  &&  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_d0 )  + d;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 2; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size == 2; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > digits; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; size > value; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Argument_Swapping]^for  ( ; digits > size; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size == digits; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = size;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =   instanceof   ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int + d =  (  ( value + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  <=  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + size )  * size342size772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * size )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> size;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d  |  '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  |  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  <=   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  >   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d  <=  3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  &  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << size )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^buf.append ( Integer.toString ( size )  ) ;^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 1; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size == 1; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > size; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )  ( size + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ==  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value > 100 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < size )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 000 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 200 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 999 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 00000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  <=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = size;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = ;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  |  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 2;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < size0000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_d0 )  + d;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = d;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > digits; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= digits; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = d;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 5;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_0 )  + ;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size < 2; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > 1; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   &&  27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int / d =  (  ( value + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  ||  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + value )  * value342value772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * value )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 26;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d  <=  '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )   ( value -  ( size << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  ==   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d   instanceof   3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  >>  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << value )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << d )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value == 1000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value <  )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  >=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 5;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = d;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 4;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < digits )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  <<  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size < 1; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > 0; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ^  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   ||  27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  >>  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> digits;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  <=  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d   instanceof   '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (   instanceof   ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  >=   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  |   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  <  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << value )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size == value )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( intValue <= value )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^} else if  ( intValue <= 19 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^} else if  ( size < 19 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= digits )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <=  )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value <= 0 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value == Long.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size < 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^for  ( ; intValue > 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size >= 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > 18; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^if  ( value != Long.value )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value <= Long.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > 20; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^for  ( ; intValue > digits; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^for  ( ; size > intValue; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^for  ( ; digits > size; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size >= digits; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^int digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  |  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value > 0 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^if  ( value < -1 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value >= Long.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > intValue; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  !=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_size0 )  + size;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^appendPaddedInteger ( buf, size, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^appendPaddedInteger ( buf, intValue, digits ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^appendPaddedInteger ( intValue, buf, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^appendPaddedInteger ( size, intValue, buf ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= 20 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= 18 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= intValue9 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > size; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > digits; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  ||  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^if  ( value < size )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size == 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size == digits; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^appendPaddedInteger ( buf, digits, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^appendPaddedInteger ( buf, size, intValue ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^if  ( digits < 0 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= 0 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size != Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( value != Integer.size )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 10; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= 10; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > 9; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^size = -value;^147^^^^^132^162^value = -value;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 10; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= 10; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > size; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( value != Integer.value )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value > Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > 11; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > d; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size < 10 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value > 10 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= 10 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value == 10 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 9 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < digits0 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < size0 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^} else if  ( size < 100 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 100 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value > 100 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 101 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 000 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < value00 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 200 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size < 1000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= 1000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < size )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^} else if  ( size < 10000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value > 10000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 9999 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < value0000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Argument_Swapping]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = ;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = digits;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value == 10000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < value )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < size0000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  >=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > digits; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; size > value; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Argument_Swapping]^for  ( ; digits > size; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= digits; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  |  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^out.write ( Integer.toString ( size )  ) ;^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size < 2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^int d =  (  ( size + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )    instanceof   27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int + d =  (  ( value + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  ^  1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + value )  * value342value772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * d )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> digits;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^out.write ( value + '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( d  <=  '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^out.write ( size -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Argument_Swapping]^out.write ( d -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  <<  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  >=   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  <   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d  ^  3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d << 3 )  -  ( d  >>  1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << 3 )  -  ( d << d )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size < 1000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^if  ( value <= 1000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 1001 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < digits000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^} else if  ( size < 10000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 10000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < digits )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Argument_Swapping]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ^  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = size;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Argument_Swapping]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  &  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = digits;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value == 10000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 9999 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < size0000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  >  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = digits;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= 2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > size; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > digits; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; size > value; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Argument_Swapping]^for  ( ; digits > size; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= digits; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 4;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ||  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   !=  27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value   instanceof   1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value  )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( d  >>  '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^out.write ( value -  ( size << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  >>  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  ||   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  >   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d  ==  3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << d )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << 3 )  -  ( d << size )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^out.write ( Integer.toString ( size )  ) ;^184^^^^^169^199^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^for  ( ; value > 1; size-- )  {^157^^^^^142^172^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size == 1; size-- )  {^157^^^^^142^172^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^out.write ( size + '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  &  '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value == 100 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < size00 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 00 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 999 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < value000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 10000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  <=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = value;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =   instanceof   ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_size0 )  + size;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 20000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ||  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_value0 )  + value;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size == digits; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = size;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 5;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ==  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int / d =  (  ( value + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  &&  1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 28;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( d  <  '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  >  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  >>   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  &&   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d  >>  3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d << 3 )  -  ( d  !=  1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << 2 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 999 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^if  ( value < 2000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < digits0000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_value0 )  + value;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = ;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  &&  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = d;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^} else if  ( value < 20000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_d0 )  + d;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = d;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^for  ( ; size >= 1; size-- )  {^157^^^^^142^172^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^for  ( ; size > 3; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^digits = 2;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   <=  27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  ==  1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421771 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( d  &&  '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  &&  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value  <<   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d  >=  3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d << 3 )  -  ( d   instanceof   1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << 3 )  -  ( d << digits )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[BugLab_Variable_Misuse]^if  ( size == value )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( intValue <= value )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^} else if  ( intValue <= 19 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^} else if  ( size < 19 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= 20 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= size9 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value > 0 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^if  ( value < -1 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value == Long.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^for  ( ; intValue > 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size >= 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > digits; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > 20; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^if  ( value != Long.value )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > ; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > intValue; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^for  ( ; intValue > digits; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^for  ( ; digits > size; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size >= digits; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^int digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_size0 )  + size;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value <= 0 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value <= Long.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > 18; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size == 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value < Long.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size < 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  <=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_intValue0 )  + intValue;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^writePaddedInteger ( out, digits, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^writePaddedInteger ( out, intValue, digits ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^writePaddedInteger ( intValue, out, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Argument_Swapping]^writePaddedInteger ( out, size, intValue ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= 18 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^} else if  ( size <= digits9 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^if  ( value == 0 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^if  ( value < intValue )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^for  ( ; size > size; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^for  ( ; size > intValue; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  &  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^for  ( ; size == digits; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Operator]^int digits =  |  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Wrong_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[BugLab_Variable_Misuse]^if  ( d < 0 )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^if  ( value > 0 )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^if  ( value < d )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^if  ( d != Integer.MIN_VALUE )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^if  ( value != Integer.value )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^if  ( value <= Integer.MIN_VALUE )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^d = -value;^239^^^^^235^258^value = -value;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^if  ( value != Integer.d )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^if  ( value == Integer.MIN_VALUE )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^if  ( value <= 10 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^if  ( value < d0 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 100 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^} else if  ( value < d00 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^} else if  ( value < 000 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^buf.append ( Integer.toString ( d )  ) ;^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )    instanceof   27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int + d =  (  ( value + 1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  ==  1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value  )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )   ( value + '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d  <  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Argument_Swapping]^buf.append (  ( char )   ( d -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ==  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  &   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  &&   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d  <  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  >=  1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d <<  )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int / d =  (  ( value + 1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  >>  1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + value )  * value342value772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * d )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> value;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d  |  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  &  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  !=   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  >   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d  &&  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  >>  1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << value )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )  ( d + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  &&  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^} else if  ( value < value )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^} else if  ( value < value00 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   ==  27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  >=  1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d  &  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  <<  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  <<   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d  ||  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  !=  1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   >  27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  <=  1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  >>  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( d  !=  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Variable_Misuse]^buf.append (  ( char )   ( value -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  !=  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value  ||   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Operator]^buf.append (  ( char )   ( value -  ( d  &  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << d )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Wrong_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 2 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[BugLab_Argument_Swapping]^if  ( value == intValue )  {^270^^^^^268^275^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[BugLab_Wrong_Operator]^if  ( intValue != value )  {^270^^^^^268^275^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[BugLab_Argument_Swapping]^appendUnpaddedInteger ( intValue, buf ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[BugLab_Variable_Misuse]^if  ( d < 0 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^if  ( value <= 0 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^if  ( value < 1 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Variable_Misuse]^if  ( value != Integer.d )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^if  ( value == Integer.MIN_VALUE )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Variable_Misuse]^d = -value;^291^^^^^285^310^value = -value;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Variable_Misuse]^if  ( d != Integer.MIN_VALUE )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^if  ( value > 10 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^if  ( value <= 10 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^if  ( value < value )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^if  ( value < d0 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^} else if  ( value <= 100 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Variable_Misuse]^out.write ( Integer.toString ( d )  ) ;^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   ||  27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int + d =  (  ( value + 1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  &  1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value  )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * d )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> value;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Variable_Misuse]^out.write ( value + '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( d  ||  '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Argument_Swapping]^out.write ( d -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  <<  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value  ==   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value  >>   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d  &  3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d << 3 )  -  ( d  &  1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << 4 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << 3 )  -  ( d << 2 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   <<  27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  ==  1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * value )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> d;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( d  |  '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ||  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d   instanceof   3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d << 3 )  -  ( d   instanceof   1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << value )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value  ^  '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^} else if  ( value < 99 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^} else if  ( value < value00 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int / d =  (  ( value + 1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  >>  1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( d  <<  '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ^  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value  &   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d  ^  3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d << 3 )  -  ( d  !=  1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value + 1 )  * 13421772 )   <  27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^int d =  (  ( value  ^  1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^int d =  (  ( value + 1 )  *  )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Variable_Misuse]^out.write ( d + '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value   instanceof   '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( d  >  '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Variable_Misuse]^out.write ( d -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value  >=   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value  &&   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d  >>  3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Operator]^out.write ( value -  ( d << 3 )  -  ( d  >  1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Wrong_Literal]^out.write ( value -  ( d << 3 )  -  ( d << 0 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[BugLab_Argument_Swapping]^if  ( value == intValue )  {^324^^^^^320^329^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[BugLab_Wrong_Operator]^if  ( intValue <= value )  {^324^^^^^320^329^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[BugLab_Argument_Swapping]^writeUnpaddedInteger ( intValue, out ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[BugLab_Wrong_Operator]^if  ( value <= 0 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^if  ( value < 1 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^if  ( value <= Long.MIN_VALUE )  {^337^^^^^335^349^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return 21;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return calculateDigitCount ( -value )  ||  + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return calculateDigitCount ( -value )  ;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return calculateDigitCount ( -value )   instanceof   + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^if  ( value == Long.MIN_VALUE )  {^337^^^^^335^349^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return 0;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return calculateDigitCount ( -value )  <<  + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return calculateDigitCount ( -value )  ==  + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return ( value == 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return ( value < 10 ? 1 : ( value <= 100 ? 2 : ( value < 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value <= 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Operator]^return ( value <= 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return ( value < 9 ? 1 : ( value < 90 ? 2 : ( value < 900 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return ( value < 10 ? 1 : ( value < 101 ? 2 : ( value < 1010 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return ( value < 10 ? 1 : ( value < 100 ? 3 : ( value < 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 2 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Wrong_Literal]^return ( value < 20 ? 2 : ( value < 200 ? 2 : ( value < 2000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[BugLab_Argument_Swapping]^int value = position.charAt ( text )  - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^int value = text.charAt ( position )   &&  '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Variable_Misuse]^int value = text.charAt ( value )  - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Variable_Misuse]^return  (  ( position << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Variable_Misuse]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( value + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Argument_Swapping]^return  (  ( position << 3 )  +  ( value << 1 )  )  + text.charAt ( value + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Argument_Swapping]^return  (  ( value << 3 )  +  ( value << 1 )  )  + position.charAt ( text + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )   ^  '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^return  >=  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^return  <  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^return  (  ( value  >>  3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^return  (  ( value << 3 )  +  ( value  >=  1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position  ==  1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Literal]^return  (  ( value << 2 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Literal]^return  (  ( value << 3 )  +  ( value << position )  )  + text.charAt ( position + position )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Literal]^return  (  ( value << 3 )  +  ( value << value )  )  + text.charAt ( position + value )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Operator]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position  !=  1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Literal]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position  )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[BugLab_Wrong_Literal]^int sampleLen = errorPos ;^357^^^^^356^375^int sampleLen = errorPos + 32;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^if  ( sampleText.length (  )  <= sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^if  ( text.length (  )  <= errorPos + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Argument_Swapping]^if  ( sampleLen.length (  )  <= text + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^if  ( text.length (  )  == sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^if  ( text.length (  )  <= sampleLen  <=  3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Literal]^if  ( text.length (  )  <= sampleLen  )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^sampleText = sampleText.substring ( 0, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^sampleText = text.substring ( 0, errorPos ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Argument_Swapping]^sampleText = sampleLen.substring ( 0, text ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Literal]^sampleText = text.substring ( 1, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^sampleText = sampleText;^360^^^^^356^375^sampleText = text;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Literal]^sampleText = text.substring ( -1, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^if  ( sampleLen <= 0 )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^if  ( errorPos < 0 )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Literal]^if  ( errorPos <= sampleLen )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^return "Invalid format: \"" + text + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \""  &&  sampleText + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \""  ^  sampleText + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^if  ( sampleLen >= text.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Argument_Swapping]^if  ( text >= errorPos.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^if  ( errorPos == text.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^return "Invalid format: \"" + text + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \""  >  sampleText + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \""  >>  sampleText + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^if  ( errorPos >= sampleText.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^return "Invalid format: \"" + text + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( sampleLen )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Argument_Swapping]^return "Invalid format: \"" + errorPos + "\" is malformed at \"" + sampleText.substring ( sampleText )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  >>  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  ||  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \""  <  sampleText  <  "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Wrong_Operator]^return "Invalid format: \""  ==  sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[BugLab_Variable_Misuse]^sampleText.substring ( sampleLen )  + '"';^374^^^^^356^375^sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
