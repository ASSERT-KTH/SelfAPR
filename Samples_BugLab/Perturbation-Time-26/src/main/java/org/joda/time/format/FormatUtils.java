[buglab_swap_variables]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[buglab_swap_variables]^for  ( ; digits > size; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[buglab_swap_variables]^buf.append (  ( char )   ( d -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[buglab_swap_variables]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[buglab_swap_variables]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[buglab_swap_variables]^for  ( ; digits > size; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[buglab_swap_variables]^for  ( ; digits > size; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^int digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^appendPaddedInteger ( size, intValue, buf ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^appendPaddedInteger (  intValue, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^appendPaddedInteger ( intValue, buf, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^appendPaddedInteger ( buf,  size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^appendPaddedInteger ( buf, size, intValue ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^appendPaddedInteger ( buf, intValue ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[buglab_swap_variables]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[buglab_swap_variables]^for  ( ; digits > size; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[buglab_swap_variables]^out.write ( d -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[buglab_swap_variables]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[buglab_swap_variables]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[buglab_swap_variables]^int digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^for  ( ; digits > size; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^writePaddedInteger ( size, intValue, out ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^writePaddedInteger (  intValue, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^writePaddedInteger ( intValue, out, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^writePaddedInteger ( out,  size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^writePaddedInteger ( out, size, intValue ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^writePaddedInteger ( out, intValue ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[buglab_swap_variables]^buf.append (  ( char )   ( d -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[buglab_swap_variables]^appendUnpaddedInteger ( intValue, buf ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[buglab_swap_variables]^appendUnpaddedInteger (  intValue ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[buglab_swap_variables]^appendUnpaddedInteger ( buf ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[buglab_swap_variables]^out.write ( d -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[buglab_swap_variables]^if  ( value == intValue )  {^324^^^^^320^329^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[buglab_swap_variables]^writeUnpaddedInteger ( intValue, out ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[buglab_swap_variables]^writeUnpaddedInteger (  intValue ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[buglab_swap_variables]^writeUnpaddedInteger ( out ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[buglab_swap_variables]^int value = position.charAt ( text )  - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[buglab_swap_variables]^return  (  ( position << 3 )  +  ( value << 1 )  )  + text.charAt ( value + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[buglab_swap_variables]^return  (  ( value << 3 )  +  ( value << 1 )  )  + position.charAt ( text + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[buglab_swap_variables]^if  ( sampleLen.length (  )  <= text + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[buglab_swap_variables]^sampleText = sampleLen.substring ( 0, text ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[buglab_swap_variables]^sampleText = text.substring ( 0 ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[buglab_swap_variables]^if  ( text >= errorPos.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[buglab_swap_variables]^return "Invalid format: \"" + errorPos + "\" is malformed at \"" + sampleText.substring ( sampleText )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
