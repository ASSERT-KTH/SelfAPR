[BugLab_Wrong_Operator]^if  ( value > Integer.MIN_VALUE )  {^49^^^^^48^53^if  ( value == Integer.MIN_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeNegate [RETURN_TYPE] int   int value [VARIABLES] boolean  int  value  
[BugLab_Variable_Misuse]^int sum = val2 + val2;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Variable_Misuse]^int sum = val1 + val1;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Argument_Swapping]^int sum = val2 + val1;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( sum ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( val1 ^ val1 )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ sum )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Argument_Swapping]^if  (  ( val2 ^ sum )  < 0 &&  ( val1 ^ val1 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Argument_Swapping]^if  (  ( val1 ^ val2 )  < 0 &&  ( val1 ^ sum )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  < 0 ||  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  <= 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 & sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  > 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 & val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Literal]^if  (  ( val1 ^ sum )  < -1 &&  ( val1 ^ val2 )  >= -1 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + sum + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + sum ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Argument_Swapping]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " + " + val1 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >  val1  >  "  >  " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <=  val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1   instanceof   "   instanceof   " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1  <<  "  <<  " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &  val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[BugLab_Variable_Misuse]^long sum = val2 + val2;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^long sum = val1 + val1;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Argument_Swapping]^long sum = val2 + val1;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( sum ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( val1 ^ val1 )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ sum )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Argument_Swapping]^if  (  ( val2 ^ sum )  < 0 &&  ( val1 ^ val1 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Argument_Swapping]^if  (  ( sum ^ val1 )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  < 0 ||  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  == 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 & sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  == 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 & val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Literal]^if  (  ( val1 ^ sum )  < -1 &&  ( val1 ^ val2 )  >= -1 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + sum + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + sum ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Argument_Swapping]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " + " + val1 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >>  val1  >>  "  >>  " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <=  val1  <=  "  <=  " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >  val1  >  "  >  " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <=  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &&  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^return val2;^88^^^^^81^89^return sum;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[BugLab_Variable_Misuse]^long diff = val2 - val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Variable_Misuse]^long diff = val1 - val1;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Argument_Swapping]^long diff = val2 - val1;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^long diff = val1  ==  val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( val2 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( val1 ^ val2 )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val1 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Argument_Swapping]^if  (  ( val2 ^ diff )  < 0 &&  ( val1 ^ val1 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Argument_Swapping]^if  (  ( diff ^ val1 )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Argument_Swapping]^if  (  ( val1 ^ val2 )  < 0 &&  ( val1 ^ diff )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ diff )  < 0 ||  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ diff )  == 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 & diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ diff )  <= 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^if  (  ( val1 ^ diff )  < 0 &&  ( val1 & val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Literal]^if  (  ( val1 ^ diff )  < null &&  ( val1 ^ val2 )  < null )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + diff + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + diff ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Argument_Swapping]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " - " + val1 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <=  val1  <=  " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >  val1  >  " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ==  val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >=  val1  >=  " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1  ^  " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Variable_Misuse]^return val2;^106^^^^^99^107^return diff;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[BugLab_Wrong_Operator]^long - total =  ( long )  val1 *  ( long )  val2;^119^^^^^118^125^long total =  ( long )  val1 *  ( long )  val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Variable_Misuse]^if  ( total < Integer.val1 || total > Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Variable_Misuse]^if  ( total < Integer.MIN_VALUE || total > Integer.val2 )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^if  ( total < Integer.MIN_VALUE && total > Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^if  ( total <= Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^if  ( total < Integer.MIN_VALUE || total >= Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Argument_Swapping]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " * " + val1 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1  <<  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &&  val1  &&  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >>  val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1  ^  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ||  val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >=  val1  >=  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[BugLab_Variable_Misuse]^return total;^143^^^^^136^151^return val1;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Argument_Swapping]^long total = scalar * val1;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^long + total = val1 * scalar;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Argument_Swapping]^if  ( val1 / scalar != total )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Argument_Swapping]^if  ( total / val1 != scalar )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^if  ( total / scalar <= val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^if  ( total - scalar != val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + total + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Argument_Swapping]^throw new ArithmeticException ( "The calculation caused an overflow: " + scalar + " * " + val1 ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >>  val1  >>  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &  val1  &  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1  !=  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1  <<  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ||  val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Variable_Misuse]^return val1;^150^^^^^136^151^return total;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[BugLab_Variable_Misuse]^if  ( total == 1 )  {^162^^^^^161^174^if  ( val2 == 1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^if  ( val2 != 1 )  {^162^^^^^161^174^if  ( val2 == 1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^return val2;^163^^^^^161^174^return val1;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^if  ( val1 == 0 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^if  ( val2 >= 0 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Literal]^if  ( val2 == 1 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Literal]^if  ( val2 ==  )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Literal]^return -1;^166^^^^^161^174^return 0;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^long total = val1 * val1;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Argument_Swapping]^long total = val2 * val1;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^long - total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^if  ( val2 / val2 != val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^if  ( total / val2 != val2 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Argument_Swapping]^if  ( val1 / val2 != total )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Argument_Swapping]^if  ( total / val1 != val2 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^if  ( total / val2 > val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^if  ( total * val2 != val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + total + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + total ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Argument_Swapping]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " * " + val1 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ==  val1  ==  " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1  <  " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ||  val1  ||  " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Wrong_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  |  val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^return val2;^173^^^^^161^174^return total;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[BugLab_Variable_Misuse]^if  ( Integer.MIN_VALUE <= value && value <= Integer.1 )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[BugLab_Wrong_Operator]^if  ( Integer.MIN_VALUE <= value || value <= Integer.MAX_VALUE )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[BugLab_Wrong_Operator]^if  ( Integer.MIN_VALUE < value && value <= Integer.MAX_VALUE )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[BugLab_Variable_Misuse]^long val = FieldUtils.safeMultiply ( val2, val2 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[BugLab_Variable_Misuse]^long val = FieldUtils.safeMultiply ( val1, val1 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[BugLab_Argument_Swapping]^long val = FieldUtils.safeMultiply ( val2, val1 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[BugLab_Variable_Misuse]^long val = FieldUtils.safeMultiply ( val, val2 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[BugLab_Variable_Misuse]^long val = FieldUtils.safeMultiply ( val1, val ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[BugLab_Variable_Misuse]^return FieldUtils.safeToInt ( val2 ) ;^200^^^^^198^201^return FieldUtils.safeToInt ( val ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[BugLab_Variable_Misuse]^if  (  ( lowerBound < lowerBound )  ||  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( value < value )  ||  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( value < lowerBound )  ||  ( value > value )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^if  (  ( lowerBound < value )  ||  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^if  (  ( value < upperBound )  ||  ( value > lowerBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value < lowerBound )  &&  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value <= lowerBound )  ||  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value < lowerBound )  ||  ( value >= upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( lowerBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( lowerBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( lowerBound.getType (  ) , new Integer ( value ) , new Integer ( field ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( lowerBound ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( upperBound.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( field )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^( field.getType (  ) , new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^216^217^^^^212^219^( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^new Integer ( value ) , new Integer ( upperBound )  ) ;^217^^^^^212^219^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^new Integer ( lowerBound ) , new Integer ( value )  ) ;^217^^^^^212^219^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( upperBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( value.getType (  ) , new Integer ( field ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( upperBound ) , new Integer ( lowerBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( upperBound < lowerBound )  ||  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( value < value )  ||  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( value < lowerBound )  ||  ( value > value )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^if  (  ( lowerBound < value )  ||  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^if  (  ( value < upperBound )  ||  ( value > lowerBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value < lowerBound )  &&  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value <= lowerBound )  ||  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value < lowerBound )  ||  ( value == upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldType, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( lowerBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( lowerBound, new Integer ( value ) , new Integer ( fieldType ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( fieldType, new Integer ( lowerBound ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( upperBound ) , new Integer ( lowerBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( fieldType, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^( fieldType, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^234^235^^^^230^237^( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^new Integer ( value ) , new Integer ( upperBound )  ) ;^235^^^^^230^237^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^new Integer ( lowerBound ) , new Integer ( value )  ) ;^235^^^^^230^237^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( upperBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( value, new Integer ( fieldType ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldType, new Integer ( lowerBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( upperBound < lowerBound )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( value < upperBound )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^if  (  ( value < lowerBound )  ||  ( value > value )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^if  (  ( lowerBound < value )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^if  (  ( value < upperBound )  ||  ( value > lowerBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^if  (  ( upperBound < lowerBound )  ||  ( value > value )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value < lowerBound )  &&  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value > lowerBound )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Wrong_Operator]^if  (  ( value < lowerBound )  ||  ( value >= upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldName, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( lowerBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( upperBound, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( fieldName )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( fieldName, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( fieldName, new Integer ( lowerBound ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^( fieldName, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^251^252^^^^247^254^( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( lowerBound, new Integer ( value ) , new Integer ( fieldName ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Argument_Swapping]^throw new IllegalFieldValueException ( value, new Integer ( fieldName ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldName, new Integer ( lowerBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( upperBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^new Integer ( lowerBound ) , new Integer ( value )  ) ;^252^^^^^247^254^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[BugLab_Variable_Misuse]^return getWrappedValue ( wrapValue + wrapValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Variable_Misuse]^return getWrappedValue ( currentValue + wrapValue, wrapValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Variable_Misuse]^return getWrappedValue ( currentValue + wrapValue, minValue, wrapValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Argument_Swapping]^return getWrappedValue ( wrapValue + currentValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Argument_Swapping]^return getWrappedValue ( currentValue + maxValue, minValue, wrapValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Argument_Swapping]^return getWrappedValue ( currentValue + wrapValue, maxValue, minValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Variable_Misuse]^return getWrappedValue ( minValue + wrapValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Variable_Misuse]^return getWrappedValue ( currentValue + minValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Variable_Misuse]^return getWrappedValue ( currentValue + wrapValue, maxValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Argument_Swapping]^return getWrappedValue ( currentValue + minValue, wrapValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Argument_Swapping]^return getWrappedValue ( maxValue + wrapValue, minValue, currentValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[BugLab_Variable_Misuse]^if  ( wrapRange >= maxValue )  {^289^^^^^288^306^if  ( minValue >= maxValue )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^if  ( maxValue >= minValue )  {^289^^^^^288^306^if  ( minValue >= maxValue )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^if  ( minValue > maxValue )  {^289^^^^^288^306^if  ( minValue >= maxValue )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^int wrapRange = value - minValue + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^int wrapRange = maxValue - value + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^int wrapRange = minValue - maxValue + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^int wrapRange = maxValue  &  minValue + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Literal]^int wrapRange = maxValue - minValue ;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^value -= wrapRange;^294^^^^^288^306^value -= minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^value += minValue;^294^^^^^288^306^value -= minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^if  ( remByRange >= 0 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^if  ( value < 0 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Literal]^if  ( value >= -1 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^return  ( remByRange % wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^return  ( value % value )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^return  ( value % wrapRange )  + value;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^return  ( wrapRange % value )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^return  ( value % minValue )  + wrapRange;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^return  ( minValue % wrapRange )  + value;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^return  &  ( value % wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^return  ( value  >  wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^return  <<  ( value % wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^return  ( value  <=  wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^int remByRange =  ( -wrapRange )  % wrapRange;^300^^^^^288^306^int remByRange =  ( -value )  % wrapRange;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^int remByRange =  ( -value )  % value;^300^^^^^288^306^int remByRange =  ( -value )  % wrapRange;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^int remByRange =  ( -value )   <=  wrapRange;^300^^^^^288^306^int remByRange =  ( -value )  % wrapRange;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^if  ( wrapRange == 0 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^if  ( remByRange >= 0 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Literal]^if  ( remByRange == value )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Literal]^if  ( remByRange == remByRange )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^return 0 + wrapRange;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Literal]^return -1 + minValue;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Literal]^return minValue + minValue;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^return  ( value - remByRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^return  ( wrapRange - value )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Variable_Misuse]^return  ( wrapRange - remByRange )  + wrapRange;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^return  ( minValue - remByRange )  + wrapRange;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^return  ( remByRange - wrapRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^return  ( wrapRange - minValue )  + remByRange;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^return  ||  ( wrapRange - remByRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Wrong_Operator]^return  ( wrapRange  &  remByRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[BugLab_Argument_Swapping]^if  ( object2 == object1 )  {^318^^^^^317^325^if  ( object1 == object2 )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Wrong_Operator]^if  ( object1 != object2 )  {^318^^^^^317^325^if  ( object1 == object2 )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Wrong_Literal]^return false;^319^^^^^317^325^return true;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Argument_Swapping]^if  ( object2 == null || object1 == null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Wrong_Operator]^if  ( object1 == null && object2 == null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Wrong_Operator]^if  ( object1 != null || object2 == null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Wrong_Operator]^if  ( object1 == null || object2 != null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Wrong_Literal]^return true;^322^^^^^317^325^return false;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[BugLab_Argument_Swapping]^return object2.equals ( object1 ) ;^324^^^^^317^325^return object1.equals ( object2 ) ;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
