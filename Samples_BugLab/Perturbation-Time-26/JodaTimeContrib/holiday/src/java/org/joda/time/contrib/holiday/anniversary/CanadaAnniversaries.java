[BugLab_Variable_Misuse]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.REMEMBRANCE_DAY_HOLIDAY .create ( iYear )  ) ;^36^37^38^^^35^39^return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY .create ( iYear )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Variable_Misuse]^.AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.VICTORIA_DAY .create ( iYear )  ) ;^37^38^^^^35^39^.AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY .create ( iYear )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Wrong_Literal]^return new DateMidnight ( iYear, DateTimeConstants.JULY, iYear ) .toDateTime (  ) ;^53^54^^^^52^55^return new DateMidnight ( iYear, DateTimeConstants.JULY, 1 ) .toDateTime (  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Variable_Misuse]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.REMEMBRANCE_DAY_HOLIDAY .create ( iYear )  ) ;^61^62^63^^^60^64^return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY .create ( iYear )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Wrong_Literal]^return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( iYear ) ;^71^72^73^^^69^74^return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( 1 ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Variable_Misuse]^return TimeUtility .AdjustCanadianHolidayForWeekend ( REMEMBRANCE_DAY_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^99^100^101^^^98^102^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Argument_Swapping]^return TimeUtility .AdjustCanadianHolidayForWeekend ( iYear.create ( CHRISTMAS_HOLIDAY ) .plusDays ( 1 )  ) ;^99^100^101^^^98^102^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Wrong_Literal]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays (  )  ) ;^99^100^101^^^98^102^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Variable_Misuse]^.AdjustCanadianHolidayForWeekend ( THANKSGIVING.create ( iYear ) .plusDays ( 1 )  ) ;^100^101^^^^98^102^.AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Argument_Swapping]^.AdjustCanadianHolidayForWeekend ( iYear.create ( CHRISTMAS_HOLIDAY ) .plusDays ( 1 )  ) ;^100^101^^^^98^102^.AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Variable_Misuse]^.AdjustCanadianHolidayForWeekend ( REMEMBRANCE_DAY_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^100^101^^^^98^102^.AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] AnniversaryFactory  BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  int  iYear  boolean  
[BugLab_Wrong_Literal]^return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday ( DateTimeConstants.MONDAY, iYear, iYear, DateTimeConstants.MAY ) ;^45^46^^^^44^47^return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday ( DateTimeConstants.MONDAY, 25, iYear, DateTimeConstants.MAY ) ;^[CLASS] 2  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Wrong_Literal]^return new DateMidnight ( iYear, DateTimeConstants.JULY, 2 ) .toDateTime (  ) ;^53^54^^^^52^55^return new DateMidnight ( iYear, DateTimeConstants.JULY, 1 ) .toDateTime (  ) ;^[CLASS] 3  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Wrong_Literal]^return new DateMidnight ( iYear, DateTimeConstants.JULY, iYear ) .toDateTime (  ) ;^53^54^^^^52^55^return new DateMidnight ( iYear, DateTimeConstants.JULY, 1 ) .toDateTime (  ) ;^[CLASS] 3  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Wrong_Literal]^return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( 2 ) ;^71^72^73^^^69^74^return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( 1 ) ;^[CLASS] 5  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Argument_Swapping]^return TimeUtility .AdjustCanadianHolidayForWeekend ( iYear.create ( CHRISTMAS_HOLIDAY ) .plusDays ( 1 )  ) ;^99^100^101^^^98^102^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Wrong_Literal]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays (  )  ) ;^99^100^101^^^98^102^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Wrong_Literal]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 2 )  ) ;^99^100^101^^^98^102^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Argument_Swapping]^.AdjustCanadianHolidayForWeekend ( iYear.create ( CHRISTMAS_HOLIDAY ) .plusDays ( 1 )  ) ;^100^101^^^^98^102^.AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
[BugLab_Wrong_Literal]^.AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( iYear )  ) ;^100^101^^^^98^102^.AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[CLASS] 8  [METHOD] create [RETURN_TYPE] DateTime   int iYear [VARIABLES] boolean  int  iYear  
