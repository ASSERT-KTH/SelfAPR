[buglab_swap_variables]^assertEquals ( numericalZero.getNumericalZero (  ) , solver, 0.0d ) ;^98^^^^^94^107^assertEquals ( solver.getNumericalZero (  ) , numericalZero, 0.0d ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[buglab_swap_variables]^assertEquals ( solver.getNumericalZero (  ) ,  0.0d ) ;^98^^^^^94^107^assertEquals ( solver.getNumericalZero (  ) , numericalZero, 0.0d ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[buglab_swap_variables]^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0/2}} )  ) ;^101^102^103^^^94^107^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[buglab_swap_variables]^testGetDeterminant ( m1Det, m1, "Calculating determinant of m1" ) ;^186^^^^^176^191^testGetDeterminant ( m1, m1Det, "Calculating determinant of m1" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant (  m1Det, "Calculating determinant of m1" ) ;^186^^^^^176^191^testGetDeterminant ( m1, m1Det, "Calculating determinant of m1" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m1,  "Calculating determinant of m1" ) ;^186^^^^^176^191^testGetDeterminant ( m1, m1Det, "Calculating determinant of m1" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m2Det, m2, "Calculating determinant of m2" ) ;^187^^^^^176^191^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant (  m2Det, "Calculating determinant of m2" ) ;^187^^^^^176^191^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m2,  "Calculating determinant of m2" ) ;^187^^^^^176^191^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m3Det, m3, "Calculating determinant of m3" ) ;^188^^^^^176^191^testGetDeterminant ( m3, m3Det, "Calculating determinant of m3" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant (  m3Det, "Calculating determinant of m3" ) ;^188^^^^^176^191^testGetDeterminant ( m3, m3Det, "Calculating determinant of m3" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m3,  "Calculating determinant of m3" ) ;^188^^^^^176^191^testGetDeterminant ( m3, m3Det, "Calculating determinant of m3" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m4Det, m4, "Calculating determinant of m4" ) ;^189^^^^^176^191^testGetDeterminant ( m4, m4Det, "Calculating determinant of m4" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant (  m4Det, "Calculating determinant of m4" ) ;^189^^^^^176^191^testGetDeterminant ( m4, m4Det, "Calculating determinant of m4" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m4,  "Calculating determinant of m4" ) ;^189^^^^^176^191^testGetDeterminant ( m4, m4Det, "Calculating determinant of m4" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m5Det, m5, "Calculating determinant of m5" ) ;^190^^^^^176^191^testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant (  m5Det, "Calculating determinant of m5" ) ;^190^^^^^176^191^testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^testGetDeterminant ( m5,  "Calculating determinant of m5" ) ;^190^^^^^176^191^testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^assertTrue ( solver, areEqual ( triangularMatrix, message.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^assertTrue (  areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^assertTrue ( message, areEqual ( solver, triangularMatrix.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^assertTrue ( message, areEqual (  solver.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^assertTrue ( message, areEqual ( triangularMatrix.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^areEqual ( solver, triangularMatrix.getDecomposition (  ) , 1.0E-10 )  ) ;^213^^^^^202^215^areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^areEqual (  solver.getDecomposition (  ) , 1.0E-10 )  ) ;^213^^^^^202^215^areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^areEqual ( triangularMatrix.getDecomposition (  ) , 1.0E-10 )  ) ;^213^^^^^202^215^areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[buglab_swap_variables]^for  ( jnt i=0; i<c.length; i++ ) for  ( int i=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^231^232^233^^^221^240^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^for  ( cnt i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) i[i] += lowerTriangularMatrix[i][j];^231^232^233^^^221^240^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^for  ( jnt i=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) lowerTriangularMatrix[i] += c[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^for  ( int lowerTriangularMatrix=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += j[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^for  ( int c=0; j<lowerTriangularMatrix[0].length; j++ ) j[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^for  ( cnt j=0; j<lowerTriangularMatrix[0].length; j++ ) i[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^RealMatrix x = new RealMatrixImpl ( c.solve ( solver )  ) ;^236^^^^^221^240^RealMatrix x = new RealMatrixImpl ( solver.solve ( c )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^assertTrue ( c, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( message ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^assertTrue (  areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^assertTrue ( pdMatrix, areEqual ( message.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^assertTrue ( message, areEqual ( pdMatrix.multiply ( c ) ,  new RealMatrixImpl ( x ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^assertTrue ( message, areEqual ( c.multiply ( x ) ,  new RealMatrixImpl ( pdMatrix ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^areEqual ( c.multiply ( x ) ,  new RealMatrixImpl ( pdMatrix ) , 1.0E-10 )  ) ;^239^^^^^221^240^areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^areEqual ( x.multiply ( pdMatrix ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^239^^^^^221^240^areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^areEqual ( pdMatrix.multiply ( c ) ,  new RealMatrixImpl ( x ) , 1.0E-10 )  ) ;^239^^^^^221^240^areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[buglab_swap_variables]^assertEquals ( solver, message.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[buglab_swap_variables]^assertEquals (  solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[buglab_swap_variables]^assertEquals ( message, pdDeterminant.getDeterminant (  ) , solver, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[buglab_swap_variables]^assertEquals ( message.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[buglab_swap_variables]^assertEquals ( pdDeterminant, solver.getDeterminant (  ) , message, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[buglab_swap_variables]^assertEquals ( message, solver.getDeterminant (  ) ,  1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[buglab_swap_variables]^if  ( mv2.length != mv1.length  || mv1[0].length != mv1[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[buglab_swap_variables]^if  ( mv2[0].length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[buglab_swap_variables]^if  ( mv1[0].length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[buglab_swap_variables]^if  ( Math.abs ( delta[i][j] -mv2[i][j] )  > mv1 ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[buglab_swap_variables]^for  ( jnt i=0; i<mv1.length; i++ ) for  ( int i=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[buglab_swap_variables]^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( delta[i][j] -mv2[i][j] )  > mv1 ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[buglab_swap_variables]^for  ( jnt i=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[buglab_swap_variables]^for  ( int delta=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > j ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
