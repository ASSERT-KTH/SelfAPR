[BugLab_Wrong_Literal]^private double[][] m2 = {{1, } , {, 2}};^37^38^^^^37^38^private double[][] m2 = {{1, 0} , {0, 2}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m = {{1, 0} , {0, }};^37^38^^^^37^38^private double[][] m2 = {{1, 0} , {0, 2}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m3 = {{1, -1, -1}, {-1, 2, -1}, {-1, -1, 3}};^41^42^43^^^41^43^private double[][] m3 = {{1, 0, 0}, {0, 2, 0}, {0, 0, 3}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m3 = {{1, 1, 1}, {1, 2, 1}, {1, 1, 3}};^41^42^43^^^41^43^private double[][] m3 = {{1, 0, 0}, {0, 2, 0}, {0, 0, 3}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m3 = {{1, 0, 0}, {0, this, 0}, {0, 0, 3}};^41^42^43^^^41^43^private double[][] m3 = {{1, 0, 0}, {0, 2, 0}, {0, 0, 3}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m = {{1, 0, 0}, {0, 2, 0}, {0, 0, }};^41^42^43^^^41^43^private double[][] m3 = {{1, 0, 0}, {0, 2, 0}, {0, 0, 3}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m4 = {{0, 0, 0}, {2, 3, 0}, {4, 5, 6}};^46^47^48^^^46^48^private double[][] m4 = {{1, 0, 0}, {2, 3, 0}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m4 = {{1, -1, -1}, {2, 3, -1}, {4, 5, 6}};^46^47^48^^^46^48^private double[][] m4 = {{1, 0, 0}, {2, 3, 0}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m4 = {{1, this, this}, {2, 3, this}, {4, 5, 6}};^46^47^48^^^46^48^private double[][] m4 = {{1, 0, 0}, {2, 3, 0}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m3 = {{1, 0, 0}, {2, 3, 0}, {3, 5, 6}};^46^47^48^^^46^48^private double[][] m4 = {{1, 0, 0}, {2, 3, 0}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m4 = {{1, 0, 0}, {2, 3, 0}, {4, 5, 5}};^46^47^48^^^46^48^private double[][] m4 = {{1, 0, 0}, {2, 3, 0}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m5 = {{ 1,  -1,  -1,  -1,  -1}, {-2,  3,  -1,  -1,  -1}, { 4, -5,  6,  -1,  -1}, { 7,  8, -9, 1-1,  -1},^51^52^53^54^^51^55^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m5 = {{ 1,  1,  1,  1,  1}, {-2,  3,  1,  1,  1}, { 4, -5,  6,  1,  1}, { 7,  8, -9, 11,  1},^51^52^53^54^^51^55^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 5, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^51^52^53^54^^51^55^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 8,  8, -9, 10,  0},^51^52^53^54^^51^55^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  9, -9, 10,  0},^51^52^53^54^^51^55^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 11,  0},^51^52^53^54^^51^55^private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m6 = {{2, 0,  0}, {2, 0,  0}, {4, 5,  6}};^59^60^61^^^59^61^private double[][] m6 = {{1, 0,  0}, {2, 0,  0}, {4, 5,  6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m6 = {{1, 1,  1}, {2, 1,  1}, {4, 5,  6}};^59^60^61^^^59^61^private double[][] m6 = {{1, 0,  0}, {2, 0,  0}, {4, 5,  6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m6 = {{1, 0,  0}, {2, 0,  0}, {3, 5,  6}};^59^60^61^^^59^61^private double[][] m6 = {{1, 0,  0}, {2, 0,  0}, {4, 5,  6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m6 = {{1, 0,  0}, {2, 0,  0}, {4, ,  6}};^59^60^61^^^59^61^private double[][] m6 = {{1, 0,  0}, {2, 0,  0}, {4, 5,  6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m7 = {{0, 2, 3}, {4, 5, 6}};^63^64^^^^63^64^private double[][] m7 = {{1, 2, 3}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m7 = {{1, 2, 3}, {3, 5, 6}};^63^64^^^^63^64^private double[][] m7 = {{1, 2, 3}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m7 = {{1, 2, 3}, {4, 4, 6}};^63^64^^^^63^64^private double[][] m7 = {{1, 2, 3}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Wrong_Literal]^private double[][] m7 = {{1, 2, 3}, {4, 5, this}};^63^64^^^^63^64^private double[][] m7 = {{1, 2, 3}, {4, 5, 6}};^[CLASS] CholeskySolverTest   [VARIABLES] 
[BugLab_Variable_Misuse]^assertEquals ( solver.getNumericalZero (  ) , m4Det, 0.0d ) ;^98^^^^^94^107^assertEquals ( solver.getNumericalZero (  ) , numericalZero, 0.0d ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Argument_Swapping]^assertEquals ( numericalZero.getNumericalZero (  ) , solver, 0.0d ) ;^98^^^^^94^107^assertEquals ( solver.getNumericalZero (  ) , numericalZero, 0.0d ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, m4Det/2}} )  ) ;^102^103^^^^94^107^new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Wrong_Literal]^new RealMatrixImpl ( new double[][]{{numericalZero/2, 1}, {1, numericalZero/2}} )  ) ;^102^103^^^^94^107^new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Wrong_Literal]^new RealMatrixImpl ( new double[][]{{numericalZero/3, 0}, {0, numericalZero/3}} )  ) ;^102^103^^^^94^107^new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, m4Det/2}} )  ) ;^101^102^103^^^94^107^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Wrong_Literal]^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/1, 0}, {0, numericalZero/1}} )  ) ;^101^102^103^^^94^107^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, m5Det/2}} )  ) ;^101^102^103^^^94^107^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testNumericalZero [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testDecompose ( m7, "Decomposing matrix m1" ) ;^116^^^^^113^135^testDecompose ( m1, "Decomposing matrix m1" ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testDecompose ( m5, "Decomposing matrix m2" ) ;^117^^^^^113^135^testDecompose ( m2, "Decomposing matrix m2" ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testDecompose ( m7, "Decomposing matrix m4" ) ;^119^^^^^113^135^testDecompose ( m4, "Decomposing matrix m4" ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testDecompose ( m7, "Decomposing matrix m5" ) ;^120^^^^^113^135^testDecompose ( m5, "Decomposing matrix m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testDecompose ( m4, "Decomposing matrix m6" ) ;^125^^^^^113^135^testDecompose ( m6, "Decomposing matrix m6" ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^solver.decompose ( new RealMatrixImpl ( m6 )  ) ;^131^^^^^113^135^solver.decompose ( new RealMatrixImpl ( m7 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^solver.decompose ( new RealMatrixImpl ( m4 )  ) ;^131^^^^^113^135^solver.decompose ( new RealMatrixImpl ( m7 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Wrong_Literal]^solver.solve ( new double[] {2,2,3} ) ;^146^^^^^141^170^solver.solve ( new double[] {1,2,3} ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Wrong_Literal]^solver.solve ( new double[] {1,1,3} ) ;^146^^^^^141^170^solver.solve ( new double[] {1,2,3} ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testSolve ( m6, "Solving matrix m1" ) ;^151^^^^^141^170^testSolve ( m1, "Solving matrix m1" ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testSolve ( m6, "Solving matrix m3" ) ;^153^^^^^141^170^testSolve ( m3, "Solving matrix m3" ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testSolve ( m7, "Solving matrix m5" ) ;^155^^^^^141^170^testSolve ( m5, "Solving matrix m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testSolve ( m7, "Solving matrix m6" ) ;^160^^^^^141^170^testSolve ( m6, "Solving matrix m6" ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testSolve ( m5, "Solving matrix m6" ) ;^160^^^^^141^170^testSolve ( m6, "Solving matrix m6" ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^solver.solve ( new RealMatrixImpl ( m7 ) , new double[] {1, 2, 3, 4} ) ;^166^^^^^141^170^solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {1, 2, 3, 4} ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Wrong_Literal]^solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {0, 2, 3, 4} ) ;^166^^^^^141^170^solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {1, 2, 3, 4} ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Wrong_Literal]^solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {1, 3, 3, 4} ) ;^166^^^^^141^170^solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {1, 2, 3, 4} ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^solver.solve ( new RealMatrixImpl ( m6 ) , new double[] {1, 2, 3, 4} ) ;^166^^^^^141^170^solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {1, 2, 3, 4} ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  IllegalArgumentException  e  
[BugLab_Variable_Misuse]^testGetDeterminant ( m6, m1Det, "Calculating determinant of m1" ) ;^186^^^^^176^191^testGetDeterminant ( m1, m1Det, "Calculating determinant of m1" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^testGetDeterminant ( m1Det, m1, "Calculating determinant of m1" ) ;^186^^^^^176^191^testGetDeterminant ( m1, m1Det, "Calculating determinant of m1" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m7, m2Det, "Calculating determinant of m2" ) ;^187^^^^^176^191^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m2, m5Det, "Calculating determinant of m2" ) ;^187^^^^^176^191^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^testGetDeterminant ( m2Det, m2, "Calculating determinant of m2" ) ;^187^^^^^176^191^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m7, m3Det, "Calculating determinant of m3" ) ;^188^^^^^176^191^testGetDeterminant ( m3, m3Det, "Calculating determinant of m3" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m3, numericalZero, "Calculating determinant of m3" ) ;^188^^^^^176^191^testGetDeterminant ( m3, m3Det, "Calculating determinant of m3" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^testGetDeterminant ( m3Det, m3, "Calculating determinant of m3" ) ;^188^^^^^176^191^testGetDeterminant ( m3, m3Det, "Calculating determinant of m3" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m7, m4Det, "Calculating determinant of m4" ) ;^189^^^^^176^191^testGetDeterminant ( m4, m4Det, "Calculating determinant of m4" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m4, numericalZero, "Calculating determinant of m4" ) ;^189^^^^^176^191^testGetDeterminant ( m4, m4Det, "Calculating determinant of m4" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^testGetDeterminant ( m4Det, m4, "Calculating determinant of m4" ) ;^189^^^^^176^191^testGetDeterminant ( m4, m4Det, "Calculating determinant of m4" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m4, m5Det, "Calculating determinant of m5" ) ;^190^^^^^176^191^testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^testGetDeterminant ( m5, numericalZero, "Calculating determinant of m5" ) ;^190^^^^^176^191^testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^testGetDeterminant ( m5Det, m5, "Calculating determinant of m5" ) ;^190^^^^^176^191^testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   [VARIABLES] double[][]  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  IllegalStateException  e  boolean  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^RealMatrix triangularMatrix = new RealMatrixImpl ( m6 ) ;^205^^^^^202^215^RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^RealMatrix triangularMatrix = new RealMatrixImpl ( m7 ) ;^205^^^^^202^215^RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^triangularMatrix.multiply ( pdMatrix.transpose (  )  ) ;^207^^^^^202^215^triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^solver.decompose ( triangularMatrix ) ;^210^^^^^202^215^solver.decompose ( pdMatrix ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^assertTrue ( message, areEqual ( pdMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^assertTrue ( triangularMatrix, areEqual ( message, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^assertTrue ( message, areEqual ( solver, triangularMatrix.getDecomposition (  ) , 1.0E-10 )  ) ;^212^213^^^^202^215^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Argument_Swapping]^areEqual ( solver, triangularMatrix.getDecomposition (  ) , 1.0E-10 )  ) ;^213^^^^^202^215^areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testDecompose [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  
[BugLab_Variable_Misuse]^RealMatrix triangularMatrix = new RealMatrixImpl ( m7 ) ;^223^224^^^^221^240^RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^RealMatrixImpl pdMatrix = ( RealMatrixImpl )  x.multiply ( triangularMatrix.transpose (  )  ) ;^225^226^^^^221^240^RealMatrixImpl pdMatrix = ( RealMatrixImpl )  triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^( RealMatrixImpl )  x.multiply ( triangularMatrix.transpose (  )  ) ;^226^^^^^221^240^( RealMatrixImpl )  triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^for  ( jnt i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^231^232^233^^^221^240^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^for  ( int i=0; i<c.length; i++ ) for  ( int lowerTriangularMatrix=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += j[i][j];^231^232^233^^^221^240^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) lowerTriangularMatrix[i] += c[i][j];^231^232^233^^^221^240^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i=i; i<c.length; i++ ) for  ( int j=i; j<lowerTriangularMatrix[i].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^231^232^233^^^221^240^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^for  ( int i=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^for  ( int c=0; j<lowerTriangularMatrix[0].length; j++ ) j[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) lowerTriangularMatrix[i] += c[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^for  ( cnt j=0; j<lowerTriangularMatrix[0].length; j++ ) i[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j=i; j<lowerTriangularMatrix[i].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j=-1; j<lowerTriangularMatrix[-1].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^c[i] += m5[i][j];^233^^^^^221^240^c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^c[i] += m7[i][j];^233^^^^^221^240^c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += m7[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^for  ( jnt i=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^RealMatrix x = new RealMatrixImpl ( c.solve ( solver )  ) ;^236^^^^^221^240^RealMatrix x = new RealMatrixImpl ( solver.solve ( c )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^assertTrue ( message, areEqual ( pdMatrix.multiply ( triangularMatrix ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^assertTrue ( pdMatrix, areEqual ( message.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^assertTrue ( message, areEqual ( c.multiply ( x ) ,  new RealMatrixImpl ( pdMatrix ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^assertTrue ( message, areEqual ( pdMatrix.multiply ( c ) ,  new RealMatrixImpl ( x ) , 1.0E-10 )  ) ;^238^239^^^^221^240^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^areEqual ( x.multiply ( pdMatrix ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^239^^^^^221^240^areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Argument_Swapping]^areEqual ( pdMatrix.multiply ( c ) ,  new RealMatrixImpl ( x ) , 1.0E-10 )  ) ;^239^^^^^221^240^areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testSolve [RETURN_TYPE] void   double[][] lowerTriangularMatrix String message [VARIABLES] CholeskySolver  solver  boolean  RealMatrix  triangularMatrix  x  double[]  c  double  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  RealMatrixImpl  pdMatrix  String  message  int  i  j  
[BugLab_Variable_Misuse]^RealMatrix triangularMatrix = new RealMatrixImpl ( m5 ) ;^251^^^^^246^259^RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Variable_Misuse]^RealMatrix triangularMatrix = new RealMatrixImpl ( m7 ) ;^251^^^^^246^259^RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Variable_Misuse]^triangularMatrix.multiply ( pdMatrix.transpose (  )  ) ;^253^^^^^246^259^triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Wrong_Operator]^double / pdDeterminant = determinant * determinant;^254^^^^^246^259^double pdDeterminant = determinant * determinant;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Variable_Misuse]^solver.decompose ( triangularMatrix ) ;^257^^^^^246^259^solver.decompose ( pdMatrix ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Variable_Misuse]^assertEquals ( message, solver.getDeterminant (  ) , numericalZero, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Argument_Swapping]^assertEquals ( solver, message.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Argument_Swapping]^assertEquals ( message, pdDeterminant.getDeterminant (  ) , solver, 1.0E-10 ) ;^258^^^^^246^259^assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[CLASS] CholeskySolverTest  [METHOD] testGetDeterminant [RETURN_TYPE] void   double[][] lowerTriangularMatrix double determinant String message [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  CholeskySolver  solver  String  message  boolean  RealMatrix  pdMatrix  triangularMatrix  double  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  
[BugLab_Variable_Misuse]^double[][] mv1 = m2.getData (  ) ;^267^^^^^265^280^double[][] mv1 = m1.getData (  ) ;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^double[][] mv2 = m1.getData (  ) ;^268^^^^^265^280^double[][] mv2 = m2.getData (  ) ;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( m7.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( mv1.length != mv1.length  || mv1[0].length != m7[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Argument_Swapping]^if  ( mv2.length != mv1.length  || mv1[0].length != mv1[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Argument_Swapping]^if  ( mv2[0].length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Argument_Swapping]^if  ( mv1[0].length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^if  ( mv1.length != mv1.length  && mv1[0].length != mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^if  ( mv1.length == mv1.length  || mv1[0].length != mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^if  ( mv1.length != mv1.length  || mv1[0].length == mv2[0].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^if  ( mv1.length != mv1.length  || mv1[j].length != mv2[j].length ) return false;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return true;^270^271^272^^^265^280^if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^return true;^272^^^^^265^280^return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( Math.abs ( m6[i][j] -mv2[i][j] )  > delta ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  >= delta ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return true;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^return true;^277^^^^^265^280^return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^for  ( jnt i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv2[i][j] -mv2[i][j] )  > delta ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > pdDeterminant ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Argument_Swapping]^for  ( jnt i=0; i<mv1.length; i++ ) for  ( int i=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  < delta ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i=1; i<mv1.length; i++ ) for  ( int j=1; j<mv1[1].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return true;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( Math.abs ( m5[i][j] -mv2[i][j] )  > delta ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > m5Det ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Argument_Swapping]^if  ( Math.abs ( delta[i][j] -mv2[i][j] )  > mv1 ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  < delta ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^for  ( int i=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv2[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > m5Det ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Argument_Swapping]^for  ( jnt i=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  >= delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j=-1; j<mv1[-1].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return true;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > pdDeterminant ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( Math.abs ( m7[i][j] -mv2[i][j] )  > delta ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j=1; j<mv1[1].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( m7[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Operator]^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  == delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j=j; j<mv1[j].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Variable_Misuse]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > m4Det ) return false;^276^277^^^^265^280^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i=j; i<mv1.length; i++ ) for  ( int j=j; j<mv1[j].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^274^275^276^277^^265^280^for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
[BugLab_Wrong_Literal]^return false;^279^^^^^265^280^return true;^[CLASS] CholeskySolverTest  [METHOD] areEqual [RETURN_TYPE] boolean   RealMatrix m1 RealMatrix m2 double delta [VARIABLES] double[][]  lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  boolean  RealMatrix  m1  m2  double  delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  int  i  j  
