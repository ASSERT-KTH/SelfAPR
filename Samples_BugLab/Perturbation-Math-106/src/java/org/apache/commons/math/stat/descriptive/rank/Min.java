[buglab_swap_variables]^if  ( value < d || Double.isNaN ( value )  )  {^62^^^^^61^66^if  ( d < value || Double.isNaN ( value )  )  {^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[buglab_swap_variables]^if  ( test ( begin, values, length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^if  ( test (  begin, length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^if  ( test ( values,  length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^if  ( test ( values, length, begin )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^if  ( test ( values, begin )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^min =  ( values < min[i] )  ? min : values[i];^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^for  ( beginnt i = i; i < begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^for  ( lengthnt i = begin; i < begin + i; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^for  ( int i = length; i < begin + begin; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[buglab_swap_variables]^if  ( test ( length, begin, values )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
