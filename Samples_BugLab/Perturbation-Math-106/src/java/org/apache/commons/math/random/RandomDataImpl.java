[BugLab_Variable_Misuse]^if  ( i <= 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^if  ( len < 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^if  ( len <= i )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Variable_Misuse]^byte[] randomBytes = new byte[ ( i / 2 )  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^byte[] randomBytes = new byte[ ( len / 2 )  >  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^byte[] randomBytes = new byte[ ( len - 2 )  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^byte[] randomBytes = new byte[ ( len / 2 )  + i];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Variable_Misuse]^ran.nextBytes ( randdomBytes ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Argument_Swapping]^ran.nextBytes ( randomBytesdomBytes ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Argument_Swapping]^ran.nextBytes ( ran ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^if  ( hex.length (  )  != 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^if  ( hex.length (  )  == len )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Variable_Misuse]^for  ( lennt i = 0; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < len; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Argument_Swapping]^for  ( randomBytes.lengthnt i = 0; i < i; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^for  >  ( int i = 0; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^for  >>  ( int i = 0; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^for  ( int i = i; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^if  ( hex.length (  )  <= 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^if  ( hex.length (  )  == 0 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   <<  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + len ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   ==  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^String hex = Integer.toHexString ( c.intValue (  )  +  ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^for  ( int i = len; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   &  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^String hex = Integer.toHexString ( c.intValue (  )   ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   !=  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Variable_Misuse]^return outBuffer.toString (  ) .substring ( 0, i ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Argument_Swapping]^return len.toString (  ) .substring ( 0, outBuffer ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Wrong_Literal]^return outBuffer.toString (  ) .substring ( 1, len ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[BugLab_Argument_Swapping]^if  ( upper >= lower )  {^164^^^^^163^170^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^if  ( lower < upper )  {^164^^^^^163^170^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Variable_Misuse]^return lower +  ( int )   ( ran.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Argument_Swapping]^return upper +  ( int )   ( rand.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Argument_Swapping]^return lower +  ( int )   ( upper.nextDouble (  )  *  ( rand - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return lower +  >  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return / lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower  ==  1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper  <  lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Literal]^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + lower )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Variable_Misuse]^if  ( serialVersionUID >= upper )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^if  ( lower >= serialVersionUID )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Argument_Swapping]^if  ( upper >= lower )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( lower > upper )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^return upper +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^return lower +  ( long )   ( ran.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( serialVersionUID - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Argument_Swapping]^return upper +  ( long )   ( rand.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Argument_Swapping]^return lower +  ( long )   ( upper.nextDouble (  )  *  ( rand - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return lower +  ^  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return / lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower  >=  1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper   instanceof   lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Literal]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower  )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( len < 0 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^if  ( len <= -1 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^int numIter =  ( iter / 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^int numIter =  ==  ( len / 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^int numIter =  ( len * 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^int numIter =  ( len / iter )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^int numIter =  ( len / 40 )  ;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^if  ( hex.length (  )  <= 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^if  ( hex.length (  )  == iter )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^for  ( int numIter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^for  ( int iter = 1; iter < len + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^for  ( numIternt iter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Argument_Swapping]^for  ( numIternt iter = 1; iter < i + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Argument_Swapping]^for  ( iternt i = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  ( int iter = 1; iter <= numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  >>  ( int iter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  <=  ( int iter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^for  ( int iter = 1; iter < numIter ; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^if  ( hex.length (  )  > 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^if  ( hex.length (  )  == len )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^for  ( numIternt i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < randomBytes.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < numIter; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Argument_Swapping]^for  ( hash.lengthnt i = 0; i < i; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  |  ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  <=  ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^if  ( hex.length (  )  != 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^Integer c = new Integer ( randomBytes[i] ) ;^232^^^^^217^247^Integer c = new Integer ( hash[i] ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   ==  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^String hex = Integer.toHexString ( c.intValue (  )  +  ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   !=  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^byte[] randomBytes = new byte[i];^223^^^^^208^238^byte[] randomBytes = new byte[40];^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^for  ( int i = i; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   <<  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + numIter ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^secRan.nextBytes ( hash ) ;^224^^^^^209^239^secRan.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   >=  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^String hex = Integer.toHexString ( c.intValue (  )   ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  ==  ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^for  >>  ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^for  ( int i = numIter; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^if  ( hex.length (  )  == i )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + i ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   &  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^for  ( int iter = iter; iter < numIter + iter; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   ^  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^alg.update ( hash ) ;^225^^^^^210^240^alg.update ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Operator]^String hex = Integer.toHexString ( c.intValue (  )   <=  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Variable_Misuse]^return outBuffer.toString (  ) .substring ( 0, numIter ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Argument_Swapping]^return len.toString (  ) .substring ( 0, outBuffer ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^return outBuffer.toString (  ) .substring ( -1, len ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Wrong_Literal]^return outBuffer.toString (  ) .substring ( iter, len ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[BugLab_Argument_Swapping]^if  ( upper >= lower )  {^261^^^^^260^267^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^if  ( lower > upper )  {^261^^^^^260^267^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Variable_Misuse]^return upper +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Variable_Misuse]^return lower +  ( int )   ( secRand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Argument_Swapping]^return upper +  ( int )   ( sec.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Argument_Swapping]^return lower +  ( int )   ( upper.nextDouble (  )  *  ( sec - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return lower +  |  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return + lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower  >>  1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Operator]^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper  &  lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Wrong_Literal]^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower  )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[BugLab_Variable_Misuse]^if  ( serialVersionUID >= upper )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^if  ( lower >= serialVersionUID )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Argument_Swapping]^if  ( upper >= lower )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( lower == upper )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^return serialVersionUID +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^return lower +  ( long )   ( secRand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( serialVersionUID - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Argument_Swapping]^return upper +  ( long )   ( sec.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Argument_Swapping]^return sec +  ( long )   ( lower.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return lower +  ^  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return + lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower  >>  1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper  ==  lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Literal]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower  )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^if  ( rnd <= 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Operator]^if  ( mean < 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Literal]^if  ( mean <= 1 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^double p = Math.exp ( -rnd ) ;^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Literal]^long n = 1;^308^^^^^303^322^long n = 0;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^while  ( upper < 1000 * mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^while  ( n < 1000 * rnd )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Operator]^while  ( n > 1000 * mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Operator]^while  ( n < 1000 - mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Operator]^while / ( n < 1000 * mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Literal]^while  ( n < 999 * mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^if  ( rnd >= p )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^if  ( r >= rnd )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Argument_Swapping]^if  ( p >= r )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Operator]^if  ( r > p )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^return upper;^318^^^^^303^322^return n;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^rnd = ran.nextDouble (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^r = p * rnd;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^r = r * p;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Argument_Swapping]^r = rnd * r;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Operator]^r + = r * rnd;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Variable_Misuse]^return upper;^321^^^^^303^322^return n;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[BugLab_Wrong_Operator]^if  ( sigma < 0 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[BugLab_Wrong_Literal]^if  ( sigma <= -1 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[BugLab_Argument_Swapping]^return mu * rand.nextGaussian (  )  + sigma;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[BugLab_Argument_Swapping]^return rand * sigma.nextGaussian (  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[BugLab_Wrong_Operator]^return sigma * rand.nextGaussian (   instanceof   )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[BugLab_Wrong_Operator]^return sigma - rand.nextGaussian (  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[BugLab_Variable_Misuse]^return sigma * ran.nextGaussian (  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[BugLab_Variable_Misuse]^if  ( unif < 0.0 )   {^354^^^^^353^364^if  ( mean < 0.0 )   {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Wrong_Operator]^if  ( mean <= 0.0 )   {^354^^^^^353^364^if  ( mean < 0.0 )   {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Variable_Misuse]^double unif = ran.nextDouble (  ) ;^359^^^^^353^364^double unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Variable_Misuse]^while  ( mean == 0.0d )  {^360^^^^^353^364^while  ( unif == 0.0d )  {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Wrong_Operator]^while  ( unif != 0.0d )  {^360^^^^^353^364^while  ( unif == 0.0d )  {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Variable_Misuse]^unif = ran.nextDouble (  ) ;^361^^^^^353^364^unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Wrong_Operator]^return + -mean * Math.log ( unif ) ;^363^^^^^353^364^return -mean * Math.log ( unif ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Variable_Misuse]^return -mean * Math.log ( mean ) ;^363^^^^^353^364^return -mean * Math.log ( unif ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[BugLab_Variable_Misuse]^if  ( u >= upper )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^if  ( lower >= u )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Argument_Swapping]^if  ( upper >= lower )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Wrong_Operator]^if  ( lower > upper )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^double u = ran.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^while ( upper <= 0.0 ) {^386^^^^^377^391^while ( u <= 0.0 ) {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Wrong_Operator]^while ( u == 0.0 ) {^386^^^^^377^391^while ( u <= 0.0 ) {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^u = ran.nextDouble (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^return u + u *  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^return lower + upper *  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^return lower + u *  ( lower - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Argument_Swapping]^return u + lower *  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Argument_Swapping]^return lower + upper *  ( u - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Argument_Swapping]^return upper + u *  ( lower - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Wrong_Operator]^return lower + u *  <=  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Wrong_Operator]^return + lower + u *  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Wrong_Operator]^return lower + u *  ( upper  &&  lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[BugLab_Variable_Misuse]^if  ( ran == null )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( rand != null )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^return ran;^407^^^^^402^408^return rand;^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^if  ( secRan == null )  {^418^^^^^417^423^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( secRand != null )  {^418^^^^^417^423^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( rand != null )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^rand.setSeed ( upper ) ;^436^^^^^432^437^rand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^if  ( secRan == null )  {^446^^^^^445^450^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( secRand != null )  {^446^^^^^445^450^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^if  ( secRan == null )  {^460^^^^^459^464^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( secRand != null )  {^460^^^^^459^464^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^secRand.setSeed ( upper ) ;^463^^^^^459^464^secRand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Wrong_Operator]^if  ( rand != null )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Argument_Swapping]^secRand = SecureRandom.getInstance ( provider, algorithm ) ;^496^^^^^494^497^secRand = SecureRandom.getInstance ( algorithm, provider ) ;^[CLASS] RandomDataImpl  [METHOD] setSecureAlgorithm [RETURN_TYPE] void   String algorithm String provider [VARIABLES] SecureRandom  sec  secRan  secRand  String  algorithm  provider  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[BugLab_Variable_Misuse]^if  ( k > i )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Argument_Swapping]^if  ( n > k )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^if  ( k >= n )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^if  ( n == 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^if  ( k != 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Literal]^if  ( k == n )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^int[] index = getNatural ( k ) ;^518^^^^^508^526^int[] index = getNatural ( n ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^shuffle ( index, i - k ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^shuffle ( index, n - i ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Argument_Swapping]^shuffle ( k, n - index ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Argument_Swapping]^shuffle ( index, k - n ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^shuffle ( index, n  >>  k ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^for  ( nnt i = 0; i < k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < n; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Literal]^for  ( int i = i; i < k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^result[i] = index[n  >  i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^result[i] = index[n  &  i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Literal]^result[i] = index[n - i ];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^result[i] = kndex[n - i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^result[i] = index[k - i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^result[i] = index[n  >>  i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Operator]^result[i] = index[n  <  i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^return index;^525^^^^^508^526^return result;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[BugLab_Variable_Misuse]^if  ( i > len )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^if  ( k > i )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Argument_Swapping]^if  ( len > k )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Wrong_Operator]^if  ( k >= len )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^if  ( len == 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Wrong_Operator]^if  ( k != 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Wrong_Literal]^if  ( k == i )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^int[] index = nextPermutation ( len, len ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Argument_Swapping]^int[] index = nextPermutation ( k, len ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^int[] index = nextPermutation ( i, k ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^for  ( lennt i = 0; i < k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < len; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Argument_Swapping]^for  ( knt i = 0; i < i; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^return objects;^558^^^^^541^559^return result;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[BugLab_Variable_Misuse]^if  ( temp == 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Operator]^if  ( i > 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^if  ( i == 1 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^if  ( i == end )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^if  ( i == -1 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Variable_Misuse]^target = nextInt ( 0, temp ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^target = nextInt ( end, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^target = nextInt ( i, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^target = 1;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Variable_Misuse]^for  ( tempnt i = list.length - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Variable_Misuse]^for  ( int i = list.length - 1 ; i >= temp; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Variable_Misuse]^for  ( int i = temp - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Operator]^for  ( int i = list.length  <  1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Operator]^for  ( int i = list.length - 1 ; i > end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^for  ( int i = list.length - i ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Operator]^if  ( i != 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^if  ( i == temp )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^target = i;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^target = -1;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Variable_Misuse]^list[i] = target;^580^^^^^570^582^list[i] = temp;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^target = nextInt ( target, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^target = nextInt ( , i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Argument_Swapping]^for  ( int i = list.length.length - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Argument_Swapping]^for  ( int i = list - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Wrong_Literal]^for  ( int i = list.length  ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[BugLab_Variable_Misuse]^int[] iatural = new int[n];^591^^^^^590^596^int[] natural = new int[n];^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[BugLab_Variable_Misuse]^for  ( nnt i = 0; i < n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[BugLab_Argument_Swapping]^for  ( nnt i = 0; i < i; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[BugLab_Variable_Misuse]^natural[i] = n;^593^^^^^590^596^natural[i] = i;^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[BugLab_Wrong_Literal]^for  ( int i = n; i < n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
