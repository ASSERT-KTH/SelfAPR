[BugLab_Variable_Misuse]^if  (  ( i < 2 )  ||  ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Variable_Misuse]^if  (  ( expected.length < 2 )  ||  ( expected.length != i )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Argument_Swapping]^if  (  ( observed.length < 2 )  ||  ( expected.length != expected.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Argument_Swapping]^if  (  ( observed < 2 )  ||  ( expected.length != expected.length.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^if  (  ( expected.length < 2 )  &&  ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^if  (  ( expected.length <= 2 )  ||  ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^if  (  ( expected.length < 2 )  ||  ( expected.length == observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Literal]^if  (  ( expected.length < i )  ||  ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Argument_Swapping]^if  ( !isPositive ( observed )  || !isNonNegative ( expected )  )  {^54^^^^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^if  ( !isPositive ( expected )  && !isNonNegative ( observed )  )  {^54^^^^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Argument_Swapping]^for  ( observednt i = 0; i < i.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Argument_Swapping]^for  ( observed.lengthnt i = 0; i < i; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^for  <<  ( int i = 0; i < observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^dev =  (  ( double )  observed[i]  |  expected[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Variable_Misuse]^sumSq += sumSq * dev / expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Argument_Swapping]^sumSq += expected * dev / dev[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^sumSq += dev * dev * expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^sumSq += dev - dev / expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Argument_Swapping]^dev =  (  ( double )  expected[i] - observed[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^dev =  (  ( double )  observed[i]  ^  expected[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[BugLab_Wrong_Operator]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length  |  1 ) ;^74^75^76^^^72^79^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Wrong_Literal]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length  ) ;^74^75^76^^^72^79^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Wrong_Operator]^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length  &&  1 ) ;^75^76^^^^72^79^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Wrong_Literal]^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - null ) ;^75^76^^^^72^79^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Argument_Swapping]^return 1 - observed.cumulativeProbability ( chiSquare ( expected, chiSquaredDistribution )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Argument_Swapping]^return 1 - expected.cumulativeProbability ( chiSquare ( chiSquaredDistribution, observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Argument_Swapping]^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( observed, expected )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Wrong_Operator]^return 1  ||  chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Wrong_Literal]^return 2 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Argument_Swapping]^chiSquare ( observed, expected )  ) ;^78^^^^^72^79^chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha < 0.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "bad significance level: "   instanceof   alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "bad significance level: "  <<  alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "bad significance level: "  ==  alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "bad significance level: "  ^  alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Argument_Swapping]^return  ( chiSquareTest ( alpha, observed )  < expected ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Argument_Swapping]^return  ( chiSquareTest ( observed, expected )  < alpha ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Wrong_Operator]^return  ( chiSquareTest ( expected, observed )  <= alpha ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[BugLab_Variable_Misuse]^int nRows = row;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^int nRows = counts.length.length;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^int nRows = counts;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^int nCols = counts[0].length[0].length;^108^^^^^104^133^int nCols = counts[0].length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^int nCols = counts[].length;^108^^^^^104^133^int nCols = counts[0].length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^for  ( int nRows = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^for  ( int row = 0; row < nCols; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^for  ( int nRows = 0; row < row; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ( int row = 0; row == nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  <<  ( int row = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for   instanceof   ( int row = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  <=  ( int row = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^for  ( int row = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^for  ( int col = 0; col < row; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^for  ( int nCols = 0; col < col; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  <<  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  >  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ||  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^for  ( int col = nCols; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  <  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  >=  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^for  ( int row = -1; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^for  ( int col = row; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^for  ( int row = 0; row < nCols; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^for  ( int nRows = 0; row < row; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ( int row = 0; row > nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  !=  ( int row = 0; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^for  ( int row = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^for  ( int col = 0; col < row; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ( int col = 0; col == nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for   instanceof   ( int col = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^for  ( int col = 1; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^expected =  ( nRowsSum[row] * colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^expected =  ( rowSum[row] * nRowsSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^expected =  ( rowSum[row] * colSum[col] )  / sumSq;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^expected =  ( total[row] * colSum[col] )  / rowSum;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^expected =  ( colSum[row] * rowSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^expected =  ( rowSum[row] * total[col] )  / colSum;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^expected =  ( rowSum[row] * colSum[col] )  - total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^expected =  ( rowSum[row] / colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^sumSq +=  (  (  ( double )  counts[row][col] - total )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^sumSq +=  (  (  ( double )  expected[row][col] - counts )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  * expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq - +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  |  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^expected =  ( colSum[row] * colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^expected =  ( rowSum[row] * rowSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^expected =  ( totalSum[row] * colSum[col] )  / row;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^expected =  ( rowSum[row] * colSum[col] )  + total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  ^  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^for  ( int col = col; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^for  ( int nCols = 0; col < col; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ( int col = 0; col > nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^for  ||  ( int col = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^for  ( int col = -1; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^expected =  ( rowSum[row] * totalSum[col] )  / col;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  - expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq +=  (  (  ( double )  counts[row][col]   instanceof   expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^expected =  ( row[row] * colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Argument_Swapping]^expected =  ( col[row] * rowSumSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  >  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  >>  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Literal]^for  ( int row = nRows; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Variable_Misuse]^return total;^132^^^^^104^133^return sumSq;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[BugLab_Wrong_Operator]^double - df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[BugLab_Wrong_Operator]^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length  >>  1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[BugLab_Wrong_Operator]^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length  |  1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[BugLab_Wrong_Literal]^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length  ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[BugLab_Wrong_Literal]^double df =  (  ( double )  counts.length -4 )  *  (  ( double )  counts[0].length - 4 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[BugLab_Argument_Swapping]^return 1 - counts.cumulativeProbability ( chiSquare ( chiSquaredDistribution )  ) ;^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[BugLab_Wrong_Operator]^return 1   instanceof   chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[BugLab_Argument_Swapping]^return  ( chiSquareTest ( alpha )  < counts ) ;^163^^^^^158^164^return  ( chiSquareTest ( counts )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[BugLab_Wrong_Operator]^return  ( chiSquareTest ( counts )  <= alpha ) ;^163^^^^^158^164^return  ( chiSquareTest ( counts )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[BugLab_Argument_Swapping]^if  ( in.length.length < 2 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[BugLab_Argument_Swapping]^if  ( in < 2 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[BugLab_Wrong_Operator]^if  ( in.length <= 2 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[BugLab_Argument_Swapping]^if  ( in[0].length[0].length < 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[BugLab_Wrong_Operator]^if  ( in[0].length <= 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[BugLab_Wrong_Literal]^if  ( in[2].length < 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[BugLab_Wrong_Operator]^if  ( distributionFactory != null )  {^201^^^^^200^205^if  ( distributionFactory == null )  {^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[BugLab_Argument_Swapping]^if  ( in[0].length[i].length != in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Argument_Swapping]^if  ( inn[i].length != i[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Argument_Swapping]^if  ( in[0].lengthn[i].length != in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Operator]^if  ( in[i].length == in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Literal]^if  ( in[i].length != in[i].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Literal]^return true;^220^^^^^217^224^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 1; i > in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Argument_Swapping]^if  ( in[i].lengthn[i].length != in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Operator]^if  ( in[i].length > in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Literal]^for  ( int i = 2; i < in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Wrong_Literal]^return false;^223^^^^^217^224^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[BugLab_Argument_Swapping]^if  ( i[i] <= 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Argument_Swapping]^if  ( inn[i] <= 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Wrong_Operator]^if  ( in[i] < 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Wrong_Literal]^return true;^237^^^^^234^241^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Argument_Swapping]^for  ( in.lengthnt i = 0; i < i; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Argument_Swapping]^for  ( in.lengtht i = 0; i < in; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Wrong_Operator]^if  ( in[i] > 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Wrong_Literal]^if  ( in[i] <= 1 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Wrong_Literal]^return false;^240^^^^^234^241^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[BugLab_Argument_Swapping]^if  ( i[i] < 0 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Argument_Swapping]^if  ( inn[i] < 0 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Operator]^if  ( in[i] <= 0 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Literal]^if  ( in[i] <  )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Literal]^return true;^254^^^^^251^258^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Argument_Swapping]^for  ( in.lengthnt i = 0; i < i; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Argument_Swapping]^for  ( in.lengtht i = 0; i < in; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Wrong_Literal]^return false;^257^^^^^251^258^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[BugLab_Variable_Misuse]^if  ( jn[i][j] < 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Operator]^if  ( in[i][j] > 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^if  ( in[i][j] < i )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^return true;^272^^^^^268^277^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Variable_Misuse]^for  ( jnt i = 0; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i = 1; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i = j; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Argument_Swapping]^if  ( i[i][j] < 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Operator]^if  ( in[i][j] == 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^if  ( in[i][j] < 1 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Variable_Misuse]^for  ( int i = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Argument_Swapping]^for  ( int in[i].length = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Argument_Swapping]^for  ( it j = 0; j < inn[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Argument_Swapping]^for  ( in[i].lengthnt j = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Operator]^for  ( int j = 0; j <= in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j = -1; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j = 1; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Argument_Swapping]^for  ( jnt i = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Operator]^for  ( int j = 0; j == in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j = j; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^for  ( int i = ; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^for  ( int j = i; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[BugLab_Wrong_Literal]^return false;^276^^^^^268^277^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
