[BugLab_Wrong_Literal]^private int n = -1;^77^^^^^72^82^private int n = 0;^[CLASS] PolynomialSplineFunction   [VARIABLES] 
[BugLab_Variable_Misuse]^if  ( n < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^if  ( knots.length.length < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^if  ( knots < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Operator]^if  ( knots.length > 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^if  ( knots.length < 3 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Operator]^if  ( knots.length - 1 == polynomials.length )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Operator]^if  ( knots.length  <  1 != polynomials.length )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^if  ( knots.length -  != polynomials.length )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Variable_Misuse]^this.n = n -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^this.n = knots.length.length -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^this.n = knots -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^this.knots = new double[n ];^110^^^^^95^114^this.knots = new double[n + 1];^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^System.arraycopy ( this.knots, 0, knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^System.arraycopy ( knots, 0, n, 0, this.knots + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Operator]^System.arraycopy ( knots, 0, this.knots, 0, n  ==  1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^System.arraycopy ( knots, 1, this.knots, 1, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^System.arraycopy ( knots, n, this.knots, n, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^System.arraycopy ( knots, 0, this.knots, 0, n  ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^System.arraycopy ( this.polynomials, 0, polynomials, 0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Argument_Swapping]^System.arraycopy ( polynomials, 0, n, 0, this.polynomials ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^System.arraycopy ( polynomials, 1, this.polynomials, 1, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^System.arraycopy ( polynomials, n, this.polynomials, n, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[BugLab_Wrong_Operator]^if  ( v < knots[0] && v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^if  ( v <= knots[0] || v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^if  ( v < knots[0] || v >= knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Literal]^if  ( v < knots[-1] || v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Argument_Swapping]^int i = Arrays.binarySearch ( v, knots ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Variable_Misuse]^if  ( n < 0 )  {^136^^^^^131^146^if  ( i < 0 )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^if  ( i <= 0 )  {^136^^^^^131^146^if  ( i < 0 )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Variable_Misuse]^n = -i - 2;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^i = -i  >  2;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Literal]^i = -i ;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^i = -i  !=  2;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^if  (  i == polynomials.length  )  {^142^^^^^131^146^if  (  i >= polynomials.length  )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Argument_Swapping]^return v[i].value ( polynomials - knots[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^return polynomials[i].value ( v  <=  knots[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Wrong_Operator]^return polynomials[i].value ( v  >>  knots[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[BugLab_Variable_Misuse]^PolynomialFunction derivativePolynomials[] = iew PolynomialFunction[n];^162^^^^^161^167^PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^for  ( nnt i = 0; i < n; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^for  ( nnt i = 0; i < i; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= n; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^for  ( int i = i; i < n; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^derivativePolynomials[i] = derivativePolynomials[i].polynomialDerivative (  ) ;^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^return new PolynomialSplineFunction ( knots, polynomials ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^return new PolynomialSplineFunction ( derivativePolynomials, knots ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^return i;^176^^^^^175^177^return n;^[CLASS] PolynomialSplineFunction  [METHOD] getN [RETURN_TYPE] int   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^PolynomialFunction p[] = iew PolynomialFunction[n];^188^^^^^187^191^PolynomialFunction p[] = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^System.arraycopy ( polynomialsolynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^System.arraycopy ( derivativePolynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^System.arraycopy ( polynomials, 0, p, 0, i ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^System.arraycopy ( p, 0, polynomials, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^System.arraycopy ( nolynomials, 0, p, 0, p ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^System.arraycopy ( polynomials, i, p, i, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^System.arraycopy ( polynomials, , p, , n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^return polynomials;^190^^^^^187^191^return p;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^double out[] = iew double[n + 1];^202^^^^^201^205^double out[] = new double[n + 1];^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^double out[] = new double[n ];^202^^^^^201^205^double out[] = new double[n + 1];^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^System.arraycopy ( out, 0, out, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^System.arraycopy ( knots, 0, out, 0, i + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^System.arraycopy ( out, 0, knots, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^System.arraycopy ( knots, 0, n, 0, out + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^System.arraycopy ( knots, 0, out, 0, n  ^  1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^System.arraycopy ( knots, i, out, i, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^System.arraycopy ( knots, n, out, n, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^System.arraycopy ( knots, 0, out, 0, n  ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^return knots;^204^^^^^201^205^return out;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^if  ( out[i - 1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^if  ( x[n - 1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^if  ( x[i - 1] > x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^if  ( x[i  <  1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^if  ( x[i ] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^return true;^218^^^^^215^222^return false;^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^for  ( int i = 1; i < n; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^for  ( xnt i = 1; i < i.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^for  ( int i = 1; i < x.length.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^for  ( x.lengthnt i = 1; i < i; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^for  ( int i = 1; i <= x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^for  ( int i = n; i < x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^if  ( x[i  ^  1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^if  ( x[i - i] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^return false;^221^^^^^215^222^return true;^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
