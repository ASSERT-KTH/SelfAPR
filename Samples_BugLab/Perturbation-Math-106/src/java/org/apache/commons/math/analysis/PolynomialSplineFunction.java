[buglab_swap_variables]^if  ( knots.length.length < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^if  ( knots < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^this.n = knots.length.length -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^this.n = knots -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( this.knots, 0, knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy (  0, this.knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( knots, 0,  0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( n, 0, this.knots, 0, knots + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( knots, 0, this.knots, 0 + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( n, 0, this.polynomials, 0, polynomials ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy (  0, this.polynomials, 0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( this.polynomials, 0, polynomials, 0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( polynomials, 0,  0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( polynomials, 0, n, 0, this.polynomials ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^System.arraycopy ( polynomials, 0, this.polynomials, 0 ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[buglab_swap_variables]^if  ( knots < v[0] || v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[buglab_swap_variables]^int i = Arrays.binarySearch ( v, knots ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[buglab_swap_variables]^int i = Arrays.binarySearch ( knots ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[buglab_swap_variables]^int i = Arrays.binarySearch (  v ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[buglab_swap_variables]^return knots[i].value ( v - polynomials[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[buglab_swap_variables]^for  ( nnt i = 0; i < i; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^return new PolynomialSplineFunction ( derivativePolynomials, knots ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^return new PolynomialSplineFunction ( knots ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^return new PolynomialSplineFunction (  derivativePolynomials ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( nolynomials, 0, p, 0, p ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( polynomials, 0,  0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( p, 0, polynomials, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy (  0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( polynomials, 0, p, 0 ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( out, 0, knots, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( knots, 0,  0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( n, 0, out, 0, knots + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy (  0, out, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( knots, 0, n, 0, out + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^System.arraycopy ( knots, 0, out, 0 + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^for  ( x.lengthnt i = 1; i < i; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^for  ( xnt i = 1; i < i.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
