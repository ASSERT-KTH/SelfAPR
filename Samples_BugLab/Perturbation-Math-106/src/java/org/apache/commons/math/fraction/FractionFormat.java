[BugLab_Variable_Misuse]^this ( numeratorFormat,  ( NumberFormat ) format.clone (  )  ) ;^62^^^^^61^63^this ( format,  ( NumberFormat ) format.clone (  )  ) ;^[CLASS] FractionFormat  [METHOD] <init> [RETURN_TYPE] NumberFormat)   NumberFormat format [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  format  numeratorFormat  boolean  
[BugLab_Variable_Misuse]^this.numeratorFormat = format;^75^^^^^71^77^this.numeratorFormat = numeratorFormat;^[CLASS] FractionFormat  [METHOD] <init> [RETURN_TYPE] NumberFormat)   NumberFormat numeratorFormat NumberFormat denominatorFormat [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  format  numeratorFormat  boolean  
[BugLab_Variable_Misuse]^this.denominatorFormat = numeratorFormat;^76^^^^^71^77^this.denominatorFormat = denominatorFormat;^[CLASS] FractionFormat  [METHOD] <init> [RETURN_TYPE] NumberFormat)   NumberFormat numeratorFormat NumberFormat denominatorFormat [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  format  numeratorFormat  boolean  
[BugLab_Variable_Misuse]^return new FractionFormat ( numeratorFormat ) ;^114^^^^^112^115^return new FractionFormat ( f ) ;^[CLASS] FractionFormat  [METHOD] getImproperInstance [RETURN_TYPE] FractionFormat   Locale locale [VARIABLES] Locale  locale  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  numeratorFormat  
[BugLab_Variable_Misuse]^return new ProperFractionFormat ( numeratorFormat ) ;^132^^^^^130^133^return new ProperFractionFormat ( f ) ;^[CLASS] FractionFormat  [METHOD] getProperInstance [RETURN_TYPE] FractionFormat   Locale locale [VARIABLES] Locale  locale  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  numeratorFormat  
[BugLab_Wrong_Literal]^nf.setParseIntegerOnly ( false ) ;^155^^^^^152^157^nf.setParseIntegerOnly ( true ) ;^[CLASS] FractionFormat  [METHOD] getDefaultNumberFormat [RETURN_TYPE] NumberFormat   Locale locale [VARIABLES] Locale  locale  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Variable_Misuse]^return numeratorFormat;^156^^^^^152^157^return nf;^[CLASS] FractionFormat  [METHOD] getDefaultNumberFormat [RETURN_TYPE] NumberFormat   Locale locale [VARIABLES] Locale  locale  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Argument_Swapping]^getNumeratorFormat (  ) .format ( toAppendTo.getNumerator (  ) , fraction, pos ) ;^175^^^^^169^181^getNumeratorFormat (  ) .format ( fraction.getNumerator (  ) , toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Fraction fraction StringBuffer toAppendTo FieldPosition pos [VARIABLES] Fraction  fraction  StringBuffer  toAppendTo  boolean  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Argument_Swapping]^getNumeratorFormat (  ) .format ( fraction.getNumerator (  ) , pos, toAppendTo ) ;^175^^^^^169^181^getNumeratorFormat (  ) .format ( fraction.getNumerator (  ) , toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Fraction fraction StringBuffer toAppendTo FieldPosition pos [VARIABLES] Fraction  fraction  StringBuffer  toAppendTo  boolean  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Argument_Swapping]^getDenominatorFormat (  ) .format ( toAppendTo.getDenominator (  ) , fraction, pos ) ;^177^178^^^^169^181^getDenominatorFormat (  ) .format ( fraction.getDenominator (  ) , toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Fraction fraction StringBuffer toAppendTo FieldPosition pos [VARIABLES] Fraction  fraction  StringBuffer  toAppendTo  boolean  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Argument_Swapping]^getDenominatorFormat (  ) .format ( pos.getDenominator (  ) , toAppendTo, fraction ) ;^177^178^^^^169^181^getDenominatorFormat (  ) .format ( fraction.getDenominator (  ) , toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Fraction fraction StringBuffer toAppendTo FieldPosition pos [VARIABLES] Fraction  fraction  StringBuffer  toAppendTo  boolean  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Wrong_Operator]^if  ( obj  &  Fraction )  {^201^^^^^196^217^if  ( obj instanceof Fraction )  {^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Wrong_Operator]^} else if  ( obj  &  Number )  {^203^^^^^196^217^} else if  ( obj instanceof Number )  {^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Variable_Misuse]^ret = format (  new Fraction (  (  ( Number ) obj ) .doubleValue (  )  ) , ret, pos ) ;^205^206^^^^196^217^ret = format (  new Fraction (  (  ( Number ) obj ) .doubleValue (  )  ) , toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Argument_Swapping]^ret = format (  new Fraction (  (  ( Number ) obj ) .doubleValue (  )  ) , pos, toAppendTo ) ;^205^206^^^^196^217^ret = format (  new Fraction (  (  ( Number ) obj ) .doubleValue (  )  ) , toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Argument_Swapping]^ret = format (   ( Fraction ) obj, pos, toAppendTo ) ;^202^^^^^196^217^ret = format (   ( Fraction ) obj, toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Variable_Misuse]^ret = format (   ( Fraction ) obj, ret, pos ) ;^202^^^^^196^217^ret = format (   ( Fraction ) obj, toAppendTo, pos ) ;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Wrong_Operator]^} else if  ( obj  >  Number )  {^203^^^^^196^217^} else if  ( obj instanceof Number )  {^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Variable_Misuse]^return toAppendTo;^216^^^^^196^217^return ret;^[CLASS] FractionFormat  [METHOD] format [RETURN_TYPE] StringBuffer   Object obj StringBuffer toAppendTo FieldPosition pos [VARIABLES] StringBuffer  ret  toAppendTo  boolean  ConvergenceException  ex  Object  obj  FieldPosition  pos  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  
[BugLab_Variable_Misuse]^return numeratorFormat;^224^^^^^223^225^return denominatorFormat;^[CLASS] FractionFormat  [METHOD] getDenominatorFormat [RETURN_TYPE] NumberFormat   [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  boolean  
[BugLab_Variable_Misuse]^return nf;^232^^^^^231^233^return numeratorFormat;^[CLASS] FractionFormat  [METHOD] getNumeratorFormat [RETURN_TYPE] NumberFormat   [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  boolean  
[BugLab_Wrong_Literal]^ParsePosition parsePosition = new ParsePosition ( 1 ) ;^243^^^^^242^250^ParsePosition parsePosition = new ParsePosition ( 0 ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Argument_Swapping]^Fraction result = parse ( parsePosition, source ) ;^244^^^^^242^250^Fraction result = parse ( source, parsePosition ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^if  ( parsePosition.getIndex (  )  >= 0 )  {^245^^^^^242^250^if  ( parsePosition.getIndex (  )  == 0 )  {^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Argument_Swapping]^throw new ParseException ( "Unparseable fraction number: \"" + parsePosition + "\"", source.getErrorIndex (  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  &&  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \""  ^  source + "\"", parsePosition.getErrorIndex (  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  >=  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \""  &  source + "\"", parsePosition.getErrorIndex (  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  ||  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \""  &&  source + "\"", parsePosition.getErrorIndex (  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  &  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Wrong_Operator]^throw new ParseException ( "Unparseable fraction number: \""  <=  source + "\"", parsePosition.getErrorIndex (  )  ) ;^246^247^^^^242^250^throw new ParseException ( "Unparseable fraction number: \"" + source + "\"", parsePosition.getErrorIndex (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source [VARIABLES] Fraction  result  String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  parsePosition  
[BugLab_Argument_Swapping]^parseAndIgnoreWhitespace ( pos, source ) ;^263^^^^^248^278^parseAndIgnoreWhitespace ( source, pos ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^Number num = getNumeratorFormat (  ) .parse ( pos, source ) ;^266^^^^^251^281^Number num = getNumeratorFormat (  ) .parse ( source, pos ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^if  ( den == null )  {^267^^^^^252^282^if  ( num == null )  {^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Operator]^if  ( num != null )  {^267^^^^^252^282^if  ( num == null )  {^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^pos.setIndex ( startIndex ) ;^271^^^^^256^286^pos.setIndex ( initialIndex ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^char c = parseNextCharacter ( pos, source ) ;^277^^^^^262^292^char c = parseNextCharacter ( source, pos ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^return new Fraction ( den.intValue (  ) , 1 ) ;^282^^^^^267^297^return new Fraction ( num.intValue (  ) , 1 ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Literal]^return new Fraction ( num.intValue (  ) , startIndex ) ;^282^^^^^267^297^return new Fraction ( num.intValue (  ) , 1 ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^pos.setIndex ( startIndex ) ;^290^^^^^275^305^pos.setIndex ( initialIndex ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^pos.setErrorIndex ( initialIndex ) ;^291^^^^^276^306^pos.setErrorIndex ( startIndex ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^parseAndIgnoreWhitespace ( pos, source ) ;^296^^^^^281^311^parseAndIgnoreWhitespace ( source, pos ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^Number den = getDenominatorFormat (  ) .parse ( pos, source ) ;^299^^^^^284^314^Number den = getDenominatorFormat (  ) .parse ( source, pos ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^if  ( num == null )  {^300^^^^^285^315^if  ( den == null )  {^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Operator]^if  ( den != null )  {^300^^^^^285^315^if  ( den == null )  {^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^pos.setIndex ( startIndex ) ;^304^^^^^289^319^pos.setIndex ( initialIndex ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^return new Fraction ( den.intValue (  ) , num.intValue (  )  ) ;^308^^^^^293^323^return new Fraction ( num.intValue (  ) , den.intValue (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^return new Fraction ( den.intValue (  ) , den.intValue (  )  ) ;^308^^^^^293^323^return new Fraction ( num.intValue (  ) , den.intValue (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^return new Fraction ( num.intValue (  ) , num.intValue (  )  ) ;^308^^^^^293^323^return new Fraction ( num.intValue (  ) , den.intValue (  )  ) ;^[CLASS] FractionFormat  [METHOD] parse [RETURN_TYPE] Fraction   String source ParsePosition pos [VARIABLES] boolean  Number  den  num  char  c  String  source  long  serialVersionUID  int  initialIndex  startIndex  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^return parse ( pos, source ) ;^319^^^^^318^320^return parse ( source, pos ) ;^[CLASS] FractionFormat  [METHOD] parseObject [RETURN_TYPE] Object   String source ParsePosition pos [VARIABLES] String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^if  ( nf == null )  {^329^^^^^328^334^if  ( format == null )  {^[CLASS] FractionFormat  [METHOD] setDenominatorFormat [RETURN_TYPE] void   NumberFormat format [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  boolean  
[BugLab_Wrong_Operator]^if  ( format != null )  {^329^^^^^328^334^if  ( format == null )  {^[CLASS] FractionFormat  [METHOD] setDenominatorFormat [RETURN_TYPE] void   NumberFormat format [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  boolean  
[BugLab_Variable_Misuse]^if  ( numeratorFormat == null )  {^343^^^^^342^348^if  ( format == null )  {^[CLASS] FractionFormat  [METHOD] setNumeratorFormat [RETURN_TYPE] void   NumberFormat format [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  boolean  
[BugLab_Wrong_Operator]^if  ( format != null )  {^343^^^^^342^348^if  ( format == null )  {^[CLASS] FractionFormat  [METHOD] setNumeratorFormat [RETURN_TYPE] void   NumberFormat format [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  boolean  
[BugLab_Variable_Misuse]^this.numeratorFormat = numeratorFormat;^347^^^^^342^348^this.numeratorFormat = format;^[CLASS] FractionFormat  [METHOD] setNumeratorFormat [RETURN_TYPE] void   NumberFormat format [VARIABLES] long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  boolean  
[BugLab_Argument_Swapping]^parseNextCharacter ( pos, source ) ;^359^^^^^356^361^parseNextCharacter ( source, pos ) ;^[CLASS] FractionFormat  [METHOD] parseAndIgnoreWhitespace [RETURN_TYPE] void   String source ParsePosition pos [VARIABLES] String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Operator]^pos.setIndex ( pos.getIndex (  )   ==  1 ) ;^360^^^^^356^361^pos.setIndex ( pos.getIndex (  )  - 1 ) ;^[CLASS] FractionFormat  [METHOD] parseAndIgnoreWhitespace [RETURN_TYPE] void   String source ParsePosition pos [VARIABLES] String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Literal]^pos.setIndex ( pos.getIndex (  )   ) ;^360^^^^^356^361^pos.setIndex ( pos.getIndex (  )  - 1 ) ;^[CLASS] FractionFormat  [METHOD] parseAndIgnoreWhitespace [RETURN_TYPE] void   String source ParsePosition pos [VARIABLES] String  source  boolean  long  serialVersionUID  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^if  ( n < n )  {^374^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^if  ( index < index )  {^374^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^if  ( n < index )  {^374^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Operator]^if  ( index <= n )  {^374^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Operator]^if  ( index == n )  {^374^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^if  ( n < n )  {^381^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Argument_Swapping]^if  ( n < index )  {^381^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Wrong_Operator]^if  ( index <= n )  {^381^^^^^369^387^if  ( index < n )  {^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^ret = ret;^382^^^^^369^387^ret = c;^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^} while  ( Character.isWhitespace ( ret )  && index < n ) ;^378^^^^^369^387^} while  ( Character.isWhitespace ( c )  && index < n ) ;^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
[BugLab_Variable_Misuse]^pos.setIndex ( n ) ;^379^^^^^369^387^pos.setIndex ( index ) ;^[CLASS] FractionFormat  [METHOD] parseNextCharacter [RETURN_TYPE] char   String source ParsePosition pos [VARIABLES] boolean  char  c  ret  String  source  long  serialVersionUID  int  index  n  NumberFormat  denominatorFormat  f  format  nf  numeratorFormat  ParsePosition  pos  
