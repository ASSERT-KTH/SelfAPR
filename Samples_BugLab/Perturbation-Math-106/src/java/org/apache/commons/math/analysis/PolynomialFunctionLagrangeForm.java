[buglab_swap_variables]^verifyInterpolationArray ( y, x ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^verifyInterpolationArray (  y ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^verifyInterpolationArray ( x ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( this.x, 0, x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy (  0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( x, 0,  0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( x, 0, x.length, 0, this.x ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( x, 0, this.x, 0 ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( y.length, 0, this.y, 0, y ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy (  0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( y, 0, y.length, 0, this.y ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( y, 0,  0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( y, 0, this.y, 0 ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^return evaluate ( x, z, y ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[buglab_swap_variables]^return evaluate ( x, y ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[buglab_swap_variables]^return evaluate ( z, y, x ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[buglab_swap_variables]^return evaluate (  y, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[buglab_swap_variables]^return evaluate ( y, x, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[buglab_swap_variables]^return evaluate ( x,  z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[buglab_swap_variables]^return x - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^return x.length.length - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( out, 0, x, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( x, 0,  0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy (  0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( x, 0, x.length, 0, out ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( x, 0, out, 0 ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( y, 0, y.length, 0, out ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( y, 0,  0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( out, 0, y, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy (  0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( y, 0, out, 0 ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( out, 0, coefficients, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( coefficients, 0,  0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy (  0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( coefficients.length, 0, out, 0, coefficients ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^System.arraycopy ( coefficients, 0, out, 0 ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[buglab_swap_variables]^verifyInterpolationArray ( y, x ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^verifyInterpolationArray (  y ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^verifyInterpolationArray ( x ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^n = x.length.length;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^n = x;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^if  ( min_dist < dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^for  ( n = 0; i < i; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^dist = Math.abs ( x - z[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^throw new FunctionEvaluationException ( x, "Identical abscissas cause division by zero: z[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^throw new FunctionEvaluationException (  "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^throw new FunctionEvaluationException ( i, "Identical abscissas cause division by zero: x[" + z + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^for  ( n = 1; i < i; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^if  ( nearestearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^for  ( n = 0; j < j-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: i[" + x + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^tc = z[j] - x;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^w =  ( c[j+1] - divider[j] )  / d;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^d[j] = w * td;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^w =  ( d[j+1] - c[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^c[j] = w * tc;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^td = z[i+j] - x;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[buglab_swap_variables]^for  ( n = 0; i < i; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^for  ( n = 0; i < i; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^for  ( i = j; j > 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^c[j] = x[j-1] - c[j] * c[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^if  ( j != i )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^for  ( n = j-2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^tc[j] = c[j+1] + x[j+1] * tc[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^tc[j] = tc[j+1] + c[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^coefficients[j] += tc * t[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^t = d[i] / y;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^coefficients[n-1] += tc * t[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^for  ( n = 0; j < j; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^tc[j] = x[j+1] + tc[j+1] * c[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[buglab_swap_variables]^if  ( y.length < 2 || x.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[buglab_swap_variables]^if  ( y < 2 || x.length.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[buglab_swap_variables]^if  ( y.length != x.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
