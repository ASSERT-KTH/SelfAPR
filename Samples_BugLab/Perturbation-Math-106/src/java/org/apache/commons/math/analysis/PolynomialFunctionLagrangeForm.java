[BugLab_Variable_Misuse]^verifyInterpolationArray ( coefficients, y ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^verifyInterpolationArray ( y, x ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^this.y = new double[x.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^this.x = new double[y.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( y, 0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( x, 0, x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( this.x, 0, x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( x, 0, x.length, 0, this.x ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Wrong_Literal]^System.arraycopy ( x, -1, this.x, -1, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( x, 0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( y, 0, y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( y, 0, this.y, 0, null ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( this.y, 0, y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( y.length, 0, this.y, 0, y ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Wrong_Literal]^coefficientsComputed = true;^73^^^^^65^74^coefficientsComputed = false;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^return evaluate ( y, y, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[BugLab_Variable_Misuse]^return evaluate ( x, x, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[BugLab_Argument_Swapping]^return evaluate ( x, z, y ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[BugLab_Argument_Swapping]^return evaluate ( z, y, x ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[BugLab_Argument_Swapping]^return evaluate ( y, x, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[BugLab_Variable_Misuse]^return y.length - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^return x - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^return x.length.length - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Wrong_Operator]^return x.length  ==  1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Wrong_Literal]^return x.length ;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( x, 0, y, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( y, 0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( out, 0, x, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( x, 0, x.length, 0, out ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^return y;^107^^^^^104^108^return out;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( x, 0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( out, 0, y, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( y.length, 0, out, 0, y ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( y, 0, y.length, 0, out ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^return y;^120^^^^^117^121^return out;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( coefficients, 0, y, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^System.arraycopy ( y, 0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( coefficients, 0, coefficients.length, 0, out ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^System.arraycopy ( coefficients.length, 0, out, 0, coefficients ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Wrong_Literal]^System.arraycopy ( coefficients, -1, out, -1, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^return y;^136^^^^^130^137^return out;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[BugLab_Wrong_Literal]^int i, j, n, nearest = j;^157^^^^^142^172^int i, j, n, nearest = 0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^verifyInterpolationArray ( out, y ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^verifyInterpolationArray ( x, out ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^verifyInterpolationArray ( y, x ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^n = y.length;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^n = x.length.length;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^n = x;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c = nearestew double[n];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^d = nearestew double[n];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^if  ( z < min_dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^if  ( dist < w )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^if  ( min_dist < dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( dist <= min_dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^nearest = nearest;^173^^^^^158^188^nearest = i;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^min_dist = z;^174^^^^^159^189^min_dist = dist;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^for  ( nearest = 0; i < n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^for  ( i = 0; i < nearest; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^for  ( n = 0; i < i; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ( i = 0; i <= n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ( i = 0; i > n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^for  ( i = ; i < n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( dist > min_dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^min_dist = value;^174^^^^^159^189^min_dist = dist;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[i] = x[i];^168^^^^^153^183^c[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^dist = Math.abs ( w - x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^dist = Math.abs ( x - z[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^dist = Math.abs ( z  >>  x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^dist = Math.abs ( z - y[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^dist = Math.abs ( z  &&  x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^d[i] = x[i];^169^^^^^154^184^d[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^dist = Math.abs ( td - x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^dist = Math.abs ( z  ==  x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^dist = Math.abs ( value - x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^if  ( w == 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( divider > 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^throw new FunctionEvaluationException ( w, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + nearest + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+nearest )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: y[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^throw new FunctionEvaluationException ( i, "Identical abscissas cause division by zero: x[" + z + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^throw new FunctionEvaluationException ( x, "Identical abscissas cause division by zero: z[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  <<  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  <  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ^  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <<  i  <<  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  |  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^throw new FunctionEvaluationException ( td, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  >  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  <=  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ==  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >=  i  >=  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ==  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  &  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^if  ( nearestearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( nearest == 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if / ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  >=  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  |  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  >>  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^value += y[nearest];^202^^^^^198^203^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^value += y[nearest];^199^^^^^184^214^value += c[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^for  ( n = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^for  ( i = 1; i < nearest; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^for  ( n = 1; i < i; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ( i = 1; i > n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  >>  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  !=  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  &  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ||  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  &&  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  <  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  >=  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ( i = 1; i <= n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  |  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^for  ( i = n; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^for  ( i = nearest; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( divider < 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  >=  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  &&  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["   instanceof   i   instanceof   "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ^  i  ^  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ^  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ||  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^if  ( n < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^if  ( n < 0.5* ( nearest-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( nearest <= 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if - ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  <  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^value += x[nearest];^199^^^^^184^214^value += c[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^for  ( nearest = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^for  ( j = 0; j < nearest-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^for  ( n = 0; j < j-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ( j = 0; j <= n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  >=  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  !=  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  <  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  >  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ^  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ||  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  <<  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^for  ( j = i; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^if  ( z == 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( divider != 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  >>  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >  i  >  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <=  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  |  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^tc = y[j] - z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^tc = x[j] - value;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^tc = z[j] - x;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^tc = x[j]  &&  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^td = y[i+j] - z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^td = x[i+j] - td;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^td = x[i+j]  ==  z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^divider = y[j] - x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^divider = x[j]  ||  x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^w =  ( y[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^w =  ( c[j+1] - y[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^w =  ( c[j+1] - d[j] )  / z;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^w =  ( d[j+1] - c[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ( c[j+1] - d[j] )  - divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ( c[j+1]  !=  d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  |  ( c[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^w =  ( c[j+j] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[j] = ty * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[j] = z * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^c[j] = w * tc;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^c[j] / = tc * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^d[j] = ty * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^d[j] = z * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^d[j] = td * z;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^d[j] = w * td;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^d[j] / = td * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^throw new FunctionEvaluationException ( value, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +   instanceof   ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <=  i  <=  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ||  i  ||  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^tc = x[j] - td;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^tc = x[j]  !=  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^td = z[i+j] - x;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^td = x[i+j]  >>  z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^divider = x[j]  >>  x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^w =  ( c[j+1] - divider[j] )  / d;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ( c[j+1] - d[j] )  * divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ( c[j+1]  ^  d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  >=  ( c[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^w =  ( c[j+2] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[j] = tc * td;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^d[j] - = td * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^value += y[nearest];^202^^^^^187^217^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: out[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  &&  i  &&  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  !=  i  !=  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  &&  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  ( j = 0; j > n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for   instanceof   ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  |  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^for  &&  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^for  ( j = 1; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^if  ( divider >= 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >>  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: i[" + x + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  !=  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ||  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^tc = x[j]  ^  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^td = out[i+j] - z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^td = x[i+j] - w;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^td = x[i+j]  >=  z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^w =  ( c[j+1] - d[j] )  / value;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Argument_Swapping]^w =  ( divider[j+1] - d[j] )  / c;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ( c[j+1]  <=  d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ==  ( c[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[j] = tc * z;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^c[j] - = tc * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <  i  <  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^for  ( j = nearest; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^tc = out[j] - z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^tc = x[j]  |  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^td = x[i+j]  <  z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^divider = x[j]  |  x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ( c[j+1] - d[j] )  + divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  ( c[j+1]  |  d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^w =  <=  ( c[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Literal]^w =  ( c[j+0] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[j] = tx * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[j] = value * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^c[j] = tc * value;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^d[j] = tx * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^d[j] = w * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ==  i  ==  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Variable_Misuse]^return z;^206^^^^^191^221^return value;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[BugLab_Wrong_Operator]^n = degree (  ||  )  + 1;^222^^^^^207^237^n = degree (  )  + 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^n = degree (  )  ;^222^^^^^207^237^n = degree (  )  + 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients = jew double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( n = 0; i < n; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( i = 0; i < j; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^for  ( n = 0; i < i; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  ( i = 0; i <= n; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^c = jew double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c = new double[n+n];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[j] = 1.j;^230^^^^^215^245^c[0] = 1.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( i = 0; i < j; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^for  ( n = 0; i < i; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  ( i = 0; i <= n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  >  ( i = 0; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( i = j; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( i = -1; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( j = n; j > 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( n = i; j > 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^for  ( i = j; j > 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  ( j = i; j >= 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = i; j > i; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^c[j] = y[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^c[j] = x[j-1] - c[j] * c[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] = c[j-1]  ^  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] = c[j-1]   instanceof   c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] - = c[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[j] = c[j-0] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^c[j] = c[j-1] - c[j] * y[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] = c[j-1]  |  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] = c[j-1]  <=  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] + = c[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[j] = c[j-2] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[] *=  ( -x[i] ) ;^235^^^^^220^250^c[0] *=  ( -x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[i+j] = j;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[i+2] = 2;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] = c[j-1]  &  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^c[j] = tc[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^c[j] = c[j-1]  <<  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[j] = c[j-j] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^c[i] *=  ( -x[i] ) ;^235^^^^^220^250^c[0] *=  ( -x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc = jew double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^if  ( n != j )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^if  ( i != n )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^if  ( j != i )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^if  ( i >= j )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^d *=  ( out[i] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^d *=  ( x[i]  ^  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^if  ( t == 0.0 )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^if  ( d < 0.0 )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( n = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( i = 0; i < j; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^for  ( n = 0; i < i; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  ( i = 0; i <= n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  &  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  >=  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  >>  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  <=  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  |  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( i = i; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( i = j; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( i = 1; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^d *=  ( x[i]  ==  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^if  ( d != 0.0 )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( i = 0; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( j = 0; j < i; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^for  ( n = 0; j < j; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  ( j = 0; j <= n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^if  ( i == j )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^d *=  ( tc[i] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^d *=  ( x[i]  !=  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( j = j-2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( n = n-2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  ( j = n-2; j > 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = n-1; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc[j] = c[j+1] + y[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc[j] = y[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc[j] = c[j+1] + tc[j+1] * y[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^tc[j] = x[j+1] + tc[j+1] * c[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^tc[j] = c[j+1] + x[j+1] * tc[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^tc[j] / = c[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^tc[j] = c[j+0] + tc[j+0] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^tc[j] = c[j+i] + tc[j+i] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients[j] += d * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^coefficients[j] + += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^d = j;^242^^^^^227^257^d = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = -1; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^d *=  ( y[i] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^d *=  ( x[i]   instanceof   x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^t = y[i] / t;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^t = x[i] / d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^t = y[i] + d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc[n-1] = y[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients[n-1] += d * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients[n-1] += t * y[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^coefficients[n-1] += tc * t[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^coefficients[n-1] + += t * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^coefficients[n-2] += t * tc[n-2];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = n-j; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^tc[j] = tc[j+1] + c[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^tc[j] = c[j+n] + tc[j+n] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients[j] += t * y[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^coefficients[j] / += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^for  ( j = 0; j < j; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^for  ( j = 0; j > n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = i; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^if  ( i <= j )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^d *=  ( x[i]  <=  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = n-3; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = n-2; j >= i; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc[j] = c[j+1] + x[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc[j] = x[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^tc[j] = c[j+1] + tc[j+1] * out[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^tc[j] = c[j+2] + tc[j+2] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients[j] += t * out[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^coefficients[j] += tc * t[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^d = n;^242^^^^^227^257^d = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^for  ( j = 1; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^d *=  ( x[i]  <<  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Argument_Swapping]^t = d[i] / y;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^tc[n-] = c[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients[n-1] += t * x[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^tc[j] + = c[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^coefficients[j] += t * x[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Operator]^coefficients[j] - += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Wrong_Literal]^coefficientsComputed = false;^265^^^^^250^280^coefficientsComputed = true;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[BugLab_Variable_Misuse]^if  ( y.length < 2 || y.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( x.length < 2 || x.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( y.length < 2 || x.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( x.length < 2 && y.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( x.length <= 2 || y.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( x.length < 2 || y.length == 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Wrong_Literal]^if  ( x.length < 3 || y.length < 3 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( y.length != y.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( x.length != tc.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( y.length != x.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( x.length != y )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( x.length <= y.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
