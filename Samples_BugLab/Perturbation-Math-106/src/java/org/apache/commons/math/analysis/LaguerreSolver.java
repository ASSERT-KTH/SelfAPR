[buglab_swap_variables]^if  ( min.value ( p )  == 0.0 )  { return min; }^87^^^^^83^98^if  ( p.value ( min )  == 0.0 )  { return min; }^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( max.value ( p )  == 0.0 )  { return max; }^88^^^^^83^98^if  ( p.value ( max )  == 0.0 )  { return max; }^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( initial.value ( p )  == 0.0 )  { return initial; }^89^^^^^83^98^if  ( p.value ( initial )  == 0.0 )  { return initial; }^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifyBracketing ( max, min, p ) ;^91^^^^^83^98^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifyBracketing (  max, p ) ;^91^^^^^83^98^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifyBracketing ( min,  p ) ;^91^^^^^83^98^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifyBracketing ( p, max, min ) ;^91^^^^^83^98^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifyBracketing ( min, max ) ;^91^^^^^83^98^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifySequence ( max, initial, min ) ;^92^^^^^83^98^verifySequence ( min, initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifySequence (  initial, max ) ;^92^^^^^83^98^verifySequence ( min, initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifySequence ( initial, min, max ) ;^92^^^^^83^98^verifySequence ( min, initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifySequence ( min,  max ) ;^92^^^^^83^98^verifySequence ( min, initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^verifySequence ( min, initial ) ;^92^^^^^83^98^verifySequence ( min, initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( isBracketing ( initial, min, p )  )  {^93^^^^^83^98^if  ( isBracketing ( min, initial, p )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( isBracketing (  initial, p )  )  {^93^^^^^83^98^if  ( isBracketing ( min, initial, p )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( isBracketing ( min,  p )  )  {^93^^^^^83^98^if  ( isBracketing ( min, initial, p )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( isBracketing ( p, initial, min )  )  {^93^^^^^83^98^if  ( isBracketing ( min, initial, p )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( isBracketing ( min, initial )  )  {^93^^^^^83^98^if  ( isBracketing ( min, initial, p )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^return solve ( max, initial ) ;^96^^^^^83^98^return solve ( initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^return solve (  max ) ;^96^^^^^83^98^return solve ( initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^return solve ( initial ) ;^96^^^^^83^98^return solve ( initial, max ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^return solve ( initial, min ) ;^94^^^^^83^98^return solve ( min, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^return solve (  initial ) ;^94^^^^^83^98^return solve ( min, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^return solve ( min ) ;^94^^^^^83^98^return solve ( min, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( isBracketing ( min, p, initial )  )  {^93^^^^^83^98^if  ( isBracketing ( min, initial, p )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  initial  max  min  
[buglab_swap_variables]^if  ( min.value ( p )  == 0.0 )  { return min; }^122^^^^^119^149^if  ( p.value ( min )  == 0.0 )  { return min; }^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( max.value ( p )  == 0.0 )  { return max; }^123^^^^^119^149^if  ( p.value ( max )  == 0.0 )  { return max; }^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^verifyBracketing ( max, min, p ) ;^124^^^^^119^149^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^verifyBracketing (  max, p ) ;^124^^^^^119^149^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^verifyBracketing ( min,  p ) ;^124^^^^^119^149^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^verifyBracketing ( min, p, max ) ;^124^^^^^119^149^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^verifyBracketing ( min, max ) ;^124^^^^^119^149^verifyBracketing ( min, max, p ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^for  ( coefficients.lengthnt i = 0; i < i; i++ )  {^128^^^^^119^149^for  ( int i = 0; i < coefficients.length; i++ )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^for  ( int i = 0; i < coefficients.length.length; i++ )  {^128^^^^^119^149^for  ( int i = 0; i < coefficients.length; i++ )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^for  ( cnt i = 0; i < ioefficients.length; i++ )  {^128^^^^^119^149^for  ( int i = 0; i < coefficients.length; i++ )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^for  ( int i = 0; i < c; i++ )  {^128^^^^^119^149^for  ( int i = 0; i < coefficients.length; i++ )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^c[i] = new Complex ( c[i], 0.0 ) ;^129^^^^^119^149^c[i] = new Complex ( coefficients[i], 0.0 ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^Complex initial = new Complex ( 0.5 *  ( max + min ) , 0.0 ) ;^131^^^^^119^149^Complex initial = new Complex ( 0.5 *  ( min + max ) , 0.0 ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^Complex z = solve ( initial, c ) ;^132^^^^^119^149^Complex z = solve ( c, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^Complex z = solve (  initial ) ;^132^^^^^119^149^Complex z = solve ( c, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^Complex z = solve ( c ) ;^132^^^^^119^149^Complex z = solve ( c, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK (  max, z )  )  {^133^^^^^119^149^if  ( isRootOK ( min, max, z )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( max, min, z )  )  {^133^^^^^119^149^if  ( isRootOK ( min, max, z )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( min,  z )  )  {^133^^^^^119^149^if  ( isRootOK ( min, max, z )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( min, max )  )  {^133^^^^^119^149^if  ( isRootOK ( min, max, z )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( iterationCount.getReal (  ) , z ) ;^134^^^^^119^149^setResult ( z.getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( z.getReal (  )  ) ;^134^^^^^119^149^setResult ( z.getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( min, z, max )  )  {^133^^^^^119^149^if  ( isRootOK ( min, max, z )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^Complex[] root = solveAll ( initial, c ) ;^139^^^^^119^149^Complex[] root = solveAll ( c, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^Complex[] root = solveAll (  initial ) ;^139^^^^^119^149^Complex[] root = solveAll ( c, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^Complex[] root = solveAll ( c ) ;^139^^^^^119^149^Complex[] root = solveAll ( c, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( max, min, root[i] )  )  {^141^^^^^119^149^if  ( isRootOK ( min, max, root[i] )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK (  max, root[i] )  )  {^141^^^^^119^149^if  ( isRootOK ( min, max, root[i] )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( min,  root[i] )  )  {^141^^^^^119^149^if  ( isRootOK ( min, max, root[i] )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( root, max, min[i] )  )  {^141^^^^^119^149^if  ( isRootOK ( min, max, root[i] )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( min, max[i] )  )  {^141^^^^^119^149^if  ( isRootOK ( min, max, root[i] )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( rootsRootOK ( min, max, i[i] )  )  {^141^^^^^119^149^if  ( isRootOK ( min, max, root[i] )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( iterationCount[i].getReal (  ) , root ) ;^142^^^^^119^149^setResult ( root[i].getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( root[i].getReal (  ) , iterationCountterationCount ) ;^142^^^^^119^149^setResult ( root[i].getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( root[i].getReal (  ) terationCount ) ;^142^^^^^119^149^setResult ( root[i].getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( root[i].getReal (  ) , i ) ;^142^^^^^119^149^setResult ( root[i].getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( root[i].getReal (  )  ) ;^142^^^^^119^149^setResult ( root[i].getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^setResult ( i[i].getReal (  ) , rootterationCount ) ;^142^^^^^119^149^setResult ( root[i].getReal (  ) , iterationCount ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^if  ( isRootOK ( min, root, max[i] )  )  {^141^^^^^119^149^if  ( isRootOK ( min, max, root[i] )  )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] Complex[]  c  root  boolean  double[]  coefficients  double  max  min  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  initial  z  
[buglab_swap_variables]^double tolerance = Math.max ( z * relativeAccuracy.abs (  ) , absoluteAccuracy ) ;^161^^^^^160^165^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^double tolerance = Math.max ( absoluteAccuracy * z.abs (  ) , relativeAccuracy ) ;^161^^^^^160^165^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^double tolerance = Math.max ( relativeAccuracy * absoluteAccuracy.abs (  ) , z ) ;^161^^^^^160^165^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^double tolerance = Math.max ( relativeAccuracy * z.abs (  )  ) ;^161^^^^^160^165^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence ( max, z.getReal (  ) , min )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence (  z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence ( min, max.getReal (  ) , z )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence ( min.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence ( min, z.getReal (  )  )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence ( min, tolerance.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= z || z.abs (  )  <= functionValueAccuracy ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= functionValueAccuracy || z.abs (  )  <= tolerance ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^return  ( isSequence ( z, min.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^162^163^164^^^160^165^return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] isRootOK [RETURN_TYPE] boolean   double min double max Complex z [VARIABLES] PolynomialFunction  p  boolean  long  serialVersionUID  double  max  min  tolerance  Complex  z  
[buglab_swap_variables]^c[i] = new Complex ( coefficientsoefficients[i], 0.0 ) ;^186^^^^^180^189^c[i] = new Complex ( coefficients[i], 0.0 ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   double[] coefficients double initial [VARIABLES] Complex[]  c  boolean  double[]  coefficients  double  initial  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  z  
[buglab_swap_variables]^return solveAll ( z, c ) ;^188^^^^^180^189^return solveAll ( c, z ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   double[] coefficients double initial [VARIABLES] Complex[]  c  boolean  double[]  coefficients  double  initial  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  z  
[buglab_swap_variables]^return solveAll (  z ) ;^188^^^^^180^189^return solveAll ( c, z ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   double[] coefficients double initial [VARIABLES] Complex[]  c  boolean  double[]  coefficients  double  initial  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  z  
[buglab_swap_variables]^return solveAll ( c ) ;^188^^^^^180^189^return solveAll ( c, z ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   double[] coefficients double initial [VARIABLES] Complex[]  c  boolean  double[]  coefficients  double  initial  PolynomialFunction  p  long  serialVersionUID  int  i  Complex  z  
[buglab_swap_variables]^for  ( nnt i = 0; i <= i; i++ )  {^214^^^^^199^229^for  ( int i = 0; i <= n; i++ )  {^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^c[i] = coefficientsoefficients[i];^215^^^^^200^230^c[i] = coefficients[i];^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^c[i] = c[i];^215^^^^^200^230^c[i] = coefficients[i];^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^for  ( nnt j = i-i-1; j >= 0; j-- )  {^227^^^^^212^242^for  ( int j = n-i-1; j >= 0; j-- )  {^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^for  ( int n = j-i-1; j >= 0; j-- )  {^227^^^^^212^242^for  ( int j = n-i-1; j >= 0; j-- )  {^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^newc = newc.add ( oldc.multiply ( root[i] )  ) ;^230^^^^^215^245^newc = oldc.add ( newc.multiply ( root[i] )  ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^newc = oldc.add ( root.multiply ( newc[i] )  ) ;^230^^^^^215^245^newc = oldc.add ( newc.multiply ( root[i] )  ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^root[i] = solve ( subarray, initialnitial ) ;^223^^^^^208^238^root[i] = solve ( subarray, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^root[i] = solve ( subarraynitial ) ;^223^^^^^208^238^root[i] = solve ( subarray, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^root[i] = solve (  initial ) ;^223^^^^^208^238^root[i] = solve ( subarray, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^root[i] = solve ( subarray ) ;^223^^^^^208^238^root[i] = solve ( subarray, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^newc = root.add ( newc.multiply ( oldc[i] )  ) ;^230^^^^^215^245^newc = oldc.add ( newc.multiply ( root[i] )  ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^root[i] = solve ( initial, subarray ) ;^223^^^^^208^238^root[i] = solve ( subarray, initial ) ;^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^for  ( jnt i = n-i-1; j >= 0; j-- )  {^227^^^^^212^242^for  ( int j = n-i-1; j >= 0; j-- )  {^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^Complex cewc = n[n-i];^225^^^^^210^240^Complex newc = c[n-i];^[CLASS] LaguerreSolver  [METHOD] solveAll [RETURN_TYPE] Complex[]   Complex[] coefficients Complex initial [VARIABLES] Complex[]  c  coefficients  root  subarray  PolynomialFunction  p  boolean  long  serialVersionUID  int  i  iterationCount  j  n  Complex  initial  newc  oldc  
[buglab_swap_variables]^if  (  ( oldz.subtract ( z )  ) .abs (  )  <= tolerance )  {^291^^^^^276^306^if  (  ( z.subtract ( oldz )  ) .abs (  )  <= tolerance )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^if  (  ( z.subtract ( tolerance )  ) .abs (  )  <= oldz )  {^291^^^^^276^306^if  (  ( z.subtract ( oldz )  ) .abs (  )  <= tolerance )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = N.subtract ( z.divide ( denominator )  ) ;^319^^^^^313^320^z = z.subtract ( N.divide ( denominator )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = z.subtract ( denominator.divide ( N )  ) ;^319^^^^^313^320^z = z.subtract ( N.divide ( denominator )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = denominator.subtract ( N.divide ( z )  ) ;^319^^^^^313^320^z = z.subtract ( N.divide ( denominator )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = absoluteAccuracy.add ( new Complex ( z, absoluteAccuracy )  ) ;^314^^^^^299^329^z = z.add ( new Complex ( absoluteAccuracy, absoluteAccuracy )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = z.add ( new Complex (  absoluteAccuracy )  ) ;^314^^^^^299^329^z = z.add ( new Complex ( absoluteAccuracy, absoluteAccuracy )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^for  ( int n = j-1; j >= 0; j-- )  {^281^^^^^266^296^for  ( int j = n-1; j >= 0; j-- )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^d2v = d2v.add ( z.multiply ( dv )  ) ;^282^^^^^267^297^d2v = dv.add ( z.multiply ( d2v )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^d2v = dv.add ( d2v.multiply ( z )  ) ;^282^^^^^267^297^d2v = dv.add ( z.multiply ( d2v )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^dv = z.add ( pv.multiply ( dv )  ) ;^283^^^^^268^298^dv = pv.add ( z.multiply ( dv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^dv = dv.add ( z.multiply ( pv )  ) ;^283^^^^^268^298^dv = pv.add ( z.multiply ( dv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^pv = coefficients[j].add ( pv.multiply ( z )  ) ;^284^^^^^269^299^pv = coefficients[j].add ( z.multiply ( pv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^d2v = z.add ( dv.multiply ( d2v )  ) ;^282^^^^^267^297^d2v = dv.add ( z.multiply ( d2v )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^dv = pv.add ( dv.multiply ( z )  ) ;^283^^^^^268^298^dv = pv.add ( z.multiply ( dv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^pv = z[j].add ( coefficients.multiply ( pv )  ) ;^284^^^^^269^299^pv = coefficients[j].add ( z.multiply ( pv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^pv = pv[j].add ( z.multiply ( coefficients )  ) ;^284^^^^^269^299^pv = coefficients[j].add ( z.multiply ( pv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^G = pv.divide ( dv ) ;^303^^^^^288^318^G = dv.divide ( pv ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^H = pv.subtract ( d2v.divide ( G2 )  ) ;^305^^^^^290^320^H = G2.subtract ( d2v.divide ( pv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^H = d2v.subtract ( G2.divide ( pv )  ) ;^305^^^^^290^320^H = G2.subtract ( d2v.divide ( pv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^delta = H.multiply (  ( N.multiply ( N1 )  ) .subtract ( G2 )  ) ;^306^^^^^291^321^delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^delta = G21.multiply (  ( N.multiply ( H )  ) .subtract ( N )  ) ;^306^^^^^291^321^delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^delta = H1.multiply (  ( N.multiply ( N )  ) .subtract ( G2 )  ) ;^306^^^^^291^321^delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^delta = G2.multiply (  ( N.multiply ( H )  ) .subtract ( N1 )  ) ;^306^^^^^291^321^delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^denominator = dminus.abs (  )  > dplus.abs (  )  ? dplus : dminus;^310^^^^^295^325^denominator = dplus.abs (  )  > dminus.abs (  )  ? dplus : dminus;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = denominator.subtract ( N.divide ( z )  ) ;^319^^^^^304^334^z = z.subtract ( N.divide ( denominator )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = z.subtract ( denominator.divide ( N )  ) ;^319^^^^^304^334^z = z.subtract ( N.divide ( denominator )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^double tolerance = Math.max ( z * relativeAccuracy.abs (  ) , absoluteAccuracy ) ;^289^290^^^^274^304^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^double tolerance = Math.max ( absoluteAccuracy * z.abs (  ) , relativeAccuracy ) ;^289^290^^^^274^304^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^double tolerance = Math.max ( relativeAccuracy * z.abs (  )  ) ;^289^290^^^^274^304^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^Complex dplus = delta.add ( ComplexUtils.sqrt ( G )  ) ;^308^^^^^293^323^Complex dplus = G.add ( ComplexUtils.sqrt ( delta )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^Complex dminus = delta.subtract ( ComplexUtils.sqrt ( G )  ) ;^309^^^^^294^324^Complex dminus = G.subtract ( ComplexUtils.sqrt ( delta )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^double tolerance = Math.max ( relativeAccuracy * absoluteAccuracy.abs (  ) , z ) ;^289^290^^^^274^304^double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^H = G2.subtract ( pv.divide ( d2v )  ) ;^305^^^^^290^320^H = G2.subtract ( d2v.divide ( pv )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^delta = N1.multiply (  ( N.multiply ( G2 )  ) .subtract ( H )  ) ;^306^^^^^291^321^delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^z = N.subtract ( z.divide ( denominator )  ) ;^319^^^^^304^334^z = z.subtract ( N.divide ( denominator )  ) ;^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
[buglab_swap_variables]^if  (  ( tolerance.subtract ( oldz )  ) .abs (  )  <= z )  {^291^^^^^276^306^if  (  ( z.subtract ( oldz )  ) .abs (  )  <= tolerance )  {^[CLASS] LaguerreSolver  [METHOD] solve [RETURN_TYPE] Complex   Complex[] coefficients Complex initial [VARIABLES] Complex[]  coefficients  boolean  double  tolerance  PolynomialFunction  p  long  serialVersionUID  int  i  j  n  Complex  G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z  
