[BugLab_Variable_Misuse]^setNumeratorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^50^^^^^47^52^setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^setDenominatorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^51^^^^^47^52^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( ret <= 0.0 )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( x < 0.0 )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^ret = Beta.regularizedBeta (  ( ret * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^ret = Beta.regularizedBeta (  ( n * ret )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^ret = Beta.regularizedBeta (  ( n * x )  /  ( x + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^ret = Beta.regularizedBeta (  ( m * x )  /  ( n + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^ret = Beta.regularizedBeta (  ( x * n )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  *  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n + x )  /  ( m + n + x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  <<  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret / = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 / m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^ret = Beta.regularizedBeta (  ( x * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^ret = Beta.regularizedBeta (  ( n * m )  /  ( x + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  -  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n - x )  /  ( m + n - x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  &  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret + = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 + m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  >>  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 - m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  >=  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return x;^81^^^^^69^82^return ret;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( ret == 0 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( p != 0 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^if  ( p == 1 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( numeratorDegreesOfFreedom == 1 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( p <= 1 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^return getDenominatorDegreesOfFreedom (  )  - ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^143^144^^^^142^145^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )    instanceof   2.0 ) ;^143^144^^^^142^145^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( x <= 0.0 )  {^154^^^^^153^159^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( degreesOfFreedom > 0.0 )  {^154^^^^^153^159^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^this.numeratorDegreesOfFreedom = p;^158^^^^^153^159^this.numeratorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return x;^166^^^^^165^167^return numeratorDegreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] getNumeratorDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( ret <= 0.0 )  {^176^^^^^175^181^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( degreesOfFreedom < 0.0 )  {^176^^^^^175^181^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^this.denominatorDegreesOfFreedom = x;^180^^^^^175^181^this.denominatorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return p;^188^^^^^187^189^return denominatorDegreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] getDenominatorDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
