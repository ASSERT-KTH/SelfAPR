[BugLab_Variable_Misuse]^setNumberOfSuccesses ( numberOfSuccesses ) ;^51^^^^^49^53^setNumberOfSuccesses ( r ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[BugLab_Variable_Misuse]^setProbabilityOfSuccess ( probabilityOfSuccess ) ;^52^^^^^49^53^setProbabilityOfSuccess ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[BugLab_Variable_Misuse]^return r;^61^^^^^60^62^return numberOfSuccesses;^[CLASS] PascalDistributionImpl  [METHOD] getNumberOfSuccesses [RETURN_TYPE] int   [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[BugLab_Variable_Misuse]^return p;^70^^^^^69^71^return probabilityOfSuccess;^[CLASS] PascalDistributionImpl  [METHOD] getProbabilityOfSuccess [RETURN_TYPE] double   [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[BugLab_Variable_Misuse]^if  ( r < 0 )  {^80^^^^^79^84^if  ( successes < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Operator]^if  ( successes <= 0 )  {^80^^^^^79^84^if  ( successes < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Literal]^if  ( successes < r )  {^80^^^^^79^84^if  ( successes < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Variable_Misuse]^numberOfSuccesses = r;^83^^^^^79^84^numberOfSuccesses = successes;^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Variable_Misuse]^if  ( probabilityOfSuccess < 0.0 || p > 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Operator]^if  ( p < 0.0 && p > 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Operator]^if  ( p <= 0.0 || p > 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Operator]^if  ( p < 0.0 || p >= 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Variable_Misuse]^probabilityOfSuccess = probabilityOfSuccess;^97^^^^^93^98^probabilityOfSuccess = p;^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Literal]^return -r;^109^^^^^108^110^return -1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Variable_Misuse]^return Integer.successes - 1;^122^^^^^120^123^return Integer.MAX_VALUE - 1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Operator]^return Integer.MAX_VALUE  |  1;^122^^^^^120^123^return Integer.MAX_VALUE - 1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Wrong_Literal]^return Integer.MAX_VALUE ;^122^^^^^120^123^return Integer.MAX_VALUE - 1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[BugLab_Variable_Misuse]^if  ( successes < 0 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^if  ( x == 0 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Variable_Misuse]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , successes + 1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x   instanceof   1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  ||  1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + r ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  &&  1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + numberOfSuccesses ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Variable_Misuse]^if  ( successes < 0 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^if  ( x <= 0 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Variable_Misuse]^ret = MathUtils.binomialCoefficientDouble ( successes + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret - = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret / = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )   !=  1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x  &&  getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )   &&  1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0  <=  getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  , getNumberOfSuccesses (  )   )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - , getNumberOfSuccesses (  )  -  )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( .0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )   ==  1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x  >  getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )   ==  1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - numberOfSuccesses, getNumberOfSuccesses (  )  - numberOfSuccesses )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( numberOfSuccesses.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^Math.pow ( 1.0  <<  getProbabilityOfSuccess (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )   >>  1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x   instanceof   getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )   ^  1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^ret = MathUtils.binomialCoefficientDouble ( x  >>  getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Variable_Misuse]^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , successes ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^Math.pow ( 1.0  <  getProbabilityOfSuccess (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Variable_Misuse]^return probabilityOfSuccess;^163^^^^^152^164^return ret;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Variable_Misuse]^if  ( ret == 0 )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^if  ( p <= 0 )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^if  ( p == r )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^return -0;^182^^^^^179^190^return -1;^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^return -numberOfSuccesses;^182^^^^^179^190^return -1;^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Variable_Misuse]^if  ( ret == 1 )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Operator]^if  ( p <= 1 )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[BugLab_Wrong_Literal]^if  ( p == 2 )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
