[BugLab_Variable_Misuse]^return p;^59^^^^^58^60^return this.mean;^[CLASS] PoissonDistributionImpl  [METHOD] getMean [RETURN_TYPE] double   [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( mean <= 0 )  {^71^^^^^70^76^if  ( p <= 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( p == 0 )  {^71^^^^^70^76^if  ( p <= 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^this.mean = mean;^75^^^^^70^76^this.mean = p;^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( x < 0 && x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^if  ( x <= 0 || x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^if  ( x < 0 || x != Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Literal]^if  ( x < -1 || x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Literal]^return -1;^86^^^^^84^90^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Variable_Misuse]^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -p ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^return + Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^return Math.pow ( getMean (  ) , x )  * MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^if  ( x <= 0 )  {^101^^^^^100^109^if  ( x < 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Literal]^if  ( x < x )  {^101^^^^^100^109^if  ( x < 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Literal]^return x;^102^^^^^100^109^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^if  ( x != Integer.MAX_VALUE )  {^104^^^^^100^109^if  ( x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Literal]^return x;^105^^^^^100^109^return 1;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Variable_Misuse]^return Gamma.regularizedGammaQ (  ( double ) x + 1, p, 1E-12, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Variable_Misuse]^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.x ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^return Gamma.regularizedGammaQ (  <<  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Literal]^return Gamma.regularizedGammaQ (  ( double ) x + x, mean, xE-x2, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^return Gamma.regularizedGammaQ (  !=  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Argument_Swapping]^return x.cumulativeProbability ( normal + 0.5 ) ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^return normal.cumulativeProbability ( x  ==  0.5 ) ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Operator]^return normal.cumulativeProbability ( x   instanceof   0.5 ) ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[BugLab_Wrong_Literal]^return 1;^141^^^^^140^142^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
