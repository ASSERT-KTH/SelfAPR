[BugLab_Variable_Misuse]^if  ( sampleSize > populationSize )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Variable_Misuse]^if  ( numberOfSuccesses > sampleSize )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Argument_Swapping]^if  ( populationSize > numberOfSuccesses )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Wrong_Operator]^if  ( numberOfSuccesses >= populationSize )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "number of successes must be less than or equal to "  <  "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "number of successes must be less than or equal to "  !=  "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "number of successes must be less than or equal to "  <=  "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Variable_Misuse]^if  ( numberOfSuccesses > populationSize )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Variable_Misuse]^if  ( sampleSize > numberOfSuccesses )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Argument_Swapping]^if  ( populationSize > sampleSize )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Wrong_Operator]^if  ( sampleSize >= populationSize )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Variable_Misuse]^setPopulationSize ( sampleSize ) ;^63^^^^^51^66^setPopulationSize ( populationSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Variable_Misuse]^setSampleSize ( populationSize ) ;^64^^^^^51^66^setSampleSize ( sampleSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Variable_Misuse]^setNumberOfSuccesses ( sampleSize ) ;^65^^^^^51^66^setNumberOfSuccesses ( numberOfSuccesses ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( x, m, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, populationSize, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, m, x ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( m, n, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( n, k, m ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( k, m, n ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, x, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, m, sampleSize ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^if  ( sampleSize < domain[0] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^if  ( domain < x[0] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Operator]^if  ( x <= domain[0] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^if  ( x < domain[m] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^if  ( x < domain[1] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^} else if ( sampleSize >= domain[1] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Operator]^} else if ( x > domain[1] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], x, 1, sampleSize, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], x, 1, n, x, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, x ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( k[0], x, 1, n, m, domain ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[0], n, 1, x, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[0], m, 1, n, x, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[0], x, 0, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], sampleSize, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], x, 1, n, sampleSize, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( x[0], domain, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[0], x, 1, k, m, n ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[0], x, 1, m, n, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[0], k, 1, n, m, x ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[m], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[0], x, populationSize, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], populationSize, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, sampleSize ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[0], x, 1, n, k, m ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[numberOfSuccesses], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], x, 1, x, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( m[0], x, 1, n, domain, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^} else if ( domain >= x[1] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^} else if ( x >= domain[m] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( n[0], x, 1, domain, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[1], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[0], x, sampleSize, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[0], x, 1, populationSize, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[0], x, numberOfSuccesses, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^getLowerDomain ( x, m, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^getLowerDomain ( n, x, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^getLowerDomain ( n, m, x ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^getLowerDomain ( m, n, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^getLowerDomain ( n, k, m ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^getLowerDomain ( k, m, n ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^getUpperDomain ( x, k ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^getUpperDomain ( m, x ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^getUpperDomain ( k, m ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.max ( 0, x -  ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.max ( 0, m -  ( sampleSize - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.max ( 0, n -  ( m - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.max ( 0, k -  ( n - m )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.max ( 0, m  ||   ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.max ( 0, m -  ( n  &&  k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.max ( 0, m -  ( x - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.max ( 0, m -  ( n - x )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.max ( 0, m -  ( k - n )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.max ( 0, m  <<   ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.max ( 0, m -  ( n  <<  k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Literal]^return Math.max ( k, m -  ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return x;^149^^^^^148^150^return numberOfSuccesses;^[CLASS] HypergeometricDistributionImpl  [METHOD] getNumberOfSuccesses [RETURN_TYPE] int   [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return x;^157^^^^^156^158^return populationSize;^[CLASS] HypergeometricDistributionImpl  [METHOD] getPopulationSize [RETURN_TYPE] int   [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.min ( x, m ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.min ( k, sampleSize ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.min ( m, k ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, sampleSize, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, m, sampleSize ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( m, n, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( k, m, n ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, x, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( n, k, m ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^if ( populationSize < domain[0] || x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Operator]^if ( x < domain[0] && x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Operator]^if ( x <= domain[0] || x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Operator]^if ( x < domain[0] || x >= domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^if ( x < domain[n] || x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Wrong_Literal]^if ( x < domain[0] || x > domain[0] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( sampleSize, m, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( n, sampleSize, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( n, m, sampleSize, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( n, m, k, sampleSize ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = probability ( x, m, k, n ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = probability ( n, k, m, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = probability ( n, x, k, m ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( x, m, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( n, x, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( n, m, x, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = probability ( m, n, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = probability ( k, m, n, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^ret = probability ( n, populationSize, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Argument_Swapping]^ret = probability ( n, m, x, k ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[BugLab_Variable_Misuse]^return Math.exp ( MathUtils.binomialCoefficientLog ( populationSize, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, sampleSize - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.exp ( MathUtils.binomialCoefficientLog ( n, x )  + MathUtils.binomialCoefficientLog ( m - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, n )  + MathUtils.binomialCoefficientLog ( x - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( k - m, n - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  ||  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  <<  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  <=  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k  <=  x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, sampleSize )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( sampleSize - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, x - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, k )  + MathUtils.binomialCoefficientLog ( n - m, x - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.exp ( MathUtils.binomialCoefficientLog ( k, x )  + MathUtils.binomialCoefficientLog ( n - m, m - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  <<  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  !=  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k   instanceof   x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^return Math.exp ( MathUtils.binomialCoefficientLog ( x, m )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^MathUtils.binomialCoefficientLog ( sampleSize - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^MathUtils.binomialCoefficientLog ( n - populationSize, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^MathUtils.binomialCoefficientLog ( n - m, sampleSize - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^MathUtils.binomialCoefficientLog ( n - m, k - populationSize )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^MathUtils.binomialCoefficientLog ( k - m, n - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^MathUtils.binomialCoefficientLog ( n - x, k - m )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^MathUtils.binomialCoefficientLog ( x - m, k - n )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^MathUtils.binomialCoefficientLog ( n  ^  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^MathUtils.binomialCoefficientLog ( n - m, k  !=  x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^MathUtils.binomialCoefficientLog ( x, k )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^MathUtils.binomialCoefficientLog ( n, x )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Argument_Swapping]^MathUtils.binomialCoefficientLog ( k, n )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^if ( x < 0 ) {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Operator]^if ( num <= 0 ) {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Wrong_Literal]^if ( num < 1 ) {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^numberOfSuccesses = x;^228^^^^^223^229^numberOfSuccesses = num;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[BugLab_Variable_Misuse]^if ( x <= 0 ) {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[BugLab_Wrong_Operator]^if ( size < 0 ) {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[BugLab_Variable_Misuse]^populationSize = x;^241^^^^^236^242^populationSize = size;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[BugLab_Variable_Misuse]^if  ( numberOfSuccesses < 0 )  {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[BugLab_Wrong_Operator]^if  ( size <= 0 )  {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[BugLab_Wrong_Literal]^if  ( size < -1 )  {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[BugLab_Variable_Misuse]^sampleSize = populationSize;^254^^^^^249^255^sampleSize = size;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( x, m, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, x, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^int[] domain = getDomain ( n, m, x ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( m, n, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( k, m, n ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^int[] domain = getDomain ( n, k, m ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Operator]^if  ( x <= domain[0] )  {^271^^^^^263^280^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^if  ( x < domain[-1] )  {^271^^^^^263^280^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^} else if ( size > domain[1] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Operator]^} else if ( x >= domain[1] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, x, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, n, populationSize, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( k[1], x, -1, n, m, domain ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[1], k, -1, n, m, x ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[1], x, -1, m, n, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[1], x, -1, n, k, m ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[2], x, -2, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], populationSize, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[1], n, -1, x, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[num], x, -num, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], sampleSize, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, n, x, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, x ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( n[1], x, -1, domain, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[1], m, -1, n, x, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[numberOfSuccesses], x, -numberOfSuccesses, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[0], x, -0, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, populationSize, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, size ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( domain[1], x, -1, k, m, n ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[populationSize], x, -populationSize, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^} else if ( x > domain[size] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^} else if ( x > domain[x] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^} else if ( x > domain[] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, size, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, n, sampleSize, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( m[1], x, -1, n, domain, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[m], x, -m, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, n, size, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, sampleSize ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[], x, -, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^ret = innerCumulativeProbability ( domain[1], size, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Argument_Swapping]^ret = innerCumulativeProbability ( x[1], domain, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Wrong_Literal]^ret = innerCumulativeProbability ( domain[n], x, -n, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( x, m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( n, sampleSize, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( n, m, x, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( n, m, k, x1 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^double ret = probability ( k, m, n, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^double ret = probability ( m, n, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^double ret = probability ( n, m, x0, k ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( size, m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( n, x1, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( n, m, x1, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^double ret = probability ( n, m, k, size ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^double ret = probability ( x0, m, k, n ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^double ret = probability ( n, x0, k, m ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^while  ( sampleSize != x1 )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^while  ( x0 != x0 )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^while  ( x1 != x0 )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Wrong_Operator]^while  ( x0 >= x1 )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^x0 += sampleSize;^300^^^^^295^304^x0 += dx;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( x1, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, x1, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, m, x, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, m, k, x1 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^ret += probability ( k, m, n, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^ret += probability ( n, k, m, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^ret += probability ( x0, m, k, n ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( x, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, size, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, m, size, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, m, k, size ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^ret += probability ( m, n, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Argument_Swapping]^ret += probability ( n, m, x0, k ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, m, x1, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[BugLab_Variable_Misuse]^ret += probability ( n, m, x0, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
