[BugLab_Variable_Misuse]^if  ( coefficients.length < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^if  ( c.length.length < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^if  ( c < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( c.length <= 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^System.arraycopy ( coefficients, 0, this.coefficients, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^System.arraycopy ( c, 0, coefficients, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^System.arraycopy ( this.coefficients, 0, c, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^System.arraycopy ( c, 0, c.length, 0, this.coefficients ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return evaluate ( c, x ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[BugLab_Argument_Swapping]^return evaluate ( x, coefficients ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[BugLab_Variable_Misuse]^return c.length - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^return coefficients - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^return coefficients.length.length - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^return coefficients.length  ^  1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^return coefficients.length ;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^System.arraycopy ( coefficients,0, c, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^System.arraycopy ( c,0, out, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^System.arraycopy ( coefficients,0, coefficients.length, 0, out ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[BugLab_Argument_Swapping]^System.arraycopy ( coefficients.length,0, out, 0, coefficients ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^System.arraycopy ( coefficients,1, out, 1, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return coefficients;^97^^^^^94^98^return out;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^int n = out.length;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^int n = j;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Argument_Swapping]^int n = coefficients.length.length;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Argument_Swapping]^int n = coefficients;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^if  ( j < 1 )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Operator]^if  ( n == 1 )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Literal]^if  ( n < 2 )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^double result = out[n - 1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^double result = coefficients[j - 1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Operator]^double result = coefficients[n  ||  1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Literal]^double result = coefficients[n - j];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^for  ( int n = n -2; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Argument_Swapping]^for  ( int n = j -2; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Literal]^for  ( int j = n -j; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Literal]^for  ( int j = n -2; j >=1; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^result = argument * result + out[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Argument_Swapping]^result = argument * coefficients + result[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Argument_Swapping]^result = coefficients * result + argument[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Operator]^result = argument / result + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^result = argument * argument + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Argument_Swapping]^result = result * argument + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Operator]^result = argument + result + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Wrong_Literal]^for  ( int j = n -3; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^return argument;^119^^^^^110^120^return result;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[BugLab_Variable_Misuse]^int n = i;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^int n = coefficients.length.length;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^int n = coefficients;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^if  ( i < 1 )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^if  ( n <= 1 )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^if  ( n < n )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^if  ( i == 1 )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^if  ( n >= 1 )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^if  ( n == 0 )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^return new double[]{i};^136^^^^^130^143^return new double[]{0};^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^return new double[]{n};^136^^^^^130^143^return new double[]{0};^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^double[] result = iew double[n - 1];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^double[] result = new double[n  <<  1];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^double[] result = new double[n - n];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Argument_Swapping]^for  ( nnt i = i - 1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^for  ( int i = n  >  1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^for  ( int i = n - 1; i  >= 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^for  ( int i = n  >>  1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^for  ( int i = n - ; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^for  ( int i = n ; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^result[i - 1] =  ( double )  n * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^result[i - 1] =  ( double )  i * result[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^result[i  >>  1] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^result[i - - 1] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^result[i ] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^result[i  <<  1] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Literal]^result[i - n] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Wrong_Operator]^for  ( int i = n  &  1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^return out;^142^^^^^130^143^return result;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[BugLab_Variable_Misuse]^return new PolynomialFunction ( differentiate ( result )  ) ;^151^^^^^150^152^return new PolynomialFunction ( differentiate ( coefficients )  ) ;^[CLASS] PolynomialFunction  [METHOD] polynomialDerivative [RETURN_TYPE] PolynomialFunction   [VARIABLES] double[]  c  coefficients  out  result  long  serialVersionUID  boolean  
