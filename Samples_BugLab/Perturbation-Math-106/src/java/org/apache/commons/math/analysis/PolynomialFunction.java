[buglab_swap_variables]^if  ( c.length.length < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^if  ( c < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( c.length, 0, this.coefficients, 0, c ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy (  0, this.coefficients, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( this.coefficients, 0, c, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( c, 0,  0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( c, 0, this.coefficients, 0 ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^return evaluate ( x, coefficients ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[buglab_swap_variables]^return evaluate ( coefficients ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[buglab_swap_variables]^return evaluate (  x ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[buglab_swap_variables]^return coefficients - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^return coefficients.length.length - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( out,0, coefficients, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( coefficients,0,  0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( 0, out, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( coefficients.length,0, out, 0, coefficients ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[buglab_swap_variables]^System.arraycopy ( coefficients,0, out, 0 ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[buglab_swap_variables]^int n = coefficients.length.length;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[buglab_swap_variables]^int n = coefficients;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[buglab_swap_variables]^for  ( int n = j -2; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[buglab_swap_variables]^result = result * argument + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[buglab_swap_variables]^result = coefficients * result + argument[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[buglab_swap_variables]^int n = coefficients.length.length;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^int n = coefficients;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[buglab_swap_variables]^result[i - 1] =  ( double )  coefficients * i[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
