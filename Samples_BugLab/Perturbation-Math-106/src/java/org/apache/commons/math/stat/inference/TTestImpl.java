[buglab_swap_variables]^if  (  ( sample2.length == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample1 )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2.length == null || Math.min ( sample1.length, sample2 )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^Math.min ( sample1.length.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^Math.min (  sample2.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^Math.min ( sample1.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^double meanDifference = StatUtils.meanDifference ( sample2, sample1 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^double meanDifference = StatUtils.meanDifference (  sample2 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^double meanDifference = StatUtils.meanDifference ( sample1 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return t (  0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return t ( meanDifference, 0, StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return t ( sample2, 0, StatUtils.varianceDifference ( sample1, meanDifference, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( meanDifference, sample2, sample1 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( sample1, meanDifference, sample2 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( sample1, sample2 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^double meanDifference = StatUtils.meanDifference ( sample2, sample1 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^double meanDifference = StatUtils.meanDifference (  sample2 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^double meanDifference = StatUtils.meanDifference ( sample1 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return tTest (  0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return tTest ( meanDifference, 0, StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return tTest ( sample1, 0, StatUtils.varianceDifference ( meanDifference, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( sample1, meanDifference, sample2 ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( meanDifference, sample2, sample1 ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^StatUtils.varianceDifference ( sample1, sample2 ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[buglab_swap_variables]^return  ( pairedTTest ( sample2, sample1 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( pairedTTest (  sample2 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( pairedTTest ( sample1 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( pairedTTest ( alpha, sample2 )  < sample1 ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^if  (  ( observed.length == null )  ||  ( observed < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[buglab_swap_variables]^return t ( StatUtils.mean ( mu ) , observed, StatUtils.variance ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[buglab_swap_variables]^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) .length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[buglab_swap_variables]^return t ( StatUtils.mean ( observed ) , observed.length, StatUtils.variance ( observed ) , mu ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[buglab_swap_variables]^return t ( StatUtils.mean ( observed ) ,  StatUtils.variance ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[buglab_swap_variables]^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed )  ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[buglab_swap_variables]^return t ( StatUtils.mean ( observed.length ) , mu, StatUtils.variance ( observed ) , observed ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[buglab_swap_variables]^return t ( mu.getMean (  ) , sampleStats, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[buglab_swap_variables]^return t ( sampleStats.getMean (  ) , mu.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[buglab_swap_variables]^return t ( sampleStats.getMean (  ) ,  sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[buglab_swap_variables]^if  (  ( sample2.length == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample1 )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min (  sample2.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^return homoscedasticT ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1.length == null )  ||  ( sample2 == null || Math.min ( sample1, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample1.length == null || Math.min ( sample2, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1, sample2.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min (  sample2.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^return t ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sampleStats2 == null )  || ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return t ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return t ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^if  (  ( sampleStats2 == null )  || ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return homoscedasticT ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return homoscedasticT ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^if  (  ( sample.length == null )  ||  ( sample < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[buglab_swap_variables]^return tTest (  StatUtils.mean ( mu ) , sample, StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[buglab_swap_variables]^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) .length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[buglab_swap_variables]^return tTest (  StatUtils.mean ( sample ) ,  StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[buglab_swap_variables]^return tTest (  StatUtils.mean ( sample.length ) , mu, StatUtils.variance ( sample ) , sample ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[buglab_swap_variables]^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample )  ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[buglab_swap_variables]^return  ( tTest ( alpha, sample )  < mu ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[buglab_swap_variables]^return  ( tTest (  sample )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[buglab_swap_variables]^return  ( tTest ( mu, alpha )  < sample ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[buglab_swap_variables]^return  ( tTest ( mu )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[buglab_swap_variables]^return  ( tTest ( sample, mu )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[buglab_swap_variables]^return tTest ( mu.getMean (  ) , sampleStats, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[buglab_swap_variables]^return tTest ( sampleStats.getMean (  ) , mu.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[buglab_swap_variables]^return tTest ( sampleStats.getMean (  ) ,  sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[buglab_swap_variables]^return  ( tTest ( alpha, sampleStats )  < mu ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[buglab_swap_variables]^return  ( tTest (  sampleStats )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[buglab_swap_variables]^return  ( tTest ( sampleStats, mu )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[buglab_swap_variables]^return  ( tTest ( mu )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[buglab_swap_variables]^if  (  ( sample1.length == null )  ||  ( sample2 == null || Math.min ( sample1, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample1.length == null || Math.min ( sample2, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample2, sample1.length.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1, sample2.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min (  sample2.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length, sample2 )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^return tTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1.length == null )  ||  ( sample2 == null || Math.min ( sample1, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2.length == null || Math.min ( sample1.length, sample2 )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample2.length.length, sample1 )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample2, sample1.length.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min (  sample2.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^Math.min ( sample1.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^return homoscedasticTTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[buglab_swap_variables]^return  ( tTest ( sample2, sample1 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( tTest (  sample2 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( tTest ( sample1 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( tTest ( sample1, alpha )  < sample2 ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( homoscedasticTTest ( alpha, sample2 )  < sample1 ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( homoscedasticTTest (  sample2 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( homoscedasticTTest ( sample2, sample1 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^return  ( homoscedasticTTest ( sample1 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[buglab_swap_variables]^if  (  ( sampleStats2 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return tTest ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return tTest ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^if  (  ( sampleStats2 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return homoscedasticTTest ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return homoscedasticTTest ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[buglab_swap_variables]^return  ( tTest ( sampleStats2, sampleStats1 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[buglab_swap_variables]^return  ( tTest (  sampleStats2 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[buglab_swap_variables]^return  ( tTest ( sampleStats1 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[buglab_swap_variables]^return  ( tTest ( alpha, sampleStats2 )  < sampleStats1 ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[buglab_swap_variables]^return  (  (  ( n1 / v1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  (  (  ( v1 / v2 )  +  ( n1 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  (  (  ( v2 / n1 )  +  ( v1 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  (  (  ( n2 / n1 )  +  ( v2 / v1 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( v - mu )  / Math.sqrt ( m / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[buglab_swap_variables]^return  ( m - v )  / Math.sqrt ( mu / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[buglab_swap_variables]^return  ( m - n )  / Math.sqrt ( v / mu ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[buglab_swap_variables]^return  ( m - mu )  / Math.sqrt ( n / v ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[buglab_swap_variables]^return  ( m2 - m1 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - n1 )  / Math.sqrt (  ( v1 / m2 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( v1 - m2 )  / Math.sqrt (  ( m1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( n1 - m2 )  / Math.sqrt (  ( v1 / m1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - v2 )  / Math.sqrt (  ( v1 / n1 )  +  ( m2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n2 )  +  ( v2 / n1 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - m2 )  / Math.sqrt (  ( v2 / n1 )  +  ( v1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / v2 )  +  ( n1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[buglab_swap_variables]^double pooledVariance =  (  ( v2  - 1 )  * v1 +  ( n2 -1 )  * n1  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^double pooledVariance =  (  ( n1  - 1 )  * v2 +  ( n2 -1 )  * v1  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^double pooledVariance =  (  ( n1  - 1 )  * n2 +  ( v1 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^return  ( pooledVariance - m2 )  / Math.sqrt ( m1 *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - pooledVariance )  / Math.sqrt ( m2 *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - m2 )  / Math.sqrt ( n1 *  ( 1d / pooledVariance + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n2 + 1d / n1 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^return  ( m1 - m2 )  / Math.sqrt ( n2 *  ( 1d / n1 + 1d / pooledVariance )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[buglab_swap_variables]^double t = Math.abs ( t ( mu, m, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t (  mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( m, v, mu, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( m,  v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( m, mu,  n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( m, n, v, mu )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( m, mu, v )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( v, mu, m, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( m, mu, n, v )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^return 1.0 - tDistribution.cumulativeProbability ( - t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[buglab_swap_variables]^double t = Math.abs ( t ( v1, m2, m1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t (  m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m2, m1, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1,  v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, n2, v2, n1, v1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2,  v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, v2, v1, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, v1,  n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, v1, v2, n2, n1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, v1, v2,  n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, v1, n2, n1, v2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, v1, v2, n1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, n1, v1, v2, m2, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( n1, m2, v1, v2, m1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, n2, v1, v2, n1, m2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( t ( m1, m2, v1, n1, v2, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( n2, v2, n1, v1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df (  v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( v1, n2, n1, v2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( v1,  n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( v1, n1, v2, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( v1, v2,  n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( v1, v2, n2, n1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( v1, v2, n1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom= df ( n1, v2, v1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^return 1.0 - tDistribution.cumulativeProbability ( - t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( n2, m2, v1, v2, n1, m1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT (  m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, n2, v1, v2, n1, m2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1,  v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, v1, m2, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, m2,  v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( v2, m2, v1, m1, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, m2, v1,  n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n2, n1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2,  n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( v1, m2, m1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, v2, v1, m2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, m2, n1, v2, v1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, n2, n1, v2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^degreesOfFreedom =  ( double )   ( n2 + n1 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[buglab_swap_variables]^return 1.0 - tDistribution.cumulativeProbability ( - t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
