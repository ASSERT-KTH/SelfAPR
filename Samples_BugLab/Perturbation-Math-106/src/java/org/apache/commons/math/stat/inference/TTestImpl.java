[BugLab_Variable_Misuse]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, this )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample1.length == null || Math.min ( sample2, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample2.length == null || Math.min ( sample1.length, sample2 )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  > 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Literal]^if  (  ( sample1 == null )  ||  ( sample3 == null || Math.min ( sample1.length, sample3.length )  < 3 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^Math.min ( sample2.length, sample2.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^Math.min ( sample1.length, 1 )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^double meanDifference = StatUtils.meanDifference ( sample2, sample2 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^double meanDifference = StatUtils.meanDifference ( sample1, sample1 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^double meanDifference = StatUtils.meanDifference ( sample2, sample1 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample2, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^return t ( sample1, 0, StatUtils.varianceDifference ( meanDifference, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^return t ( sample2, 0, StatUtils.varianceDifference ( sample1, meanDifference, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Literal]^return t ( meanDifference, 1, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^StatUtils.varianceDifference ( sample1, sample1, meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^StatUtils.varianceDifference ( sample1, meanDifference, sample2 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^StatUtils.varianceDifference ( meanDifference, sample2, sample1 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^double meanDifference = StatUtils.meanDifference ( sample1, sample1 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^double meanDifference = StatUtils.meanDifference ( sample2, sample1 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Variable_Misuse]^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample1, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^return tTest ( sample2, 0, StatUtils.varianceDifference ( sample1, meanDifference, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Literal]^return tTest ( meanDifference, -1, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Literal]^return tTest ( meanDifference, 1, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Argument_Swapping]^StatUtils.varianceDifference ( meanDifference, sample2, sample1 ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha > 0 )  ||  ( alpha > 0.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha < 0.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Literal]^if  (  ( alpha <= -1 )  ||  ( alpha > -1.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Variable_Misuse]^return  ( pairedTTest ( sample1, sample1 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^return  ( pairedTTest ( sample2, sample1 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^return  ( pairedTTest ( sample1, alpha )  < sample2 ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^return  ( pairedTTest ( sample1, sample2 )  > alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^if  (  ( observed.length == null )  ||  ( observed < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[BugLab_Wrong_Operator]^if  (  ( observed == null )  &&  ( observed.length < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[BugLab_Wrong_Operator]^if  (  ( observed != null )  ||  ( observed.length < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[BugLab_Wrong_Operator]^if  (  ( observed == null )  ||  ( observed.length <= 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[BugLab_Argument_Swapping]^return t ( StatUtils.mean ( mu ) , observed, StatUtils.variance ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[BugLab_Argument_Swapping]^return t ( StatUtils.mean ( observed ) , observed.length, StatUtils.variance ( observed ) , mu ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[BugLab_Argument_Swapping]^return t ( StatUtils.mean ( observed.length ) , mu, StatUtils.variance ( observed ) , observed ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sampleStats == null )  &&  ( sampleStats.getN (  )  < 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sampleStats != null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  <= 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Wrong_Literal]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 3 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Argument_Swapping]^return t ( mu.getMean (  ) , sampleStats, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Variable_Misuse]^if  (  ( sample2 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1.length == null )  ||  ( sample2 == null || Math.min ( sample1, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample1.length == null || Math.min ( sample2, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  <= 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Literal]^if  (  ( sample1 == null )  ||  ( sample3 == null || Math.min ( sample1.length, sample3.length )  < 3 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sample2.length, sample2.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sample1.length, sample1.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^return homoscedasticT ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^return homoscedasticT ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^StatUtils.variance ( sample2 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^246^247^^^^239^248^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample1 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^246^247^^^^239^248^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^if  (  ( sample1 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample2.length == null || Math.min ( sample1.length, sample2 )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  > 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^Math.min ( 1, sample2.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^return t ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^return t ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^StatUtils.variance ( sample2 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^285^286^^^^278^287^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample1 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^285^286^^^^278^287^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sampleStats2 == null )  || ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  && ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 != null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  <= 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Literal]^if  (  ( sampleStats1 == null )  || ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 1 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^return t ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^return t ( sampleStats1.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^329^330^^^^320^331^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats1.getVariance (  ) , sampleStats1.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^329^330^^^^320^331^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats1.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sampleStats2 == null )  || ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  && ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 != null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  <= 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^return homoscedasticT ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^return homoscedasticT ( sampleStats2.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^377^378^^^^368^379^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats1.getVariance (  ) , sampleStats1.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^377^378^^^^368^379^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats1.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample.length == null )  ||  ( sample < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sample == null )  &&  ( sample.length < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sample != null )  ||  ( sample.length < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sample == null )  ||  ( sample.length <= 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Wrong_Literal]^if  (  ( sample == null )  ||  ( sample.length < null )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Argument_Swapping]^return tTest (  StatUtils.mean ( mu ) , sample, StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Argument_Swapping]^return tTest (  StatUtils.mean ( sample ) , sample.length, StatUtils.variance ( sample ) , mu ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Argument_Swapping]^return tTest (  StatUtils.mean ( sample.length ) , mu, StatUtils.variance ( sample ) , sample ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[BugLab_Variable_Misuse]^if  (  ( mu <= 0 )  ||  ( alpha > 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Wrong_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Wrong_Literal]^if  (  ( alpha <= 1 )  ||  ( alpha > 1.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Variable_Misuse]^return  ( tTest ( mu, sample )  < mu ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Argument_Swapping]^return  ( tTest ( alpha, sample )  < mu ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Argument_Swapping]^return  ( tTest ( mu, alpha )  < sample ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Wrong_Operator]^return  ( tTest ( mu, sample )  <= alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Variable_Misuse]^return  ( tTest ( alpha, sample )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Argument_Swapping]^return  ( tTest ( sample, mu )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[BugLab_Wrong_Operator]^if  (  ( sampleStats == null )  &&  ( sampleStats.getN (  )  < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sampleStats != null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Wrong_Operator]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  <= 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Wrong_Literal]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 3 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Argument_Swapping]^return tTest ( mu.getMean (  ) , sampleStats, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[BugLab_Variable_Misuse]^if  (  ( mu <= 0 )  ||  ( alpha > 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Wrong_Operator]^if  (  ( alpha == 0 )  ||  ( alpha > 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha == 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Variable_Misuse]^return  ( tTest ( mu, sampleStats )  < mu ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Argument_Swapping]^return  ( tTest ( alpha, sampleStats )  < mu ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Argument_Swapping]^return  ( tTest ( mu, alpha )  < sampleStats ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Wrong_Operator]^return  ( tTest ( mu, sampleStats )  <= alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Variable_Misuse]^return  ( tTest ( alpha, sampleStats )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Argument_Swapping]^return  ( tTest ( sampleStats, mu )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[BugLab_Variable_Misuse]^if  (  ( sample2 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample2.length == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample1 )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  <= 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Literal]^if  (  ( sample1 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample1.length )  < 1 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sample2.length, sample2.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sample1.length, sample1.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sample1, sample2.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^return tTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^return tTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^if  (  ( sample1 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample1.length == null || Math.min ( sample2, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sample1 == null )  ||  ( sample2.length == null || Math.min ( sample1.length, sample2 )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  <= 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Literal]^if  (  ( sample1 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample1.length )  < 1 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^Math.min ( null, sample2.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sample2.length.length, sample1 )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sample2, sample1.length.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^return homoscedasticTTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Argument_Swapping]^return homoscedasticTTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample2 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Variable_Misuse]^StatUtils.variance ( sample1 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^629^630^^^^621^631^StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Variable_Misuse]^return  ( tTest ( sample2, sample2 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^return  ( tTest ( sample2, sample1 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^return  ( tTest ( alpha, sample2 )  < sample1 ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^return  ( tTest ( sample1, sample2 )  <= alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Literal]^if  (  ( alpha <= 1 )  ||  ( alpha > 1.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Variable_Misuse]^return  ( homoscedasticTTest ( sample2, sample2 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^return  ( homoscedasticTTest ( alpha, sample2 )  < sample1 ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^return  ( homoscedasticTTest ( sample2, sample1 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^return  ( homoscedasticTTest ( sample1, alpha )  < sample2 ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Wrong_Operator]^return  ( homoscedasticTTest ( sample1, sample2 )  > alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[BugLab_Argument_Swapping]^if  (  ( sampleStats2 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  &&  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 != null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  > 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Literal]^if  (  ( sampleStats1 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 1 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^return tTest ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^return tTest ( sampleStats1.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^return tTest ( sampleStats2.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats1.getN (  )  ) ;^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats2.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^( double )  sampleStats1.getN (  )  ) ;^796^^^^^788^797^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^if  (  ( sampleStats2 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  &&  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 != null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  <= 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Literal]^if  (  ( sampleStats1 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 1 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Argument_Swapping]^return homoscedasticTTest ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats1.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^840^841^842^^^832^843^sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats2.getMean (  ) , sampleStats2.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^840^841^842^^^832^843^sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats1.getN (  )  ) ;^841^842^^^^832^843^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats2.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^841^842^^^^832^843^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Variable_Misuse]^( double )  sampleStats1.getN (  )  ) ;^842^^^^^832^843^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[BugLab_Wrong_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[BugLab_Argument_Swapping]^return  ( tTest ( alpha, sampleStats2 )  < sampleStats1 ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[BugLab_Argument_Swapping]^return  ( tTest ( sampleStats2, sampleStats1 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[BugLab_Wrong_Operator]^return  ( tTest ( sampleStats1, sampleStats2 )  <= alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[BugLab_Wrong_Operator]^if  ( distributionFactory != null )  {^914^^^^^913^918^if  ( distributionFactory == null )  {^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[BugLab_Variable_Misuse]^return  (  (  ( v2 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  (  (  ( v1 / v2 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  (  (  ( v1 / n1 )  +  ( n2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  (  (  ( v1 / n1 )  +  ( v2 / v1 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  (  (  ( n2 / n1 )  +  ( v2 / v1 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  (  (  ( n1 / v1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  (  (  ( v1 / n1 )  +  ( n2 / v2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 * n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return + (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ^  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 * n1 )  +  ( v2 / n2 )  )  *  (  ( v1 * n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 - n2 )  )  *  (  ( v1 / n1 )  +  ( v2 - n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  <=  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 + n1 )  +  ( v2 / n2 )  )  *  (  ( v1 + n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 + n2 )  )  *  (  ( v1 / n1 )  +  ( v2 + n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  >>  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 / v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return - (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 + n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1  >  1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 + n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 + v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 / n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1   instanceof   1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( v - mu )  / Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Variable_Misuse]^return  ( m - v )  / Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Variable_Misuse]^return  ( m - mu )  / Math.sqrt ( n / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Variable_Misuse]^return  ( m - mu )  / Math.sqrt ( v / v ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Argument_Swapping]^return  ( v - mu )  / Math.sqrt ( m / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Argument_Swapping]^return  ( m - n )  / Math.sqrt ( v / mu ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Argument_Swapping]^return  ( m - v )  / Math.sqrt ( mu / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Wrong_Operator]^return  ( m - mu )  - Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Wrong_Operator]^return  ( m  &&  mu )  / Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Wrong_Operator]^return  ( m - mu )  / Math.sqrt ( v * n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Variable_Misuse]^return  ( m - mu )  / Math.sqrt ( mu / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Variable_Misuse]^return  ( m - mu )  / Math.sqrt ( v / mu ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Argument_Swapping]^return  ( m - mu )  / Math.sqrt ( n / v ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[BugLab_Variable_Misuse]^return  ( v2 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - v2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( n2 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / v2 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / v2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( n2 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / m1 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - n1 )  / Math.sqrt (  ( v1 / m2 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - m2 )  / Math.sqrt (  ( n1 / v1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - v2 )  / Math.sqrt (  ( v1 / n1 )  +  ( m2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1 - m2 )  + Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1  &  m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ||  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 * n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 * n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( v2 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / v1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( n2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / v1 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - m2 )  / Math.sqrt (  ( n2 / n1 )  +  ( v2 / v1 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / v2 )  +  ( n1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - m2 )  / Math.sqrt (  ( v2 / n1 )  +  ( v1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( n2 / v2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  &  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 - n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 + n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[BugLab_Variable_Misuse]^double pooledVariance =  (  ( v1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^double pooledVariance =  (  ( n1  - 1 )  * v2 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( v1 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v1  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^double pooledVariance =  (  ( v1  - 1 )  * n1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^double pooledVariance =  (  ( n1  - 1 )  * v2 +  ( n2 -1 )  * v1  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^double pooledVariance =  (  ( n2  - 1 )  * v1 +  ( n1 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  *  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double pooledVariance =  >>  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double + pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double pooledVariance =  (  ( n1   >=  1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double - pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double pooledVariance =  (  ( n1   ^  1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2  >=  2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1  <<  n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Literal]^double pooledVariance =  (  ( n1   )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Literal]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2  ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - v2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt ( v1 *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / v2 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / v2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( n1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / m1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - n1 )  / Math.sqrt ( pooledVariance *  ( 1d / m2 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - pooledVariance )  / Math.sqrt ( m2 *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - n2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / m2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1 - m2 )  - Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1  <<  m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^return - ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  >>  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  ( m1 - m2 )  + Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / v1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - m2 )  / Math.sqrt ( n1 *  ( 1d / pooledVariance + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Argument_Swapping]^return  ( m1 - m2 )  / Math.sqrt ( n2 *  ( 1d / n1 + 1d / pooledVariance )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Wrong_Operator]^return  &&  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( v, mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m, v, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m, mu, n, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m, mu, v, v )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( v, mu, m, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m, v, mu, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m, mu, n, v )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( n, mu, v, m )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m, n, v, mu )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m, t, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m, mu, t, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( mu, m, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( v - 1 ) ;^997^998^^^^994^1000^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Wrong_Operator]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n  <=  1 ) ;^997^998^^^^994^1000^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Wrong_Literal]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n  ) ;^997^998^^^^994^1000^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^getDistributionFactory (  ) .createTDistribution ( t - 1 ) ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Wrong_Operator]^getDistributionFactory (  ) .createTDistribution ( n   instanceof   1 ) ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Wrong_Literal]^getDistributionFactory (  ) .createTDistribution ( n  ) ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^return 1.0 - vDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Argument_Swapping]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Wrong_Operator]^return 1.0  <<  tDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( v1, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m1, v2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m1, m2, v1, v1, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m1, m2, v1, v2, v2, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m1, m2, v1, v2, n1, v2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( v2, m2, v1, m1, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m2, m1, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m1, v1, m2, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m1, m2, v1, n2, n1, v2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m1, n1, v1, v2, m2, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( n2, m2, v1, v2, n1, m1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( v2, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( t ( m1, m2, v2, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m1, v2, v1, m2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m1, m2, n2, v2, n1, v1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( m1, m2, v1, n1, v2, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( t ( v1, m2, m1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom= df ( t, v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom= df ( v1, v1, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom= df ( v1, v2, v1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom= df ( v1, v2, n1, v1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^degreesOfFreedom= df ( n2, v2, n1, v1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^degreesOfFreedom= df ( v1, n2, n1, v2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^degreesOfFreedom= df ( n1, v2, v1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^degreesOfFreedom= df ( v1, v2, n2, n1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom= df ( v1, v2, v2, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom= df ( v1, v2, n1, t ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^degreesOfFreedom= df ( v2, v1, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^degreesOfFreedom= df ( v1, n1, v2, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( t ) ;^1023^1024^^^^1017^1026^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^getDistributionFactory (  ) .createTDistribution ( v1 ) ;^1024^^^^^1017^1026^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^return 1.0 - v2Distribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Wrong_Operator]^return 1.0  ==  tDistribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^return 1.0 - n2Distribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( v2, m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, v2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, v2, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v1, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, v1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, v1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( v2, m2, v1, m1, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( m1, n1, v1, v2, m2, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( v1, m2, m1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( m1, m2, v2, v1, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n2, n1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, n2, n1, v2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, t, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, n2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, v2, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, v2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( m1, v1, m2, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( m1, m2, n1, v2, v1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( n2, m2, v1, v2, n1, m1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^double t = Math.abs ( homoscedasticT ( m1, v2, v1, m2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Wrong_Literal]^double degreesOfFreedom = 1;^1047^^^^^1043^1052^double degreesOfFreedom = 0;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom =  ( double )   ( v1 + n2 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^degreesOfFreedom =  ( double )   ( n1 + v2 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^degreesOfFreedom =  ( double )   ( n2 + n1 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Wrong_Operator]^degreesOfFreedom =  ( double )   ( n1 + n2  <  2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Wrong_Operator]^degreesOfFreedom =  ( double )   ( n1  <<  n2 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Wrong_Literal]^degreesOfFreedom =  ( double )   ( n1 + n2  ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( t ) ;^1049^1050^^^^1043^1052^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^getDistributionFactory (  ) .createTDistribution ( v2 ) ;^1050^^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Variable_Misuse]^return 1.0 - v2Distribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Argument_Swapping]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[BugLab_Wrong_Operator]^return 1.0  >  tDistribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
