[BugLab_Wrong_Literal]^n = n;^61^^^^^59^62^n = 0;^[CLASS] SumOfLogs  [METHOD] <init> [RETURN_TYPE] SumOfLogs()   [VARIABLES] boolean  double  value  long  serialVersionUID  int  n  
[BugLab_Variable_Misuse]^value += Math.log ( value ) ;^68^^^^^67^70^value += Math.log ( d ) ;^[CLASS] SumOfLogs  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] boolean  double  d  value  long  serialVersionUID  int  n  
[BugLab_Wrong_Operator]^if  ( n >= 0 )  {^76^^^^^75^81^if  ( n > 0 )  {^[CLASS] SumOfLogs  [METHOD] getResult [RETURN_TYPE] double   [VARIABLES] boolean  double  d  value  long  serialVersionUID  int  n  
[BugLab_Variable_Misuse]^return d;^77^^^^^75^81^return value;^[CLASS] SumOfLogs  [METHOD] getResult [RETURN_TYPE] double   [VARIABLES] boolean  double  d  value  long  serialVersionUID  int  n  
[BugLab_Wrong_Literal]^n = 1;^95^^^^^93^96^n = 0;^[CLASS] SumOfLogs  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] boolean  double  d  value  long  serialVersionUID  int  n  
[BugLab_Variable_Misuse]^if  ( test ( values, n, length )  )  {^117^^^^^115^124^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Variable_Misuse]^if  ( test ( values, begin, n )  )  {^117^^^^^115^124^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Argument_Swapping]^if  ( test ( begin, values, length )  )  {^117^^^^^115^124^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Variable_Misuse]^for  ( int i = n; i < begin + length; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Variable_Misuse]^for  ( nnt i = begin; i < begin + length; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Variable_Misuse]^for  ( int i = begin; i < begin + n; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Argument_Swapping]^for  ( int i = length; i < begin + begin; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Argument_Swapping]^for  ( beginnt i = i; i < begin + length; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Wrong_Operator]^for  ( int i = begin; i > begin + length; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Wrong_Operator]^for  !=  ( int i = begin; i < begin + length; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Wrong_Operator]^for  >>  ( int i = begin; i < begin + length; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Argument_Swapping]^for  ( lengthnt i = begin; i < begin + i; i++ )  {^119^^^^^115^124^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Argument_Swapping]^if  ( test ( values, length, begin )  )  {^117^^^^^115^124^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
[BugLab_Variable_Misuse]^return value;^123^^^^^115^124^return sumLog;^[CLASS] SumOfLogs  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumLog  value  long  serialVersionUID  int  begin  i  length  n  
