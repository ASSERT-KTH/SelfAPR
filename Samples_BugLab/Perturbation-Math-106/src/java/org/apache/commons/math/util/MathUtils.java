[BugLab_Wrong_Literal]^private static final short NS =  ( short ) -this;^31^^^^^26^36^private static final short NS =  ( short ) -1;^[CLASS] MathUtils   [VARIABLES] 
[BugLab_Wrong_Operator]^long s =  >=  ( long ) x +  ( long ) y;^63^^^^^62^68^long s =  ( long ) x +  ( long ) y;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[BugLab_Variable_Misuse]^if  ( s < Integer.y || s > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[BugLab_Variable_Misuse]^if  ( s < Integer.MIN_VALUE || s > Integer.y )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[BugLab_Wrong_Operator]^if  ( s < Integer.MIN_VALUE && s > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[BugLab_Wrong_Operator]^if  ( s <= Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[BugLab_Wrong_Operator]^if  ( s < Integer.MIN_VALUE || s < Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[BugLab_Argument_Swapping]^if  ( k < n )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  ( n <= k )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Variable_Misuse]^if  ( k < 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  ( n <= 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Literal]^if  ( n < k )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Argument_Swapping]^if  (  ( k == n )  ||  ( k == 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  (  ( n == k )  &&  ( k == 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  (  ( n >= k )  ||  ( k == 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  (  ( n == k )  ||  ( k != 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Literal]^if  (  ( n == k )  ||  ( k == n )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Literal]^return n;^106^^^^^96^118^return 1;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Argument_Swapping]^if  (  ( n == 1 )  ||  ( k == k - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  (  ( k == 1 )  &&  ( k == n - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  (  ( k != 1 )  ||  ( k == n - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  (  ( k == 1 )  ||  ( k != n - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  (  ( k == 1 )  ||  ( k == n  >  1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Literal]^if  (  ( k == 1 )  ||  ( k == n  )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Variable_Misuse]^return k;^109^^^^^96^118^return n;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Variable_Misuse]^long result = Math.round ( binomialCoefficientDouble ( k, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Variable_Misuse]^long result = Math.round ( binomialCoefficientDouble ( n, n )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Argument_Swapping]^long result = Math.round ( binomialCoefficientDouble ( k, n )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Wrong_Operator]^if  ( result != Long.MAX_VALUE )  {^113^^^^^96^118^if  ( result == Long.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[BugLab_Argument_Swapping]^return Math.floor ( Math.exp ( binomialCoefficientLog ( k, n )  )  + 0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[BugLab_Wrong_Operator]^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )   ||  0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[BugLab_Wrong_Operator]^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )    instanceof   0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[BugLab_Variable_Misuse]^if  ( i < k )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^if  ( n < i )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Argument_Swapping]^if  ( k < n )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  ( n <= k )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  ( n <= 0 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^if  ( n < n )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^if  (  ( i == k )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^if  (  ( n == i )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Argument_Swapping]^if  (  ( k == n )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  (  ( n == k )  &&  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  (  ( n != k )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  (  ( n == k )  ||  ( k <= 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^if  (  ( n == k )  ||  ( k == k )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^if  (  ( n == k )  ||  ( k == n )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^return k;^174^^^^^164^192^return 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^return i;^174^^^^^164^192^return 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^if  (  ( i == 1 )  ||  ( k == n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^if  (  ( k == 1 )  ||  ( k == k - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  (  ( k == 1 )  &&  ( k == n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  (  ( k > 1 )  ||  ( k == n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  (  ( k == 1 )  ||  ( k != n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^if  (  ( k == 1 )  ||  ( k == n  >  1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^if  (  ( k == 1 )  ||  ( k == n  )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^double logSum = k;^179^^^^^164^192^double logSum = 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^for  ( int i = n + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^for  ( nnt i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^for  ( int i = k + 1; i <= k; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Argument_Swapping]^for  ( int i = n + 1; i <= k; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Argument_Swapping]^for  ( nnt i = k + 1; i <= i; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^for   instanceof   ( int i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^for  ( int i = k + 1; i == n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^for  ||  ( int i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^for  ( int i = k + n; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^for  >>  ( int i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^for  ( int i = k ; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^for  ( nnt i = 2; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^for  ( int i = 2; i <= k - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Variable_Misuse]^for  ( int i = 2; i <= n - n; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Argument_Swapping]^for  ( knt i = 2; i <= n - i; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Argument_Swapping]^for  ( int i = 2; i <= k - n; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^for  ( int i = 2; i < n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^for  ( int i = 2; i <= n  &&  k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^for  ( int i = 2; i <= n  <  k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^for  ( int i = 3; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^logSum = Math.log (  ( double ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Literal]^for  ( int i = k; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[BugLab_Wrong_Operator]^return  ( Math.exp ( x )  + Math.exp ( -x )  )  - 2.0;^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[BugLab_Wrong_Operator]^return  &  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[BugLab_Argument_Swapping]^return  (  ( Double.isNaN ( y )  && Double.isNaN ( x )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[BugLab_Wrong_Operator]^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  && x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[BugLab_Wrong_Operator]^return  (  ( Double.isNaN ( x )  || Double.isNaN ( y )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[BugLab_Wrong_Operator]^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x <= y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[BugLab_Variable_Misuse]^return  (  ( Double.isNaN ( y )  && Double.isNaN ( y )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[BugLab_Variable_Misuse]^return  (  ( Double.isNaN ( x )  && Double.isNaN ( x )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[BugLab_Wrong_Operator]^if  ( result >= Long.MAX_VALUE )  {^241^^^^^239^246^if  ( result == Long.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[BugLab_Wrong_Operator]^if  ( n <= 0 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[BugLab_Wrong_Literal]^if  ( n < -1 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[BugLab_Wrong_Operator]^return Math.floor ( Math.exp ( factorialLog ( n )  )   <<  0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[BugLab_Wrong_Operator]^return Math.floor ( Math.exp ( factorialLog ( n )  )   ^  0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[BugLab_Variable_Misuse]^if  ( i < 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Wrong_Operator]^if  ( n == 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Wrong_Literal]^if  ( n < n )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Wrong_Literal]^double logSum = n;^292^^^^^288^297^double logSum = 0;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Variable_Misuse]^for  ( nnt i = 2; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Wrong_Operator]^for  ( int i = 2; i < n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Wrong_Operator]^for  >  ( int i = 2; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Wrong_Literal]^for  ( int i = n; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[BugLab_Variable_Misuse]^if  ( t * v == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^if  ( u * t == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Argument_Swapping]^if  ( v * u == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^if  ( u * v != 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^if  ( u + v == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^return  ( Math.abs ( t )  + Math.abs ( v )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^return  ( Math.abs ( u )  + Math.abs ( t )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Argument_Swapping]^return  ( Math.abs ( v )  + Math.abs ( u )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^return  &  ( Math.abs ( u )  + Math.abs ( v )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^return  ( Math.abs ( v )  + Math.abs ( v )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^return  ( Math.abs ( u )  + Math.abs ( u )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^if  ( v > 0 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^if  ( u >= 0 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^if  ( u > k )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^v = -u;^322^^^^^307^337^u = -u;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^if  ( u > 0 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^if  ( v >= 0 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^if  ( v > 1 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^u = -v;^325^^^^^310^340^v = -v;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^while  (  ( v & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^while  (  ( u & 1 )  == 0 &&  ( u & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && v < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Argument_Swapping]^while  (  ( v & 1 )  == 0 &&  ( u & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Argument_Swapping]^while  (  ( u & 1 )  == 0 &&  ( k & 1 )  == 0 && v < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( u & 1 )  == 0 ||  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( u & 1 )  > 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( u  >  1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( u & 1 )  < 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( u   instanceof   1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k <= 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^while  (  ( u & t )  == 0 &&  ( v & t )  == 0 && k < 3t )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^while  (  ( u & 1 )  == t &&  ( v & 1 )  == t && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^while  (  ( u & k )  == 0 &&  ( v & k )  == 0 && k < 3k )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^while  (  ( u & 1 )  == 1 &&  ( v & 1 )  == 1 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < v )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^u /= t;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^v /= 3;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^v /= u;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^if  ( v == 31 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^if  ( k > 31 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^if  ( k == 30 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^while  (  ( v & 1 )  == 0 )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( t & 1 )  >= 0 )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^while  (  ( t  >>  1 )  == 0 )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^while  (  ( t & 1 )  == -1 )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^if  ( v > 0 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^if  ( t == 0 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^if  ( t > v )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^v = v;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^t /= v;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^v = v;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^t =  ( t - u )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^t =  ( v - t )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Argument_Swapping]^t =  ( u - v )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^t =  ( v - u )  + 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^t =  ( v  &&  u )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^t =  ( v - u )  / t;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^return -v *  ( 1 << k ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Variable_Misuse]^return -u *  ( 1 << v ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^return + -u *  ( 1 << k ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^return -u *  ( 1  !=  k ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Literal]^return -u *  ( t << k ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[BugLab_Wrong_Operator]^return  ( int )  ( bits ^  ( bits  ^  32 )  ) ;^371^^^^^369^372^return  ( int )  ( bits ^  ( bits >>> 32 )  ) ;^[CLASS] MathUtils  [METHOD] hash [RETURN_TYPE] int   double value [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  value  long  bits  
[BugLab_Variable_Misuse]^return  ( ZB >= ZB )  ? PB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x >= ZB )  ? ZB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x >= ZB )  ? PB : x;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( ZB >= x )  ? PB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x >= NB )  ? PB : ZB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x >= PB )  ? ZB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x > ZB )  ? PB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x > 0.0 )  ? 1.0 : -1.0;^397^^^^^393^398^return  ( x >= 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[BugLab_Wrong_Operator]^return  ( x > 0.0F )  ? 1.0F : -1.0F;^411^^^^^407^412^return  ( x >= 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[BugLab_Wrong_Operator]^return  ( x > 0 )  ? 1 : -1;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Literal]^return  ( x >= 0 )  ? x : -x;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Literal]^return  ( x >= 0 )  ? 2 : -2;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Operator]^return  ( x > 0L )  ? 1L : -1L;^431^^^^^430^432^return  ( x >= 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  long  x  
[BugLab_Variable_Misuse]^return  ( ZS >= ZS )  ? PS : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x >= PS )  ? PS : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x >= ZS )  ? PS : ZS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( NS >= ZS )  ? PS : x;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x >= NS )  ? PS : ZS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x >= PS )  ? ZS : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x == ZS )  ? PS : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return Math.abs ( mulAndCheck ( b / gcd ( a, a ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[BugLab_Wrong_Operator]^return Math.abs ( mulAndCheck ( a * gcd ( a, b ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[BugLab_Wrong_Operator]^return Math.abs ( mulAndCheck ( a - gcd ( a, b ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[BugLab_Wrong_Operator]^long + m =  (  ( long ) x )  *  (  ( long ) y ) ;^469^^^^^468^474^long m =  (  ( long ) x )  *  (  ( long ) y ) ;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[BugLab_Variable_Misuse]^if  ( m < Integer.y || m > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[BugLab_Variable_Misuse]^if  ( m < Integer.MIN_VALUE || m > Integer.y )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[BugLab_Wrong_Operator]^if  ( m < Integer.MIN_VALUE && m > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[BugLab_Wrong_Operator]^if  ( m <= Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[BugLab_Wrong_Operator]^if  ( m < Integer.MIN_VALUE || m >= Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[BugLab_Variable_Misuse]^double sign = indicator ( sign ) ;^502^^^^^501^505^double sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^double factor = Math.pow ( 10.0, roundingMethod )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^double factor = Math.pow ( 10.0, scale )  * x;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^double factor = Math.pow ( 10.0, sign )  * scale;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^double / factor = Math.pow ( 10.0, scale )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return roundUnscaled ( x * factor, sign, scale )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return roundUnscaled ( factor * x, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return roundUnscaled ( x * sign, factor, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return roundUnscaled ( x * roundingMethod, sign, factor )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^return roundUnscaled ( x * factor, sign, roundingMethod )  * factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^return / roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return roundUnscaled ( factor * factor, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return roundUnscaled ( x * sign, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return roundUnscaled ( x * factor, factor, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return roundUnscaled ( sign * factor, x, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return roundUnscaled ( x * factor, roundingMethod, sign )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^return + roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return round ( x, scale, BigDecimal.scale ) ;^517^^^^^516^518^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  int  scale  
[BugLab_Argument_Swapping]^return round ( scale, x, BigDecimal.ROUND_HALF_UP ) ;^517^^^^^516^518^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  int  scale  
[BugLab_Variable_Misuse]^float sign = indicator ( factor ) ;^533^^^^^532^536^float sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^float sign = indicator ( sign ) ;^533^^^^^532^536^float sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^float factor =  ( float ) Math.pow ( 10.0f, roundingMethod )  * sign;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^float factor =  ( float ) Math.pow ( 10.0f, scale )  * x;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^float factor =  ( float ) Math.pow ( 10.0f, sign )  * scale;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^float + factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return  ( float ) roundUnscaled ( sign * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return  ( float ) roundUnscaled ( x * factor, factor, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return  ( float ) roundUnscaled ( x * factor, sign, scale )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return  ( float ) roundUnscaled ( sign * factor, x, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return  ( float ) roundUnscaled ( x * sign, factor, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return  ( float ) roundUnscaled ( x * factor, roundingMethod, sign )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  - factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^return - ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return  ( float ) roundUnscaled ( factor * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return  ( float ) roundUnscaled ( x * sign, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^return  ( float ) roundUnscaled ( x * factor, x, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return  ( float ) roundUnscaled ( roundingMethod * factor, sign, x )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Argument_Swapping]^return  ( float ) roundUnscaled ( factor * x, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Wrong_Operator]^return + ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[BugLab_Variable_Misuse]^if  ( fraction == -1 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( sign != -1 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Literal]^if  ( sign == -roundingMethod )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^555^^^^^540^570^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^if  ( fraction == -1 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( sign != -1 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^565^^^^^550^580^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^if  ( sign > 0.5 )  {^572^^^^^557^587^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( fraction >= 0.5 )  {^572^^^^^557^587^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( fraction == 0.5 )  {^581^^^^^566^596^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^} else if  ( sign < 0.5 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^} else if  ( fraction <= 0.5 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^if  ( Math.floor ( sign )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( Math.floor ( unscaled )  / 2.0 != Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( Math.floor ( unscaled )  + 2.0 == Math.floor ( Math .floor ( unscaled )  + 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( Math.floor ( unscaled )  - 2.0 == Math.floor ( Math .floor ( unscaled )  - 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^if  ( Math.floor ( sign )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( Math.floor ( unscaled )  / 2.0 != Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( Math.floor ( unscaled )  + 2.0 == Math.floor ( Math .floor ( unscaled )  + 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^590^^^^^586^591^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^590^^^^^575^605^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( Math.floor ( unscaled )  - 2.0 == Math.floor ( Math .floor ( unscaled )  - 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^582^^^^^567^597^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^} else if  ( fraction > 0.5 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( Math.floor ( unscaled )  / 2.0 <= Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^if  ( sign >= 0.5 )  {^597^^^^^582^612^if  ( fraction >= 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( fraction > 0.5 )  {^597^^^^^582^612^if  ( fraction >= 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^600^^^^^597^601^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^if  ( unscaled == Math.floor ( unscaled )  )  {^605^^^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^557^^^^^542^572^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^561^^^^^546^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^575^^^^^560^590^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.floor ( sign ) ;^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^unscaled = Math.ceil ( sign ) ;^610^^^^^595^625^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^double fraction = Math.abs ( sign - Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^double fraction = Math.abs ( unscaled  <  Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^double fraction = Math.abs ( sign - Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^double fraction = Math.abs ( unscaled  <=  Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^double fraction = Math.abs ( sign - Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^double fraction = Math.abs ( unscaled  <  Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^double fraction = Math.abs ( unscaled  >>  Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^double fraction = Math.abs ( unscaled  >>  Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Wrong_Operator]^double fraction = Math.abs ( unscaled  &&  Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^if  ( sign != Math.floor ( unscaled )  )  {^605^^^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^return sign;^615^^^^^600^630^return unscaled;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[BugLab_Variable_Misuse]^return  ( ZB == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x == x )  ? ZB :  ( x > ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : x;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( NB == ZB )  ? ZB :  ( x > ZB )  ? PB : x;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x == PB )  ? ZB :  ( x > ZB )  ? ZB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x == NB )  ? ZB :  ( x > ZB )  ? PB : ZB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x >= ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x == ZB )  ? ZB :  ( x >= ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x <= 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[BugLab_Wrong_Operator]^return  ( x == 0.0 )  ? 0.0 :  ( x < 0.0 )  ? 1.0 : -1.0;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[BugLab_Wrong_Operator]^return  ( x != 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^666^^^^^662^667^return  ( x == 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[BugLab_Wrong_Operator]^return  ( x == 0.0F )  ? 0.0F :  ( x >= 0.0F )  ? 1.0F : -1.0F;^666^^^^^662^667^return  ( x == 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[BugLab_Wrong_Operator]^return  ( x != 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Operator]^return  ( x == 0 )  ? 0 :  ( x >= 0 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Literal]^return  ( x == x )  ? x :  ( x > x )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Literal]^return  ( x == -1 )  ? -1 :  ( x > -1 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Literal]^return  ( x == 1 )  ? 1 :  ( x > 1 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Literal]^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 0 : -0;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[BugLab_Wrong_Operator]^return  ( x != 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^694^^^^^693^695^return  ( x == 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  long  x  
[BugLab_Wrong_Operator]^return  ( x == 0L )  ? 0L :  ( x >= 0L )  ? 1L : -1L;^694^^^^^693^695^return  ( x == 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  long  x  
[BugLab_Variable_Misuse]^return  ( x == x )  ? ZS :  ( x > ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? ZS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Variable_Misuse]^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : ZS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( ZS == x )  ? ZS :  ( x > ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x == NS )  ? ZS :  ( x > ZS )  ? PS : ZS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? NS : PS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Argument_Swapping]^return  ( NS == ZS )  ? ZS :  ( x > ZS )  ? PS : x;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x != ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( x == ZS )  ? ZS :  ( x >= ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[BugLab_Wrong_Operator]^return  ( Math.exp ( x )  - Math.exp ( -x )  )  - 2.0;^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[BugLab_Wrong_Operator]^return  ( Math.exp ( x )   >>  Math.exp ( -x )  )  / 2.0;^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[BugLab_Wrong_Operator]^long s =  ( long ) x  |   ( long ) y;^734^^^^^733^739^long s =  ( long ) x -  ( long ) y;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[BugLab_Variable_Misuse]^if  ( s < Integer.y || s > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[BugLab_Variable_Misuse]^if  ( s < Integer.MIN_VALUE || s > Integer.y )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[BugLab_Wrong_Operator]^if  ( s < Integer.MIN_VALUE && s > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[BugLab_Wrong_Operator]^if  ( s <= Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[BugLab_Wrong_Operator]^if  ( s < Integer.MIN_VALUE || s >= Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
