[BugLab_Variable_Misuse]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( c, y ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, c ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Argument_Swapping]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( y, x ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Wrong_Literal]^c = new double[x.length-i];^67^^^^^48^76^c = new double[x.length-1];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < y.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Argument_Swapping]^for  ( c.lengthnt i = 0; i < i; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == c.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < c.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^c[i] = y[i];^69^^^^^48^76^c[i] = x[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^a = computeDividedDifference ( c, y ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^a = computeDividedDifference ( x, c ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Argument_Swapping]^a = computeDividedDifference ( y, x ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^p = new PolynomialFunctionNewtonForm ( y, c ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^p = new PolynomialFunctionNewtonForm ( a, y ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Argument_Swapping]^p = new PolynomialFunctionNewtonForm ( c, a ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[BugLab_Variable_Misuse]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( divdiff, y ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, divdiff ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Argument_Swapping]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( y, x ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^n = y.length;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^n = n;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Argument_Swapping]^n = x.length.length;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Argument_Swapping]^n = x;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^divdiff = jew double[n];^99^^^^^91^120^divdiff = new double[n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^for  ( n = 0; i < n; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^for  ( i = 0; i < j; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Argument_Swapping]^for  ( n = 0; i < i; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  ( i = 0; i <= n; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^for  ( i = -1; i < n; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^divdiff[i] = x[i];^101^^^^^91^120^divdiff[i] = y[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^a = jew double [n];^104^^^^^91^120^a = new double [n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^a[0] = y[0];^105^^^^^91^120^a[0] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^a[i] = divdiff[i];^105^^^^^91^120^a[0] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^a[n] = divdiff[n];^105^^^^^91^120^a[0] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^if  ( denominator < 0.0 )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^for  ( j = 1; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^for  ( i = 1; i < j; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Argument_Swapping]^for  ( n = 1; i < i; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  ( i = 1; i <= n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  !=  ( i = 1; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  >=  ( i = 1; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^for  ( i = i; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^for  ( i = n; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^if  ( denominator >= 0.0 )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^for  ( n = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^for  ( j = 0; j < i-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  ( j = 0; j > n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  &  ( j = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  <=  ( j = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^if  ( denominator != 0.0 )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^denominator = y[j+i] - x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^denominator = x[j+i]  ==  x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^divdiff[j] =  ( y[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  * denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  ( divdiff[j+1]  &  divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  <=  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^divdiff[j] =  ( divdiff[j+j] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^for  ( j = i; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Argument_Swapping]^divdiff[j] =  ( denominator[j+1] - divdiff[j] )  / divdiff;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  ( divdiff[j+1]  >  divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  >>  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^a[i] = y[0];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^a[i] = divdiff[-1];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^for  ( j = 0; j < j-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  ( j = 0; j <= n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^for  <  ( j = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^denominator = x[j+i]  &&  x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  ( divdiff[j+1]  |  divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  <  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^divdiff[j] =  ( divdiff[j+n] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^for  ( j = j; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^denominator = x[j+i]  ^  x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Operator]^divdiff[j] =  !=  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Wrong_Literal]^a[i] = divdiff[i];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[BugLab_Variable_Misuse]^return y;^119^^^^^91^120^return a;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
