[buglab_swap_variables]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( y, x ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^PolynomialFunctionLagrangeForm.verifyInterpolationArray (  y ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^for  ( int i = 0; i < c.length.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^for  ( c.lengthnt i = 0; i < i; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^a = computeDividedDifference ( y, x ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^a = computeDividedDifference (  y ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^a = computeDividedDifference ( x ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^p = new PolynomialFunctionNewtonForm ( c, a ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^p = new PolynomialFunctionNewtonForm (  c ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^p = new PolynomialFunctionNewtonForm ( a ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[buglab_swap_variables]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( y, x ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[buglab_swap_variables]^PolynomialFunctionLagrangeForm.verifyInterpolationArray (  y ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[buglab_swap_variables]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[buglab_swap_variables]^n = x.length.length;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[buglab_swap_variables]^n = x;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[buglab_swap_variables]^for  ( n = 0; i < i; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[buglab_swap_variables]^for  ( n = 0; j < j-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[buglab_swap_variables]^divdiff[j] =  ( denominator[j+1] - divdiff[j] )  / divdiff;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
